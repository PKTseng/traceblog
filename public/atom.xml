<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PK&#39;s 回憶錄</title>
  
  <subtitle>學過的東西過段時間沒複習就會忘，所以請記錄下來</subtitle>
  <link href="https://pktseng.github.io/atom.xml" rel="self"/>
  
  <link href="https://pktseng.github.io/"/>
  <updated>2021-04-08T10:30:16.301Z</updated>
  <id>https://pktseng.github.io/</id>
  
  <author>
    <name>PKTseng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript - 作用域 ( Scope )</title>
    <link href="https://pktseng.github.io/2021/04/08/Scope/"/>
    <id>https://pktseng.github.io/2021/04/08/Scope/</id>
    <published>2021-04-07T16:00:00.000Z</published>
    <updated>2021-04-08T10:30:16.301Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>最近要面臨面試了，而這些東西都是面試必考的觀念，所以就將這些東西寫成一篇筆記，方便日後回顧。</p><a id="more"></a><h2 id="全域變數與區域變數"><a href="#全域變數與區域變數" class="headerlink" title="全域變數與區域變數"></a>全域變數與區域變數</h2><p>參考自 kuro 大大的 : 0 陷阱！0 誤解！8 天重新認識 JavaScript！</p><blockquote><ol><li>其實在 JavaScript 這門語言中，沒有所謂「全域變數」這種東西。更準確地說，我們所說的「全域變數」其實指的是「全域物件」(或者叫「頂層物件」) 的屬性。</li><li>以瀏覽器來說，「全域物件」指的就是 window，在 node 環境中則叫做 global。</li><li>所有沒有透過 <code>var</code> 宣告的變數都會自動變成全域變數。</li><li>切分變數有效範圍的最小單位是 <code>function</code> ，而這範圍就是 <code>Scope</code>。</li></ol></blockquote><h3 id="1-如果在-function-內找不到-var-宣告的變數，就會一層層往外找，直到找到全域變數為止。"><a href="#1-如果在-function-內找不到-var-宣告的變數，就會一層層往外找，直到找到全域變數為止。" class="headerlink" title="1. 如果在 function 內找不到 var 宣告的變數，就會一層層往外找，直到找到全域變數為止。"></a>1. 如果在 <code>function</code> 內找不到 <code>var</code> 宣告的變數，就會一層層往外找，直到找到全域變數為止。</h3><p>以下示範:</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 10</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fn()</span><br></pre></td></tr></tbody></table></figure><p>用 <code>window.a</code> 看，確定變數 <code>a</code> 是全域變數。<br><img src="https://i.imgur.com/fQWf2IW.png"></p><h3 id="2-沒有透過-var-宣告的變數都會自動變成全域變數。"><a href="#2-沒有透過-var-宣告的變數都會自動變成全域變數。" class="headerlink" title="2. 沒有透過 var 宣告的變數都會自動變成全域變數。"></a>2. 沒有透過 <code>var</code> 宣告的變數都會自動變成全域變數。</h3><p>函式裡面因為沒有使用 <code>var</code> 宣告變數 <code>a</code> ，所以變數 <code>a</code> 會變成全域變數並且直接覆蓋掉外層用 <code>var</code> 宣告的 <code>a</code>。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  a = <span class="hljs-string">'全域變數'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是 fn 裡面的 a =&gt; '</span> + a) <span class="hljs-comment">// "我是 fn 裡面的 a =&gt; 全域變數"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fn()</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是 fn 外面的 a =&gt; '</span> + a) <span class="hljs-comment">// "我是 fn 外面的 a =&gt; 全域變數"</span></span><br></pre></td></tr></tbody></table></figure><p>用 <code>window.a</code> 看，確定變數 <code>a</code> 是<code>全域變數</code>，不是 <code>var</code> 宣告的變數 <code>10</code>。<br><img src="https://i.imgur.com/YQPnGVT.png"></p><h3 id="3-但是如果函式內的-a-有用-var-宣告呢"><a href="#3-但是如果函式內的-a-有用-var-宣告呢" class="headerlink" title="3. 但是如果函式內的 a 有用 var 宣告呢?"></a>3. 但是如果函式內的 <code>a</code> 有用 <code>var</code> 宣告呢?</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">var</span> a = <span class="hljs-string">'全域變數'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是 fn 裡面的 a =&gt; '</span> + a) <span class="hljs-comment">// "我是 fn 裡面的 a =&gt; 全域變數"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fn()</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是 fn 外面的 a =&gt; '</span> + a) <span class="hljs-comment">// "我是 fn 外面的 a =&gt; 10"</span></span><br></pre></td></tr></tbody></table></figure><p>如下圖，用 <code>window.a</code> 看，會發現全域變數的 <code>a</code> 是<code> 10</code>。<br><img src="https://i.imgur.com/nhcXOMi.png"></p><p>因為 <code>var</code> 的作用域會在 <code>function</code> 裡面，所以不會影響到外層的變數 <code>a</code> ，但外層宣告的變數 <code>a</code> 並沒有被 function 限制住，所以就會變成全域變數，以引用 Kuro 大大的結論：</p><ol><li>變數有效範圍 ( scope ) 的最小切分單位是 <code>function</code> ( ES6 的 <code>let</code> 與 <code>const</code> 例外 )</li><li>即使是寫在函式內，沒有 <code>var</code> 的變數會變成「全域變數」</li><li>全域變數指的是全域物件 ( 頂層物件 ) 的「屬性」</li></ol><p><a href="https://codepen.io/gleofgja/pen/YzNEKvB?editors=1011">DEMO</a></p><h2 id="函式與作用域之間的關係"><a href="#函式與作用域之間的關係" class="headerlink" title="函式與作用域之間的關係"></a>函式與作用域之間的關係</h2><h3 id="1-全域執行環境-Global-Level-Scope"><a href="#1-全域執行環境-Global-Level-Scope" class="headerlink" title="1. 全域執行環境 ( Global Level Scope )"></a>1. 全域執行環境 ( Global Level Scope )</h3><p>先來個最基本的，用 <code>var</code> 命名的 <code>變數 a</code> 然後賦值為 <code>全域 a</code>。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-string">'全域 a'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/JQudPOG.png"></p><h3 id="2-函式與全域作用域-Function-Level-Scope"><a href="#2-函式與全域作用域-Function-Level-Scope" class="headerlink" title="2. 函式與全域作用域 ( Function Level Scope )"></a>2. 函式與全域作用域 ( Function Level Scope )</h3><p>然後在 <code>function</code> 裡面呼叫 <code>a 變數</code>，結果會是 <code>全域 a</code> ，因為當函式執行時如果函式內找不到變數就會向外層尋找。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-string">'全域 a'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 全域 a</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 全域 a</span></span><br><span class="line">fn()</span><br></pre></td></tr></tbody></table></figure><p>如下圖<br><img src="https://i.imgur.com/0EOg1Gk.png"></p><hr><p>所以在函式內如果找到命名的變數就不會向函式外層尋找，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-string">'全域 a'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">var</span> a = <span class="hljs-string">'區域 a'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 區域 a</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 全域 a</span></span><br><span class="line">fn()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/mh1xKtF.png"></p><p>為什麼會先顯示 <code>全域 a</code> ?<br>因為在 24 行我先執行了 <code>console.log(a)</code>。<br>之後 25 行再執行 <code>fn</code> 函式，這時候函式才會執行 <code>function</code> 裡面的 <code>console.log(a)</code>。</p><hr><p>為了看更清楚，同時在函式外命名兩個變數，但在函式內只命一個 <code>變數 a</code>，結果如下。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-string">'全域 a'</span></span><br><span class="line"><span class="hljs-keyword">var</span> b = <span class="hljs-string">'全域 b'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">var</span> a = <span class="hljs-string">'區域 a'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fn 裡面的 =&gt; '</span> + a) <span class="hljs-comment">//"fn 裡面的 =&gt; 區域 a"</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fn 裡面的 =&gt; '</span> + b) <span class="hljs-comment">//"fn 裡面的 =&gt; 全域 b"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fn 外面的 =&gt; '</span> + a) <span class="hljs-comment">//"fn 外面的 =&gt; 全域 a"</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fn 外面的 =&gt; '</span> + b) <span class="hljs-comment">//"fn 外面的 =&gt; 全域 b"</span></span><br><span class="line">fn()</span><br></pre></td></tr></tbody></table></figure><p>結果如下，在函式內有找到<code>變數 a</code> 就不會向函式外層尋找，但函式內找不到<code>變數 b</code> ，所以就會向函式外層尋找<code>全域 b</code>。</p><p>( 跟前一個例子同理，顯示的順序跟執行的順序一樣，先執行先顯示。 )<br><img src="https://i.imgur.com/NSDYkJf.png"></p><hr><p>同樣道理，如果我把函式外的 <code>全域變數 b</code> 註解掉，那函式內的 b 就會找不到該變數，會顯示為定義，如下圖<br><img src="https://i.imgur.com/E4AcOFQ.png"></p><hr><p>來點變化題，這會用到 JS 的 hoisting 觀念</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-string">'全域 a'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// undefined</span></span><br><span class="line">  <span class="hljs-keyword">var</span> a = <span class="hljs-string">'區域 a'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// "區域 a"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// "全域 a"</span></span><br><span class="line">fn()</span><br></pre></td></tr></tbody></table></figure><p>結果如下圖<br><img src="https://i.imgur.com/T2e6Dqp.png"></p><p>按照剛才觀念，函式內的 a 不是會像外層尋找? 或是在函式內有命名變數了，為什麼還找不到? 為甚麼會顯示為定義?</p><p>因為 JS 有 hoisting 變數提升的特性，所以當電腦在讀取的時候會變成下面這樣</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-string">'全域 a'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">var</span> a</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// undefined</span></span><br><span class="line"></span><br><span class="line">  a = <span class="hljs-string">'區域 a'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// "區域 a"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// "全域 a"</span></span><br><span class="line">fn()</span><br></pre></td></tr></tbody></table></figure><p>第一個變數已經命名了但是沒有賦值，所以會顯示 <code>undefined</code> ，第二個變數是已經賦值了，所以會顯示 <code>value</code> 值。</p><p><a href="https://codepen.io/gleofgja/pen/yLgzWKg?editors=0011">DEMO</a></p><h3 id="3-塊級作用域-Block-Level-Scope-ES6"><a href="#3-塊級作用域-Block-Level-Scope-ES6" class="headerlink" title="3. 塊級作用域 ( Block Level Scope, ES6 )"></a>3. 塊級作用域 ( Block Level Scope, ES6 )</h3><p>以上是用 function 並在 function 內呼叫變數，接下來試用區塊，區塊就是指大括號 <code>{}</code> ，像是 if 判段式或是 for 迴圈這種的。</p><p>接下來就是用區塊 ( Block ) 不是用 function ，直接看程式碼。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 10</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/MdHI1A4.png"></p><p>在區塊裡面沒有命名 <code>變數 a</code> ，所以會去外層全域找。</p><hr><p>在區塊裡面跟外面同時看<code>變數 a</code> 的結果。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {</span><br><span class="line">  <span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'區塊裡面 =&gt; '</span> + a)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'區塊外面 =&gt; '</span> + a)</span><br></pre></td></tr></tbody></table></figure><p>用開發者工具查看，會看到 <code>a</code> 抓到的值都是 <code>20</code>。<br><img src="https://i.imgur.com/OiEPNe5.png"></p><p>因為是塊及作用域的關係，所以用 <code>var</code> 命名的變數並不會被限制住，會直接覆蓋掉之前相同變數的值。</p><p>但這是用 <code>var</code> 來命名，如果用 ES6 的 <code>let</code> 命名變數的話就會被限制在區塊以內，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {</span><br><span class="line">  <span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span></span><br><span class="line">  <span class="hljs-keyword">let</span> b = <span class="hljs-number">30</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'區塊裡面 =&gt; '</span> + a)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'區塊裡面 =&gt; '</span> + b)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'區塊外面 =&gt; '</span> + a)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'區塊外面 =&gt; '</span> + b)</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/kpjkZkb.png"></p><p>因為在區塊裡面使用 <code>let</code> 命名<code>變數 b</code> ，所以<code>變數 b</code> 就會被限制在區塊裡面，那外層的 <code>b</code> 就會找不到。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://medium.com/take-a-day-off/js-scope-%E4%BD%9C%E7%94%A8%E5%9F%9F-ee536640963b">[JS] Scope 作用域</a><br><a href="https://kuro.tw/posts/2015/07/08/note-javascript-variables-declared-with-the-scope-scope/">[筆記] JavaScript 變數宣告與作用域</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/block">block</a><br><a href="https://ithelp.ithome.com.tw/articles/10191549">重新認識 JavaScript: Day 10 函式 Functions 的基本概念</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;最近要面臨面試了，而這些東西都是面試必考的觀念，所以就將這些東西寫成一篇筆記，方便日後回顧。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="Scope" scheme="https://pktseng.github.io/categories/JavaScrip/Scope/"/>
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
    <category term="Scope" scheme="https://pktseng.github.io/tags/Scope/"/>
    
  </entry>
  
  <entry>
    <title>Python - 用 python flask 在本地端架設後端 server 進行 api 串接練習</title>
    <link href="https://pktseng.github.io/2021/03/31/python_flask/"/>
    <id>https://pktseng.github.io/2021/03/31/python_flask/</id>
    <published>2021-03-30T16:00:00.000Z</published>
    <updated>2021-03-30T17:14:41.526Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>最近在寫個人的 side project ，由於 api 都是由後端提供，但是要讓 api 運作就是要開啟後端的 server ，這樣前端打 api 就可以會收到 response。</p><a id="more"></a><p>工作環境: window<br>執行系統: WSL<br>開發工具: VS Code<br>虛擬機: Ubuntu 18.04</p><p>如果沒有 Ubuntu 18.04 要先安裝。</p><h2 id="切換-WSL-系統"><a href="#切換-WSL-系統" class="headerlink" title="切換 WSL 系統"></a>切換 WSL 系統</h2><p>在 VS Code 開啟終端機 ( ctrl + ~ )<br>把開發環境切換到 WSL<br><img src="https://i.imgur.com/ItZDUVK.png"></p><p>選擇 WSL<br><img src="https://i.imgur.com/OzW0mY2.png"></p><p>選擇 WSL 後再點擊 +<br><img src="https://i.imgur.com/SxzRueQ.png"></p><p>就會多新增一個 WSL<br><img src="https://i.imgur.com/8c8vn1b.png"></p><h2 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h2><p>開好 WSL 後執行</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt -y upgrade</span><br></pre></td></tr></tbody></table></figure><p>執行 <code>sudo apt update</code> 這段指令會安裝 10~20 分鐘左右。<br><img src="https://i.imgur.com/fiRGUom.png"></p><p>結束後，在下 <code>sudo apt -y upgrade</code> 指令，繼續安裝。<br><img src="https://i.imgur.com/GeXtUYX.png"></p><p>安裝好後，確認 python 版本 <code>python3 -V</code></p><p><img src="https://i.imgur.com/TiycTIk.png"><br>卻認為 python3 的版本</p><p>在執行 <code>sudo apt install -y python3-pip</code> 指令<br><img src="https://i.imgur.com/wu6CRjq.png"></p><p>安裝好後還看看後端寫的啟動本地 server 的指令<br><img src="https://i.imgur.com/AzQ9HFf.png"></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python3 init.py</span><br><span class="line">python3 run.py</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/zyItzRY.png"></p><p>如果執行完出現<br>Could not open requirements file: [Errno 2] No such file or directory: ‘req<br>的訊息就表示，檔案路徑不對，不應該是 window 下的檔案而是 linux 下的檔案，如下圖</p><p>一開始我的檔案路徑是在 window 下，然後我 cd 切回根目錄，再用 ls 看一下檔案， 再 cd 切到我要的檔案裏面，然後再執行一次 <code>pip3 install -r requirements.txt</code>。</p><p><img src="https://i.imgur.com/9IHGfsA.png"></p><p>然後就可以順利安裝了。<br><img src="https://i.imgur.com/F4xAXp3.png"></p><p>會出現 zsh: command not found: python 這個訊息是因為，我沒有將 python 指定成 python3 的版本，改用 python3 就可以正常運作了，如下圖。<br><img src="https://i.imgur.com/4oCyUW0.png"></p><p>再執行 <code>python3 run.py</code> 就可以正常運作了。<br><img src="https://i.imgur.com/laFZxIo.png"></p><p>但系統會告知你，此為開發使用的，請不要再線上的產品使用。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.digitalocean.com/community/tutorials/ubuntu-18-04-python-3-zh">如何在 Ubuntu 18.04 上安裝 Python 3 並建立本地編程環境</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;最近在寫個人的 side project ，由於 api 都是由後端提供，但是要讓 api 運作就是要開啟後端的 server ，這樣前端打 api 就可以會收到 response。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Python" scheme="https://pktseng.github.io/categories/Python/"/>
    
    <category term="WSL" scheme="https://pktseng.github.io/categories/Python/WSL/"/>
    
    
    <category term="Python" scheme="https://pktseng.github.io/tags/Python/"/>
    
    <category term="WSL" scheme="https://pktseng.github.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Hoisting 提升</title>
    <link href="https://pktseng.github.io/2021/03/27/Hoisting/"/>
    <id>https://pktseng.github.io/2021/03/27/Hoisting/</id>
    <published>2021-03-26T16:00:00.000Z</published>
    <updated>2021-03-26T16:33:22.792Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>今天看到澎澎的教學影片，覺得觀念清晰好懂，就紀錄一下這重要觀念。</p><p>在 JavaSctip 裡面如果故意把宣告變數擺在最後面，它仍就會因為 Hoisting 的效果被放到最前面。<br>( 注意我只說宣告變數 ( <code>var a</code> )，沒說變數賦值 ( <code>a = 10</code> ) )</p><a id="more"></a><h2 id="變數的-Hoisting"><a href="#變數的-Hoisting" class="headerlink" title="變數的 Hoisting"></a>變數的 Hoisting</h2><p>先來看看最基本的變數宣告<br>把值賦予到 <code>a</code> 變數上，然後在印出來。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span> <span class="hljs-comment">//宣告變數+變數賦值</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//10</span></span><br></pre></td></tr></tbody></table></figure><p>看起來沒甚麼很正常的顯示<br><img src="https://i.imgur.com/2rDOBI6.png"></p><p>如果我把宣告變數移到下面的話會顯示甚麼?</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(a)</span><br><span class="line"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span> <span class="hljs-comment">//undefined</span></span><br></pre></td></tr></tbody></table></figure><p>會顯示 <code>undefined</code> 。<br><img src="https://i.imgur.com/A2qvpOc.png"></p><p>為什麼會這樣?</p><p>因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//這是瀏覽器讀取後的</span></span><br><span class="line"><span class="hljs-keyword">var</span> a <span class="hljs-comment">//宣告變數</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//undefined</span></span><br><span class="line">a = <span class="hljs-number">10</span> <span class="hljs-comment">//變數賦值</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/ez0GKJ0.png"></p><p><code>undefined</code> 的意思就是我已經宣告這個變數了，但是變數沒有被賦值，所以會顯示 <code>undefined</code>。</p><p>那在換個寫法，<code>宣告</code> 跟 <code>賦值</code> 下上對調。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="hljs-number">10</span> <span class="hljs-comment">//變數賦值</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//10</span></span><br><span class="line"><span class="hljs-keyword">var</span> a <span class="hljs-comment">//宣告變數</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/Nbyz9Jk.png"></p><p>這樣可以讀到值，為什麼?</p><p>因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//這是瀏覽器讀取後的</span></span><br><span class="line"><span class="hljs-keyword">var</span> a <span class="hljs-comment">//宣告變數</span></span><br><span class="line">a = <span class="hljs-number">10</span> <span class="hljs-comment">//變數賦值</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//10</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/FoJvksj.png"></p><p>不過宣告跟賦值下上對調這樣的寫法在一般開發過程中是不被允許的，正常情況下，當我們在使用某個變數之前一定要先宣告變數，這是必須養成的好習慣。</p><p><a href="https://codepen.io/gleofgja/pen/dyNMGrm?editors=0012">DEMO</a></p><h2 id="函式的-Hoisting"><a href="#函式的-Hoisting" class="headerlink" title="函式的 Hoisting"></a>函式的 Hoisting</h2><p>上面講變數的宣告，接下來講函式的宣告。</p><h3 id="1-陳述式"><a href="#1-陳述式" class="headerlink" title="1. 陳述式"></a>1. 陳述式</h3><p>先宣告一個陳述式的函式再呼叫。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-comment">//宣告函式</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>) <span class="hljs-comment">//Hello</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fn() <span class="hljs-comment">//呼叫函式</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/WUlijrL.png"></p><p>會正常印出來。</p><p>但如果我把 <code>fn()</code> 宣告挪到函式前面的話呢?</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn()</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>) <span class="hljs-comment">//Hello</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/irTTtSx.png"></p><p>一樣可以正常顯示，為甚麼?<br>因為函式的宣告等同於上面變數的宣告，會因為 JavaScript Hoisting 的特性被移到最上方。</p><h3 id="2-表達式"><a href="#2-表達式" class="headerlink" title="2. 表達式"></a>2. 表達式</h3><p>上面的宣告是<strong>陳述式</strong>，那改成<strong>表達式</strong>呢?</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn()</span><br><span class="line"><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>) <span class="hljs-comment">// fn is not a function </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/QbarxaO.png"></p><p>會顯示 <code>fn is not a function</code> ，上面這段在瀏覽器讀取程式碼的時候會變成下面這樣。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> fn </span><br><span class="line">fn()</span><br><span class="line">fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>) <span class="hljs-comment">// fn is not a function </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/WW7URJz.png"></p><hr><p>為了讓比對更清楚我把變數的跟這個函式例子放一起。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> fn <span class="hljs-comment">// var a</span></span><br><span class="line"></span><br><span class="line">fn() <span class="hljs-comment">// console.log(a)</span></span><br><span class="line"></span><br><span class="line">fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{        <span class="hljs-comment">// a = 10</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>) </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>會發現只有變數的宣告被提升，但沒有被賦值，所以在執行的時候就讀不到資料。</p><p><a href="https://codepen.io/gleofgja/pen/zYNqrXZ?editors=0012">DEMO</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.youtube.com/watch?v=xM2Oqb-sdTk">JavaScript 網頁前端工程入門：Hoisting 宣告提升 By 彭彭</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;今天看到澎澎的教學影片，覺得觀念清晰好懂，就紀錄一下這重要觀念。&lt;/p&gt;
&lt;p&gt;在 JavaSctip 裡面如果故意把宣告變數擺在最後面，它仍就會因為 Hoisting 的效果被放到最前面。&lt;br&gt;( 注意我只說宣告變數 ( &lt;code&gt;var a&lt;/code&gt; )，沒說變數賦值 ( &lt;code&gt;a = 10&lt;/code&gt; ) )&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="Hoisting" scheme="https://pktseng.github.io/categories/JavaScrip/Hoisting/"/>
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
    <category term="Hoisting" scheme="https://pktseng.github.io/tags/Hoisting/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 箭頭函式實作</title>
    <link href="https://pktseng.github.io/2021/03/25/this%E7%9A%84%E5%AF%A6%E4%BD%9C/"/>
    <id>https://pktseng.github.io/2021/03/25/this%E7%9A%84%E5%AF%A6%E4%BD%9C/</id>
    <published>2021-03-24T16:00:00.000Z</published>
    <updated>2021-03-25T07:31:34.342Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>當我點擊藍色區塊時會改變顏色</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 綁定 DOM</span></span><br><span class="line"><span class="hljs-keyword">let</span> app = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 綁定事件</span></span><br><span class="line">app.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">//計時器</span></span><br><span class="line">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">    <span class="hljs-built_in">this</span>.style.background = <span class="hljs-string">'red'</span></span><br><span class="line">  }, <span class="hljs-number">2000</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>但是這樣的執行結果會顯示 <code>fail</code> 。<br><img src="https://i.imgur.com/3gtriQM.png"></p><p>用 <code>console.log</code> 看一下，會發現 <code>this</code> 是指向 <code>window</code> 的。<br><img src="https://i.imgur.com/teXS5Kp.png"></p><p>而 <code>window</code> 是沒有 <code>style</code> 屬性的，所以會顯示 <code>undefined。</code></p><p>要解決這樣的問題就是在計時器外層將 this 命名到一個變數上，然後在計時器內層呼叫。</p><p>為甚麼要這麼做?</p><p>用 <code>console.log</code> 看一下外層的 <code>this</code> 。</p><p>點擊前<br><img src="https://i.imgur.com/yJkA2ki.png"></p><p>點擊兩秒後<br><img src="https://i.imgur.com/dRziXuc.png"></p><p>會發現在這一層是有 <code>background style</code> 屬性的。</p><p>所以計時器在執行到 <code>self</code> 時會呼叫到外層含有 <code>style</code> 的屬性的 <code>this</code> ，這樣就可以改變樣式了。</p><p>不過有了箭頭函式後，就不需要這麼麻煩了，因為箭頭函式會指向聲明時所在作用域下的 <code>this</code> 值。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 綁定 DOM</span></span><br><span class="line"><span class="hljs-keyword">let</span> app = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 綁定事件</span></span><br><span class="line">app.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 箭頭函式是在這一層作用域下聲明的，所以會拿到這一層的 this 值</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// arrow function 計時器</span></span><br><span class="line">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {</span><br><span class="line">    <span class="hljs-built_in">this</span>.style.background = <span class="hljs-string">'red'</span></span><br><span class="line">  }, <span class="hljs-number">2000</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/oNBjdPM?editors=1011">codePen</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=9">尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;當我點擊藍色區塊時會改變顏色&lt;/p&gt;
&lt;figure class=&quot;highlight html hljs&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="this" scheme="https://pktseng.github.io/categories/JavaScrip/this/"/>
    
    <category term="arrow function" scheme="https://pktseng.github.io/categories/JavaScrip/this/arrow-function/"/>
    
    
    <category term="this" scheme="https://pktseng.github.io/tags/this/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
    <category term="arrow function" scheme="https://pktseng.github.io/tags/arrow-function/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - this 在 具名函式 &amp; 箭頭函式下的差異。</title>
    <link href="https://pktseng.github.io/2021/03/24/this/"/>
    <id>https://pktseng.github.io/2021/03/24/this/</id>
    <published>2021-03-23T16:00:00.000Z</published>
    <updated>2021-03-26T06:01:55.420Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>以下示範 function &amp; arrow function 的差異。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//具名函釋</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 箭頭函式</span></span><br><span class="line"><span class="hljs-keyword">let</span> test2 = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">window</span>.name = <span class="hljs-string">'外層'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> obj = {</span><br><span class="line">  name: <span class="hljs-string">'ken'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 具名函示會看命名變數作用域下的 this</span></span><br><span class="line">test1() <span class="hljs-comment">// "外層"</span></span><br><span class="line">test1.call(obj) <span class="hljs-comment">// "ken"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 箭頭函式永遠指向 window</span></span><br><span class="line">test2() <span class="hljs-comment">// "外層"</span></span><br><span class="line">test2.call(obj) <span class="hljs-comment">// "外層"</span></span><br></pre></td></tr></tbody></table></figure><p>如果想改變函示內的 this 值可以用 call 方法，但從結果來看，這對箭頭函式來說是無效的。</p><p>總結:<br>test1 具名函示的 this 會指向<font color="#FF0000">跟函示同層作用域下</font>命名變數的 this 值。<br>test2 箭頭函示的 this 會指向<font color="#FF0000">聲明時</font>所在作用域下的 this 值。</p><p><a href="https://codepen.io/gleofgja/pen/jOyPdrL?editors=1012">codePen</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=9">尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11</a></p></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;以下示範 function &amp;amp; arrow function 的差異。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript hljs&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="this" scheme="https://pktseng.github.io/categories/JavaScrip/this/"/>
    
    
    <category term="this" scheme="https://pktseng.github.io/tags/this/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 顯示類型的數量 ( count )</title>
    <link href="https://pktseng.github.io/2021/03/22/%E9%A1%AF%E7%A4%BA%E9%A1%9E%E5%9E%8B%E7%9A%84%E6%95%B8%E9%87%8F/"/>
    <id>https://pktseng.github.io/2021/03/22/%E9%A1%AF%E7%A4%BA%E9%A1%9E%E5%9E%8B%E7%9A%84%E6%95%B8%E9%87%8F/</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-03-22T09:31:00.692Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>需求: Sidebar 要顯示電影類型的數量，如下圖<br><img src="https://i.imgur.com/DMbdFHI.png"></p><a id="more"></a><p>進入網頁時前端會發送請求就是打 api ，那後端收到請求後會回傳 <code>response</code> ，如下圖。<br><img src="https://i.imgur.com/nnrCX4J.png"></p><p>再把 <code>response</code> 裡面的 <code>data</code> 裡面的資料賦予到 <code>this.products</code> 裡面。</p><p>因為 AJAX 非同步的關係，為了確保執行程式時式有拿到資料的，所以會在打完 <code>api</code> 後同時執行 <code>getCategories()</code> 這個函式。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data() {</span><br><span class="line">    <span class="hljs-keyword">return</span> {</span><br><span class="line">      products: [],</span><br><span class="line">      categoryWithCount: {},</span><br><span class="line">      categories: [],</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line">methods: {</span><br><span class="line">    getProducts: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">      <span class="hljs-keyword">const</span> api = <span class="hljs-string">`url`</span></span><br><span class="line">      Vue.axios.get(api).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(response.data)</span><br><span class="line">        <span class="hljs-built_in">this</span>.products = response.data</span><br><span class="line">        <span class="hljs-built_in">this</span>.getCategoryWithCount()</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">mounted() {</span><br><span class="line"><span class="hljs-built_in">this</span>.getProducts()</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>經過 <a href="https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/">專案筆記 Vue 避免顯示陣列內重複的值</a> 的解釋，已經把電影的類型賦予到 <code>category</code> 陣列上，現在要用 <code>category</code> 陣列內的值，判斷相同的類型有幾個。</p><p>思考方向:<br>先抓取 <code>category</code> 陣列內的值，把這個 <code>category</code> 值跟 <code>products</code> 的值做比對。<br>( <code>products</code> 是打完 api 回傳的資料，資料被賦予到 <code>products</code> 陣列內 )</p><p><code>category</code> : 陣列是已經被過濾的電影類型，所以不會有重複的值 ( 請參考 <a href="https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/">專案筆記 Vue 避免顯示陣列內重複的值</a> )。<br><code>products</code> : 是後端回傳 response 後沒經過處裡的資料。</p><p>首先，在 <code>for of</code> 迴圈<font color="#FF0000">外</font>用 console.log() 看一下 categories 陣列內的值。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getCategoryWithCount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.categories) <span class="hljs-comment">//迴圈外面</span></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> category <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>.categories) {</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(category) <span class="hljs-comment">//迴圈裡面</span></span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>會是一個<font color="#FF0000">陣列</font>，如下圖<br><img src="https://i.imgur.com/bCcvRz4.png"></p><p>在 <code>for of</code> 迴圈<font color="#FF0000">內</font>讀取陣列內的每個值，會從陣列中<font color="#FF0000">個別取出</font>，如下圖<br><img src="https://i.imgur.com/Q3CnBXx.png"></p><p>透過迴圈已經將值個別取出，再把這些個別的值跟 <code>products</code> 陣列內的值做比對。</p><p>用 <code>forEach</code> 迴圈讀取 <code>this.products</code> 所有值。<code>forEach</code> 第一個參數 <code>element</code> 會指向代進去的所有值。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getCategoryWithCount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> category <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>.categories) {</span><br><span class="line">    <span class="hljs-built_in">this</span>.products.forEach(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> {</span><br><span class="line">       <span class="hljs-built_in">console</span>.log(element)</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>如果不知道 <code>element</code> ，用 <code>console.log()</code> 看一下就知道了，如下圖<br><img src="https://i.imgur.com/ZHEx3Mf.png"><br><code>element</code> 會指向 <code>products</code> 陣列內每一筆的物件。</p><p>然後在最外層宣告一個空物件，每跑一次迴圈相同的電影類型就會 +1。<br>在 <code>for</code> 迴圈裡面加入 <code>if</code> 判斷式，有相同電影類型的話那電影類型的數量就會 +1 ，當電影類型的型別判斷是 <code>undefined</code> 的話就會被歸 0，當迴圈跑完後再把 <code>count_hash</code> 物件賦予到 <code>categoryWithCount</code> 變數上</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">getCategoryWithCount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> count_hash = {}</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> category <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>.categories) {</span><br><span class="line">    <span class="hljs-built_in">this</span>.products.forEach(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> {</span><br><span class="line">      <span class="hljs-keyword">if</span> (element.product_type === category) {</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> count_hash[category] === <span class="hljs-string">'undefined'</span>) {</span><br><span class="line">          count_hash[category] = <span class="hljs-number">0</span></span><br><span class="line">        }</span><br><span class="line">        count_hash[category] = count_hash[category] + <span class="hljs-number">1</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">  <span class="hljs-built_in">this</span>.categoryWithCount = count_hash</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.categoryWithCount)</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>在把跑完迴圈後的 <code>count_hash</code> 物件賦予到 <code>categoryWithCount</code> 上。<br>用 <code>console.log</code> 看一下 <code>categoryWithCount</code> 變數，如下圖<br><img src="https://i.imgur.com/dt6yy9z.png"></p><p>這樣就把所有電影類型的數量計算完成了，接下來把這些數量代到 sidebar 裡面</p><p>下圖為組件的模板，我要把數量放到 <code>span</code> 裡面。<br><img src="https://i.imgur.com/wKPpueD.png"></p><p>思考方向是執行 <code>function</code> 把值代入。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getCount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log(item)</span></span><br><span class="line">  <span class="hljs-comment">// console.log(this.categoryWithCount[item])</span></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.categoryWithCount[item]</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>用 <code>console.log()</code> 看一下 <code>item</code> ，如下圖<br><img src="https://i.imgur.com/02gaLWh.png"></p><p>用 <code>console.log()</code> 看一下 <code>this.categoryWithCount[item]</code>，如下圖<br><img src="https://i.imgur.com/IBEapga.png"></p><p>把 <code>categoryWithCount</code> 物件裡面的數量 <code>return</code> 出來放到 <code>span</code> 標籤裡面，這樣就可以顯示該電影類型的數量了。<br><img src="https://i.imgur.com/VkxeERK.png"></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;需求: Sidebar 要顯示電影類型的數量，如下圖&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/DMbdFHI.png&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 避免顯示陣列內重複的值</title>
    <link href="https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/"/>
    <id>https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/</id>
    <published>2021-03-20T16:00:00.000Z</published>
    <updated>2021-03-22T09:42:19.879Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>在寫個人專案的過程中遇到一些問題，順便記錄一下。</p><p>要做的需求是 sidebar 顯示電影類型。</p><a id="more"></a><h2 id="進入頁面獲取資料"><a href="#進入頁面獲取資料" class="headerlink" title="進入頁面獲取資料"></a>進入頁面獲取資料</h2><p>在進入頁面的時候我們必須發送請求跟後端索取資料，後端接受到前端的請求後會進行邏輯判斷再回傳 <code>response</code> 。</p><p>要獲取資料就要用 <code>AJAX</code> 的方式，我選用 <code>Axios</code> 來獲取。<br>再將後端回傳的資料賦予到 <code>products</code> 變數裡面。</p><p><code>this</code> 是指向這個 <code>vue 實體</code>。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data() {</span><br><span class="line">    <span class="hljs-keyword">return</span> {</span><br><span class="line">      products: [],</span><br><span class="line">      categories: [],</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line"></span><br><span class="line">methods: {</span><br><span class="line">    getProducts: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">      <span class="hljs-keyword">const</span> api = <span class="hljs-string">'url'</span></span><br><span class="line">      Vue.axios.get(api).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {</span><br><span class="line">        <span class="hljs-comment">// console.log(response)</span></span><br><span class="line">        <span class="hljs-built_in">this</span>.products = response.data</span><br><span class="line">        <span class="hljs-built_in">this</span>.getCategories()</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">},</span><br><span class="line">mounted() {</span><br><span class="line"><span class="hljs-built_in">this</span>.getProducts()</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>用 <code>console.log</code> 看一下回傳的資料。<br><img src="https://i.imgur.com/nnrCX4J.png"></p><h2 id="製作-sidebar-類型選單"><a href="#製作-sidebar-類型選單" class="headerlink" title="製作 sidebar 類型選單"></a>製作 sidebar 類型選單</h2><p>因為同類型的電影不只一個，會重複很多個，所以要把重複的過濾掉。</p><p>思考方向:</p><ol><li>第一次先用 <code>map</code> 將所有電影類型全部找出來放到新的陣列裡面。</li><li>第二次用 <code>filter</code> 將重複的電影過濾掉。</li></ol><p>下圖是 <code>response.data</code> 陣列內回傳的資料，我們要索取陣列內每筆物件的 <code>product_type</code> 屬性。<br><img src="https://i.imgur.com/aop2BX3.png"></p><p>因為非同步的關係，必須等到後端回傳 <code>response</code> 的時候再執行。所以要在打完 <code>api</code> 回傳 <code>response</code> 後，加上 <code>getProducts()</code> 這個函式，這樣才可以同步。</p><p>首先我把 <code>this.products</code> 所有資料用 <code>map</code> 函式塞選一遍， <code>map</code> 條件為將資料內的 <code>product_type</code> 屬性塞選出來放到新的陣列裡面。<br>新的陣列我用 <code>categories</code> 命名。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getCategories: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">     <span class="hljs-keyword">let</span> categories = <span class="hljs-built_in">this</span>.products.map(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> {</span><br><span class="line">     <span class="hljs-comment">// console.log(element.product_type)</span></span><br><span class="line">       <span class="hljs-keyword">return</span> element.product_type</span><br><span class="line">     })</span><br><span class="line">   },</span><br></pre></td></tr></tbody></table></figure><p>用 <code>console.log()</code> 看 <code>element.product_type</code> ， 如下圖<br>( 資料是從 TMDB 用爬蟲爬得，所以會有簡體字 )<br><img src="https://i.imgur.com/OsobCQC.png"></p><p><code>map</code> 會產生新的陣列，新陣列內的資料有重複的電影類型，為了不要讓重複的電影類型顯示出來，我用 <code>filter</code> 方法，條件判斷是用 <code>indexOf</code> 。</p><p>indexOf : <code>比較 array 裡面是否有元素 === 你要找的東西</code>。<br>indexOf 的用法可以參考這篇<a href="https://ithelp.ithome.com.tw/articles/10227363">文章</a></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getCategories: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> categories = <span class="hljs-built_in">this</span>.products.map(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> {</span><br><span class="line">    <span class="hljs-keyword">return</span> element.product_type</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  <span class="hljs-built_in">this</span>.categories = categories.filter(</span><br><span class="line">    (item, index) =&gt; categories.indexOf(item) === index</span><br><span class="line">  )</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.categories)</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>塞選完會呈現下圖<br><img src="https://i.imgur.com/MXX7XeQ.png"></p><p>重複的電影類型就不見了</p><p>接下來把類型放到陣列裡面，再用 v-for 的方式渲染出來，如下圖<br><img src="https://i.imgur.com/J6kSJ0i.png"></p><p>這樣就完成了!!!</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://ithelp.ithome.com.tw/articles/10227363">JS 找出元素索引值的陣列 Array 方法 indexOf()</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在寫個人專案的過程中遇到一些問題，順便記錄一下。&lt;/p&gt;
&lt;p&gt;要做的需求是 sidebar 顯示電影類型。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue - loading 效果</title>
    <link href="https://pktseng.github.io/2021/03/10/loading/"/>
    <id>https://pktseng.github.io/2021/03/10/loading/</id>
    <published>2021-03-09T16:00:00.000Z</published>
    <updated>2021-03-22T09:27:09.789Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><a id="more"></a><p><a href="https://github.com/ankurk91/vue-loading-overlay">套件</a><br>首先安裝 npm: <code>npm install vue-loading-overlay</code><br>再到 main.js 載入</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Import component</span></span><br><span class="line"><span class="hljs-keyword">import</span> Loading <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-loading-overlay'</span></span><br><span class="line"><span class="hljs-comment">// Import stylesheet</span></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">'vue-loading-overlay/dist/vue-loading.css'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 因為是全域每個 component 都會用，所以用 Vue.component</span></span><br><span class="line">Vue.component(<span class="hljs-string">'Loading'</span>, Loading)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/NxbUi4i.png"></p><hr><h2 id="全域-Loading"><a href="#全域-Loading" class="headerlink" title="全域 Loading"></a>全域 Loading</h2><p>接下來要在 components 裡面加入讀取的判斷式跟綁定<br>先將 lading 預設好，只有在等待的時間下才會轉 <code> isLoading: false,</code></p><p><img src="https://i.imgur.com/cLak0kf.png"></p><p>然後把範例拿過來用</p><p>在 div 內一層加上 <code>&lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;</code></p><p><img src="https://i.imgur.com/kX4o8Kv.png"></p><p>接下來要在 AJAX 的行為上面新增 <code> isLoading: false,</code><br>在啟用 <code>getProducts</code> 的時候就會觸發 loading ( true )，在完成的時候結束( false )<br>範例如下:</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getProducts() {</span><br><span class="line">  <span class="hljs-keyword">const</span> api = <span class="hljs-string">`<span class="hljs-subst">${process.env.APIPATH}</span>/api/<span class="hljs-subst">${process.env.MYPATH}</span>/products`</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.isLoading = <span class="hljs-literal">true</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.$http.get(api).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {</span><br><span class="line">    <span class="hljs-built_in">this</span>.products = response.data.products</span><br><span class="line">    <span class="hljs-built_in">this</span>.isLoading = <span class="hljs-literal">false</span></span><br><span class="line">  })</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>然後再重新整理，畫面中間就會出現 Loading 的效果，<br>再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果</p><p>這樣全域就完成了!!</p><hr><h2 id="局部-Loading"><a href="#局部-Loading" class="headerlink" title="局部 Loading"></a>局部 Loading</h2><p>再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果</p><p>要加的地方在下圖紅框處<br><img src="https://i.imgur.com/SKEI2vd.png"></p><p>這邊偷懶一下直接用 CDN 載入 <a href="https://cdnjs.com/libraries/font-awesome">font-awesome</a> 到 index.html</p><p><img src="https://i.imgur.com/fszYHjw.png"><br><img src="https://i.imgur.com/jBEiM1M.png"></p><p>然後再到 <a href="https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons">Animating Icons</a> 選一個自己喜歡的 loading 樣式<br>這邊用 <code>fa-spinner fa-spin</code> 作範例<br>因為要在上傳圖片的旁邊顯示 loading 效果，所以我們把 <code>fa-spinner fa-spin</code> 加在 label 旁邊，</p><p><img src="https://i.imgur.com/t3XKdnP.png"></p><p>再到 data 函式加入決定局部 loading 的變數</p><p><img src="https://i.imgur.com/oQk38Gg.png"></p><p>再到模板那邊用 v-if 判斷做動態綁定</p><p><img src="https://i.imgur.com/doiggrR.png"></p><p>然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">uploadImg() {</span><br><span class="line">    <span class="hljs-comment">// 在拉圖片進去讀取的時候 fileUpLoading 會是 true</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.status.fileUpLoading =  <span class="hljs-literal">true</span></span><br><span class="line">  <span class="hljs-keyword">const</span> uploadFile = <span class="hljs-built_in">this</span>.$refs.files.files[<span class="hljs-number">0</span>]</span><br><span class="line">  <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData()</span><br><span class="line">  formData.append(<span class="hljs-string">'file-to-upload'</span>, uploadFile)</span><br><span class="line">  <span class="hljs-comment">//接下來定義路徑</span></span><br><span class="line">  <span class="hljs-keyword">const</span> url = <span class="hljs-string">`<span class="hljs-subst">${process.env.APIPATH}</span>/api/<span class="hljs-subst">${process.env.MYPATH}</span>/admin/upload`</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.$http</span><br><span class="line">    .post(url, formData, {</span><br><span class="line">      headers: {</span><br><span class="line">        <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'multipart/form-data'</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(res.data)</span><br><span class="line">      <span class="hljs-comment">// AJAX 結束後 fileUpLoading 就 false</span></span><br><span class="line">      <span class="hljs-built_in">this</span>.status.fileUpLoading = <span class="hljs-literal">false</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (res.data.success) {</span><br><span class="line">        <span class="hljs-comment">// this.tempProduct.imgUrl = res.data.imageUrl</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.tempProduct)</span><br><span class="line">        <span class="hljs-built_in">this</span>.$set(<span class="hljs-built_in">this</span>.tempProduct, <span class="hljs-string">'imgUrl'</span>, res.data.imageUrl)</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ankurk91/vue-loading-overlay&quot;&gt;套件&lt;/a&gt;&lt;br&gt;首先安裝 npm: &lt;code&gt;npm insta</summary>
      
    
    
    
    <category term="Loading" scheme="https://pktseng.github.io/categories/Loading/"/>
    
    
    <category term="Loading" scheme="https://pktseng.github.io/tags/Loading/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 下拉選單</title>
    <link href="https://pktseng.github.io/2021/03/06/%E4%B8%8B%E6%8B%89%E9%81%B8%E5%96%AE/"/>
    <id>https://pktseng.github.io/2021/03/06/%E4%B8%8B%E6%8B%89%E9%81%B8%E5%96%AE/</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-03-22T09:44:24.437Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>先將 <code>select</code> 用 <code>v-model</code> 做作雙向綁定，因為 <code>number</code> 是空字串，所以在一開始 <code>option</code> 會指定到 <code>value</code> 為空值的選項。<br>假設 <code>option</code> 裡面沒有 <code>value</code> ，那 <code>option</code> 就會顯示 2020 等年分，但給了 <code>value</code> 就會顯示 <code>value</code> 值。</p><a id="more"></a><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"number"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>&gt;</span>select number<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"001"</span>&gt;</span>2020<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"002"</span>&gt;</span>2021<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"003"</span>&gt;</span>2022<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">&lt;!--&lt;option&gt;2020&lt;/option&gt;</span></span><br><span class="line"><span class="hljs-comment">    &lt;option&gt;2021&lt;/option&gt;</span></span><br><span class="line"><span class="hljs-comment">    &lt;option&gt;2022&lt;/option&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{number}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="hljs-javascript">      number: <span class="hljs-string">''</span>,</span></span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/qBZOOWY?editors=1010">codepen</a><br><img src="https://i.imgur.com/xRbTzEh.png"></p><hr><p>下拉選單還可以綁定到陣列上</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"number in numbers"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"number"</span>&gt;</span>{{number}}<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      numbers: [2020, 2021, 2022],</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/oBE9iQg.png"></p><p>利用 <code>v-for</code> 的方式將 <code>option</code> 內的 <code>value</code> 指定為 <code>number</code> ，在用 <code>v-model</code> 將初始值設定為 2020，範例如下</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selectNumber"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"number in numbers"</span>&gt;</span>{{number}}<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{selectNumber}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      numbers: [2020, 2021, 2022],</span><br><span class="line">      selectNumber: 2020,</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/zYqvrMY?editors=1010">codepen</a></p><hr><p>還有月份選擇，但有更為簡潔的寫法，範例如下</p><p>直接在 <code>option</code> 裡面寫最大數字，並將初始值 <code>selectMonth</code> 設定為 <code>1</code>，這樣就有下拉選單裡面有包含 <code>12</code> 個數字</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selectMonth"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"month in 12"</span>&gt;</span>{{month}}<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{selectMonth}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      selectMonth: 1,</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/dyMYGxv?editors=1010">codepen</a></p><hr><h3 id="陣列包物件寫法"><a href="#陣列包物件寫法" class="headerlink" title="陣列包物件寫法"></a>陣列包物件寫法</h3><p>透過陣列將陣列內的物件顯示出來</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selectGender"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"option in options"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"option.value"</span>&gt;</span></span><br><span class="line">      {{option.text}}</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{selectGender}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      options: [</span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'boy'</span> },</span></span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">value</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'girl'</span> },</span></span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">value</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'others'</span> },</span></span><br><span class="line">      ],</span><br><span class="line">      selectGender: 1,</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/jOqbqEJ?editors=1010">codepen</a></p><hr><h2 id="參考資料-精通-VueJS-前端開發完全指南"><a href="#參考資料-精通-VueJS-前端開發完全指南" class="headerlink" title="參考資料:精通 VueJS 前端開發完全指南"></a><a href="https://hiskio.com/courses/145">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>]]></content>
    
    
    <summary type="html">可用在選年份日期等等。</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="v-model" scheme="https://pktseng.github.io/tags/v-model/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 輸入框雙向綁定</title>
    <link href="https://pktseng.github.io/2021/03/04/%E8%A1%A8%E5%96%AE%E7%B6%81%E5%AE%9A/"/>
    <id>https://pktseng.github.io/2021/03/04/%E8%A1%A8%E5%96%AE%E7%B6%81%E5%AE%9A/</id>
    <published>2021-03-03T16:00:00.000Z</published>
    <updated>2021-03-20T07:48:37.215Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="文字輸入"><a href="#文字輸入" class="headerlink" title="文字輸入"></a>文字輸入</h2><p>v-model 可以做雙向綁定，但它同時也等於 v-bind 的 value 跟偵聽 input 的事件。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;input type="text" v-model="message"&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"message"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"setMessage"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="hljs-javascript">      message: <span class="hljs-string">''</span>,</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      setMessage(e) {</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">this</span>.message = e.target.value</span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/qBZdgBR?editors=1010">codepen</a><br>setMessage 函式會接收一個參數(evt 事件)，並用事件發出的 target 找到 input 元素，那 e.target.vlaue 就是使用者輸入的值。</p><hr><h2 id="多行輸入-textarea"><a href="#多行輸入-textarea" class="headerlink" title="多行輸入: textarea"></a>多行輸入: textarea</h2><p>用 v-model 一樣可以雙向綁定，但是他不會換行，範例如下</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="hljs-javascript">      message: <span class="hljs-string">''</span>,</span></span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/eYZNxzp?editors=1010">codepen</a><br><img src="https://i.imgur.com/1Ycm7Yr.png"></p><p>這時候就要用 pre 標籤，它可以保存 message 裡面的換行字元，範例如下</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;h1&gt;{{message}}&lt;/h1&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="hljs-javascript">      message: <span class="hljs-string">''</span>,</span></span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/VwaLgXx?editors=1010">codepen</a><br><img src="https://i.imgur.com/mwsn0S8.png"></p><p>或是不想用 pre 標籤鄉用 h1 的話可以在 css 裡面加上 white-space: pre; 也會有同樣的效果。</p><p>也可以套用一開始單行 v-model 一開始單行 v-model 轉換成 v-bind 跟 v-on 一樣可以運行</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"setMessage"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="hljs-javascript">      message: <span class="hljs-string">''</span>,</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      setMessage(e) {</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">this</span>.message = e.target.value</span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/XWdbOPR?editors=1010">codepen</a><br><img src="https://i.imgur.com/nmyApR9.png"></p><hr><h2 id="參考資料-精通-VueJS-前端開發完全指南"><a href="#參考資料-精通-VueJS-前端開發完全指南" class="headerlink" title="參考資料:精通 VueJS 前端開發完全指南"></a><a href="https://hiskio.com/courses/145">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>]]></content>
    
    
    <summary type="html">用 Vue 做出表單</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="v-model" scheme="https://pktseng.github.io/tags/v-model/"/>
    
    <category term="v-bind" scheme="https://pktseng.github.io/tags/v-bind/"/>
    
    <category term="component" scheme="https://pktseng.github.io/tags/component/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 表單綁定—按鈕</title>
    <link href="https://pktseng.github.io/2021/03/03/%E8%A1%A8%E5%96%AE%E7%B6%81%E5%AE%9A%E2%80%94%E6%8C%89%E9%88%95/"/>
    <id>https://pktseng.github.io/2021/03/03/%E8%A1%A8%E5%96%AE%E7%B6%81%E5%AE%9A%E2%80%94%E6%8C%89%E9%88%95/</id>
    <published>2021-03-02T16:00:00.000Z</published>
    <updated>2021-03-20T07:48:29.775Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h2><h3 id="單選互動按鈕"><a href="#單選互動按鈕" class="headerlink" title="單選互動按鈕:"></a>單選互動按鈕:</h3><p>將 true &amp; false 綁定到一個值上面，並做出沒勾選的話就會跳出 alert</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"agree"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"chk"</span>&gt;</span>agree<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{agree}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"submit"</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="hljs-javascript">      agree: <span class="hljs-literal">false</span>,</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      submit() {</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.agree !== <span class="hljs-literal">true</span>) {</span></span><br><span class="line"><span class="hljs-javascript">          alert(<span class="hljs-string">'agreeeeeeee'</span>)</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">return</span></span></span><br><span class="line">        }</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 表單送出後要做的事情...</span></span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/gOrapGB?editors=1010">codepen</a></p><h3 id="多選互動按鈕"><a href="#多選互動按鈕" class="headerlink" title="多選互動按鈕:"></a>多選互動按鈕:</h3><p>這可以應用在客戶在什麼時段方便取貨或是什麼時方便聯絡等地方。</p><p>給定三個時段，也給三個時段的 value ，同時在點選時段的時候我希望能以陣列的方式呈現</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>可以聯絡的時段:<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"8:00~12:00"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"times"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"chk1"</span>&gt;</span>morning<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"13:00~ 18:00"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"times"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"chk2"</span>&gt;</span>afternoon<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk3"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"19:00~21:00"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"times"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"chk3"</span>&gt;</span>evening<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{times}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      times: [],</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/QWNjbmL?editors=1010">codepen</a><br>透過勾選的順序決定誰要先呈現第一個，例如我先勾選 evening 再勾 afternoon 就會呈現下圖順序<br><img src="https://i.imgur.com/hS7mIh0.png"></p><hr><h2 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h2><p>這是應用在表單填寫性別或是單個選項等地方。<br>給 2 個選項，在點擊 label 時會呈現 value ，要額外呈現 value 就要用 ， v-model 做雙向綁定，那 v-model 要空值或是預設值都可以。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"male"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"gender"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"chk1"</span>&gt;</span>male<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"chk2"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"female"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"gender"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"chk2"</span>&gt;</span>female<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{gender}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line"><span class="hljs-javascript">      gender: <span class="hljs-string">'male'</span>,</span></span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/MWyawRj?editors=1010">codepen</a><br><img src="https://i.imgur.com/oRDSx3s.png"></p><hr><h2 id="參考資料-精通-VueJS-前端開發完全指南"><a href="#參考資料-精通-VueJS-前端開發完全指南" class="headerlink" title="參考資料:精通 VueJS 前端開發完全指南"></a><a href="https://hiskio.com/courses/145">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>]]></content>
    
    
    <summary type="html">用 Vue 做出按鈕</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="v-model" scheme="https://pktseng.github.io/tags/v-model/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 列表渲染</title>
    <link href="https://pktseng.github.io/2021/03/02/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/"/>
    <id>https://pktseng.github.io/2021/03/02/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/</id>
    <published>2021-03-01T16:00:00.000Z</published>
    <updated>2021-03-22T09:44:14.543Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="8-1-用-v-for-把陣列轉換為一組元素"><a href="#8-1-用-v-for-把陣列轉換為一組元素" class="headerlink" title="8-1 用 v-for 把陣列轉換為一組元素"></a>8-1 用 v-for 把陣列轉換為一組元素</h2><p>將 <code>data</code> 裡面的 <code>todo</code> 陣列顯示在 <code>li</code> 上，<code>v-for="todos in todo"</code> 後面的<code>todos</code> 代表陣列，前面的<code>todo</code> 代表陣列裡面的每個元素</p><a id="more"></a><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"todos in todo"</span>&gt;</span>{{todos}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    todo: [<span class="hljs-string">'html'</span>, <span class="hljs-string">'javascript'</span>, <span class="hljs-string">'css'</span>],</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/br0hybR.png"></p><hr><h3 id="下拉選單"><a href="#下拉選單" class="headerlink" title="下拉選單"></a>下拉選單</h3><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"month in months"</span>&gt;</span>{{month}}<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    months: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>],</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/yLemJQy?editors=1010">codepen</a></p><p>這種數字的有另一個寫法，可以將 <code>months</code> 改寫成數字，而改寫的數字就會是最大值，而 <code>months</code> 的陣列可以刪除。<br>範例如下:</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"month in 30"</span>&gt;</span>{{month}}<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {},</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>這樣就會有 30 個數字選項</p><h3 id="月份綁-value"><a href="#月份綁-value" class="headerlink" title="月份綁 value"></a>月份綁 value</h3><p>這是在陣列是字串下，但又希望 value 值是數字 123，這時可以在 <code>month</code> 後面加上 <code>index</code> 或是 <code>idx</code> 、 <code>i </code>等等任意變數，再用 <code>v-bind</code> 綁 <code>value</code></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(month, index) in months"</span> <span class="hljs-attr">:vlaue</span>=<span class="hljs-string">"index+1"</span>&gt;</span>{{month}}<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    months: [</span><br><span class="line">      <span class="hljs-string">'Jan'</span>,</span><br><span class="line">      <span class="hljs-string">'Feb'</span>,</span><br><span class="line">      <span class="hljs-string">'Mar'</span>,</span><br><span class="line">      <span class="hljs-string">'Apr'</span>,</span><br><span class="line">      <span class="hljs-string">'May'</span>,</span><br><span class="line">      <span class="hljs-string">'Jun'</span>,</span><br><span class="line">      <span class="hljs-string">'Jul'</span>,</span><br><span class="line">      <span class="hljs-string">'Aug'</span>,</span><br><span class="line">      <span class="hljs-string">'Sep'</span>,</span><br><span class="line">      <span class="hljs-string">'Oct'</span>,</span><br><span class="line">      <span class="hljs-string">'Nov'</span>,</span><br><span class="line">      <span class="hljs-string">'Dec'</span>,</span><br><span class="line">    ],</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/8HMNTpb.png"><br><a href="https://codepen.io/gleofgja/pen/MWKNjgK?editors=1010">codepen</a></p><hr><h2 id="8-2-用-v-for-把一個物件轉換為一組元素"><a href="#8-2-用-v-for-把一個物件轉換為一組元素" class="headerlink" title="8-2 用 v-for 把一個物件轉換為一組元素"></a>8-2 用 v-for 把一個物件轉換為一組元素</h2><p>如果要取物件內的 key 值，就在 value 後面加上 key 就好<br>跟陣列很像，<strong>陣列</strong>是 (元素, idx) ，<strong>物件</strong>是 (value, key)</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(value, key) in obj"</span>&gt;</span>{{key}} : {{value}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      obj: {</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 前面為 key: 後面為 value</span></span></span><br><span class="line"><span class="hljs-javascript">        name: <span class="hljs-string">'PKT'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        number: <span class="hljs-string">'123456'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        age: <span class="hljs-string">'22'</span>,</span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/2WF7ILF.png"></p><hr><p>v-for 轉物件，渲染出來的順序不一定會跟我寫的一樣，例如我用不規律的數字做開頭</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(value, key) in obj"</span>&gt;</span>{{key}} : {{value}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      obj: {</span><br><span class="line"><span class="hljs-javascript">        name: <span class="hljs-string">'PKT'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        number: <span class="hljs-string">'123456'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        age: <span class="hljs-string">'22'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-number">12</span>: <span class="hljs-string">'中餐'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-number">8</span>: <span class="hljs-string">'早餐'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-number">6</span>: <span class="hljs-string">'晚餐'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-number">2</span>: <span class="hljs-string">'宵夜'</span>,</span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>渲染出來的結果會長這樣<br><img src="https://i.imgur.com/hKlcyV5.png"><br>明明我的順序是 12 =&gt; 8 =&gt; 6 =&gt; 2，但是選染出來卻是按照順序排列，這是因為我們用 <strong>v-for 來轉物件</strong>，若真要按照順序排列的話 code 也不會這樣打，但這是特定情況，必須依照我寫 code 的順序排列，所以就要用 <strong>v-for 轉陣列</strong>的方式，來修正。</p><p>先把物件轉陣列型式，並且在陣列內新增 prop &amp; value 屬性<br>再把 v-for 轉成陣列，下面的 obj 是陣列</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in obj"</span>&gt;</span>{{item.prop}} : {{item.value}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      obj: [</span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">prop</span>: <span class="hljs-string">'name'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">'PKT'</span> },</span></span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">prop</span>: <span class="hljs-string">'number'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">'123456'</span> },</span></span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">prop</span>: <span class="hljs-string">'age'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">'22'</span> },</span></span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">prop</span>: <span class="hljs-number">12</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">'中餐'</span> },</span></span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">prop</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">'早餐'</span> },</span></span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">prop</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">'晚餐'</span> },</span></span><br><span class="line"><span class="hljs-javascript">        { <span class="hljs-attr">prop</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">'宵夜'</span> },</span></span><br><span class="line">      ],</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/ZEWoRoy?editors=1010">code</a><br>這樣就可以依照我指定的順序來顯示了<br><img src="https://i.imgur.com/8O4Uqwo.png"></p><hr><h2 id="修改陣列或物件的注意事項"><a href="#修改陣列或物件的注意事項" class="headerlink" title="修改陣列或物件的注意事項"></a>修改陣列或物件的注意事項</h2><p>常用語法：</p><ol><li>push: 新增數字</li><li>pop: 減少數字</li><li>shift: 移除並回傳陣列的第一個元素</li><li>unshift: 從陣列開頭塞數字</li><li>splice: 從頭數到第 X 個，移除 Y 個，加入 Z</li><li>sort: 把亂掉的順序，按順序排列</li><li>reverse: 順序顛倒</li></ol><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in nums"</span>&gt;</span>{{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add"</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      nums: [1, 2, 3, 4, 5],</span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// sort 用</span></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// nums:[1,3,5,7,2,4,6,8],</span></span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      add() {</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.push(this.nums.length+1);</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.pop();</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.shift();</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.unshift(0);</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.splice(idx, length);</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.splice(2, 1, 9,8,7,);</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">//</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.sort();</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.reverse();</span></span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/NWNMLgO?editors=1010">code</a></p><hr><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><a href="https://cn.vuejs.org/v2/guide/filters.html">文件</a><br><code>filter</code> 會把陣列內的所有元素拿去跑函式，同時又不會更動原本的陣列，而是產生新的陣列。<br>那函式跑完回傳的值是 true ，就會產生新的陣列，是 false 就不會有新元素出現在新陣列內。</p><p>簡言之，就是把原本的陣列過濾並產生新的陣列。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in nums"</span>&gt;</span>{{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add"</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      add() {</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">this</span>.nums = <span class="hljs-built_in">this</span>.nums.filter(<span class="hljs-function">(<span class="hljs-params">elm</span>) =&gt;</span> elm % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)</span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/BaKVyym?editors=1010">code</a><br>過濾後會變成下圖<br><img src="https://i.imgur.com/t5ziwrX.png"></p><hr><h3 id="修改陣列並反應在元素上"><a href="#修改陣列並反應在元素上" class="headerlink" title="修改陣列並反應在元素上"></a>修改陣列並反應在元素上</h3><p>想感變陣列內的值可以用 <code>splice</code></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in nums"</span>&gt;</span>{{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add"</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      add() {</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 這樣是不會有任何反應的</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums[0] = 10;</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 從第2個，移除1個，加入789 或是 單值</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 從第0開始算，移除1開始算</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.splice(2, 1, 7,8,9);</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 從第 X 個之後都移除掉</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 移除1開始算</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.splice(2);</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 只保留從 X 到 Y，其他移除掉</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 從第0開始算，移除1開始算</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// slice(從, 第)</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums = this.nums.slice(1, 4);</span></span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/VwadYbP?editors=1010">code</a></p><hr><h3 id="物件內新增值"><a href="#物件內新增值" class="headerlink" title="物件內新增值"></a>物件內新增值</h3><p>以上都是 v-for 轉陣列，現在是轉物件，並在物件內新增值</p><p>新方法 <code>$set(設定屬性的物件, 設定物件的 key, key 的值)</code></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, key) in nums"</span>&gt;</span>{{key}}: {{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add"</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      nums: {</span><br><span class="line">        x: 10,</span><br><span class="line">        y: 20,</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      add() {</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 這樣是無法新增的</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// this.nums.z = 30;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">this</span>.$set(<span class="hljs-built_in">this</span>.nums, <span class="hljs-string">'z'</span>, <span class="hljs-number">30</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 除了 $set 還可以用 Vue，但是用 Vue 就沒有$</span></span></span><br><span class="line"><span class="hljs-javascript">        Vue.set(<span class="hljs-built_in">this</span>.nums, <span class="hljs-string">'z'</span>, <span class="hljs-number">30</span>)</span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/vYGrEaW?editors=1010">code</a><br>這樣就可以新增了<br><img src="https://i.imgur.com/pjDK5Rr.png"></p><p>以上是示範物件內原本沒有的，但是要新增新的物件，才會用到 set<br>那如果原本就有的，但是要修改原本的物件要怎麼寫? 以下示範</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, key) in nums"</span>&gt;</span>{{key}}: {{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add"</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">    el: <span class="hljs-string">'#app'</span>,</span></span><br><span class="line">    data: {</span><br><span class="line">      nums: {</span><br><span class="line">        x: 10,</span><br><span class="line">        y: 20,</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      add() {</span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">this</span>.nums.x = <span class="hljs-number">30</span></span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/bGpKNZz?editors=1010">code</a></p><hr><h2 id="參考資料-精通-VueJS-前端開發完全指南"><a href="#參考資料-精通-VueJS-前端開發完全指南" class="headerlink" title="參考資料:精通 VueJS 前端開發完全指南"></a><a href="https://hiskio.com/courses/145">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>]]></content>
    
    
    <summary type="html">用 v-for 把陣列轉換為一組元素</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="8-1用 v-for 把陣列轉換為一組元素" scheme="https://pktseng.github.io/tags/8-1%E7%94%A8-v-for-%E6%8A%8A%E9%99%A3%E5%88%97%E8%BD%89%E6%8F%9B%E7%82%BA%E4%B8%80%E7%B5%84%E5%85%83%E7%B4%A0/"/>
    
    <category term="8-2用 v-for 把一個物件轉換為一組元素" scheme="https://pktseng.github.io/tags/8-2%E7%94%A8-v-for-%E6%8A%8A%E4%B8%80%E5%80%8B%E7%89%A9%E4%BB%B6%E8%BD%89%E6%8F%9B%E7%82%BA%E4%B8%80%E7%B5%84%E5%85%83%E7%B4%A0/"/>
    
    <category term="8-3修改陣列或物件的注意事項" scheme="https://pktseng.github.io/tags/8-3%E4%BF%AE%E6%94%B9%E9%99%A3%E5%88%97%E6%88%96%E7%89%A9%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 父組件傳遞到子組件的  props 語法</title>
    <link href="https://pktseng.github.io/2021/03/02/props/"/>
    <id>https://pktseng.github.io/2021/03/02/props/</id>
    <published>2021-03-01T16:00:00.000Z</published>
    <updated>2021-03-26T16:13:10.719Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>當組件化的網頁要從後端伺服器請求資料的時候，那些回傳的資料都會經過父層組件傳到子層組件去，那父層組件的參數要傳到子層組件的話就要透過 <code>props</code> 語法。</p><p><img src="https://i.imgur.com/Hmwi0nd.png"></p><a id="more"></a><h2 id="1-props-沒有限制型別"><a href="#1-props-沒有限制型別" class="headerlink" title="1. props 沒有限制型別"></a>1. props 沒有限制型別</h2><p>沒有限制型別的寫法就是說待會在接收父層的資料的時候不會有限制。</p><p>套用之前的範例，這是在不需要從 <code>Vue 實例</code> ( 父層 ) 傳參數的寫法。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> cpn = {</span><br><span class="line">  template: <span class="hljs-string">'#cpn'</span>,</span><br><span class="line">  data() {</span><br><span class="line">    <span class="hljs-keyword">return</span> {</span><br><span class="line">      message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  components: {</span><br><span class="line">    cpn,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>正常會顯示下圖<br><img src="https://i.imgur.com/QBPGEO8.png"></p><p>但是現在要從 <code>Vue 實例</code> ( 父層 ) 傳變數，那我們先在父層新增一些資料，同時又要接收資料。</p><p>方法如下:</p><ol><li>在組件內先新增 <code>props</code> 屬性，然後在陣列內新增變數，變數的名稱是自定義的 ( <code>JS</code> 第 4 行 ) 。</li><li>在模板中新新增組件標籤 ( <code>HTML</code> 第 8、9 行 )。</li><li>在組件標籤上動態綁定父子組件 ( <code>HTML</code> 第 2 行 ) 。</li></ol><p><code>props</code> 陣列內寫的是變數，不是字串。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:cmovies</span>=<span class="hljs-string">"movies"</span> <span class="hljs-attr">:cmessage</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{cmovies}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{cmessage}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in cmovies"</span>&gt;</span>{{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> cpn = {</span><br><span class="line">  template: <span class="hljs-string">'#cpn'</span>,</span><br><span class="line">  <span class="hljs-comment">// 1. 沒有限制型別的寫法</span></span><br><span class="line">  props: [<span class="hljs-string">'cmovies'</span>, <span class="hljs-string">'cmessage'</span>],</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello world'</span>,</span><br><span class="line">    movies: [<span class="hljs-string">'索爾'</span>, <span class="hljs-string">'鋼鐵人'</span>, <span class="hljs-string">'綠巨人浩克'</span>],</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    cpn,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>這樣就子組件就可以從父層拿到資料並渲染<br><img src="https://i.imgur.com/eXDEKQS.png"></p><p><a href="https://codepen.io/gleofgja/pen/qBqMgGp?editors=1011">DEMO</a></p><h2 id="2-props-驗證資料"><a href="#2-props-驗證資料" class="headerlink" title="2. props 驗證資料"></a>2. props 驗證資料</h2><p>上面範例是子組件在接收父層組件資料的時候沒有限制型別的寫法，而且 <code>props</code> 接收的明明是變數，但看起來卻像是字串，接下來要寫的是 <code>props</code> 接收到的資料需要驗證的寫法。</p><p>方法很簡單，HTML 模板內容不變，將 <code>props</code> 改成陣列再把子組件名稱改成 <code>key</code> 值跟對應的 <code>value</code> 值。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> cpn = {</span><br><span class="line">  template: <span class="hljs-string">'#cpn'</span>,</span><br><span class="line">  <span class="hljs-comment">// 1. 沒有限制型別的寫法</span></span><br><span class="line">  <span class="hljs-comment">// props:['cmovies', 'cmessage'],</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 2. 限制型別的寫法</span></span><br><span class="line">  props: {</span><br><span class="line">    cmovies: <span class="hljs-built_in">Array</span>,</span><br><span class="line">    cmessage: <span class="hljs-built_in">String</span>,</span><br><span class="line">  },</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello world'</span>,</span><br><span class="line">    movies: [<span class="hljs-string">'索爾'</span>, <span class="hljs-string">'鋼鐵人'</span>, <span class="hljs-string">'綠巨人浩克'</span>],</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    cpn,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>一樣可以顯示<br><img src="https://i.imgur.com/jVyDRGr.png"></p><p><a href="https://codepen.io/gleofgja/pen/Rwoewjm?editors=1011">DEMO</a></p><h2 id="3-設定默認值的寫法"><a href="#3-設定默認值的寫法" class="headerlink" title="3. 設定默認值的寫法"></a>3. 設定默認值的寫法</h2><p>當我在模板標籤中沒有動態綁定父子組件的話，會自動顯示子組件預設的默認值。以下會示範當沒有動綁定的話會怎麼顯示。</p><p>要設定默認值有兩種寫法:</p><ol><li><code>default</code> 直接給值 ( <code>JS</code> 第 15 行 )。</li><li><code>default</code> 已函式的型式給值 ( <code>JS</code> 第 17 行)。</li></ol><p>現在故意在模板上少寫動態綁定的其中一項 ( <code>HTML</code> 第 5、6 行)。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:cmovies</span>=<span class="hljs-string">"movies"</span> <span class="hljs-attr">:cmessage</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   沒有從父組件拿到 message 參數，顯示默認值 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:cmessage</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:cmovies</span>=<span class="hljs-string">"movies"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{cmessage}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in cmovies"</span>&gt;</span>{{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> cpn = {</span><br><span class="line">  template: <span class="hljs-string">'#cpn'</span>,</span><br><span class="line">  <span class="hljs-comment">// 1. 沒有限制型別的寫法</span></span><br><span class="line">  <span class="hljs-comment">// props:['cmovies', 'cmessage'],</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 2. 限制型別的寫法</span></span><br><span class="line">  <span class="hljs-comment">// props:{</span></span><br><span class="line">  <span class="hljs-comment">//   cmovies: Array,</span></span><br><span class="line">  <span class="hljs-comment">//   cmessage: String</span></span><br><span class="line">  <span class="hljs-comment">// },</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 3. 設定預設值寫法</span></span><br><span class="line">  props: {</span><br><span class="line">    cmessage: {</span><br><span class="line">      type: <span class="hljs-built_in">String</span>,</span><br><span class="line">      <span class="hljs-comment">// default: 'none', //這是第一種寫法</span></span><br><span class="line">      <span class="hljs-keyword">default</span>() {</span><br><span class="line">        <span class="hljs-keyword">return</span> {</span><br><span class="line">          message: <span class="hljs-string">'這是第2種寫法，以函式表示的 message'</span>,</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="hljs-built_in">require</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//必須要有的，如果有少就會報錯</span></span><br><span class="line">    },</span><br><span class="line">    cmovies: {</span><br><span class="line">      type: <span class="hljs-built_in">String</span>,</span><br><span class="line">      <span class="hljs-keyword">default</span>() {</span><br><span class="line">        <span class="hljs-comment">//這是第2種寫法，以函式表示</span></span><br><span class="line">        <span class="hljs-keyword">return</span> [<span class="hljs-string">'超人'</span>, <span class="hljs-string">'閃電俠'</span>, <span class="hljs-string">'神力女超人'</span>]</span><br><span class="line">      },</span><br><span class="line">      <span class="hljs-built_in">require</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//必須要有的，如果有少就會報錯</span></span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  data() {</span><br><span class="line">    <span class="hljs-keyword">return</span> {}</span><br><span class="line">  },</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello world'</span>,</span><br><span class="line">    movies: [<span class="hljs-string">'索爾'</span>, <span class="hljs-string">'鋼鐵人'</span>, <span class="hljs-string">'綠巨人浩克'</span>],</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    cpn,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖。<br><img src="https://i.imgur.com/R2ira8K.png"></p><p><a href="https://codepen.io/gleofgja/pen/eYBLxgm?editors=1011">DEMO</a></p><p>比較需要注意的是標籤上的命名，在組件中是可以接受小駝峰的，但是在 <code>#app</code> 裡面的標籤只能接受全小寫或是串接式寫法 ( kebab Case ) ，盡量以串接式寫法為主。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=59">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;簡介&quot;&gt;&lt;a href=&quot;#簡介&quot; class=&quot;headerlink&quot; title=&quot;簡介&quot;&gt;&lt;/a&gt;簡介&lt;/h2&gt;&lt;p&gt;當組件化的網頁要從後端伺服器請求資料的時候，那些回傳的資料都會經過父層組件傳到子層組件去，那父層組件的參數要傳到子層組件的話就要透過 &lt;code&gt;props&lt;/code&gt; 語法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Hmwi0nd.png&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="props" scheme="https://pktseng.github.io/tags/props/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 組件化 ( 一 )</title>
    <link href="https://pktseng.github.io/2021/02/28/Vue%20%E7%B5%84%E4%BB%B6%E4%B8%80/"/>
    <id>https://pktseng.github.io/2021/02/28/Vue%20%E7%B5%84%E4%BB%B6%E4%B8%80/</id>
    <published>2021-02-27T16:00:00.000Z</published>
    <updated>2021-03-26T16:13:11.149Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>面對複雜問題的處裡的方式就是將問題分割，而將東西分割的方式在 Vue 裡面我們稱為組件化。</p><p>大概 10 年前吧，原本一個網頁是由一個 HTML、CSS、JavaScript 所組成的，但這樣在改動某個地方的時候會非常麻煩也會擔心會不會影響到網頁其他地方。後來出現了用 JavaScript 寫成的前端框架，將網頁內部切分成很多區塊，讓這些區塊內都有獨立的 HTML、CSS、JavaScript，這樣當某個區塊改動時就不必擔心會影響到網頁內的其他區塊，也因為每個區塊都是獨立的所以重複利用，這也讓開發者大大的提升了開發效率。</p><p><a href="https://cn.vuejs.org/v2/guide/components.html">下圖來自官網</a><br><img src="https://i.imgur.com/KxbAXYc.png"></p><p>組件化的思想就是盡可能的把頁面拆分成很多個小區塊，變成可重複利用的組件。</p><a id="more"></a><h2 id="組件化開發"><a href="#組件化開發" class="headerlink" title="組件化開發"></a>組件化開發</h2><h3 id="1-組件化的基本使用"><a href="#1-組件化的基本使用" class="headerlink" title="1.組件化的基本使用"></a>1.組件化的基本使用</h3><p>在之前<a href="https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/#%E4%B8%80%E3%80%81%E6%8F%92%E5%80%BC%E8%AA%9E%E6%B3%95">基本模板語法</a>提到用 mustache 語法可以顯示 <code>data</code> 物件內的 <code>value 值</code>，但如果有非常多重複的內容，這樣做不只可讀性差，也不好維護。用以下程式碼來示範。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message1: <span class="hljs-string">'title'</span>,</span><br><span class="line">    message2: <span class="hljs-string">'hello world'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/Ut7qry9.png"></p><p>這樣寫確實會顯示 4 個內容，但一樣的內容要寫 4 次才會呈現，而且有很冗長，這時就可以用組件的方式撰寫，可讀性也比較高。</p><p>以下示範如何組件化。</p><p><strong>分成三大步驟:</strong></p><ol><li>創造組件構造器 : <code>Vue.extend()</code></li><li>註冊組件 : <code>Vue.component()</code></li><li>使用組件 : <code>Vue 實例的使用範圍</code></li></ol><p>首先把重複性高的拉出來，如下圖，紅框處的重複性特別高，所以要獨立出來變成組件。<br><img src="https://i.imgur.com/HH2YDec.png"></p><h4 id="1-創造組件"><a href="#1-創造組件" class="headerlink" title="1. 創造組件"></a>1. 創造組件</h4><p>在 <code>Vue.extend</code> 組件裡面，它有個屬性是 <code>template</code> ，就是模板，在模板裡面的所有內容都是獨立且可重複利用的，把上圖紅框處放到模板裡面。再把 <code>Vue.extend()</code> 賦予到 <code>vm</code> 變數裡面，用變數是為了方便待會在註冊 ( component ) 的時候呼叫。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="2-註冊組件"><a href="#2-註冊組件" class="headerlink" title="2. 註冊組件"></a>2. 註冊組件</h4><p>創造完要註冊，它需要兩個參數，第一個參數是 <code>模板的標籤名稱</code> 可以自訂義，第二個是 <code>創造組件的變數</code> 就是指上面的 <code>vm</code> ，寫法也非常簡單，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'模板的標籤名稱'</span>, 創造組件的變數)</span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn'</span>, vm)</span><br></pre></td></tr></tbody></table></figure><p>完整寫法:</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;h2&gt;{{message1}}&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-comment">  &lt;p&gt;{{message2}}&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">  &lt;h2&gt;{{message1}}&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-comment">  &lt;p&gt;{{message2}}&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">  &lt;h2&gt;{{message1}}&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-comment">  &lt;p&gt;{{message2}}&lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn'</span>, vm)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message1: <span class="hljs-string">'title'</span>,</span><br><span class="line">    message2: <span class="hljs-string">'hello world'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/ZPBsCjR.png"></p><p>會發現在 <code>html</code> 上只要寫 <code>my-cpn</code> 標籤就可以顯示相同的內容，這就是組件化，之後如果想改動 <code>html</code> 的內容只要針對組件內的內容做改動就好，這樣不只增加可讀性同時也方便管理。</p><p>但要特別注意的是模板標籤必須寫在 <code>id='app'</code> 標籤裡面，寫在外面是不會被使用到的。</p><p><a href="https://codepen.io/gleofgja/pen/OJbQYwp?editors=1011">DEMO</a></p><blockquote><p><code>Vue.extend()</code> 在 Vue2.X 版以後就沒看到了，會示範也是因為這是必要的基礎觀念，之後的開發上就不會使用 <code>Vue.extend()</code> 而是使用語法糖的方式撰寫。</p></blockquote><h3 id="2-全域組件跟區域組件"><a href="#2-全域組件跟區域組件" class="headerlink" title="2. 全域組件跟區域組件"></a>2. 全域組件跟區域組件</h3><p>以上所寫的都是全域組件，全域就是可以在多個 Vue 實例裡面使用。<br>之前所寫的 Vue 實例只有一個，那可不可有兩個?<br>答案是 : 可以的! 但真實開發只會有一個，以下是為了釐清觀念所示範的。</p><p>再新增一個 Vue 實例 ( <code>id='app2'</code> )</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app2"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn'</span>, vm)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 新增一個實例 app2</span></span><br><span class="line"><span class="hljs-keyword">const</span> app2 = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app2'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>一樣可以使用，如下圖<br><img src="https://i.imgur.com/K2bd97U.png"></p><p>用開發模式看，會看到 <code>app2</code> 也有用到全域組件<br><img src="https://i.imgur.com/9XXcTf0.png"></p><p>那要怎麼做才會變成區域組件?<br>方法很簡單，就是把 <code>Vue.component('my-cpn', vm)</code> 移到 Vue 實例裡面 ( 記得 component 要加 s )。<br>Vue 實例裡面新增 <code>components</code> 一個屬性，再給 <code>components</code> 屬性一個物件，裡面放 <code>key</code> 跟 <code>value</code> 值。</p><p>key 值指的是<code>自訂義模板的標籤名</code>， value 就是<code>組件的變數名稱</code>。</p><p>要特別注意的是 key 值的寫法，跟 HTML 模板標籤的寫法。<br>key 值的寫法分兩種:</p><ol><li>單字以減號-分離 ( Kebab Case ) <font color="#FF0000">必須加引號</font>。</li><li>駝峰式命名法 ( Camel Case )，<font color="#FF0000">加不加引號都可以</font>。</li></ol><p><font color="#FF0000">HTML 模板的組件標籤必須是 Kebab Case 寫法</font>。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el:<span class="hljs-string">'#app'</span>,</span><br><span class="line">  components:{</span><br><span class="line">    <span class="hljs-comment">// Kebab Case</span></span><br><span class="line">    <span class="hljs-string">'my-cpn'</span>: vm</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Camel Case</span></span><br><span class="line">    myCpn: vm</span><br><span class="line">    <span class="hljs-string">'myCpn'</span>: vm</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>以下示範區域組件</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app2"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line"><span class="hljs-comment">// Vue.component('my-cpn', vm)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-comment">// 'my-cpn': vm</span></span><br><span class="line">    <span class="hljs-comment">// 'myCpn': vm</span></span><br><span class="line">    myCpn: vm,</span><br><span class="line">  },</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app2 = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app2'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>用開發者工具看，<code>app</code> 有在實例裡面註冊，所以可以使用，但 <code>app2</code> 不能，因為沒有在 <code>app2</code> 裡面註冊，所以不會解析 <code>my-cpn</code> 標籤。<br><img src="https://i.imgur.com/Gf58VOC.png"></p><p><a href="https://codepen.io/gleofgja/pen/mdOxOMJ?editors=1011">DEMO</a></p><p>以上就是區域組件的示範，在實戰開發上也是區域組件使用的最多，也只會有一個 Vue 實例。</p><h3 id="3-父子組件"><a href="#3-父子組件" class="headerlink" title="3. 父子組件"></a>3. 父子組件</h3><p>顧名思義就是組件裡面再放一層組件。</p><p>以下範例是創造一個 <code>vm2</code> 組件，再把 <code>vm1</code> 放到 <code>vm2</code> 裡面註冊，再到 Vue 實例裡面註冊 <code>vm2</code>。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件 vm1</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm1 = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 創造組件 vm2</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm2 = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;Two&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;Two Content&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;my-cpn1&gt;&lt;/my-cpn1&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">  <span class="hljs-comment">// 註冊組件 vm1</span></span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn1'</span>: vm1,</span><br><span class="line">  },</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  <span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn2'</span>: vm2,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>結果為下圖<br><img src="https://i.imgur.com/88UmUB0.png"></p><p>用開發者工具查看<br><img src="https://i.imgur.com/cd4p83b.png"></p><p>由上面案例可知 <code>vm2</code> 為父組件，<code>vm1</code> 為子組件。</p><p>當 HTML 再解析 <code>my-cpn2</code> 標籤的內容時，他會到 <code>vm2</code> 裡面解析模板的內容，而解析 <code>vm2</code> 模板的內容時又發現 <code>my-cpn1</code> 標籤，這時他會看看有沒有註冊 <code>my-cpn1</code> 的標籤，如果有找到它就會對應到 <code>vm1</code> 模板的內的內容，如果 <code>vm1</code> 裡面沒找到的話，它就會去全域組件找，如果全域還找不到就會報錯。</p><p>編譯好之後的模板如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 創造組件 vm2</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm2 = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;Two&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;Two Content&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">     &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn1'</span>: vm1,</span><br><span class="line">  },</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  <span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn2'</span>: vm2,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>換個角度來說 Vue 實例也是一個父組件，只差沒寫 <code>template</code> 屬性。</p><p><a href="https://codepen.io/gleofgja/pen/bGBvWOr?editors=1011">DEMO</a></p><h3 id="4-註冊組件的語法糖"><a href="#4-註冊組件的語法糖" class="headerlink" title="4. 註冊組件的語法糖"></a>4. 註冊組件的語法糖</h3><blockquote><p>以上當我們再創造組件的時候所使用的 <code>Vue.extend()</code> 在 Vue 2.X 以後已經很少用了幾乎是不會再出現。</p></blockquote><p>一開始先用 <code>extend</code> 創造，再用 <code>component</code> 註冊。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm1 = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, vm1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>但我們可以把上面 <code>Vue.extend</code> 裡面的內容移到 <code>Vue.component</code> 裡面，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 把 vm1 改成 extend 創造的物件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>同理，可以在把 <code>Vue.component</code> 的內容移到 Vue 實例裡面，但 <code>component</code> 要記得加 <code>s</code> ，所以又可以再改寫一次，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn1'</span>: {</span><br><span class="line">      template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">      `</span>,</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/rPU0m4Q.png"></p><p>這就是組件化的語法糖的最終版。</p><p>要特別注意的是除了<font color="#FF0000"> <code>component</code> 要加 <code>s</code> ， 逗號也要改成冒號。</font></p><p><a href="https://codepen.io/gleofgja/pen/oNYqwYx?editors=1011">DEMO</a></p><h3 id="5-組件模板的分離寫法"><a href="#5-組件模板的分離寫法" class="headerlink" title="5. 組件模板的分離寫法"></a>5. 組件模板的分離寫法</h3><p>在上一點註冊組件的語法糖中，最終寫法是將模板的資料寫到 Vue 實例裡面，但模板其實是可以寫到 HTML 裡面的，以下要講解的是比較簡單的分離寫法。</p><h4 id="script-標籤，屬性為-type-39-text-x-template-39"><a href="#script-標籤，屬性為-type-39-text-x-template-39" class="headerlink" title="script 標籤，屬性為 type='text/x-template'"></a>script 標籤，屬性為 <code>type='text/x-template'</code></h4><p>在 HTML 裡面創造 <code>script</code> 標籤，加上 <code>type='text/x-template'</code> 跟 一個 <code>id</code> ，id 是為了在註冊裡面綁定用的，寫法如下。</p><p>但要特別注意的是，在 <font color="#FF0000">模板裡面要記得加上 <code>div</code> 標籤。</font></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 在這裡創造一個模板 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/x-template"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line"><span class="hljs-handlebars"><span class="hljs-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-handlebars"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-handlebars"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-handlebars"><span class="hljs-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 註冊 vm1 組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/LK9DGQH.png"></p><h4 id="template-標籤"><a href="#template-標籤" class="headerlink" title="template 標籤"></a>template 標籤</h4><p><code>template</code> 寫法會更好記，因為只需要寫 <code>template</code> 加上 <code>id</code> 就好。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- template 寫法 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Vue 實例跟上面一樣。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示效果跟上面一樣。<br><img src="https://i.imgur.com/VORlZ7y.png"></p><p>以上就是模板的分離寫法。</p><p><a href="https://codepen.io/gleofgja/pen/yLVKXRd?editors=1011">DEMO</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=57">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;簡介&quot;&gt;&lt;a href=&quot;#簡介&quot; class=&quot;headerlink&quot; title=&quot;簡介&quot;&gt;&lt;/a&gt;簡介&lt;/h2&gt;&lt;p&gt;面對複雜問題的處裡的方式就是將問題分割，而將東西分割的方式在 Vue 裡面我們稱為組件化。&lt;/p&gt;
&lt;p&gt;大概 10 年前吧，原本一個網頁是由一個 HTML、CSS、JavaScript 所組成的，但這樣在改動某個地方的時候會非常麻煩也會擔心會不會影響到網頁其他地方。後來出現了用 JavaScript 寫成的前端框架，將網頁內部切分成很多區塊，讓這些區塊內都有獨立的 HTML、CSS、JavaScript，這樣當某個區塊改動時就不必擔心會影響到網頁內的其他區塊，也因為每個區塊都是獨立的所以重複利用，這也讓開發者大大的提升了開發效率。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/components.html&quot;&gt;下圖來自官網&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/KxbAXYc.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;組件化的思想就是盡可能的把頁面拆分成很多個小區塊，變成可重複利用的組件。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="components" scheme="https://pktseng.github.io/tags/components/"/>
    
  </entry>
  
  <entry>
    <title>Vue - data 必須是函數</title>
    <link href="https://pktseng.github.io/2021/02/28/Vue-data/"/>
    <id>https://pktseng.github.io/2021/02/28/Vue-data/</id>
    <published>2021-02-27T16:00:00.000Z</published>
    <updated>2021-03-26T16:13:11.199Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>在上一篇 Vue 組件化 ( 一 ) 介紹了組件話的觀念跟應用，但沒提到組件化的資料必須要用動態綁定來確保資料的獨立，所以這篇就來介紹一下組件化的 data 。</p><a id="more"></a><h2 id="Data-必須是函式"><a href="#Data-必須是函式" class="headerlink" title="Data 必須是函式"></a>Data 必須是函式</h2><p>因為每個組件都會有自己的模板，每個模板都會有自己的樣式或是邏輯，為了讓組件之間的資料不互相影響，必須將資料以函式的方式撰寫。<br>上一篇文章中提到的組件化，在模板內我都是直接寫值，並沒有用 mustache 語法來做動態綁定，因為當時還沒將 data 變成函數資料有可能不會呈現，但是在子組件下的 data 若是以函數的形式呈現，就不用擔心這問題，也可以確保每個組件的資料是獨立的。</p><p>拿之前寫的組件範例示範</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- template 寫法 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">    //資料寫死</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    //資料寫死</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在 <code>template</code> 模板裡面的資料，是寫死狀態，那改用 mustache 語法的話，會怎麼樣?</p><p>只改動 template 模板內容</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 Vue 實例裡面新增 data 物件</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    title: <span class="hljs-string">'我是標題'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>用開發者工具看會報錯，也提示 <code>title</code> 沒有被定義<br><img src="https://i.imgur.com/jeS56di.png"></p><p>這是因為組件內部是不能讀取 Vue 實例裡面的資料。<br>而子組件裡面有屬於自己的 HTML 模板，也應該有屬於自己的資料。</p><p>所以把上面組件內的 <code>data</code> 改成用函數的方式回傳，寫法也很簡單，<code>template</code> 內容一樣，只要在子組件裡面新增 <code>data</code> 函數的屬性並 <code>return</code> 物件內的值就好。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">  data() {</span><br><span class="line">    <span class="hljs-keyword">return</span> {</span><br><span class="line">      title: <span class="hljs-string">'我是組件內的標題'</span>,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>結果為下圖<br><img src="https://i.imgur.com/WOFiOtJ.png"></p><p>同樣道理，在把上式改寫成計數器的話</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- template 寫法 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{count}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"count++"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">  data() {</span><br><span class="line">    <span class="hljs-keyword">return</span> {</span><br><span class="line">      count: <span class="hljs-number">0</span>,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>組件內的每筆資料也都是互相獨立的<br><img src="https://i.imgur.com/JDevASi.png"></p><p><a href="https://codepen.io/gleofgja/pen/YzpaRMx?editors=1011">DEMO</a></p><p>總結:<br>在 Vue 實例裡面，data 是物件。<br>在子組件裡面 data 必須以函數的方式回傳物件。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://book.vue.tw/CH2/2-1-components.html">子元件的 data 必須是函數</a><br><a href="https://www.bilibili.com/video/BV15741177Eh?p=59">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h2&gt;&lt;p&gt;在上一篇 Vue 組件化 ( 一 ) 介紹了組件話的觀念跟應用，但沒提到組件化的資料必須要用動態綁定來確保資料的獨立，所以這篇就來介紹一下組件化的 data 。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="data 函數" scheme="https://pktseng.github.io/tags/data-%E5%87%BD%E6%95%B8/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 基本語法( 三 )</title>
    <link href="https://pktseng.github.io/2021/02/24/Vue%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95(%20%E4%B8%89%20)/"/>
    <id>https://pktseng.github.io/2021/02/24/Vue%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95(%20%E4%B8%89%20)/</id>
    <published>2021-02-23T16:00:00.000Z</published>
    <updated>2021-03-26T16:13:11.253Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>用 <code>v-if</code>、<code>v-show</code> 的條件判斷決定選染的內容。</p><a id="more"></a><h2 id="條件判斷"><a href="#條件判斷" class="headerlink" title="條件判斷"></a>條件判斷</h2><p>這指令可以根據表達式的值來判斷是否在 DOM 中渲染或是銷毀元素/組件。</p><p>寫法也很簡單，就跟 JavaScript 的 if 判斷式一樣。</p><h3 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1. v-if"></a>1. v-if</h3><p>在 DOM 標籤中加入 v-if 判斷式來決定要不要顯示，該標籤內的內容。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"true"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/6iHmYbE.png"><br><code>v-if</code> 後面都是接一個布林值。<br>為了可以動態顯示將寫法改寫一下，將 <code>true</code> 改成一個變數。這樣就可以透過發發者工具來控制要不要顯示。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;h2 v-if='true'&gt;{{message}}&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isShow"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    isShow: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>改成 <code>false</code> 交看不到內容<br><img src="https://i.imgur.com/aYS5P2G.png"></p><p>改成 <code>true</code> 後又會顯示出來。<br><img src="https://i.imgur.com/1zsgsy1.png"></p><p><a href="https://codepen.io/gleofgja/pen/ZEBamEY?editors=1011">DEMO</a></p><h3 id="2-v-if-amp-v-else"><a href="#2-v-if-amp-v-else" class="headerlink" title="2. v-if &amp; v-else"></a>2. v-if &amp; v-else</h3><p><code>v-if</code> 很好理解，在 <code>true</code> 的狀況下就會顯示，在 <code>false</code> 的狀況下會顯示 <code>v-else</code> 內的內容。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isShow"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>&gt;</span>{{elseMessage}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    elseMessage: <span class="hljs-string">'我是 v-else'</span>,</span><br><span class="line">    isShow: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>原本是 <code>v-if</code> 判斷為 <code>true</code> 的狀況下顯示 <code>Hello World</code><br><img src="https://i.imgur.com/ROUJyD8.png"></p><p>那如過改成 <code>false</code> 就會顯示 <code>v-else</code> 的內容，如下圖<br><img src="https://i.imgur.com/YTOXJk7.png"></p><p><a href="https://codepen.io/gleofgja/pen/jOVaQWj?editors=1011">DEMO</a></p><h3 id="3-v-if-、-v-else-if-amp-v-else"><a href="#3-v-if-、-v-else-if-amp-v-else" class="headerlink" title="3. v-if 、 v-else-if &amp; v-else"></a>3. v-if 、 v-else-if &amp; v-else</h3><p>這寫法也很簡單，我們用分數來決定顯示的內容。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"score &gt;= 90"</span>&gt;</span>大於90分以上，頂標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"score &gt;= 60 &amp;&amp; score &lt;= 89"</span>&gt;</span>介於60分以上，89分以下，均標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">"score &lt;= 59 "</span>&gt;</span>低於59分以下，低標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    score: <span class="hljs-number">90</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>因為 <code>score</code> 預設是 90 ，所以會顯示頂標<br><img src="https://i.imgur.com/ocoFVTp.png"></p><p>如果我把分數改成 80，顯示下圖<br><img src="https://i.imgur.com/P0oXUA1.png"></p><p>再把分數改成 50，顯示下圖<br>最後一次寫的是<code>app.score = 50</code> 所以會被覆蓋掉上面 80 分的<br><img src="https://i.imgur.com/L2WiuZr.png"></p><p><a href="https://codepen.io/gleofgja/pen/VwmrVbX?editors=1011">DEMO</a></p><h3 id="4-computed-寫法"><a href="#4-computed-寫法" class="headerlink" title="4. computed 寫法"></a>4. computed 寫法</h3><p>除了以上寫法還可以靈活使用上一篇文章提到的計算屬性 <code>computed</code>，如果只是 <code>v-if</code>、<code>v-else</code> 的話沒什麼關係，但如果有很多計算的話比較推薦使用 <code>computed</code> 寫法同時可以增強閱讀性。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"score &gt;= 90"</span>&gt;</span>大於90分以上，頂標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"score &gt;= 60 &amp;&amp; score &lt;= 89"</span>&gt;</span>介於60分以上，89分以下，均標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">"score &lt;= 59 "</span>&gt;</span>低於59分以下，低標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>computed : {{finalScore}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    score: <span class="hljs-number">90</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    finalScore() {</span><br><span class="line">      <span class="hljs-keyword">let</span> showMessage = <span class="hljs-string">''</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.score &gt;= <span class="hljs-number">90</span>) {</span><br><span class="line">        showMessage = <span class="hljs-string">'大於90分以上，頂標'</span></span><br><span class="line">      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.score &gt;= <span class="hljs-number">60</span> &amp;&amp; <span class="hljs-built_in">this</span>.score &lt;= <span class="hljs-number">89</span>) {</span><br><span class="line">        showMessage = <span class="hljs-string">'介於60分以上，89分以下，均標'</span></span><br><span class="line">      } <span class="hljs-keyword">else</span> {</span><br><span class="line">        showMessage = <span class="hljs-string">'低於59分以下，低標'</span></span><br><span class="line">      }</span><br><span class="line">      <span class="hljs-keyword">return</span> showMessage</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/psRgJbO.png"></p><p>將分數改成 80 ，顯示下圖<br><img src="https://i.imgur.com/1eJ0hNv.png"></p><p>再改成 50，顯示下圖<br>( 最後一次寫是 <code>app.score = 50</code> 所以會覆蓋掉 80 分 )<br><img src="https://i.imgur.com/Y2E6gHZ.png"></p><p><a href="https://codepen.io/gleofgja/pen/gOLXQXZ?editors=1011">DEMO</a></p><h3 id="5-條件渲染的實作"><a href="#5-條件渲染的實作" class="headerlink" title="5. 條件渲染的實作"></a>5. 條件渲染的實作</h3><p>在輸入使用者資料的時候可以切換使用者類型</p><p>利用 <code>v-if</code> 、<code>v-else</code> 來判斷我要顯示的內容，在切換的時候再用 <code>click</code> 判斷 <code>v-if</code> 接收到的值是 <code>true</code> 還是 <code>false</code>。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isUser"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"username"</span>&gt;</span>使用者姓名: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"username"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"useremail"</span>&gt;</span>使用者信箱: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"mail"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"user-email"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"isUser = !isUser"</span>&gt;</span>切換類型<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    isUser: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>透過點擊按鈕可以切換輸入框<br><img src="https://i.imgur.com/1z96aHx.png"></p><p><a href="https://codepen.io/gleofgja/pen/XWNzywe?editors=1011">DEMO</a></p><h3 id="6-v-show"><a href="#6-v-show" class="headerlink" title="6. v-show"></a>6. v-show</h3><p><code>v-show</code> 的用法也相當簡單，跟 <code>v-if</code> 的用法一樣，但是差別只在於 <font color="#FF0000">DOM</font> 的顯示。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"show"</span>&gt;</span>{{vIfShow}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"show"</span>&gt;</span>{{vShow}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"show = !show"</span>&gt;</span>切換類型<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    vIfShow: <span class="hljs-string">'v-if 顯示'</span>,</span><br><span class="line">    vShow: <span class="hljs-string">'v-show 顯示'</span>,</span><br><span class="line">    show: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/8zJjbPk.png"></p><p>用開發者工具看到對應的 DOM，兩者在 <code>true</code> 的狀態下都會顯示<br><img src="https://i.imgur.com/Y0iDEsR.png"></p><p>兩者在 false 的狀態下，顯示下圖<br><img src="https://i.imgur.com/Bj3fkFK.png"></p><p>( 標註一下上上比較清楚 )<br><img src="https://i.imgur.com/6gMM3ZG.png"></p><p><a href="https://codepen.io/gleofgja/pen/JjbOwoZ?editors=1010">DMEO</a></p><p>結論:<br>兩個判斷皆為<font color="#FF0000"> <code>false</code> </font>時</p><ol><li><code>v-if</code> <font color="#FF0000">對應的 DOM 會消失</font>。</li><li><code>v-show</code> 的 <font color="#FF0000">DOM 不會消失</font>，它只是用了 css 效果的 <code>display: none</code>。</li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=36">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;用 &lt;code&gt;v-if&lt;/code&gt;、&lt;code&gt;v-show&lt;/code&gt; 的條件判斷決定選染的內容。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="v-if" scheme="https://pktseng.github.io/tags/v-if/"/>
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="v-show" scheme="https://pktseng.github.io/tags/v-show/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 基本語法( 二 )</title>
    <link href="https://pktseng.github.io/2021/02/23/Vue%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%952/"/>
    <id>https://pktseng.github.io/2021/02/23/Vue%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%952/</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-03-26T16:13:11.309Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>在模板中可以直接使用插值語法顯示 data 中的資料，但是在某些狀況下有些資料還是要經過計算再顯示，或是多個資料結合或是重複顯示，這時候就會使用到 computed 計算屬性。</p><p>還有 v-on 監聽事件的修飾符跟實際應用。</p><a id="more"></a><h2 id="計算屬性-computed"><a href="#計算屬性-computed" class="headerlink" title="計算屬性 ( computed )"></a>計算屬性 ( computed )</h2><h3 id="1-計算屬性的基本使用"><a href="#1-計算屬性的基本使用" class="headerlink" title="1. 計算屬性的基本使用"></a>1. 計算屬性的基本使用</h3><p>之前有提到過 mustache 語法，可以簡單的顯示資料，如果一個資料沒什麼大礙，但有很多資料的話呢? 以下示範。</p><p><code>firstName</code> 跟 <code>LastName</code> 如果中間想有空格，會有兩種寫法，如下。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    LastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>會顯示下圖<br><img src="https://i.imgur.com/eW0GGIz.png"></p><p>那如果今天要顯示 5~10 個呢? 如下</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>這樣的話太長了，如果綁定的 key 值變更的話上面就要改 5 次，如果只需要改一次的話就會比較輕鬆，這時候有兩種方法可以使用 : methods 、 computed。</p><h4 id="一-methods-寫法"><a href="#一-methods-寫法" class="headerlink" title="( 一 ) methods 寫法"></a>( 一 ) methods 寫法</h4><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>methods 寫法 : {{getFullName()}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面第 4 行比第 2、3 行簡潔多了。<br>把重複的動作寫成函式，再呼叫實例裡面的函式。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    LastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    getFullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.LastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>這樣就算 data 裡面的 key 值變更，也只要更改 methods 裡面的的 key 值，而且只改一次就全部完成。</p><p>顯示如下<br><img src="https://i.imgur.com/fPvACnw.png"></p><p><a href="https://codepen.io/gleofgja/pen/BaQwOqZ?editors=1011">DEMO</a></p><p>不過一般 mustache 語法裡面只通常只放變數，放函式感覺很奇怪，這時候就可以用 computed 。</p><h4 id="二-computed"><a href="#二-computed" class="headerlink" title="( 二 ) computed"></a>( 二 ) computed</h4><p>當資料裡面產生<font color="#FF0000">變化</font>的時候才會執行。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   methods 有小括號，是函式 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>methods 寫法 : {{getFullName()}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   computed 沒有小括號，是變數 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>computed 寫法 : {{fullName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    LastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.LastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    getFullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.LastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示如下。<br><img src="https://i.imgur.com/eitEos0.png"></p><p><code>methods</code> 寫法會在 mustache 裡面加上小括號，那是一個函式，<br><code>computed</code> 寫法只會在 mustache 裡面放變數，不會有小括號。</p><p><a href="https://codepen.io/gleofgja/pen/mdOqbLp?editors=1010">DEMO</a></p><h3 id="2-計算屬性的複雜操作"><a href="#2-計算屬性的複雜操作" class="headerlink" title="2. 計算屬性的複雜操作"></a>2. 計算屬性的複雜操作</h3><p>計算陣列內的總價格</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Total Price : {{totalPrice}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    books: [</span><br><span class="line">      { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'html、css 書籍'</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">110</span> },</span><br><span class="line">      { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'JavaScript 書籍'</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">220</span> },</span><br><span class="line">      { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'Vue 書籍'</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">330</span> },</span><br><span class="line">      { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'React 書籍'</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">440</span> },</span><br><span class="line">    ],</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    totalPrice() {</span><br><span class="line">      <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span></span><br><span class="line">      <span class="hljs-comment">// for( let i=0; i&lt; this.books.length; i++){</span></span><br><span class="line">      <span class="hljs-comment">//   total+= this.books[i].price</span></span><br><span class="line">      <span class="hljs-comment">// }</span></span><br><span class="line">      <span class="hljs-comment">// return total</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// for in 寫法</span></span><br><span class="line">      <span class="hljs-comment">// for( let i in this.books){</span></span><br><span class="line">      <span class="hljs-comment">//   total+= this.books[i].price</span></span><br><span class="line">      <span class="hljs-comment">// }</span></span><br><span class="line">      <span class="hljs-comment">// return total</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// for of 寫法</span></span><br><span class="line">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> book <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>.books) {</span><br><span class="line">        total += book.price</span><br><span class="line">      }</span><br><span class="line">      <span class="hljs-keyword">return</span> total</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/xR6WUEd.png"></p><p><a href="https://codepen.io/gleofgja/pen/qBqVWLr?editors=1010">DEMO</a></p><h3 id="3-計算屬性的-setter-amp-getter"><a href="#3-計算屬性的-setter-amp-getter" class="headerlink" title="3. 計算屬性的 setter &amp; getter"></a>3. 計算屬性的 setter &amp; getter</h3><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName + ' ' + lastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/mqO38pT.png"></p><p>由於用 mustache 語法寫的話太複雜了，加上如果要重複利用的話有太冗長，所以都會使用 computed 計算屬性。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName + ' ' + LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>對應 computed 寫法: {{fullName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/voadrLG.png"></p><p>就跟上面所寫的一樣，不過接下來要加上 get &amp; set 屬性，這才是 computed 屬性的完整寫法。</p><p>如果沒有 set 方法的話都是默認 get 方法的值，也就是<font color="#FF0000">只讀屬性</font>。<br>例如我只在 get 方法裡面返回 hello 字串。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// html 模板一樣</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    <span class="hljs-comment">// fullName(){</span></span><br><span class="line">    <span class="hljs-comment">//   return this.firstName+ ' '+ this.LastName</span></span><br><span class="line">    <span class="hljs-comment">// }</span></span><br><span class="line">    fullName: {</span><br><span class="line">      set() {},</span><br><span class="line">      get() {</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">'hello'</span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/CXbFJLV.png"></p><p>一般情況下我們只會用到 get 方法，不會使用到 set 方法，因為不希望別人隨便設定一些奇怪的值，寫法如下。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName: {</span><br><span class="line">      get() {</span><br><span class="line">        <span class="hljs-comment">// return 'hello'</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/QbBmqZq.png"></p><p>也因為一般情況下都會使用到 get 方法，所以上面的寫法會簡化成最一開始的寫法。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="line">    },</span><br><span class="line">    <span class="hljs-comment">// fullName:{</span></span><br><span class="line">    <span class="hljs-comment">// set(){</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// },</span></span><br><span class="line">    <span class="hljs-comment">// get(){</span></span><br><span class="line">    <span class="hljs-comment">// return 'hello'</span></span><br><span class="line">    <span class="hljs-comment">// return this.firstName+ ' '+ this.lastName</span></span><br><span class="line">    <span class="hljs-comment">// }</span></span><br><span class="line">    <span class="hljs-comment">// }</span></span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/AHOs9WN.png"></p><p>所以當我們在使用 computed 屬性時， mustache 語法裡面就不需要家小括號，因為在使用 computed 屬性時他會去調用 <code>computed</code> 裡面的 <code>get</code>。</p><p>那如果真想要在 computed 裡面加上 set 的話也可以。<br>在 set 方法裡面必須傳入參數。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{fullName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    <span class="hljs-comment">// fullName(){</span></span><br><span class="line">    <span class="hljs-comment">//   return this.firstName+ ' '+ this.LastName</span></span><br><span class="line">    <span class="hljs-comment">// }</span></span><br><span class="line">    fullName: {</span><br><span class="line">      set(newValue) {</span><br><span class="line">        <span class="hljs-keyword">const</span> names = newValue.split(<span class="hljs-string">' '</span>)</span><br><span class="line">        <span class="hljs-built_in">this</span>.firstName = names[<span class="hljs-number">0</span>]</span><br><span class="line">        <span class="hljs-built_in">this</span>.lastName = names[<span class="hljs-number">1</span>]</span><br><span class="line">      },</span><br><span class="line">      get() {</span><br><span class="line">        <span class="hljs-comment">// return 'hello'</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在還沒 set 之前顯示下圖<br><img src="https://i.imgur.com/tCcyaJ6.png"></p><p>還沒更改前是 Lebron Jamse ，用開發者工具使用更改 <code>fullName</code> 之後如下圖<br><img src="https://i.imgur.com/h2NFSD7.png"></p><p>會改變的原因是更改了 <code>data</code> 裡面的 <code>firstName</code> &amp; <code>lastName</code> 這兩個更改就代表 <code>get</code> 方法裡面的 <code>this.firstName+ ' '+ this.lastName</code> 也會跟著更改，那<code>this.firstName+ ' '+ this.lastName</code> 更改就代表 <code>fullName</code> 被更改了。</p><p>總結一下，90%情況下 set 方法是不會寫的所以會省略掉，那省略掉後就會有更簡潔的寫法，如下。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.LastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/WNoXbpj?editors=1011">DEMO</a></p><h2 id="監聽事件"><a href="#監聽事件" class="headerlink" title="監聽事件"></a>監聽事件</h2><h3 id="1-v-on"><a href="#1-v-on" class="headerlink" title="1. v-on"></a>1. v-on</h3><p>監聽是前端在開發時常常用到的屬性，主要是監聽事件的發生，例如:滑鼠點擊、拖曳、鍵盤點擊…等等。</p><p>那在 Vue 當中監聽事件的語法為 <code>v-on</code> ，語法糖為 <code>@</code>。</p><p>以下示範用監聽滑鼠點擊來做一個簡單的計數器</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{count}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"minus"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    count: <span class="hljs-number">0</span>,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    add() {</span><br><span class="line">      <span class="hljs-built_in">this</span>.count++</span><br><span class="line">    },</span><br><span class="line">    minus() {</span><br><span class="line">      <span class="hljs-built_in">this</span>.count--</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>利用間聽 click 事件來判斷當前要做的事。<br>當我們點擊 + 號按鈕的時候用 v- on 監聽同時綁定 add 事件，那 add 事件會綁定到 methods 裡面的函式，同理 - 號按鈕也一樣。<br><img src="https://i.imgur.com/USHnefS.png"></p><p><a href="https://codepen.io/gleofgja/pen/OJbOVKa?editors=1011">DEMO</a></p><p>以上皆為 v-on 最基本的使用。接下來要示範傳參數的問題。</p><h3 id="2-v-on-參數問題"><a href="#2-v-on-參數問題" class="headerlink" title="2. v-on 參數問題"></a>2. v-on 參數問題</h3><p>在 methods 觸發 click 事件的時候，要注意傳參數的問題。</p><ol><li>如果不需要另外傳參數的話，那方法後面的小括號就甭加。</li><li>如果需要傳入參數，同時又需要 event 這時就可以用 <code>$event</code> 傳到事件裡面。</li></ol><h4 id="一-事件不傳參數"><a href="#一-事件不傳參數" class="headerlink" title="( 一 )事件不傳參數"></a>( 一 )事件不傳參數</h4><p>以下示範在沒傳參數的情況下小括號加與不加的差別。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1()"</span>&gt;</span>按鈕1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn2"</span>&gt;</span>按鈕2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {},</span><br><span class="line">  methods: {</span><br><span class="line">    btn1() {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕1，有小括號'</span>)</span><br><span class="line">    },</span><br><span class="line">    btn2() {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕2，沒有小括號'</span>)</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如下圖，結果是一樣的，所以在沒傳入參數的話一般都會省略小括號。<br><img src="https://i.imgur.com/rK9e5za.png"></p><p><a href="https://codepen.io/gleofgja/pen/yLVPYWb?editors=1011">DEMO</a></p><h4 id="二-定義事件，模板省略的小括號，但是-methods-本身需要傳入一個參數。"><a href="#二-定義事件，模板省略的小括號，但是-methods-本身需要傳入一個參數。" class="headerlink" title="( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。"></a>( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。</h4><p>把按鈕 2 的參數拿掉，用 methods 傳入參數的話怎麼樣?</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1(123)"</span>&gt;</span>按鈕1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn2"</span>&gt;</span>按鈕2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {},</span><br><span class="line">  methods: {</span><br><span class="line">    btn1(abc) {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕1，有小括號'</span>, abc)</span><br><span class="line">    },</span><br><span class="line">    btn2(abc) {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕2，沒有小括號'</span>, abc)</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如下圖，用開發者工具看 log<br><img src="https://i.imgur.com/nuTivWl.png"></p><p>點擊 按鈕 1 會正常出現，但是 按鈕 2 要用瀏覽器的開發者工具查看<br><img src="https://i.imgur.com/49MfVdV.png"></p><p>會回傳 MouseEvent ，就是回傳瀏覽器的 event ，因為 Vue 會把默認瀏覽器產生的 event 事件當作參數傳到函式裡面。</p><p>所以按鈕 2 的參數要寫 <code>event</code> 不是 <code>abc</code> 。</p><p><a href="https://codepen.io/gleofgja/pen/dyOZYxa?editors=1011">DEMO</a></p><h4 id="三-定義函式時，需要傳入參數跟-event"><a href="#三-定義函式時，需要傳入參數跟-event" class="headerlink" title="( 三 ) 定義函式時，需要傳入參數跟 event"></a>( 三 ) 定義函式時，需要傳入參數跟 event</h4><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1(123, event)"</span>&gt;</span>按鈕1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {},</span><br><span class="line">  methods: {</span><br><span class="line">    btn1(abc, event) {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕1，有小括號'</span>, abc, event)</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/SLBqBB9.png"></p><p>不過傳入的第一個參數是數字型別，如果改成 abc 的話就會報錯，如下圖<br><img src="https://i.imgur.com/7w7itVd.png"></p><p>因為改成 abc 後第一個參數就是<font color="#FF0000">變數</font>了，所以他會去 <code>data</code> 裡面找 value 值</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;button @click='btn1(123, $event)'&gt;按鈕1&lt;/button&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1(abc, $event)"</span>&gt;</span>按鈕1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 <code>data</code> 裡面添加 <code>abc</code> 的 <code>value</code> 值。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    abc: <span class="hljs-string">'第一個參數變成變數了'</span>,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    btn1(abc, event) {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕1，傳入兩個參數'</span>, abc, event)</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>這樣就可以正常顯示了。<br>同理第一個參數改成字串，那他就會顯示字串!<br><img src="https://i.imgur.com/LsK9vBj.png"></p><p><a href="https://codepen.io/gleofgja/pen/bGBYErg?editors=1011">DEMO</a></p><h3 id="3-v-on-修飾符"><a href="#3-v-on-修飾符" class="headerlink" title="3. v-on 修飾符"></a>3. v-on 修飾符</h3><p>在 JavaScript 裡面，都會監聽一些事件，例如 submit<br>但是我們都會用 event.preventDefault() 來阻擋事件冒泡，同理 v-on 也可以。<br>寫法也較為簡單:</p><ol><li><code>event.stopPropagation()</code> 會寫成 <code>.stop</code></li><li><code>event.preventDefault()</code> 會寫成 <code>.prevent</code></li><li>只觸發一次 <code>.once</code></li><li>只監聽特定按鍵，如:<code> @keyup.enter</code> 、 <code>@keyup.按鍵碼</code></li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=14">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a><br><a href="https://ithelp.ithome.com.tw/articles/10198999">[筆記][JavaScript]所謂的「停止事件」到底是怎麼一回事？</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在模板中可以直接使用插值語法顯示 data 中的資料，但是在某些狀況下有些資料還是要經過計算再顯示，或是多個資料結合或是重複顯示，這時候就會使用到 computed 計算屬性。&lt;/p&gt;
&lt;p&gt;還有 v-on 監聽事件的修飾符跟實際應用。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    <category term="computed" scheme="https://pktseng.github.io/categories/Vue/computed/"/>
    
    <category term="v-on" scheme="https://pktseng.github.io/categories/Vue/computed/v-on/"/>
    
    
    <category term="v-on" scheme="https://pktseng.github.io/tags/v-on/"/>
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="computed" scheme="https://pktseng.github.io/tags/computed/"/>
    
  </entry>
  
  <entry>
    <title>Vue - MVVM 簡介</title>
    <link href="https://pktseng.github.io/2021/02/22/mvvm/"/>
    <id>https://pktseng.github.io/2021/02/22/mvvm/</id>
    <published>2021-02-21T16:00:00.000Z</published>
    <updated>2021-03-26T16:13:10.661Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>MVVM 是由 Model、View 跟 ViewModel 這三個東西之間的作用，可以比較好管理開發者的內容。</p><a id="more"></a><ul><li>Model：管理資料來源如 API 和本地資料庫</li><li>View：顯示 UI 和接收使用者動作</li><li>ViewModel：從 Model 取得 View 所需的資料</li></ul><p><img src="https://i.imgur.com/KBZjJJN.png"></p><p>使用者透過 view 操作來影響 view model ，只要在 view 裡面操做， view model 同時也會跟著變動，同時也修改 model 的內容，那 view model 資料發生變動，又會同時改變 View 顯示的內容，所以他們三個是互相交互作用的。</p><p>Vue 強大的地方在於 Vue 組件，他可以把龐大的 App 分裝，把相關的功能集中，讓這些組件獨立封裝而且好維護也好測試。</p><p><img src="https://i.imgur.com/u71Nukr.png"></p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://hiskio.com/courses/145">精通 VueJS 前端開發完全指南</a><br><a href="https://ithelp.ithome.com.tw/articles/10192829">MVVM 架構</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h2&gt;&lt;p&gt;MVVM 是由 Model、View 跟 ViewModel 這三個東西之間的作用，可以比較好管理開發者的內容。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="MVVM" scheme="https://pktseng.github.io/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 基本語法( 一 )</title>
    <link href="https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/"/>
    <id>https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/</id>
    <published>2021-02-21T16:00:00.000Z</published>
    <updated>2021-03-26T16:13:09.815Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>簡單介紹 Vue 模板基本語法的使用，包含 : <code>v-bind</code>、<code>mustache</code> 、<code>v-once</code>、<code>v-html</code>、<code>v-text</code> …等等。<br>以下範例皆使用 Vue 2.6.1 版本。</p><a id="more"></a><h2 id="一、插值語法"><a href="#一、插值語法" class="headerlink" title="一、插值語法"></a>一、插值語法</h2><h3 id="1-mustache"><a href="#1-mustache" class="headerlink" title="1. mustache"></a>1. mustache</h3><p>在 <code>html</code> 模板中插入 <code>mustache</code> 語法。<br>以下為官方文件的案例。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">' hello world'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/WNoZzEv?editors=1010">codePen</a></p><h4 id="表達式"><a href="#表達式" class="headerlink" title="表達式"></a>表達式</h4><p>mustache 不只可以寫簡單的變數，還可以寫出簡單的表達式。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  {{message}}</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   以下示範簡單的表達式 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName + lastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   由於中間名字黏在一起不好看，所以中間加入空格，寫法有兩種 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>第一種: {{firstName +' '+ lastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>第二種: {{firstName}} {{lastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   計算 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>計算: {{count * 2}}<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">' hello world'</span>,</span><br><span class="line">    firstName: <span class="hljs-string">'Tseng'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'ken'</span>,</span><br><span class="line">    count: <span class="hljs-number">100</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/MrHyWSW.png"></p><p><a href="https://codepen.io/gleofgja/pen/QWGqmmN?editors=1010">codePen</a></p><h3 id="2-v-once"><a href="#2-v-once" class="headerlink" title="2. v-once"></a>2. v-once</h3><p>這項指令後面不需要填寫任何表達式，而且這指令只會渲染元素或是組件一次，並且不會隨資料改變而改變。</p><p>一樣使用官方案例</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">' hello world'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>但是我們只要在開發者模式下更改 message 變數的資料，裡面的值就會更著改變，如下圖<br><img src="https://i.imgur.com/PLWWSOK.png"></p><p>但是加上 <code>v-once</code> 語法</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-once</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- JS 一樣不變 --&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然後用更改 <code>message</code> 裡面的資料，如下圖<br><img src="https://i.imgur.com/rIForuj.png"><br>可以看到沒有加上<code> v-once</code> 語法的 <code>message</code> 被改變的，而加上 <code>v-once</code> 的沒有被改變。</p><p><a href="https://codepen.io/gleofgja/pen/vYyejBo?editors=1011">Demo</a></p><h3 id="3-v-html"><a href="#3-v-html" class="headerlink" title="3. v-html"></a>3. v-html</h3><p>有時候在 <code>data</code> 資料裡面會有涵蓋標籤的語法。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>{{url}}<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">' hello world'</span>,</span><br><span class="line">    url: <span class="hljs-string">'&lt;a href="https://www.google.com"&gt;Google&lt;/a&gt;'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在這樣的狀況下會顯示<br><img src="https://i.imgur.com/nvAXbQi.png"></p><p>要正常顯示就要加上 <code>v-html</code>，意思是要以 <code>html</code> 的型式展示</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>{{url}}<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>這樣就可以正常顯示了<br><img src="https://i.imgur.com/ExiDSjs.png"></p><p>不過這指令要小心，因為有很大的機會會有 XSS 攻擊，比較不推薦此種寫法。</p><p><a href="https://codepen.io/gleofgja/pen/MWbEGeQ?editors=1011">DEMO</a></p><h3 id="4-v-text"><a href="#4-v-text" class="headerlink" title="4. v-text"></a>4. v-text</h3><p>一樣使用官網的案例</p><p>之前都是用 <code>mustache</code> 顯示 <code>message</code> 的值，同樣的方式是在標籤上面加上 <code>v-text</code> 不需要 <code>mustache</code> 也一樣可以顯示</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如下圖<br><img src="https://i.imgur.com/Qn8MkXU.png"></p><p>但是這種寫法比較不靈活，如果我們想在後面加入一些字</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}，你好啊!!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"message"</span>&gt;</span>，你好啊!!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>v-text</code> 會直接覆蓋掉標籤裡面的值，如下圖<br><img src="https://i.imgur.com/B0RNWmX.png"></p><p><a href="https://codepen.io/gleofgja/pen/ZEBXoaj?editors=1011">DEMO</a></p><h2 id="二、動態綁定"><a href="#二、動態綁定" class="headerlink" title="二、動態綁定"></a>二、動態綁定</h2><p>在現代網頁中的每個連結或是圖片都是用動態來顯示的，不是寫死的。</p><h3 id="1-v-bind"><a href="#1-v-bind" class="headerlink" title="1. v-bind"></a>1. v-bind</h3><p>可以動態綁定</p><ul><li><code>a</code> 元素的 <code>href</code></li><li><code>img</code> 元素的 <code>src</code></li></ul><blockquote><p>因為之後會大量使用，所以 v-bind 的語法糖為 “ : “ (冒號)</p></blockquote><p>以前最一開始的寫法是直接在 img 標籤上寫入網址，如下</p><p><a href="https://cn.vuejs.org/index.html">(圖片來自官網)</a></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  {{message}}</span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cn.vuejs.org/images/logo.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>顯示如下<br><img src="https://i.imgur.com/a0QQsSp.png"></p><p>但是現在要動態的方式顯示，寫法如下:<br>給 <code>src</code> 屬性動態綁定(v-bind) <code>imgUrl</code>，一旦綁定後 <code>imgUrl</code> 就是<font color="#FF0000">變數</font>!!那這變數就會去 vue 實例裡面找他的 <code>value</code> 值，再把 <code>value</code> 值放交給 <code>src</code> 。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  {{message}}</span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;img src="https://cn.vuejs.org/images/logo.png" alt=""&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imgUrl"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    imgUrl: <span class="hljs-string">'https://cn.vuejs.org/images/logo.png'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示的效果跟上圖是一樣的。</p><hr><p>同樣的換成 <code>a</code> 連結型式</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 命令式 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.google.com/"</span>&gt;</span>寫死的 Google<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 聲明式 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">"linkUrl"</span>&gt;</span>動態綁定的Google<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    linkUrl: <span class="hljs-string">'https://www.google.com/'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>雖然顯示結果是一樣的，但在開發網頁的時候不可能把所有連結都寫死在標籤上，而是透過後端伺服器請求資料然後<font color="#FF0000">動態綁定</font>在標籤上。<br><img src="https://i.imgur.com/SAeBZzc.png"></p><p><a href="https://codepen.io/gleofgja/pen/poNWVYO?editors=1011">DEMO</a></p><h3 id="2-v-bind-綁定-className"><a href="#2-v-bind-綁定-className" class="headerlink" title="2. v-bind 綁定 className"></a>2. v-bind 綁定 className</h3><p>上面講完基本<font color="#FF0000">連結</font>的動態綁定，接下來要講<font color="#FF0000"> className </font>的用動態綁定。</p><p>如果想在某個 className 上加點屬性，從最原始寫法到進階動態綁定的寫法，如下</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 最原始的 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"active"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 動態綁定一 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"active"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>除了以上兩種，再來要綁<font color="#FF0000">物件型式</font>的，在 class 後面要綁定的是一個<font color="#FF0000">物件</font>，寫法跟對應的值都寫在下面程式碼裡面。</p><p>當 <code>className</code> 被判斷為 <code>true</code> 的時候，那 <code>className</code> 的屬性就會被加到 <code>class</code> 裡面，這樣就可以透過控制布林值來決定要不要顯示。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--&lt;h2 :class='{key1: value1, key2: value2}'&gt;{{message}}&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--&lt;h2 :class='{className1: 布林值1, className2: 布林值2}'&gt;{{message}}&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"{active: true, line: false}"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-css">  <span class="hljs-selector-class">.active</span> {</span></span><br><span class="line">    color: red;</span><br><span class="line">  }</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/Qk3OWBc.png"><br><img src="https://i.imgur.com/wAf31lb.png"><br>如上圖一旦屬性判斷為 true 的時候就顯示。</p><p>但是布林值不可能寫在標籤上面，必須要動態綁定。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"{active: isActive, line: isLine}"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    isActive: <span class="hljs-literal">true</span>,</span><br><span class="line">    isLine: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如果兩個都為 <code>true</code> 就同時看到兩個 class ( <code>active</code> &amp; <code>line</code> )。<br><img src="https://i.imgur.com/R9k1xtb.png"></p><p>但是現在我可以透過開發者工具來控制。<br><img src="https://i.imgur.com/0SVyrVT.png"><br><code>isLine</code> 變成 <code>false</code> 後就不會顯示了。<br><img src="https://i.imgur.com/NCPMv0k.png"></p><p>不過這樣控制顯示結果也點不對，總不可能叫使用者去開發者工具那邊更改吧，所以這例稍微超前一下要用 v-on 來做切換，它是一個監聽的指令。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"{active: isActive, line: isLine}"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"change"</span>&gt;</span>Change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    isActive: <span class="hljs-literal">true</span>,</span><br><span class="line">    isLine: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    change() {</span><br><span class="line">      <span class="hljs-built_in">this</span>.isActive = !<span class="hljs-built_in">this</span>.isActive</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>這樣就可以用按鈕來做動態切換了。<br><img src="https://i.imgur.com/Nodj8p7.png"></p><p><a href="https://codepen.io/gleofgja/pen/xxRXzyg?editors=1011">DEMO</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=14">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;簡單介紹 Vue 模板基本語法的使用，包含 : &lt;code&gt;v-bind&lt;/code&gt;、&lt;code&gt;mustache&lt;/code&gt; 、&lt;code&gt;v-once&lt;/code&gt;、&lt;code&gt;v-html&lt;/code&gt;、&lt;code&gt;v-text&lt;/code&gt; …等等。&lt;br&gt;以下範例皆使用 Vue 2.6.1 版本。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="v-bind" scheme="https://pktseng.github.io/categories/v-bind/"/>
    
    <category term="mustache" scheme="https://pktseng.github.io/categories/v-bind/mustache/"/>
    
    <category term="v-once" scheme="https://pktseng.github.io/categories/v-bind/mustache/v-once/"/>
    
    <category term="v-html" scheme="https://pktseng.github.io/categories/v-bind/mustache/v-once/v-html/"/>
    
    <category term="v-text" scheme="https://pktseng.github.io/categories/v-bind/mustache/v-once/v-html/v-text/"/>
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/v-bind/mustache/v-once/v-html/v-text/Vue/"/>
    
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="v-bind" scheme="https://pktseng.github.io/tags/v-bind/"/>
    
    <category term="mustache" scheme="https://pktseng.github.io/tags/mustache/"/>
    
    <category term="v-once" scheme="https://pktseng.github.io/tags/v-once/"/>
    
    <category term="v-html" scheme="https://pktseng.github.io/tags/v-html/"/>
    
    <category term="v-text" scheme="https://pktseng.github.io/tags/v-text/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 拖曳效果</title>
    <link href="https://pktseng.github.io/2021/02/08/dragdrop/"/>
    <id>https://pktseng.github.io/2021/02/08/dragdrop/</id>
    <published>2021-02-07T16:00:00.000Z</published>
    <updated>2021-03-26T16:13:10.183Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述:"></a>功能描述:</h2><ol><li>刷新頁面打亂排列順序。</li><li>可以拖曳方塊排列順序。</li><li>確認排列順序是否正確。</li></ol><p><img src="https://i.imgur.com/1xYdtS0.png"></p><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission30">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission30/index.html">Demo</a></p><a id="more"></a><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>苗栗國必去前10名景點<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>請利用拖曳排列出這10名的順序<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"draggable-list"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"draggable-list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"check-btn"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"check-btn"</span>&gt;</span></span><br><span class="line">  Check Attractions</span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fas fa-paper-plane"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>拖曳方塊不能寫死，因為每次刷新頁面順序會打亂，打亂的順序排名用 javascript 撰寫。</p><h2 id="CSS-樣式"><a href="#CSS-樣式" class="headerlink" title="CSS 樣式"></a>CSS 樣式</h2><p>拖曳的時候會呈現色差</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.draggable-list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.over</span> <span class="hljs-selector-class">.draggable</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eaeaea</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>用顏色確認目前排列順序是否正確。</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.draggable-list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.right</span> <span class="hljs-selector-class">.person-name</span> {</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#3ae374</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.draggable-list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.wrong</span> <span class="hljs-selector-class">.person-name</span> {</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff3838</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>按鈕縮放效果</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.check-btn</span><span class="hljs-selector-pseudo">:active</span> {</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.98</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>點擊按鈕不要有邊框線條</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.check-btn</span><span class="hljs-selector-pseudo">:focus</span> {</span><br><span class="line">  <span class="hljs-attribute">outline</span>: none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1-綁定-DOM-，給初始值"><a href="#1-綁定-DOM-，給初始值" class="headerlink" title="1. 綁定 DOM ，給初始值"></a>1. 綁定 DOM ，給初始值</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> draggableList = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#draggable-list'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> checkBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#check-btn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> attractions = [</span><br><span class="line">  <span class="hljs-string">'客家大院'</span>,</span><br><span class="line">  <span class="hljs-string">'後龍鎮半天寮休閒文化園區 - 好望角'</span>,</span><br><span class="line">  <span class="hljs-string">'天空之城'</span>,</span><br><span class="line">  <span class="hljs-string">'九華山 天空步道'</span>,</span><br><span class="line">  <span class="hljs-string">'苗栗客家圓樓'</span>,</span><br><span class="line">  <span class="hljs-string">'雅聞七里香玫瑰森林'</span>,</span><br><span class="line">  <span class="hljs-string">'龍騰斷橋(魚藤坪斷橋)'</span>,</span><br><span class="line">  <span class="hljs-string">'飛牛牧場'</span>,</span><br><span class="line">  <span class="hljs-string">'銅鑼炮仗花海公園'</span>,</span><br><span class="line">  <span class="hljs-string">'舊銅鑼隧道'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> dragStartIndex</span><br><span class="line"><span class="hljs-keyword">const</span> listItems = []</span><br></pre></td></tr></tbody></table></figure><h3 id="2-產生-DOM-並呈現在畫面上"><a href="#2-產生-DOM-並呈現在畫面上" class="headerlink" title="2. 產生 DOM 並呈現在畫面上"></a>2. 產生 DOM 並呈現在畫面上</h3><blockquote><p>展開運算符 ( Spread Operator ) :<br>是把一個陣列展開成個別值，這個運算符後面必定接著一個陣列。<br>最常見的是用來組合 ( 連接 ) 陣列。</p></blockquote><blockquote><p>其餘運算符 ( Rest Operator ) :<br>是收集其餘的 ( 剩餘的 ) 這些值，轉變成一個陣列。它會用在函式定義時的傳入參數識別名定義 ( 其餘參數, Rest parameters )，以及解構賦值時</p><p>以上兩點引述自 : <a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html">展開運算符與其餘運算符</a></p></blockquote><p><code>setAttribute( 'data-名稱', 'value 值')</code> : 設定元件屬性，就是在元件上賦予名字跟值。<br>不過這命名不能亂命，為了方面辨識或是避免搞混，在名稱前面會加上 <code>data-</code> 。<br>以下範例用 <code>console</code> 查看<br><img src="https://i.imgur.com/tx1LA4c.png"></p><p>不過上面值是 <code>number</code> ，如果是字串要用 <code>string</code>，以下示範</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 加兩個屬性</span></span><br><span class="line">listItem.setAttribute(<span class="hljs-string">'data-id'</span>, <span class="hljs-string">'dataId'</span>)</span><br><span class="line">listItem.setAttribute(<span class="hljs-string">'data-name'</span>, <span class="hljs-string">'dataName'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/DuEqPBg.png"></p><p>利用<strong>展開運算符</strong>把陣列內的景點變成個別的值，再用 <code>forEach</code> 產生每筆資料，每筆資料用 <code>setAttribute</code> 設定索引值，再把資料加入倒 <code>ul</code> 元件底下。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">creatListItem()</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">creatListItem</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  ;[...attractions].forEach(<span class="hljs-function">(<span class="hljs-params">person, index</span>) =&gt;</span> {</span><br><span class="line">    <span class="hljs-keyword">const</span> listItem = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'li'</span>)</span><br><span class="line">    listItem.setAttribute(<span class="hljs-string">'data-Index'</span>, index) <span class="hljs-comment">//這不是設定className，單純的 name 跟 value</span></span><br><span class="line"></span><br><span class="line">    listItem.innerHTML = <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;span class='number'&gt;<span class="hljs-subst">${index + <span class="hljs-number">1</span>}</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;div class='draggable' draggable='true'&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;p class='person-name'&gt;<span class="hljs-subst">${person}</span>&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;i class='fas fa-grip-lines'&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">    `</span></span><br><span class="line">    listItems.push(listItem)</span><br><span class="line">    draggableList.appendChild(listItem)</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  addEventListeners()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-資料隨機排列"><a href="#3-資料隨機排列" class="headerlink" title="3. 資料隨機排列"></a>3. 資料隨機排列</h3><p>有了資料後，每次刷新頁面資料要隨機排列。<br>要隨機排列就要有亂數，並且把亂數跟字串綁定，這樣每次刷新頁面順序就會是亂的。</p><p>把陣列內的字串用 map 產生出新的陣列 :<br>將字串賦予到 value 裡面，再用 <code>Math.random()</code> 產生亂數，把這些亂數賦予到 sort 裡面，但是目前排列順序還是不對，必須依照我設定的順序跟數字綁定</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;[...attractions].map(<span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> ({ <span class="hljs-attr">value</span>: a, <span class="hljs-attr">sort</span>: <span class="hljs-built_in">Math</span>.random() }))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/asWCFfa.png"></p><ul><li><code> sort()</code> : 把資料依照正確順序排列。<a href="https://codepen.io/gleofgja/pen/LYbNwoE?editors=0011">Codepen</a></li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 本來陣列內數字是亂的，經過 sort 會依照大小排列</span></span><br><span class="line"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">20</span>, <span class="hljs-number">15</span>]</span><br><span class="line"><span class="hljs-built_in">console</span>.log(</span><br><span class="line">  numbers.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>{</span><br><span class="line">    <span class="hljs-keyword">return</span> a - b</span><br><span class="line">  })</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// arrow function</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(numbers.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/rRpF2i2.png"></p><p>看過上面的解釋後，接下來要把陣列內的字串跟正確的數字順序做綁定。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;[...attractions].sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.sort - b.sort)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/WRDnx5f.png"><br>比照上面那張圖，原本是亂掉的，現在依照陣列內的順序讓數字由小到大排列。</p><p>有了順序後，數字不被看見，只要取 value 就好。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.map(<span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> a.value)</span><br></pre></td></tr></tbody></table></figure><h3 id="4-拖曳效果"><a href="#4-拖曳效果" class="headerlink" title="4. 拖曳效果"></a>4. 拖曳效果</h3><p>下表參考自 : <a href="https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/">HTML5 Drag and Drop API 筆記</a><br>| | Drag Source | Drag Target |解釋 |<br>| ——– | ——– | ——– |——– |<br>| 1 | dragstart| |<strong>開始</strong>拖曳元素時觸發此事件|<br>| 2 | drag | dragenter |拖曳元素時觸發此事件|<br>| 3 | | dragover |當元素拖曳到<strong>有效位置放置</strong>則觸發此事件|<br>| 4 | | dragleave |拖曳的元素<strong>離開</strong>有效的位置時觸發|<br>| 5 | | drop |在<strong>有效位置</strong>上<strong>放置</strong>元素時觸發此事件|<br>| 6 | dropend | |當拖曳<strong>結束</strong>時會觸發此事件|</p><blockquote><p>這段來自 : <a href="https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html">製作可拖曳的元素（HTML5 Drag and Drop API）</a> &gt; <img src="https://i.imgur.com/BoqFTzM.png"></p><ul><li><strong>Drag Source</strong> 指的是被點擊要拖曳的物件，也就是藍色的圓，通常是一個 element。</li><li><strong>Drop Target</strong> 指的是拖曳的物件被放置的區域，也就是右邊的綠色區域，通常是一個 div container。</li><li><strong>drag</strong>：在 drag source 被拖曳時會持續被觸發。</li><li><strong>dragover</strong>：當拖曳的 drag source 在 drop target 上方時會持續被觸發。</li></ul></blockquote><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addEventListeners</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> draggables = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.draggable'</span>)</span><br><span class="line">  <span class="hljs-keyword">const</span> dragListItems = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.draggable-list li'</span>)</span><br><span class="line">  <span class="hljs-comment">//選到 ul 底下所有 li ( 因為 li 沒有 calssName ，所以這樣寫)</span></span><br><span class="line"></span><br><span class="line">  draggables.forEach(<span class="hljs-function">(<span class="hljs-params">draggable</span>) =&gt;</span> {</span><br><span class="line">    draggable.addEventListener(<span class="hljs-string">'dragstart'</span>, dragStart)</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  dragListItems.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> {</span><br><span class="line">    item.addEventListener(<span class="hljs-string">'dragover'</span>, dragOver)</span><br><span class="line">    item.addEventListener(<span class="hljs-string">'drop'</span>, dragDrag)</span><br><span class="line">    item.addEventListener(<span class="hljs-string">'dragenter'</span>, dragEnter)</span><br><span class="line">    item.addEventListener(<span class="hljs-string">'dragleave'</span>, dragLeave)</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>拖曳時更換顏色</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dragEnter</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log('Event: ', 'dragEnter')</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.classList.add(<span class="hljs-string">'over'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dragLeave</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log('Event: ', 'dragLeave')</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.classList.remove(<span class="hljs-string">'over'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>當我拖曳時 <code>dragstart</code> 就會開始抓取當前的索引值</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dragStart</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log('Event: ', 'dragStart')</span></span><br><span class="line">  <span class="hljs-comment">//拖曳的時候抓取索引值</span></span><br><span class="line">  dragStartIndex = +<span class="hljs-built_in">this</span>.closest(<span class="hljs-string">'li'</span>).getAttribute(<span class="hljs-string">'data-Index'</span>)</span><br><span class="line">  <span class="hljs-comment">//上面設定索引值，這裡抓索引值，+ 號改型別用</span></span><br><span class="line">  <span class="hljs-comment">// console.log(dragStartIndex)</span></span><br><span class="line">  <span class="hljs-comment">// console.log(typeof dragStartIndex)</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果沒有 <code>+</code> 號，當我拖曳第一個，用 <code>console</code> 看會顯示下圖<br><img src="https://i.imgur.com/lQOGwH6.png"></p><p>有 <code>+</code> 號<br><img src="https://i.imgur.com/ZTQX984.png"></p><p>抓到索引值後把拖曳到該欄位的索引值對換。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dragDrag</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log('Event: ', 'dragDrag')</span></span><br><span class="line">  <span class="hljs-keyword">const</span> dragEndIndex = +<span class="hljs-built_in">this</span>.getAttribute(<span class="hljs-string">'data-Index'</span>)</span><br><span class="line">  swapItems(dragStartIndex, dragEndIndex)</span><br><span class="line">  <span class="hljs-built_in">this</span>.classList.remove(<span class="hljs-string">'over'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swapItems</span>(<span class="hljs-params">from, to</span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> itemOne = listItems[<span class="hljs-keyword">from</span>].querySelector(<span class="hljs-string">'.draggable'</span>)</span><br><span class="line">  <span class="hljs-keyword">const</span> itemTwo = listItems[to].querySelector(<span class="hljs-string">'.draggable'</span>)</span><br><span class="line"></span><br><span class="line">  listItems[<span class="hljs-keyword">from</span>].appendChild(itemTwo)</span><br><span class="line">  listItems[to].appendChild(itemOne)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-確認清單順序是否正確"><a href="#5-確認清單順序是否正確" class="headerlink" title="5. 確認清單順序是否正確"></a>5. 確認清單順序是否正確</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkOrder</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  listItems.forEach(<span class="hljs-function">(<span class="hljs-params">listItem, index</span>) =&gt;</span> {</span><br><span class="line">    <span class="hljs-keyword">const</span> personName = listItem.querySelector(<span class="hljs-string">'.draggable'</span>).innerText.trim()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (personName !== attractions[index]) {</span><br><span class="line">      listItem.classList.add(<span class="hljs-string">'wrong'</span>)</span><br><span class="line">    } <span class="hljs-keyword">else</span> {</span><br><span class="line">      listItem.classList.remove(<span class="hljs-string">'wrong'</span>)</span><br><span class="line">      listItem.classList.add(<span class="hljs-string">'right'</span>)</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">checkBtn.addEventListener(<span class="hljs-string">'click'</span>, checkOrder)</span><br></pre></td></tr></tbody></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html">展開運算符與其餘運算符</a><br><a href="https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/">HTML5 Drag and Drop API 筆記</a><br><a href="https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html">製作可拖曳的元素（HTML5 Drag and Drop API）</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;功能描述&quot;&gt;&lt;a href=&quot;#功能描述&quot; class=&quot;headerlink&quot; title=&quot;功能描述:&quot;&gt;&lt;/a&gt;功能描述:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;刷新頁面打亂排列順序。&lt;/li&gt;
&lt;li&gt;可以拖曳方塊排列順序。&lt;/li&gt;
&lt;li&gt;確認排列順序是否正確。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/1xYdtS0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission30&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission30/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://pktseng.github.io/categories/JavaScript/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScript/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="dragDrop" scheme="https://pktseng.github.io/tags/dragDrop/"/>
    
    <category term="JavaScript" scheme="https://pktseng.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
