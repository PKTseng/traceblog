{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next-master/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-master/source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/css/insight.scss","path":"css/insight.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/images/check.svg","path":"images/check.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/images/exclamation.svg","path":"images/exclamation.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/images/info.svg","path":"images/info.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/images/question.svg","path":"images/question.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/images/quote-left.svg","path":"images/quote-left.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/css/fonts/untitled-font-1.eot","path":"css/fonts/untitled-font-1.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/css/fonts/untitled-font-1.svg","path":"css/fonts/untitled-font-1.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/css/fonts/untitled-font-1.woff","path":"css/fonts/untitled-font-1.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/css/fonts/untitled-font-1.ttf","path":"css/fonts/untitled-font-1.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-minos/source/images/image.png","path":"images/image.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1597283352175},{"_id":"themes/hexo-theme-next-master/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/_config.yml","hash":"5ad229b5e92208f393be42fc212008942a09b999","modified":1599186214143},{"_id":"themes/hexo-theme-next-master/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1597335583653},{"_id":"themes/hexo-theme-next-master/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/footer.swig","hash":"e5a2bdf45fde7cea9cb03993f5a0fd960326ed5d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1596424932000},{"_id":"themes/hexo-theme-next-master/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1596424932000},{"_id":"public/2020/08/13/hello-world/index.html","hash":"62937bf62dc6ea5bd6e9a99051d59ec17df45413","modified":1597285674829},{"_id":"public/archives/index.html","hash":"9a9941efa674b6d50f0e1ca4e54dd7a660830c25","modified":1617873573960},{"_id":"public/archives/2020/index.html","hash":"7aeaf5b3e8d7a199cef820bd7664895ee992b4ff","modified":1616775293220},{"_id":"public/archives/2020/08/index.html","hash":"f36e111220c0794770a35aeff3cac971253d3d7c","modified":1616775293220},{"_id":"public/index.html","hash":"c22dc373e549e68708666627245dc9918ec1c870","modified":1617877822469},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1610342294642},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1597283603223},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1597283603223},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1597283603223},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1597283603223},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1597283603223},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1597283603223},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1597283603223},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1597283603223},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1597283603223},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1597283603223},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1597283603223},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1597283603223},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1597283603223},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1597283603223},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1597283603223},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1597283603223},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1597283603223},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1597283603223},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1597283603223},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1597283603223},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1597283603223},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1597283603223},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1597283603223},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1597283603223},{"_id":"public/css/main.css","hash":"9f345042902674c8c36544c2fcb0ee4d4a8a5cb8","modified":1597283603223},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1597283603223},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1597283603223},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1597283603223},{"_id":"source/_posts/202008013-d-dlex.md","hash":"875e01fe3289fbf8377a0dee7cdce6f8f2976687","modified":1599270331764},{"_id":"public/2020/08/13/202008013-d-dlex/index.html","hash":"76e6f1ab247f36dcfbbb943b58e970ee0e39cb15","modified":1610350574537},{"_id":"public/tags/d-flex/index.html","hash":"18d84bf8d6dcd12e7a9f56ba4743d1360e864dc9","modified":1616405246317},{"_id":"source/_posts/20200813-vue-if.md","hash":"5b14da9e918b901a1b18784e44f3f6c243b49f7e","modified":1610283992776},{"_id":"public/2020/08/13/20200813-vue-if/index.html","hash":"4d4f80897881234bb543a18a30ad9dad85571dce","modified":1610350574537},{"_id":"public/tags/vue/index.html","hash":"109889ce1686ff3414f8534cccb3181b657c3e08","modified":1610350574537},{"_id":"source/_posts/20200813-javascript.md","hash":"29d8960ff043a26c4f88e9005d264ec002e056bd","modified":1599271107130},{"_id":"source/_posts/20200813-javascript作用域.md","hash":"c59984d4d59491b0b914fc372da030fc48c041ef","modified":1600692037605},{"_id":"source/_posts/20200813-v-for.md","hash":"630a72315a87bca3b4b36aa4adbe86e9d9c55d8c","modified":1610283980659},{"_id":"source/_posts/20200813-vuemvvm.md","hash":"7fd480dc1fa99a93c5ecfe01c39f27d0e3db4970","modified":1610284002119},{"_id":"public/2020/08/13/20200813-vuemvvm/index.html","hash":"141566390a400d158bdc84520fb753b4fc478601","modified":1610350574537},{"_id":"public/tags/javascript/index.html","hash":"8c295f1f92a46bfe8895bf837b81c92413e8737e","modified":1610350574537},{"_id":"public/2020/08/13/20200813-javascript作用域/index.html","hash":"a9d3ab17f42a9bee32920f09e0463f5a8a576473","modified":1610350574537},{"_id":"public/2020/08/13/20200813-javascript/index.html","hash":"f362247d0f9daf1e61287a873f32e9981ab77947","modified":1610350574537},{"_id":"public/2020/08/13/20200813-v-for/index.html","hash":"3bbb6a275371b59d623c13f3e8c60a267419025a","modified":1610350574537},{"_id":"source/_posts/20200813-vueon.md","hash":"2938f5c038b8ab6e1ef284384775cf5692a4200b","modified":1610284006099},{"_id":"source/_posts/20200813-select.md","hash":"a40fb0ce02da72817b2a304fd8af0cd92092b022","modified":1599270990737},{"_id":"source/_posts/20200813-vue-for.md","hash":"646eb2b79d5d5b96de016eb499e427fa99607c84","modified":1597895522360},{"_id":"public/2020/08/13/20200813-select/index.html","hash":"01e8d9ec42dbcdb68ab9ba68c883ed7c90fd77a3","modified":1610350574537},{"_id":"public/2020/08/13/20200813-vueon/index.html","hash":"85e35ccae9c2247314ad2db412e36f315c54b387","modified":1610350574537},{"_id":"public/2020/08/13/20200813-vue-for/index.html","hash":"a04dc8cf68768e91e00459406a02bdae27624468","modified":1599238488776},{"_id":"source/_posts/20200813-vue.md","hash":"a648a3f6b5982963220d2cff83db1fab32f064fc","modified":1610283998208},{"_id":"public/2020/08/13/20200813-vue/index.html","hash":"38981249f0dc314c7289fd8a9c60cac46da6e13f","modified":1610350574537},{"_id":"themes/hexo-theme-next-master/source/images/1.jpg","hash":"65a3077d9e2d5c4fd563ec7ef738084a5af31350","modified":1597332555793},{"_id":"public/images/1.jpg","hash":"65a3077d9e2d5c4fd563ec7ef738084a5af31350","modified":1597332609259},{"_id":"source/tags/index.md","hash":"fab4f36995542a87f6e1646ec0b878affbbf85c8","modified":1610282908221},{"_id":"public/tags/index.html","hash":"81ff1f478fb017eaec1d9b1cac3631420867edc2","modified":1617873573960},{"_id":"source/categories/index.md","hash":"b8aab4f3c208ff0caf632d98209a1572774e895c","modified":1610282909631},{"_id":"public/categories/index.html","hash":"7eebe4e2f78dafe7bcea7d457d9ee67d6c480130","modified":1617873573960},{"_id":"public/categories/vue/index.html","hash":"e11720c10e9a288a7f3e2002f34588753ab7f032","modified":1597334068598},{"_id":"public/categories/javascript/index.html","hash":"5d3fb635879de645a3a923d9e754e67ccb3a4912","modified":1610278640070},{"_id":"public/tags/this/index.html","hash":"7a421ba4e2b7b8daac4092ea3d90ff621394148e","modified":1616775293220},{"_id":"public/categories/Vue/index.html","hash":"f20c917396d6045c7f5a1552cca3bfe7c39f6b8e","modified":1617877822469},{"_id":"public/tags/MVVM/index.html","hash":"56a17f1a0872f836d18b90c7f19ff972fa3bd0db","modified":1614010041746},{"_id":"public/tags/v-if/index.html","hash":"e0379cf52c9db4395881cd8ed9ae4aaa343e9112","modified":1616406578428},{"_id":"public/tags/v-for/index.html","hash":"318c334753e9d966fbed88057a899dcb8b14b828","modified":1610350574537},{"_id":"public/tags/v-on/index.html","hash":"bda6b8193f6c4deb744bbc18ed1a7537e012c867","modified":1614072008357},{"_id":"public/tags/v-model/index.html","hash":"1a0e4bd13b508b50b42369ef03e1eab7d50777ed","modified":1616406578428},{"_id":"public/tags/執行環境/index.html","hash":"adc958155ede61c437c32b2024b3ff26d6f9281c","modified":1616405246317},{"_id":"source/_posts/20200814-vue-cli.md","hash":"e2e2922c59e678ff9fdabe33ea2ea3e68a22a8a2","modified":1610284010916},{"_id":"public/archives/page/2/index.html","hash":"13de362fc3d821916f17c4bcef7ed75c456c04ce","modified":1617873573960},{"_id":"public/archives/2020/page/2/index.html","hash":"176e4ced5c0d3698208afa557ac5b7ba54e36817","modified":1610350574537},{"_id":"public/archives/2020/08/page/2/index.html","hash":"92148adab7439d0c4336becb564d973fa474b36c","modified":1610350574537},{"_id":"public/tags/vue-cli/index.html","hash":"04a78ba4b11bdbd289fd7350a82c669abe09c7d6","modified":1597407564028},{"_id":"public/2020/08/14/20200814-vue-cli/index.html","hash":"45c60929f6c66dba27c2cc6f583b301ee2930fdd","modified":1610350574537},{"_id":"public/page/2/index.html","hash":"d04a7e6428d0c719d6550e88ff163efa7fd82283","modified":1617873573960},{"_id":"public/tags/cli/index.html","hash":"7a2953934ec0127df631fcde7695a74884388ded","modified":1610350574537},{"_id":"source/_posts/220200816-javasript.md","hash":"45df4ad86c83fc33eb66c47ec36f5a5c28afa11b","modified":1599270259839},{"_id":"public/2020/08/16/220200816-javasript/index.html","hash":"a5776b94988bd0a631a089ded41d5cb68b1a37dc","modified":1610350574537},{"_id":"public/tags/eventListener-callback-function-event-onSubmit/index.html","hash":"77299ecaee3d023904bbf5be14026acff327b560","modified":1597895586013},{"_id":"public/categories/JavaScript/index.html","hash":"18fa57f2d8c67a26df38b59f1ca65114cda9858e","modified":1617877822469},{"_id":"source/_posts/20200816-AJAX.md","hash":"e0b03258cf9881e33435e026569bb97b3ec16825","modified":1599270418725},{"_id":"public/2020/08/16/20200816-AJAX/index.html","hash":"8cb93058d07d52231c340d9601a972c77284ed7e","modified":1610350574537},{"_id":"public/tags/AJAX/index.html","hash":"fd39138fbdc9d81e0d08eea3cdbd014768846418","modified":1610350574537},{"_id":"source/_posts/20200819-圖片讀取.md","hash":"079b0da8bdc750ad160d1ebe135c35e9a8718a47","modified":1610284016402},{"_id":"public/tags/Vue/index.html","hash":"0a1f0664c6328f250c87f5cd34156616fd978a23","modified":1617877822469},{"_id":"public/tags/v-else/index.html","hash":"c073bea1bc1737e824c9d3f3aee93ed804140794","modified":1610350574537},{"_id":"public/2020/08/20/20200819-圖片讀取/index.html","hash":"3785246f034fcdcb21388ae782a76d2c45358ff9","modified":1610350574537},{"_id":"public/tags/v-bind/index.html","hash":"ec1c16e74671c097b23c30c3716f84074209b915","modified":1616238310477},{"_id":"public/tags/eventListener/index.html","hash":"7ac05cbee55512593b10d49736af101747d161b6","modified":1616405246317},{"_id":"public/tags/callback-function/index.html","hash":"67f38399be8603953dbac51c7989dba4f13f4d7d","modified":1616405246317},{"_id":"public/tags/event/index.html","hash":"08389faf217b8db59295c8318de26c0b0fef43fc","modified":1616405246317},{"_id":"public/tags/onSubmit/index.html","hash":"62a7ff8271700f2d62cf910c3c71583784e3d3cb","modified":1616405246317},{"_id":"public/categories/Flex/index.html","hash":"e7da2fe0852f8dbd9bd84caadfccffa77c2c8091","modified":1616405246317},{"_id":"source/_posts/偵聽案件.md","hash":"e7b18d6baecd4832a5ff09c7cd6685b5543865d6","modified":1599269730057},{"_id":"public/2020/08/20/偵聽案件/index.html","hash":"cee313ce4a8229381187214bfb4cd525d886bbf1","modified":1610350574537},{"_id":"source/_posts/語法修飾.md","hash":"9a6b54223f347390635dce0a77122bebd1c91447","modified":1615013954226},{"_id":"public/categories/Vue/page/2/index.html","hash":"ecb28dd319dc80254738b6e7446ef5a0de51cabf","modified":1610350574537},{"_id":"public/tags/preventDefault/index.html","hash":"c27faf310fd9f3f09f17548e1da8ab53b475c0bb","modified":1615014220747},{"_id":"public/tags/stop/index.html","hash":"9cd73c3950182f5336baf487ff6619689a9821f5","modified":1615014220747},{"_id":"public/tags/self/index.html","hash":"ee91a353b58ee6575fd47028644b5e6b66cd74a8","modified":1615014220747},{"_id":"public/2020/08/20/語法修飾/index.html","hash":"0b47b86f1ccac4438dae20d72a0512f9d42c3111","modified":1616224612757},{"_id":"source/_posts/Vue 組件的註冊與使用.md","hash":"64313d3525475e93684926a5a617c60e21d5bef5","modified":1599269504693},{"_id":"public/2020/08/20/Vue 組件的註冊與使用/index.html","hash":"296f085fb5fc20fd4a706cd0c6bce5bad4b59fa8","modified":1610350574537},{"_id":"public/tags/component/index.html","hash":"c76daff57beeb662700d7d17d10fb0325e270197","modified":1616406578428},{"_id":"source/_posts/表單綁定.md","hash":"fe10c45c4276f2ebf9df67273b6ad813a1782190","modified":1599270185849},{"_id":"public/2020/08/21/表單綁定/index.html","hash":"6152786385c642c2668ce47b7468a81fcaa4ce97","modified":1610350574537},{"_id":"source/_posts/表單綁定—按鈕.md","hash":"acde220cedc52c2619ad221cb6b271a41ce3faa8","modified":1599269820719},{"_id":"public/2020/08/21/表單綁定—按鈕/index.html","hash":"e6c52a51a9795467d21ccfc4330ae5450664e12e","modified":1610350574537},{"_id":"source/_posts/下拉選單.md","hash":"d5e973f281850dd63fea631e09c3b2aa9614181c","modified":1599270227274},{"_id":"public/2020/08/21/下拉選單/index.html","hash":"0584b3f35302682c29f8a8181fbccc0588d28587","modified":1610350574537},{"_id":"source/_posts/圖片上船.md","hash":"a02ca827ee2ec62728d38d5550c2a2e5f14f7ae9","modified":1608037962999},{"_id":"public/archives/page/3/index.html","hash":"f999023f0400bbd26d24cb689328c2641cfeb588","modified":1610350574537},{"_id":"public/archives/2020/page/3/index.html","hash":"32f3f05b0bf24117d1428777a492e4b1701c3cc8","modified":1610350574537},{"_id":"public/archives/2020/08/page/3/index.html","hash":"e7a47b45274615142aab7d4ae9451a666dd48cae","modified":1610350574537},{"_id":"public/2020/08/22/圖片上船/index.html","hash":"ac22a41ea48498ae73d4cce07ff8b318d770163d","modified":1610350574537},{"_id":"public/page/3/index.html","hash":"ecf73f40b277a9bb865b950ead69a87c904b75a5","modified":1610350574537},{"_id":"source/_posts/data必須是函數.md","hash":"e4cb4ee48ad62c589f32e744abda4d689fc89eb7","modified":1599269993803},{"_id":"public/2020/08/25/data必須是函數/index.html","hash":"b6dd0d13f0ee5c469fe4f895a0974a558d1196a2","modified":1610350574537},{"_id":"public/tags/Vue-組件的-data/index.html","hash":"855dfaac4b861827568c3d48dfb444cb759eeff6","modified":1610350574537},{"_id":"source/_posts/router.md","hash":"3436c16d08453d72cbf196930e03187ab18bdfe7","modified":1615013956838},{"_id":"public/2020/08/30/router/index.html","hash":"9ea1c2c6f31313ec5a3892a52039c499ea5326a3","modified":1616406578428},{"_id":"public/tags/Router/index.html","hash":"da917336ac936f200a98af680e76db7da441cb21","modified":1615014220747},{"_id":"source/_posts/computed.md","hash":"2a452fbb4cd0e7d861a57d6400888e0c30018977","modified":1599186492760},{"_id":"public/archives/2020/09/index.html","hash":"e11a82a44b17d391b27f8b4632ae18345446ebeb","modified":1616406578428},{"_id":"public/2020/09/02/computed/index.html","hash":"e486671a2505c5d560f0fc20657546ef158f0eee","modified":1610350574537},{"_id":"public/tags/computed/index.html","hash":"4ab5a5adeda176ddca5d7352d87dba3e569812bc","modified":1616226363412},{"_id":"source/_posts/電商網站-1.md","hash":"cbf4ec71e89e521dfac2597af597b42dc97bc82d","modified":1599447122288},{"_id":"public/2020/09/04/電商網站-1/index.html","hash":"e8bb93cb880da3fb8edbe3ecc30dd93bb9a820e0","modified":1610350574537},{"_id":"public/categories/電商網站/index.html","hash":"7fedfe415634b95e0fc7266f0174f45b62efee6a","modified":1616405246317},{"_id":"public/tags/用-v-for-把一個物件轉換為一組元素/index.html","hash":"69268f5d93ffccc8e502b4f8a088323fe0a7a515","modified":1599921195383},{"_id":"public/tags/用-v-for-把陣列轉換為一組元素/index.html","hash":"147329600a5e9fe12b3926152ced468aaf39d424","modified":1599921195383},{"_id":"public/tags/8-1用-v-for-把陣列轉換為一組元素/index.html","hash":"85d3e6a7c508410c87910426343210dca4c8abf1","modified":1616406578428},{"_id":"public/tags/8-2用-v-for-把一個物件轉換為一組元素/index.html","hash":"118abac75309c35bfe529ae8f26cb2113d74c0dd","modified":1616406578428},{"_id":"public/tags/8-3修改陣列或物件的注意事項/index.html","hash":"6eac122339a5fb598e3558a5f19741f013080f92","modified":1616406578428},{"_id":"source/_posts/串接上傳檔案 API.md","hash":"502d098aa21a4cb039d6c8341a1f7cd2f23231eb","modified":1607002668449},{"_id":"public/archives/2020/12/index.html","hash":"8e084ef971fe8755ab7d099c85e10cea35559325","modified":1615021935131},{"_id":"public/2020/12/03/串接上傳檔案 API/index.html","hash":"369599494d88459ca4f1f6f039733d6251c3ebcf","modified":1610350574537},{"_id":"public/tags/API/index.html","hash":"b6905d49c0eadc8518651b8e2b5351175530a262","modified":1610350574537},{"_id":"source/_posts/Loading.md","hash":"2771604ca5633ceea258af6374f452881b2ce0d2","modified":1610351043999},{"_id":"public/2020/12/13/Loading/index.html","hash":"d68e75a57155531a98da73dd7a07852529c2911e","modified":1616775293220},{"_id":"source/_posts/ZAP.md","hash":"a61c621b9d6bedcdbfc1914cd476339b36f9c9ca","modified":1615021929790},{"_id":"public/categories/ZAP/index.html","hash":"45232bc68fb98ec3eac750a20f6f5604b076c37d","modified":1615021935131},{"_id":"public/2020/12/15/ZAP/index.html","hash":"839d5bfc21a3e6a42dc522caa90b1d27e80ddf1d","modified":1616775293220},{"_id":"public/tags/OWASP/index.html","hash":"7138df58c27c70dba13cf45db9a51d14d0b63b2d","modified":1615021935131},{"_id":"public/2020/12/14/圖片上船/index.html","hash":"540495af081fbebaa1424bb1584e04850dfcaa0a","modified":1608037924423},{"_id":"source/_posts/cmder.md","hash":"9827ee245d2857b010c8b2b004b8e0f83c960999","modified":1610353479666},{"_id":"public/categories/chocolatey/index.html","hash":"c3fe167a50701a139a8c3a9f3690035999a18289","modified":1610422349266},{"_id":"public/categories/chocolatey/cmder/index.html","hash":"67a279c1252f945ebcf146982d7b4346864bb2ac","modified":1610283858046},{"_id":"public/tags/chocolatey/index.html","hash":"b680d5d0d2fe34d561140cc97598127bc1b82e14","modified":1610422349266},{"_id":"public/2020/12/16/cmder/index.html","hash":"8420344686c042e7fab39fe03e90ce4b0d1412fa","modified":1610422349266},{"_id":"public/tags/cmder/index.html","hash":"8d8bf4d4003a2c6c2ffd78d30c98b6c6eb3a2173","modified":1610422349266},{"_id":"source/_posts/WSL.md","hash":"61458a7c41be7d49c149333a21402872b9bd9d5c","modified":1610353454853},{"_id":"public/categories/WSL1/index.html","hash":"021f95b2b2e585a5a9a1595a9ed441957512956b","modified":1612491978772},{"_id":"public/tags/WSL1/index.html","hash":"c529f77ab93d29fac620755e705144fc0fe3bef3","modified":1612491978772},{"_id":"public/2020/12/17/WSL/index.html","hash":"1116dde6ed10a64bfacfcde66f773e7efe248fbb","modified":1616775293220},{"_id":"source/_posts/git.md","hash":"a1684e0c6cff7ca485f3e7225dfa9022d9dd08f0","modified":1615013758685},{"_id":"public/categories/Git/index.html","hash":"38824e317e0f48d80693ec5140f69963d6c7a7fe","modified":1615014220747},{"_id":"public/2020/12/20/git/index.html","hash":"416453240d31b0950a8373e5812f565b5a733613","modified":1616775293220},{"_id":"public/tags/Git/index.html","hash":"7702e546b6a0a51b71f2b9825235560b2026f645","modified":1615014220747},{"_id":"source/_posts/pullRequest.md","hash":"90dc9b649a431945da6dcf819b9195a9e548a887","modified":1615013816336},{"_id":"public/archives/page/4/index.html","hash":"e8a1fd532496d8c07242fb11fd8e5ce8bafd30e4","modified":1610350574537},{"_id":"public/archives/2020/page/4/index.html","hash":"8e53a4e7e885cd828bfb645bcd7014842e2eec1e","modified":1610350574537},{"_id":"public/categories/Pull-Request/index.html","hash":"9df4242c326f4e3d849f85798e945eca4bca46a4","modified":1615014220747},{"_id":"public/page/4/index.html","hash":"13c9e18974b7cc8ef4fc37bbd0f8982296ef61b6","modified":1610350574537},{"_id":"public/tags/Pull-Request/index.html","hash":"bd5303180d282764327dc44dcf2b743a0c58a5b1","modified":1615014220747},{"_id":"public/tags/git-clone/index.html","hash":"79d57538d870d7808b5c4e0379b23e975a148329","modified":1615014220747},{"_id":"public/2020/12/28/pullRequest/index.html","hash":"cb7f98d4b32814a210b9160acf96499335c1f2cb","modified":1615014220747},{"_id":"public/tags/git-pull/index.html","hash":"325016e2591ab8887f7d69d0405c74f636e256ff","modified":1615014220747},{"_id":"source/_posts/formVaild.md","hash":"03dbec4b51192e09966d5199371edbfa62d73637","modified":1615021783453},{"_id":"public/tags/formValid/index.html","hash":"a74373fc31b78a6d05d461bd0d970c1f35888905","modified":1611666736428},{"_id":"public/2020/12/31/formVaild/index.html","hash":"1946531df0747f6ebd8ca21d1c77104ee9cd078b","modified":1615021849387},{"_id":"source/_posts/changeRate.md","hash":"1d538697c813876cb963f36295afc0c4ebfc712c","modified":1615021762081},{"_id":"public/categories/Javascript/index.html","hash":"2862b3597f3a444371983b0315e59e98c1712c3b","modified":1610283686420},{"_id":"public/archives/2021/index.html","hash":"e07f644a13bbe7406befe287e6c4b69dea648ba0","modified":1617873573960},{"_id":"public/archives/2021/01/index.html","hash":"114f91dac077ce1147ea871a2946f67a337b711e","modified":1616775293220},{"_id":"public/tags/Javascript/index.html","hash":"ddd59aa67587bc2d226cf671cd9c7121e1caea03","modified":1615021603898},{"_id":"public/tags/jQuery/index.html","hash":"6f810d2da0aab4d50669a684643fcbbd0fa58b41","modified":1615021849387},{"_id":"public/2021/01/08/changeRate/index.html","hash":"bbaed2c930b4c0d96d6d1951ad444cf2bbe77cdf","modified":1616775293220},{"_id":"source/tags/index-1.md","hash":"98c21ed18301d9534952398ab4a2c76eaa95d954","modified":1610278400123},{"_id":"public/tags/index-1.html","hash":"a9aa69a2ca40ca33e8b780a3995b8804626e0809","modified":1612491978772},{"_id":"public/categories/Javascript/jQuery/index.html","hash":"60b639458b166279fcba37bef2d83837714078d2","modified":1610280851147},{"_id":"public/categories/作品集/index.html","hash":"4945e00595fa99fc510db237f0e19b39c82c9ca4","modified":1611666736428},{"_id":"public/categories/Javascript/jQuery/作品集/index.html","hash":"2b2fa0914c94dfe7f62a5f23f042578d58620b54","modified":1610280851147},{"_id":"public/categories/作品集/JavaScript/index.html","hash":"a516e0eba152c1fe1945d6d7f094f826bbdb5296","modified":1610280851147},{"_id":"public/categories/作品集/JavaScript/jQuery/index.html","hash":"54bf3ca6dc3e40e95a8a913b42c8664eefa4f1ab","modified":1610280851147},{"_id":"public/tags/作品集/index.html","hash":"61b6986a02ac73e03cfd2ede87390c0cd5f2e89b","modified":1616775293220},{"_id":"source/categories/index-1.md","hash":"10f2a9e82580b293822458f93eb791e02c440ef5","modified":1610282723949},{"_id":"source/tags/index-2.md","hash":"2eab7d2971c8aa7e26dd11a18796a20513537cb5","modified":1610282721934},{"_id":"public/categories/index-1.html","hash":"4c8f6813c0386196771af774ec2bc0247d29badb","modified":1612491978772},{"_id":"public/tags/index-2.html","hash":"2125d25642be4fda8ce455235caa2aee58853745","modified":1612491978772},{"_id":"themes/hexo-theme-minos-master/.gitignore","hash":"8b02e7219e2dd9b50d198819fd7d8f74ebc9db2a","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/_config.zh-tw.yml","hash":"b98ada331e7cc46fe9e8204a03521c1034edd329","modified":1610328964527},{"_id":"themes/hexo-theme-minos-master/package-lock.json","hash":"e1fbecec56fb65379bf651f21fb485376e692b38","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/package.json","hash":"f9d450db80149dea6c372990cdf51dfde901e5cc","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/LICENSE","hash":"ca01a2d52b59346e82f079c593df6cb26dd9a7a5","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/README.md","hash":"ba6b4e134d718704cfd030e106bf24d6ef8b496d","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/languages/ru.yml","hash":"8e5a58176bf943432ba6e4f1981d9b98fdea36a4","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/languages/en.yml","hash":"ef98c8674fed78f2350598ee8b15fcd53fbd2ae5","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/languages/fr.yml","hash":"cca90260b00842bf73fadb3154c2969102cf80c0","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/languages/es.yml","hash":"5c35950221411e34e7a9821d0b0671da9a458d8c","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/languages/ko.yml","hash":"1acf3f959f1d2b4f7a77e7e82851821aa8635362","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/languages/zh-cn.yml","hash":"9c5a489b11a056d1ea7b9d4a0e127aef9e192ee4","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/languages/zh-tw.yml","hash":"8a24f96802aa7c370a3a13699b33b48fe25cdeed","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/category.ejs","hash":"403c646878834964883ac41e63952f7b1595c0ba","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/index.ejs","hash":"dff9e199d394f82c5416b814f9e644edbe4090f0","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/archive.ejs","hash":"679464151f92877b2e2fe1815b2ad4d5adc65cf9","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/post.ejs","hash":"68b84a717efc5ca59ee9eb6202ccf05c5a8abda5","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/tag.ejs","hash":"5593c7cf9618ef5650c779ed9d75424f057aa210","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/lib/i18n.js","hash":"fcc8d7bda55e81d1eb7db557475dd85fb4594d97","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/lib/rfc5646.js","hash":"8ecf38d0ec7145720ea8e888da314131712770e8","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/scripts/10_i18n.js","hash":"3758dcf997e19b70ee962bad9d4fcf1bead4501b","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/scripts/01_check.js","hash":"e53508ef82a1518ed7e663ce2d87544c20a50779","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/scripts/99_config.js","hash":"d41a5df0a442728fbc66514476fe043e416d7438","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/scripts/99_tags.js","hash":"468e3bcf01768f8b4417ecc3bf8435e08dbc4192","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/scripts/99_content.js","hash":"d6a7d9c6743ff5040a0c60953c9428bd7e364cb7","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/categories.ejs","hash":"0b133f0788e68a4a53507f3cf66dde3e6f211c7e","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/tags.ejs","hash":"e4a9909119294f131a45f10b2cb1058af5fb9be1","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/layout.ejs","hash":"45588aa46857cf9403fa79d738ab37a46ddcf773","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/comment/facebook.ejs","hash":"e73b6f93d98b27ba9068c1685874ecccfbac737b","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/comment/disqus.ejs","hash":"aaafb757565fed92a56acbce2808d70b8f90bd37","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/comment/gitment.ejs","hash":"430416210933b7edcbfcc67ede4aa55539da2750","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/comment/youyan.ejs","hash":"3d6cf9c523a7a5510ec2864bb29f861f9bb78af3","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/comment/valine.ejs","hash":"b0eef3bea0a54b4b66f860ad69889f87e0408f22","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/common/languages.ejs","hash":"89665c656a1ffebc9c97f03e7f9c12dd1d90702a","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/common/footer.ejs","hash":"367c5f2e69c66d4d6fbd8beeade0b60024ce9e6e","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/common/head.ejs","hash":"9de4305062340907e13f7f59e63d2530378329f7","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/common/article.ejs","hash":"45d276fb6bfcee6690cfffa7cbdec18709cd8766","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/common/paginator.ejs","hash":"8f5060e4c8a86a3f4e58455c41c98e831e23e4a4","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/plugins/clipboard.ejs","hash":"a448757bb8a2c29bd9501c625f7df5087bb18dbe","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/common/scripts.ejs","hash":"7a5a5271930423b95046836597e30e31fa708f66","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/plugins/gallery.ejs","hash":"7c2becafdf6b60e677cdd5756b9d55eba2af4944","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/plugins/google-analytics.ejs","hash":"2a9d944a60aff7df27def5215bdc071e605c3c42","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/plugins/katex.ejs","hash":"c8a7ecdc5802007f8fec46a299790ce4e0834acd","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/common/navbar.ejs","hash":"cf2fa42bb6d4802feb6dfaaea9edec7e0562a6df","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/plugins/mathjax.ejs","hash":"b92fc2b30040e09145d80ebb9bad6813dda8acf2","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/css/insight.scss","hash":"f785fc6574d2853c660be39b2e3149d4846b577f","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/search/insight.ejs","hash":"6fb7d27ef40145d8587b46b44a43516135b5a81a","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/images/check.svg","hash":"029b8b3523b7daa4005983b4463cd93408308aab","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/css/style.scss","hash":"dec87561b7d835e51e09aa0ffd30f63379b67a9e","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/layout/search/google-cse.ejs","hash":"a6bf5c30339735126efa7efa684f9eb14dd6136a","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/images/exclamation.svg","hash":"b2db56f2cc13fce73dbea46c7b446d9bcb3bf0fd","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/images/info.svg","hash":"c8aa387e935ba9a7fa72c5dd000b7d46f2e030c4","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/images/question.svg","hash":"7153fa2a0c21e32da6a1f96a333d8b66a178569d","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/js/script.js","hash":"601aa73cbf5c3d4349f56499c696994b0be59b75","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/css/fonts/untitled-font-1.eot","hash":"3f3f192a8fa0dde81f6cf617e14b6a4ec32e5a10","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/js/insight.js","hash":"eb23c31141784eef7300f1d1c548950e77883f56","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/css/fonts/untitled-font-1.ttf","hash":"38bde5ceb6f16831c9a11b634bf921ba6f889f2f","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/css/fonts/untitled-font-1.woff","hash":"a21774065f3ac67ac7f75c5f78fe10d28fae34c5","modified":1570458281000},{"_id":"themes/hexo-theme-minos-master/source/css/fonts/untitled-font-1.svg","hash":"f6345250aa2ce8db131b0daa1880b0d731474e9c","modified":1570458281000},{"_id":"public/content.json","hash":"c065bba461ee8900400f81e99dfce23f47660af5","modified":1617877822469},{"_id":"public/images/info.svg","hash":"60613abd8f8522c6cebdbb4bf7bf3fcc482245bd","modified":1610422349266},{"_id":"public/images/exclamation.svg","hash":"213125a083bcef89806b4285190e050eef2660f2","modified":1610422349266},{"_id":"public/images/check.svg","hash":"16e9a53d7c49621be8e3f1a28b11bcf5e751105e","modified":1610422349266},{"_id":"public/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1610422349266},{"_id":"public/images/question.svg","hash":"e4005d2eabfbd3bdd291236f56a4d385e3b337b2","modified":1610422349266},{"_id":"public/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1610422349266},{"_id":"public/css/fonts/untitled-font-1.eot","hash":"3f3f192a8fa0dde81f6cf617e14b6a4ec32e5a10","modified":1610422349266},{"_id":"public/css/fonts/untitled-font-1.ttf","hash":"38bde5ceb6f16831c9a11b634bf921ba6f889f2f","modified":1610422349266},{"_id":"public/css/fonts/untitled-font-1.woff","hash":"a21774065f3ac67ac7f75c5f78fe10d28fae34c5","modified":1610422349266},{"_id":"public/css/fonts/untitled-font-1.svg","hash":"e00b42e9a0cfd1e2f2e85b9af2e4906c72c6494f","modified":1610422349266},{"_id":"public/css/insight.css","hash":"f376dcda6bb50b708f3206c15a49f7530b3c534d","modified":1610422349266},{"_id":"public/css/style.css","hash":"34f4484d9e0ada10ed0b1b159485f597f84641b6","modified":1610422349266},{"_id":"public/js/script.js","hash":"601aa73cbf5c3d4349f56499c696994b0be59b75","modified":1610422349266},{"_id":"public/js/insight.js","hash":"eb23c31141784eef7300f1d1c548950e77883f56","modified":1610422349266},{"_id":"source/_posts/zh-tw/WSL.md","hash":"bc983786a2e4d481c7145064ea18664f0f3578e4","modified":1608211893790},{"_id":"source/_posts/zh-tw/ZAP.md","hash":"f3812b5cf69f0ca2c146bde1190eb75ea0d6bf1d","modified":1608118139043},{"_id":"source/_posts/zh-tw/pullRequest.md","hash":"d0ad279d8d055c6754c4453e79914139523afa60","modified":1610333072666},{"_id":"public/2020/12/17/zh-tw/WSL/index.html","hash":"da5fbd069159f45601d931d3b4a354625bc74cec","modified":1610347311972},{"_id":"public/2020/12/28/zh-tw/pullRequest/index.html","hash":"f09aa6abdf93977537778343c83682be10655e5c","modified":1610347311972},{"_id":"public/2020/12/15/zh-tw/ZAP/index.html","hash":"b326f729ca1f8876f0289f86552658abb3dca143","modified":1610347311972},{"_id":"themes/hexo-theme-minos-master/_config.yml","hash":"a09f9d92ec5adcb3aafe5b6d0ad9463c02e00f9a","modified":1610381265337},{"_id":"themes/hexo-theme-minos/.gitignore","hash":"1e32cd03954ae9a15e790df87605f9bc11c33e4c","modified":1610329747142},{"_id":"themes/hexo-theme-minos/LICENSE","hash":"c3aeede5ce76bbbf93cec6656644b16bc08f206b","modified":1610329747142},{"_id":"themes/hexo-theme-minos/README.md","hash":"c407e58328acba3e8a9442dbc8401c79cc9e8f36","modified":1610329747143},{"_id":"themes/hexo-theme-minos/_config.yml.example","hash":"af2fefb896612a38258cdf63bd901a4ab4121754","modified":1610329747144},{"_id":"themes/hexo-theme-minos/package-lock.json","hash":"1fdf3ebc293bb2df47fe5c4f833c6797d5e8a546","modified":1610329747174},{"_id":"themes/hexo-theme-minos/package.json","hash":"76b6439e405b7b479535d40bad6d982957ac4fa7","modified":1610329747175},{"_id":"themes/hexo-theme-minos/languages/en.yml","hash":"b0106e055e348cff3dc04bbfa92eaf078887914a","modified":1610329747145},{"_id":"themes/hexo-theme-minos/languages/es.yml","hash":"2492235c429294caef66d220d2b958d147d2a8e7","modified":1610329747145},{"_id":"themes/hexo-theme-minos/languages/fr.yml","hash":"14fe6ca8e0dc50791e1c4d2e190bf75774c1bf0f","modified":1610329747146},{"_id":"themes/hexo-theme-minos/languages/ko.yml","hash":"5cdf4a031fc3fcbab392dec89053e2417485e4c7","modified":1610329747146},{"_id":"themes/hexo-theme-minos/languages/ru.yml","hash":"c7d59fc5906eeb9230ca794515cabd6064e853bc","modified":1610329747147},{"_id":"themes/hexo-theme-minos/languages/zh-cn.yml","hash":"ba7eabb49391804f1d83acd1a4e03d1a73e02089","modified":1610329747148},{"_id":"themes/hexo-theme-minos/languages/zh-tw.yml","hash":"92214b185ceca11bd187fe3ab272978d3f9cd27e","modified":1610329747148},{"_id":"themes/hexo-theme-minos/layout/archive.ejs","hash":"0056d2a0bb655e2e42c9244a3c0031b091401a9d","modified":1610329747149},{"_id":"themes/hexo-theme-minos/layout/categories.ejs","hash":"16317cc94e21afe8f69b2457c8e42121120ab63b","modified":1610329747150},{"_id":"themes/hexo-theme-minos/layout/category.ejs","hash":"587fc7dac77115589ed8cb368ed4a8a2a6f129af","modified":1610329747151},{"_id":"themes/hexo-theme-minos/layout/index.ejs","hash":"64c432857172b1c775bf82c0a60ca1ecdc7d9d21","modified":1610329747162},{"_id":"themes/hexo-theme-minos/layout/layout.ejs","hash":"d1293320d738ac7f097869a4e74f6089a79d1c46","modified":1610329747163},{"_id":"themes/hexo-theme-minos/layout/post.ejs","hash":"bba00a681d797817baf34737467be2eca3bdcfbb","modified":1610329747167},{"_id":"themes/hexo-theme-minos/layout/tag.ejs","hash":"b72bf2ebd9c5d9d7546f448a4331f13dc6b49950","modified":1610329747171},{"_id":"themes/hexo-theme-minos/lib/i18n.js","hash":"ff7cb475f71032aa857174d2bd23aa392ed98709","modified":1610329747173},{"_id":"themes/hexo-theme-minos/layout/tags.ejs","hash":"9b54bfb0c56e54ff89da9a0a390414ef13a14931","modified":1610329747171},{"_id":"themes/hexo-theme-minos/lib/rfc5646.js","hash":"50de178e1fcd2224c99db56227652eb1dbaabe40","modified":1610329747173},{"_id":"themes/hexo-theme-minos/scripts/01_check.js","hash":"799fee2a7e989e211a1727f3f52cec47ae887b18","modified":1610329747176},{"_id":"themes/hexo-theme-minos/scripts/10_i18n.js","hash":"2383fb5519c9966d27081c276203f961fcb6b783","modified":1610329747176},{"_id":"themes/hexo-theme-minos/scripts/99_config.js","hash":"c4496562e4ecae5e49dbc57490edae0682f77989","modified":1610329747177},{"_id":"themes/hexo-theme-minos/scripts/99_content.js","hash":"a63d2094bb55e6b964e92d02acf5387d2c203dde","modified":1610329747178},{"_id":"themes/hexo-theme-minos/scripts/99_tags.js","hash":"30b235e1deaa1a857aeb62bfd7c672a6e5762723","modified":1610329747179},{"_id":"themes/hexo-theme-minos/layout/comment/changyan.ejs","hash":"e0a2716e7a6c7da26182135fce4776596761a699","modified":1610329747152},{"_id":"themes/hexo-theme-minos/layout/comment/disqus.ejs","hash":"8ed7a6f7301423a763cf582a92d8c7d5bd05804d","modified":1610329747152},{"_id":"themes/hexo-theme-minos/layout/comment/facebook.ejs","hash":"cd2fe44bc6be457d4cb6dc43c75023e9f83d66f7","modified":1610329747153},{"_id":"themes/hexo-theme-minos/layout/comment/isso.ejs","hash":"55bfe636859f118b40750bd36e2c3ef1a2ec4c0e","modified":1610329747154},{"_id":"themes/hexo-theme-minos/layout/comment/livere.ejs","hash":"792a1e44b71ed8048903ea898aeaf74a6c109037","modified":1610329747155},{"_id":"themes/hexo-theme-minos/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1610329747154},{"_id":"themes/hexo-theme-minos/layout/comment/valine.ejs","hash":"4400de3b0d2d16e2c3e79d1f6ea0841395bd5477","modified":1610329747156},{"_id":"themes/hexo-theme-minos/layout/comment/youyan.ejs","hash":"bcb4b7282a7bcfcb514133e752c0f9d606b3c4d5","modified":1610329747156},{"_id":"themes/hexo-theme-minos/layout/common/article.ejs","hash":"8b553b16b23e4e2712442426d7a35f7ec80f22a7","modified":1610329747157},{"_id":"themes/hexo-theme-minos/layout/common/head.ejs","hash":"3c0e00fe269bc00531dd8680787959b82b546262","modified":1610329747159},{"_id":"themes/hexo-theme-minos/layout/common/footer.ejs","hash":"c52c678e3fd336651dd1fd7e7241515adb52a897","modified":1610329747158},{"_id":"themes/hexo-theme-minos/layout/common/languages.ejs","hash":"9b503282ca6e665ca41412b277debf4cd15635fd","modified":1610329747159},{"_id":"themes/hexo-theme-minos/layout/common/navbar.ejs","hash":"64ffed04bf2c3313a8cea3b87c0ddc0c5188166b","modified":1610329747160},{"_id":"themes/hexo-theme-minos/layout/common/paginator.ejs","hash":"2ea7e6c7349d4529bfcfd50c51088c7475743686","modified":1610329747161},{"_id":"themes/hexo-theme-minos/layout/common/scripts.ejs","hash":"0262a28c2e0f4a9e57fe1da871c517909710eca3","modified":1610329747161},{"_id":"themes/hexo-theme-minos/layout/plugins/clipboard.ejs","hash":"3ba8b96450707cef02f243c9ec4688b1adf06c72","modified":1610329747164},{"_id":"themes/hexo-theme-minos/layout/plugins/gallery.ejs","hash":"a1b9814c597f0e6b74be2bb5550e50c2915ae482","modified":1610329747164},{"_id":"themes/hexo-theme-minos/layout/plugins/google-analytics.ejs","hash":"725fd626b6535c6d05b88e736eeefbca6d39e7e8","modified":1610329747165},{"_id":"themes/hexo-theme-minos/layout/plugins/katex.ejs","hash":"9fbd9065ead2f35a2f69f9e0b2421b5bc0ae81b5","modified":1610329747165},{"_id":"themes/hexo-theme-minos/layout/plugins/mathjax.ejs","hash":"461c9b17ceddfdfd15ce4ed648d903953d2c7e9b","modified":1610329747166},{"_id":"themes/hexo-theme-minos/layout/search/google-cse.ejs","hash":"ab3aa6c57d7dd045b8838280548aa447ec38ffa6","modified":1610329747168},{"_id":"themes/hexo-theme-minos/layout/search/insight.ejs","hash":"2ef94c3ddae02db57c9dc5cf69da72b1c90c9236","modified":1610329747168},{"_id":"themes/hexo-theme-minos/layout/share/addthis.ejs","hash":"9cc26da261527bbba8b0180e0f73e0c6ae5416b5","modified":1610329747169},{"_id":"themes/hexo-theme-minos/layout/share/sharethis.ejs","hash":"307d905cd39ac4908ef5589829a18777f314428d","modified":1610329747170},{"_id":"themes/hexo-theme-minos/source/css/insight.scss","hash":"b7340f343e8bfe967b21b502d6cb5b78295fd9e0","modified":1610329747183},{"_id":"themes/hexo-theme-minos/source/css/style.scss","hash":"04b8fd16d9a88520b0d38520b4913aeea12e8645","modified":1610329747184},{"_id":"themes/hexo-theme-minos/source/images/check.svg","hash":"16e9a53d7c49621be8e3f1a28b11bcf5e751105e","modified":1610329747185},{"_id":"themes/hexo-theme-minos/source/images/exclamation.svg","hash":"213125a083bcef89806b4285190e050eef2660f2","modified":1610329747187},{"_id":"themes/hexo-theme-minos/source/images/info.svg","hash":"60613abd8f8522c6cebdbb4bf7bf3fcc482245bd","modified":1610329747187},{"_id":"themes/hexo-theme-minos/source/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1610329747188},{"_id":"themes/hexo-theme-minos/source/images/question.svg","hash":"e4005d2eabfbd3bdd291236f56a4d385e3b337b2","modified":1610329747189},{"_id":"themes/hexo-theme-minos/source/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1610329747190},{"_id":"themes/hexo-theme-minos/source/js/insight.js","hash":"4be407e66c2c45333a8cf1a064a9302cd6d90422","modified":1610329747190},{"_id":"themes/hexo-theme-minos/source/js/script.js","hash":"0617793424494bb9617be877c9d72ccc0ab02c33","modified":1610329747190},{"_id":"themes/hexo-theme-minos/source/css/fonts/untitled-font-1.eot","hash":"3f3f192a8fa0dde81f6cf617e14b6a4ec32e5a10","modified":1610329747181},{"_id":"themes/hexo-theme-minos/source/css/fonts/untitled-font-1.svg","hash":"e00b42e9a0cfd1e2f2e85b9af2e4906c72c6494f","modified":1610329747181},{"_id":"themes/hexo-theme-minos/source/css/fonts/untitled-font-1.woff","hash":"a21774065f3ac67ac7f75c5f78fe10d28fae34c5","modified":1610329747183},{"_id":"themes/hexo-theme-minos/source/css/fonts/untitled-font-1.ttf","hash":"38bde5ceb6f16831c9a11b634bf921ba6f889f2f","modified":1610329747182},{"_id":"themes/mino/.gitignore","hash":"1e32cd03954ae9a15e790df87605f9bc11c33e4c","modified":1610329995988},{"_id":"themes/mino/package-lock.json","hash":"1fdf3ebc293bb2df47fe5c4f833c6797d5e8a546","modified":1610329996023},{"_id":"themes/mino/package.json","hash":"76b6439e405b7b479535d40bad6d982957ac4fa7","modified":1610329996024},{"_id":"themes/mino/LICENSE","hash":"c3aeede5ce76bbbf93cec6656644b16bc08f206b","modified":1610329995989},{"_id":"themes/mino/README.md","hash":"c407e58328acba3e8a9442dbc8401c79cc9e8f36","modified":1610329995989},{"_id":"themes/mino/languages/es.yml","hash":"2492235c429294caef66d220d2b958d147d2a8e7","modified":1610329995992},{"_id":"themes/mino/languages/de.yml","hash":"c11b89f6f671e10a9bda0e6ea0f49bae044f1f5e","modified":1610329995991},{"_id":"themes/mino/languages/en.yml","hash":"8a41c00471ed9fb452aab05664e04ce2460658b1","modified":1610329995992},{"_id":"themes/mino/_config.yml.example","hash":"19669c3da87a41e37687360639dfc4a6adb54456","modified":1610329995990},{"_id":"themes/mino/languages/ko.yml","hash":"5cdf4a031fc3fcbab392dec89053e2417485e4c7","modified":1610329995993},{"_id":"themes/mino/languages/fr.yml","hash":"14fe6ca8e0dc50791e1c4d2e190bf75774c1bf0f","modified":1610329995993},{"_id":"themes/mino/lib/i18n.js","hash":"89a99d1d69cf8ca6be326880a8b01809535e8ac8","modified":1610329996022},{"_id":"themes/mino/languages/zh-cn.yml","hash":"ba7eabb49391804f1d83acd1a4e03d1a73e02089","modified":1610329995996},{"_id":"themes/mino/lib/rfc5646.js","hash":"50de178e1fcd2224c99db56227652eb1dbaabe40","modified":1610329996023},{"_id":"themes/mino/languages/ru.yml","hash":"d85aa077151e65bc5caf5bc9e1dbcfb69e213a93","modified":1610329995995},{"_id":"themes/mino/languages/pl.yml","hash":"df8f1f451ae52b4868b9485a0b03cdc2cf06af82","modified":1610329995994},{"_id":"themes/mino/languages/zh-tw.yml","hash":"235107d79bc8a6e0796d46fb409045c7c5142865","modified":1610329995996},{"_id":"themes/mino/layout/index.ejs","hash":"64c432857172b1c775bf82c0a60ca1ecdc7d9d21","modified":1610329996010},{"_id":"themes/mino/layout/layout.ejs","hash":"d1293320d738ac7f097869a4e74f6089a79d1c46","modified":1610329996011},{"_id":"themes/mino/layout/post.ejs","hash":"bba00a681d797817baf34737467be2eca3bdcfbb","modified":1610329996016},{"_id":"themes/mino/layout/tag.ejs","hash":"b72bf2ebd9c5d9d7546f448a4331f13dc6b49950","modified":1610329996020},{"_id":"themes/mino/layout/category.ejs","hash":"587fc7dac77115589ed8cb368ed4a8a2a6f129af","modified":1610329995999},{"_id":"themes/mino/layout/tags.ejs","hash":"9b54bfb0c56e54ff89da9a0a390414ef13a14931","modified":1610329996021},{"_id":"themes/mino/scripts/01_check.js","hash":"799fee2a7e989e211a1727f3f52cec47ae887b18","modified":1610329996025},{"_id":"themes/mino/scripts/10_i18n.js","hash":"bb73b36056f5b6e877225d28f08f220a0485077a","modified":1610329996026},{"_id":"themes/mino/scripts/99_config.js","hash":"c4496562e4ecae5e49dbc57490edae0682f77989","modified":1610329996026},{"_id":"themes/mino/scripts/99_tags.js","hash":"e78269dddd98bc9c9b02a16b1ced20ebd13f21df","modified":1610329996028},{"_id":"themes/mino/scripts/99_content.js","hash":"d73731b1eecbef4874621bf35e4ed70ca3fd8979","modified":1610329996027},{"_id":"themes/mino/layout/comment/disqus.ejs","hash":"2e35b7578478cf25544ae7f4b3535521ad73c5a2","modified":1610329996000},{"_id":"themes/mino/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1610329996001},{"_id":"themes/mino/layout/comment/facebook.ejs","hash":"cd2fe44bc6be457d4cb6dc43c75023e9f83d66f7","modified":1610329996001},{"_id":"themes/mino/layout/comment/isso.ejs","hash":"55bfe636859f118b40750bd36e2c3ef1a2ec4c0e","modified":1610329996002},{"_id":"themes/mino/layout/comment/livere.ejs","hash":"792a1e44b71ed8048903ea898aeaf74a6c109037","modified":1610329996003},{"_id":"themes/mino/layout/comment/valine.ejs","hash":"4400de3b0d2d16e2c3e79d1f6ea0841395bd5477","modified":1610329996003},{"_id":"themes/mino/layout/comment/youyan.ejs","hash":"bcb4b7282a7bcfcb514133e752c0f9d606b3c4d5","modified":1610329996004},{"_id":"themes/mino/layout/common/article.ejs","hash":"c95f16be3e9fd5a065d481595161e1de7a54822b","modified":1610329996005},{"_id":"themes/mino/layout/common/footer.ejs","hash":"29ae75b00af4f9f39dfad709398bc159cc7e5db3","modified":1610329996006},{"_id":"themes/mino/layout/common/head.ejs","hash":"4b3085f2fe06f684b8e12184dcbbdffb05509d20","modified":1610332174742},{"_id":"themes/mino/layout/common/languages.ejs","hash":"9b503282ca6e665ca41412b277debf4cd15635fd","modified":1610329996008},{"_id":"themes/mino/layout/common/navbar.ejs","hash":"075b13ec8d6450bad5f6080505449630ffecb66a","modified":1610329996008},{"_id":"themes/mino/layout/common/paginator.ejs","hash":"2ea7e6c7349d4529bfcfd50c51088c7475743686","modified":1610329996009},{"_id":"themes/mino/layout/common/scripts.ejs","hash":"0262a28c2e0f4a9e57fe1da871c517909710eca3","modified":1610329996010},{"_id":"themes/mino/layout/plugins/clipboard.ejs","hash":"3ba8b96450707cef02f243c9ec4688b1adf06c72","modified":1610329996012},{"_id":"themes/mino/layout/plugins/gallery.ejs","hash":"a1b9814c597f0e6b74be2bb5550e50c2915ae482","modified":1610329996013},{"_id":"themes/mino/layout/plugins/google-analytics.ejs","hash":"725fd626b6535c6d05b88e736eeefbca6d39e7e8","modified":1610329996014},{"_id":"themes/mino/layout/comment/changyan.ejs","hash":"e0a2716e7a6c7da26182135fce4776596761a699","modified":1610329995999},{"_id":"themes/mino/layout/plugins/katex.ejs","hash":"9fbd9065ead2f35a2f69f9e0b2421b5bc0ae81b5","modified":1610329996014},{"_id":"themes/mino/layout/plugins/mathjax.ejs","hash":"461c9b17ceddfdfd15ce4ed648d903953d2c7e9b","modified":1610329996015},{"_id":"themes/mino/layout/search/google-cse.ejs","hash":"ab3aa6c57d7dd045b8838280548aa447ec38ffa6","modified":1610329996018},{"_id":"themes/mino/layout/search/insight.ejs","hash":"2ef94c3ddae02db57c9dc5cf69da72b1c90c9236","modified":1610329996018},{"_id":"themes/mino/layout/share/addthis.ejs","hash":"9cc26da261527bbba8b0180e0f73e0c6ae5416b5","modified":1610329996019},{"_id":"themes/mino/layout/share/sharethis.ejs","hash":"307d905cd39ac4908ef5589829a18777f314428d","modified":1610329996020},{"_id":"themes/mino/source/css/insight.scss","hash":"b7340f343e8bfe967b21b502d6cb5b78295fd9e0","modified":1610329996029},{"_id":"themes/mino/source/css/style.scss","hash":"8f2f5db5903908916440073e6e948005cbd6b529","modified":1610329996031},{"_id":"themes/mino/source/images/check.svg","hash":"16e9a53d7c49621be8e3f1a28b11bcf5e751105e","modified":1610329996032},{"_id":"themes/mino/source/images/exclamation.svg","hash":"213125a083bcef89806b4285190e050eef2660f2","modified":1610329996032},{"_id":"themes/mino/source/images/info.svg","hash":"60613abd8f8522c6cebdbb4bf7bf3fcc482245bd","modified":1610329996033},{"_id":"themes/mino/source/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1610329996034},{"_id":"themes/mino/source/images/question.svg","hash":"e4005d2eabfbd3bdd291236f56a4d385e3b337b2","modified":1610329996034},{"_id":"themes/mino/source/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1610329996035},{"_id":"themes/mino/source/js/insight.js","hash":"4be407e66c2c45333a8cf1a064a9302cd6d90422","modified":1610329996036},{"_id":"themes/mino/source/js/script.js","hash":"b51152561a894d1b0afee2d908364e69b253bfc2","modified":1610329996037},{"_id":"themes/mino/layout/categories.ejs","hash":"b609b00fd03b521689dfc2d267aead94d49fcc80","modified":1610329995998},{"_id":"themes/mino/layout/archive.ejs","hash":"4239b7b97f02d86e83878ee0c32b0eccb9893420","modified":1610329995997},{"_id":"themes/mino/_config.yml","hash":"eb96b84f10c9e6c994186d7e01425697878e8e04","modified":1610331294443},{"_id":"themes/very-simple/.travis.yml","hash":"1d833cfcebaa4b821a22d4c8aa6a720e47fb44bf","modified":1610332853354},{"_id":"themes/very-simple/README.md","hash":"3ad8ad184198917b554c7ec7b6b2341eb28e561e","modified":1610332853355},{"_id":"themes/very-simple/LICENSE","hash":"86c2c15a2d0c891e5c0912e31ff7a12ef694ce3f","modified":1610332853355},{"_id":"themes/very-simple/_config.yml","hash":"0f63532128ea30ca292d938c3f04d32250b04e5b","modified":1610332853356},{"_id":"themes/very-simple/layout/archive.jade","hash":"ade63925918d68b95fcc521dd3e43d9ddb5aea04","modified":1610332853359},{"_id":"themes/very-simple/layout/base.jade","hash":"638c94f2009ecb67c9380e226db5534431d3cc64","modified":1610332853360},{"_id":"themes/very-simple/layout/index.jade","hash":"4cabe5dc5b168ab6728f4ae67b8e93ef9b33ee7c","modified":1610332853360},{"_id":"themes/very-simple/layout/page.jade","hash":"acf65a9f678a3b278a4ac20de8754bc9ab0c8f37","modified":1610332853361},{"_id":"themes/very-simple/layout/post.jade","hash":"73fad9c6ed182c4018a67f4fa17cc2372a60bc90","modified":1610332853362},{"_id":"themes/very-simple/layout/_partial/comments.jade","hash":"017c36eea10ff886024372331b48ea2d0ba48216","modified":1610332853357},{"_id":"themes/very-simple/layout/_partial/helpers.jade","hash":"f87b4f41e2ddbd3db10fb2ebaa342954c4d8d9a0","modified":1610332853358},{"_id":"themes/very-simple/layout/_partial/paginator.jade","hash":"578572072dadffb2f10e03d839f43e7c10efc220","modified":1610332853358},{"_id":"themes/very-simple/source/css/_variables.scss","hash":"7b31f9c821ee4847dc622e42c07e0b2793de1867","modified":1610332853363},{"_id":"themes/very-simple/source/css/highlight.scss","hash":"dc555ed02c8bd82722ba7642255f9e7228de06c6","modified":1610332853363},{"_id":"themes/very-simple/source/css/normalize.css","hash":"46844f2fc407f66636c6e783ddaeed2a684c2f8f","modified":1610332853364},{"_id":"themes/very-simple/source/css/very-simple.scss","hash":"d71f0505dc9a9d8773fb8209c0aa431112a4e2fb","modified":1610332853365},{"_id":"public/css/highlight.css","hash":"efc47af14506419d510aa511f07e9c96399d13b8","modified":1610332930928},{"_id":"public/css/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":1610346879661},{"_id":"public/css/very-simple.css","hash":"4027e48bf7d057b3775bf95fa74d303710a3d21c","modified":1610332930928},{"_id":"themes/hexo-theme-minima/LICENSE","hash":"b419c8da1acd748b941d1eba7e81eae7e8a0b662","modified":1610333415202},{"_id":"themes/hexo-theme-minima/README.md","hash":"78e809ce991f7c6b10ccb23368647f3ea80df786","modified":1610333415203},{"_id":"themes/hexo-theme-minima/.gitignore","hash":"45907892aa8c37948ca3b1a3ed1c929fdf0efd2c","modified":1610333415201},{"_id":"themes/hexo-theme-minima/_config.yml","hash":"80cc83a106b8096eb0ea93a3441e22bb85eb2407","modified":1610343504989},{"_id":"themes/hexo-theme-minima/layout/archive.ejs","hash":"628c4566171d11c21e1b729f2d1b6dd1e76730cd","modified":1610333415205},{"_id":"themes/hexo-theme-minima/layout/index.ejs","hash":"1c4a8f259c64bc761932541ca8f03e3307274644","modified":1610333415206},{"_id":"themes/hexo-theme-minima/layout/layout.ejs","hash":"1b398d45e8aecedba5f45f7cc870a762fcc86f2d","modified":1610333415206},{"_id":"themes/hexo-theme-minima/layout/page.ejs","hash":"853b08c153fbf48d6c4f5dd9f04515b8fd7bc85b","modified":1610333415207},{"_id":"themes/hexo-theme-minima/layout/post.ejs","hash":"4473b81653329048f075dbe9b634626598786f07","modified":1610333415212},{"_id":"themes/hexo-theme-minima/layout/tag.ejs","hash":"6ef7d91d3f0f01e4a842fc159ef74c2d7509047d","modified":1610333415213},{"_id":"themes/hexo-theme-minima/layout/partial/comments.ejs","hash":"7ac721de09bc02014cae7acb9d459b21964a877b","modified":1610333415208},{"_id":"themes/hexo-theme-minima/layout/partial/footer.ejs","hash":"25b72fd2cfd21dee3058b23f4ae950b0213c5d6f","modified":1610333415209},{"_id":"themes/hexo-theme-minima/layout/partial/google_analytics.ejs","hash":"054af44c417464ce770a3c28078d2de8b0a19f98","modified":1610333415209},{"_id":"themes/hexo-theme-minima/layout/partial/header.ejs","hash":"6e46c26ea0c450764e5e06f10f631fbc45e287b0","modified":1610333415210},{"_id":"themes/hexo-theme-minima/layout/partial/pagination.ejs","hash":"91b7b13bdc235d1d55158a9c87040d146219e1d3","modified":1610333415211},{"_id":"themes/hexo-theme-minima/layout/partial/tcolor.ejs","hash":"f0343037b372472e3d45af0082de89f50c42da89","modified":1610333415211},{"_id":"themes/hexo-theme-minima/source/css/custom.css","hash":"f0a797633457ca821db37758d7ae29267dbea6fc","modified":1610333415214},{"_id":"themes/hexo-theme-minima/source/css/normalize.css","hash":"9c9f6e3fb716c9fbb09968468eb93a94c0a19536","modified":1610333415215},{"_id":"themes/hexo-theme-minima/source/css/prism-dark.css","hash":"e2014adb1523e551670348cc389432add0ebf922","modified":1610333415216},{"_id":"themes/hexo-theme-minima/source/css/prism-line-numbers.css","hash":"a150b2155fa8e8d7559df298d00de9051df108a3","modified":1610333415216},{"_id":"themes/hexo-theme-minima/source/css/skeleton.css","hash":"b6d5061fede4c2a96f4a039634fad4a5e971bdb8","modified":1610333415217},{"_id":"themes/hexo-theme-minima/source/fonts/dm-serif-display-v4-latin-regular.eot","hash":"7c5138328e9d4d2e231408c00eb879d1508a6f4e","modified":1610333415218},{"_id":"themes/hexo-theme-minima/source/fonts/dm-serif-display-v4-latin-regular.ttf","hash":"1eaeb5d2d0a01f02cfd1313903b35bcef224d379","modified":1610333415221},{"_id":"themes/hexo-theme-minima/source/fonts/dm-serif-display-v4-latin-regular.woff","hash":"61692ca29e433827e7c227e7d19a70037ff87273","modified":1610333415222},{"_id":"themes/hexo-theme-minima/source/fonts/dm-serif-display-v4-latin-regular.woff2","hash":"c104f19b6f5176eae39be527c43742a236b9ac29","modified":1610333415223},{"_id":"themes/hexo-theme-minima/source/fonts/inter-v2-latin-regular.eot","hash":"b18f1e7b093bf71d833ddfd81676bdfbf165e810","modified":1610333415223},{"_id":"themes/hexo-theme-minima/source/fonts/inter-v2-latin-regular.svg","hash":"1e0b31d67db666180a37ee2c9142b4ebd5f73391","modified":1610333415224},{"_id":"themes/hexo-theme-minima/source/fonts/inter-v2-latin-regular.ttf","hash":"d96f19bfb5bd9e7b85f590c20960d0cb8a1fffcd","modified":1610333415226},{"_id":"themes/hexo-theme-minima/source/fonts/inter-v2-latin-regular.woff","hash":"7f36fa1af7da1caa31a37e7b96c1772b75494726","modified":1610333415226},{"_id":"themes/hexo-theme-minima/source/fonts/inter-v2-latin-regular.woff2","hash":"99ad803462294f0cfce54995572d6caf8d955028","modified":1610333415227},{"_id":"themes/hexo-theme-minima/source/images/favicon.png","hash":"7d18666e5a8455f4367b240425d617cf93966e10","modified":1610333415230},{"_id":"themes/hexo-theme-minima/source/images/thumbnail.jpg","hash":"80248d23872a62ae51080920487adada35d3f5a2","modified":1610333415231},{"_id":"themes/hexo-theme-minima/source/js/nanobar.min.js","hash":"fc30e613dbce5b1b5602907c0966739480456875","modified":1610333415232},{"_id":"themes/hexo-theme-minima/source/fonts/dm-serif-display-v4-latin-regular.svg","hash":"ca7ff5a280a805509c898317e4d678aa3abd9cca","modified":1610333415220},{"_id":"themes/hexo-theme-minima/source/images/epic-smiley.jpg","hash":"11102caf25def291217235fe403c15e9fd40f9e3","modified":1610333415229},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.woff2","hash":"c104f19b6f5176eae39be527c43742a236b9ac29","modified":1610343302056},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.woff","hash":"61692ca29e433827e7c227e7d19a70037ff87273","modified":1610343302056},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.ttf","hash":"1eaeb5d2d0a01f02cfd1313903b35bcef224d379","modified":1610343302056},{"_id":"public/fonts/inter-v2-latin-regular.eot","hash":"b18f1e7b093bf71d833ddfd81676bdfbf165e810","modified":1610343302056},{"_id":"public/fonts/inter-v2-latin-regular.woff2","hash":"99ad803462294f0cfce54995572d6caf8d955028","modified":1610343302056},{"_id":"public/images/favicon.png","hash":"7d18666e5a8455f4367b240425d617cf93966e10","modified":1610343302056},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.eot","hash":"7c5138328e9d4d2e231408c00eb879d1508a6f4e","modified":1610343302056},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.svg","hash":"ca7ff5a280a805509c898317e4d678aa3abd9cca","modified":1610343302056},{"_id":"public/fonts/inter-v2-latin-regular.svg","hash":"1e0b31d67db666180a37ee2c9142b4ebd5f73391","modified":1610343302056},{"_id":"public/fonts/inter-v2-latin-regular.ttf","hash":"d96f19bfb5bd9e7b85f590c20960d0cb8a1fffcd","modified":1610343302056},{"_id":"public/fonts/inter-v2-latin-regular.woff","hash":"7f36fa1af7da1caa31a37e7b96c1772b75494726","modified":1610343302056},{"_id":"public/images/thumbnail.jpg","hash":"80248d23872a62ae51080920487adada35d3f5a2","modified":1610343302056},{"_id":"public/css/custom.css","hash":"4def307c74d53452191e01241fdaffb69204606c","modified":1610343302056},{"_id":"public/css/skeleton.css","hash":"46633c4f03fc8de882077a141775a83f2dd6acc0","modified":1610343302056},{"_id":"public/css/prism-line-numbers.css","hash":"c632c3fa3fd97d05a0f74c6a87e1e93ee60ee57f","modified":1610343302056},{"_id":"public/css/prism-dark.css","hash":"6eae920ef9ee996f71a88bf2725e6e385d3e8b79","modified":1610343302056},{"_id":"public/js/nanobar.min.js","hash":"fc30e613dbce5b1b5602907c0966739480456875","modified":1610343302056},{"_id":"public/images/epic-smiley.jpg","hash":"11102caf25def291217235fe403c15e9fd40f9e3","modified":1610343302056},{"_id":"themes/blairos/.gitignore","hash":"788b97a26b181da6198a59fd850d06511296b7d9","modified":1610334104800},{"_id":"themes/blairos/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1610334104801},{"_id":"themes/blairos/LICENSE","hash":"a6f51c5a7ffe9ad93c099cf87095dc0222ac5f84","modified":1610334104802},{"_id":"themes/blairos/_config_bak.yml","hash":"46bd281163e78e3b2d484de1672438eacc56b5f2","modified":1610346642847},{"_id":"themes/blairos/README.md","hash":"60011e44a79abc197b02fa9a519c3b6cb4c77a52","modified":1610334104803},{"_id":"themes/blairos/dp.sh","hash":"a1897dc3e91db3fad2c7e1c880bc767c47e6dbc6","modified":1610334104813},{"_id":"themes/blairos/package.json","hash":"29b0ce8f810b306c0dfb253ffa7e8e0d84519c57","modified":1610334104848},{"_id":"themes/blairos/config_bak/_config.yml_for_blair","hash":"97d0e435ff28b628363b6bf38c42b984e733abc0","modified":1610334104811},{"_id":"themes/blairos/config_bak/_config.yml_for_yihsuan","hash":"3e1ae7bf8f65f6296b809a7cb2ba7b595290c776","modified":1610334104812},{"_id":"themes/blairos/config_bak/_config_bak.yml","hash":"46bd281163e78e3b2d484de1672438eacc56b5f2","modified":1610334104812},{"_id":"themes/blairos/languages/en.yml","hash":"d1debec7a7c1db105003132a28a51c41fff8889d","modified":1610334104814},{"_id":"themes/blairos/languages/ru.yml","hash":"b4b957da491589f28eb6ac1839d0a4504815cede","modified":1610334104815},{"_id":"themes/blairos/languages/zh-CN.yml","hash":"e570b3215e7a8040c79c0bf93eee4f7d1864176a","modified":1610334104816},{"_id":"themes/blairos/layout/archive.ejs","hash":"4479c33517aa70f2714ee820775ff8307a0dd115","modified":1610334104840},{"_id":"themes/blairos/layout/categories.ejs","hash":"642e9c62e75e9e57c1aca96b1e599a93da32e17e","modified":1610334104841},{"_id":"themes/blairos/layout/category.ejs","hash":"cd17981f9cac718731880148cb17de60d148a75c","modified":1610334104842},{"_id":"themes/blairos/layout/index.ejs","hash":"55ba944cb958d042a44cc4759643ab8f727bb88f","modified":1610334104843},{"_id":"themes/blairos/layout/layout.ejs","hash":"76c865c19ff33423fed267d51903674c5f390631","modified":1610334104844},{"_id":"themes/blairos/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1610334104845},{"_id":"themes/blairos/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1610334104846},{"_id":"themes/blairos/layout/tag.ejs","hash":"bcde8c7ce7e21683ca2cba7fcc21ac43c817a9a4","modified":1610334104846},{"_id":"themes/blairos/layout/tags.ejs","hash":"38ac918d2ce18e2cfae8ed21287b87b8abdaa837","modified":1610334104847},{"_id":"themes/blairos/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1610334104849},{"_id":"themes/blairos/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1610334104806},{"_id":"themes/blairos/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1610334104807},{"_id":"themes/blairos/_source/tweet/index.md","hash":"32169bad185732114b74f23110581ef24105643b","modified":1610334104809},{"_id":"themes/blairos/layout/_partial/after-footer.ejs","hash":"4fbf06f5102cd41b8fd2061476cae9f465ae0fd0","modified":1610334104817},{"_id":"themes/blairos/layout/_partial/archive-post.ejs","hash":"6299270f47d2c6d68c1d7aa853d95cf75e3bddf5","modified":1610334104818},{"_id":"themes/blairos/layout/_partial/archive.ejs","hash":"cd24e349be944f00f882ff4bd6bf75216edbc0ed","modified":1610334104820},{"_id":"themes/blairos/layout/_partial/article.ejs","hash":"f50f060a4fbff0c22252fab0638b691516743cf1","modified":1610334104821},{"_id":"themes/blairos/layout/_partial/footer.ejs","hash":"8716699b65455b2498a1a6cbc85a94bb363bb384","modified":1610334104822},{"_id":"themes/blairos/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1610334104823},{"_id":"themes/blairos/layout/_partial/header.ejs","hash":"f2f1ece7b7f8ac23e4dc8e2867dd7b2ed0965972","modified":1610334104825},{"_id":"themes/blairos/layout/_partial/header_bak.ejs","hash":"6da519ba59eb7a6b6429543140db792a640bf781","modified":1610334104826},{"_id":"themes/blairos/layout/_partial/index.ejs","hash":"5613b217fe34e13468ac8b6e2cd011c294ac5e45","modified":1610334104826},{"_id":"themes/blairos/layout/_partial/head.ejs","hash":"294f3271f5ea021b4fc1a8ce733baf7208fe40d1","modified":1610334104824},{"_id":"themes/blairos/source/css/_extend.styl","hash":"2e027278af55493ff47e29857e2e90bc7b70461a","modified":1610334104853},{"_id":"themes/blairos/source/css/_variables.styl","hash":"e3170bd17ac9df490ef41957cb4cca758a980eff","modified":1610334104866},{"_id":"themes/blairos/source/css/style.styl","hash":"15a991844acfd9d4b021e8e417faac83a50abac1","modified":1610334104893},{"_id":"themes/blairos/source/js/script.js","hash":"ff69c2553abf3118bebc34d7204b554fac2ac35b","modified":1610334104911},{"_id":"themes/blairos/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1610334104894},{"_id":"themes/blairos/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1610334104895},{"_id":"themes/blairos/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1610334104896},{"_id":"themes/blairos/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1610334104897},{"_id":"themes/blairos/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1610334104898},{"_id":"themes/blairos/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1610334104899},{"_id":"themes/blairos/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1610334104905},{"_id":"themes/blairos/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1610334104907},{"_id":"themes/blairos/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1610334104908},{"_id":"themes/blairos/layout/_partial/post/category.ejs","hash":"5225bdf7f56304984294ba6339edd44cace1a174","modified":1610334104829},{"_id":"themes/blairos/layout/_partial/post/comments.ejs","hash":"36e75fbad3665d9ad2ff4529c79da89503515f87","modified":1610334104829},{"_id":"themes/blairos/layout/_partial/post/category-index.ejs","hash":"f61f82c009d4ecceee8822ff574299ffbf0a8910","modified":1610334104828},{"_id":"themes/blairos/layout/_partial/post/desc.ejs","hash":"fe620ac2831986c737e3b5fd3b9638d98174007b","modified":1610334104831},{"_id":"themes/blairos/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1610334104830},{"_id":"themes/blairos/layout/_partial/post/myheader.ejs","hash":"e2f9f11310dc124279f264094fa75da14523f271","modified":1610334104833},{"_id":"themes/blairos/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1610334104832},{"_id":"themes/blairos/layout/_partial/post/nav.ejs","hash":"3096011dffbf92e4f11300e3343c76e2bb2e1546","modified":1610334104834},{"_id":"themes/blairos/layout/_partial/post/tag.ejs","hash":"b09a621236ac5e0d0d9adddc90ba0c947ee1d3e4","modified":1610334104835},{"_id":"themes/blairos/layout/_partial/post/title-detail.ejs","hash":"f49d15b5287703c26770849f450985cab297b2e9","modified":1610334104836},{"_id":"themes/blairos/layout/_partial/post/title-index.ejs","hash":"c634b6c728ddab80ca98933f9e6880b66f60beb4","modified":1610334104837},{"_id":"themes/blairos/layout/_partial/post/title.ejs","hash":"8c562c7c850fabf87eb27a67c426842cc12c8d47","modified":1610334104838},{"_id":"themes/blairos/layout/_partial/post/well.ejs","hash":"ef6754323e50ec4b5cb015502af0a7232fe27c63","modified":1610334104839},{"_id":"themes/blairos/source/css/_dtysky/dtysky.styl","hash":"8d76611a0a11d9ef612fa0e09b86fc0b40fe1b3a","modified":1610334104852},{"_id":"themes/blairos/source/css/_partial/archive.styl","hash":"5356f1b7776606272fd1bb3742bab917a3510503","modified":1610334104854},{"_id":"themes/blairos/source/css/_partial/article.styl","hash":"1573db3e7f4ee50cb2d1ed6b09aeb5dcf1d90690","modified":1610334104855},{"_id":"themes/blairos/source/css/_partial/comment.styl","hash":"30bd3f74c7c9ccf26a581f0ce68ecbd53d90ec4f","modified":1610334104856},{"_id":"themes/blairos/source/css/_partial/custom-layout.styl","hash":"974bbb4f612d5c7350065598a03eb7294badf98e","modified":1610334104857},{"_id":"themes/blairos/source/css/_partial/fancybox.styl","hash":"1839ab60e240522635fa6b163112f2c9e262ad23","modified":1610334104858},{"_id":"themes/blairos/source/css/_partial/footer.styl","hash":"3782ff14b0d5a531084be89bcbb16ce2f0b5afb5","modified":1610334104859},{"_id":"themes/blairos/source/css/_partial/header.styl","hash":"d8b864b9ea24f29bf5e1aa2331b47d0ece2a1170","modified":1610334104860},{"_id":"themes/blairos/source/css/_partial/highlight.styl","hash":"ac8364e0423c613800f6fd30b3517da6b6b7878b","modified":1610334104861},{"_id":"themes/blairos/source/css/_partial/highlight.styl.bak.20160723","hash":"02086803d2efbd3418ed9a6d27406ecd55a6674d","modified":1610334104862},{"_id":"themes/blairos/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1610334104864},{"_id":"themes/blairos/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1610334104865},{"_id":"themes/blairos/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1610334104869},{"_id":"themes/blairos/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1610334104870},{"_id":"themes/blairos/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1610334104875},{"_id":"themes/blairos/source/css/images/Blair.jpg","hash":"115d2ae40c387a467283546b992b381f6856aa4c","modified":1610334104877},{"_id":"themes/blairos/source/css/images/favicon-Tiktok.ico","hash":"4de5e4f7a5beae5e6f70c3ce693bbdeae7cb4eb6","modified":1610334104878},{"_id":"themes/blairos/source/css/images/favicon.ico","hash":"57bd01964a26cd9cbc49114812c2cd596c6c2b18","modified":1610334104879},{"_id":"themes/blairos/source/css/images/logo.png","hash":"308a315df8f0b9fb804fd6f344bbda9f22c01b87","modified":1610334104881},{"_id":"themes/blairos/source/css/images/logo10.png","hash":"360d9c2b8992d9b10a48c7835de361eb8ba5b058","modified":1610334104884},{"_id":"themes/blairos/source/css/images/logo2.jpg","hash":"a678ba2077c24ba7ddaceaed5915f975a4e6ab27","modified":1610334104888},{"_id":"themes/blairos/source/css/images/logo3.png","hash":"e372f19ebeffee8227a12ed5900af9988c6aa58e","modified":1610334104889},{"_id":"themes/blairos/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1610334104900},{"_id":"themes/blairos/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1610334104901},{"_id":"themes/blairos/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1610334104902},{"_id":"themes/blairos/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1610334104903},{"_id":"themes/blairos/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1610334104904},{"_id":"themes/blairos/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1610334104904},{"_id":"themes/blairos/source/webfonts/ptserif/main.css","hash":"8bcf8307a8de1b580673e830645fe7cec464799e","modified":1610334104928},{"_id":"themes/blairos/source/webfonts/source-code-pro/main.css","hash":"2686c43e6baa9bc91fed4fda5de613b6089b1e5d","modified":1610334104932},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","hash":"703369bb4159f050b38ecc4f52cfadb8e5760775","modified":1610334104916},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","hash":"fa8cc541ddc3da23a5a90b08e64e4c12944c56a1","modified":1610334104915},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","hash":"4da92f4f265caa786469ec415cfa6515d2997943","modified":1610334104918},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","hash":"0c79a0581c3472e6bb29082092ea37d897370473","modified":1610334104917},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","hash":"36225cd511b12ed61f3e3fbad53773119e9dd73e","modified":1610334104919},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","hash":"950d5547dc10d4a1bdb837439fcfc6c68bbe1b02","modified":1610334104920},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5984003d117f49ae596bde0498310ed215ac3aba","modified":1610334104921},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b64d3a0d20efa14e6063070eb30fbdb594bde59c","modified":1610334104922},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","hash":"6f1e434623e2fa20ba8972a6f97dd9c800b56168","modified":1610334104923},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","hash":"df9999766ca9ffe9428b139931352cd821526aed","modified":1610334104924},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","hash":"0b4aef50c2979164681fa6dfe2c1d6bd6be6bcd3","modified":1610334104925},{"_id":"themes/blairos/source/webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","hash":"3f425d6aee0c07774a10d82dcb742e32b067f217","modified":1610334104926},{"_id":"themes/blairos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1610334104930},{"_id":"themes/blairos/source/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1610334104931},{"_id":"themes/blairos/source/js/jquery.min.js","hash":"745ab5d6e434cf8d321779da3c527b6d301e2b50","modified":1610334104910},{"_id":"themes/blairos/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1610334104874},{"_id":"themes/blairos/source/css/images/logo10-2.png","hash":"d66f644f72e959197ac66fb0fe469afa76298977","modified":1610334104883},{"_id":"themes/blairos/source/css/images/logo11.png","hash":"e44c64cbfc9a3b08b21b97ab6c5f0aa20621318a","modified":1610334104887},{"_id":"themes/blairos/source/css/images/logo8.png","hash":"63420ee27afeb49093ece4c7197ccd27c8d2530e","modified":1610334104891},{"_id":"themes/blairos/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1610334104873},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1610345483923},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1610345483923},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1610345483923},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1610345483923},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1610345483923},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1610345483923},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1610345483923},{"_id":"public/css/images/Blair.jpg","hash":"115d2ae40c387a467283546b992b381f6856aa4c","modified":1610346652644},{"_id":"public/css/images/favicon-Tiktok.ico","hash":"4de5e4f7a5beae5e6f70c3ce693bbdeae7cb4eb6","modified":1610346652644},{"_id":"public/css/images/logo.png","hash":"308a315df8f0b9fb804fd6f344bbda9f22c01b87","modified":1610346652644},{"_id":"public/css/images/favicon.ico","hash":"277372f07132304ea7933196b9cfa07fd23fa603","modified":1610346162450},{"_id":"public/css/images/logo2.jpg","hash":"a678ba2077c24ba7ddaceaed5915f975a4e6ab27","modified":1610346652644},{"_id":"public/css/images/logo3.png","hash":"e372f19ebeffee8227a12ed5900af9988c6aa58e","modified":1610346652644},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1610345483923},{"_id":"public/webfonts/ptserif/fonts/3Nwg9VzlwLXPq3fNKwVRMCEAvth_LlrfE80CYdSH47w.woff2","hash":"703369bb4159f050b38ecc4f52cfadb8e5760775","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/CPRt--GVMETgA6YEaoGitxTbgVql8nDJpwnrE27mub0.woff2","hash":"4da92f4f265caa786469ec415cfa6515d2997943","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/03aPdn7fFF3H6ngCgAlQzPk_vArhqVIZ0nv9q090hN8.woff2","hash":"fa8cc541ddc3da23a5a90b08e64e4c12944c56a1","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/5hX15RUpPERmeybVlLQEWBTbgVql8nDJpwnrE27mub0.woff2","hash":"0c79a0581c3472e6bb29082092ea37d897370473","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/I-OtoJZa3TeyH6D9oli3ifesZW2xOQ-xsNqO47m55DA.woff2","hash":"36225cd511b12ed61f3e3fbad53773119e9dd73e","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/O_WhD9hODL16N4KLHLX7xSEAvth_LlrfE80CYdSH47w.woff2","hash":"950d5547dc10d4a1bdb837439fcfc6c68bbe1b02","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpCYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5984003d117f49ae596bde0498310ed215ac3aba","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b64d3a0d20efa14e6063070eb30fbdb594bde59c","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpDUj_cnvWIuuBMVgbX098Mw.woff2","hash":"6f1e434623e2fa20ba8972a6f97dd9c800b56168","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/fU0HAfLiPHGlZhZpY6M7dBTbgVql8nDJpwnrE27mub0.woff2","hash":"3f425d6aee0c07774a10d82dcb742e32b067f217","modified":1610346652644},{"_id":"public/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1610346652644},{"_id":"public/webfonts/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1610346652644},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1610345483923},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1610345483923},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1610345483923},{"_id":"public/css/images/logo10.png","hash":"360d9c2b8992d9b10a48c7835de361eb8ba5b058","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/QABk9IxT-LFTJ_dQzv7xpI4P5ICox8Kq3LLUNMylGO4.woff2","hash":"df9999766ca9ffe9428b139931352cd821526aed","modified":1610346652644},{"_id":"public/webfonts/ptserif/fonts/b31S45a_TNgaBApZhTgE6CEAvth_LlrfE80CYdSH47w.woff2","hash":"0b4aef50c2979164681fa6dfe2c1d6bd6be6bcd3","modified":1610346652644},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1610345483923},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1610345483923},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1610345483923},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1610345483923},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1610345483923},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1610345483923},{"_id":"public/webfonts/ptserif/main.css","hash":"ec6a269189b9a8b807fb4e1de6ffd7acc6a7fea8","modified":1610346652644},{"_id":"public/webfonts/source-code-pro/main.css","hash":"e6a0204ff3c501d6248d96e55aa20d0b42b45a79","modified":1610346652644},{"_id":"public/css/images/logo11.png","hash":"e44c64cbfc9a3b08b21b97ab6c5f0aa20621318a","modified":1610346652644},{"_id":"public/css/images/logo10-2.png","hash":"d66f644f72e959197ac66fb0fe469afa76298977","modified":1610346652644},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1610345483923},{"_id":"public/css/images/logo8.png","hash":"63420ee27afeb49093ece4c7197ccd27c8d2530e","modified":1610346652644},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1610346162450},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1610345483923},{"_id":"public/js/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1610346652644},{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1610341182102},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1610341182103},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1610341182103},{"_id":"themes/maupassant/README.md","hash":"e10457b5a61692d40d59498b70f14a0243d66ee4","modified":1610341182104},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1610341182134},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1610341182106},{"_id":"themes/maupassant/languages/en.yml","hash":"93674c5df281d7f5647fe500e10924008d8017c6","modified":1610341182107},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1610341182107},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1610341182108},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1610341182109},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1610341182111},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"a6fa4ea6c3a59ae6ac13230d6154d1fdd6c149f3","modified":1610341182111},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"795f420382a150d570a06ffc278c4e7819260691","modified":1610341182112},{"_id":"themes/maupassant/layout/archive.pug","hash":"3770284e425fb0c14d60ae6ac454f58ba07ce76b","modified":1610341182128},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"00792d30c4197ee79049060f56308327888e6812","modified":1610341182129},{"_id":"themes/maupassant/layout/base.pug","hash":"b0193fe7a4d149114e8a9a1b53a69be2d65fec91","modified":1610341182129},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1610341182130},{"_id":"themes/maupassant/layout/page.pug","hash":"647bfba2208cbef052e1bf307d30a6775671215d","modified":1610341182131},{"_id":"themes/maupassant/layout/post.pug","hash":"4140dc1dc9c777f4fc1d361f313f5d898d146e7a","modified":1610341182131},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1610341182132},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"9ad3083c2f70fdb460ecbe277be97320a2621196","modified":1610341182133},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1610341182134},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"7f9f9d33edc563651222c0dd9ade7f38d4600f7c","modified":1610341182114},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"2701ce8ecff183d3ecdef3af6528cb1d4e6404e1","modified":1610341182115},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1610341182115},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"232ce3da2b0f9366b95aca431be8082eebb1d6c4","modified":1610341182116},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1610341182117},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1610341182117},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1610341182118},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1610341182119},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1610341182119},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"a255fca3557a0dac0ad49c7d4456133420c22bd8","modified":1610341182120},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1610341182120},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"f848b6ac3f44cfd4110a2d1c742c73eacd6285ee","modified":1610341182121},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1610341182122},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"44935b31e7b3b6232a9a587775cfe9e90efc6a89","modified":1610341182123},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"666a89edbc1d7186afba68e0b3bee7e957d7a26e","modified":1610341182124},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1610341182124},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1610341182125},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1610341182127},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1610341182126},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1610341182127},{"_id":"themes/maupassant/source/css/copycode.css","hash":"23fefb18f1d4dc7bde33e29d6ae737570277d943","modified":1610341182136},{"_id":"themes/maupassant/source/css/copyright.css","hash":"ad420043e1d0518bfbf3b2a2d87fb5b104587c6f","modified":1610341182137},{"_id":"themes/maupassant/source/css/dark.css","hash":"87f0d84e736c55b2889d6e95025add032ceb0e06","modified":1610341182138},{"_id":"themes/maupassant/source/css/donate.css","hash":"d9ef1520e136198c0ae13acef7da22a275fb4dbf","modified":1610341182139},{"_id":"themes/maupassant/source/css/search.css","hash":"a1720a63170ff4ae9048f634e8e1900e7a3cc45a","modified":1610341182140},{"_id":"themes/maupassant/source/css/style.scss","hash":"2731634a0a32c5ff737db7619aabdd6b6dbedddd","modified":1610341182142},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1610341182143},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1610341182144},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1610341182145},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1610341182146},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1610341182147},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1610341182148},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1610341182149},{"_id":"themes/maupassant/source/js/copycode.js","hash":"6df3139581744e7bcd47243e4587f5397c2a24c3","modified":1610341182149},{"_id":"themes/maupassant/source/js/copyright.js","hash":"0e9a845ae05d2f00721ff6ee910c8c3cace26043","modified":1610341182150},{"_id":"themes/maupassant/source/js/donate.js","hash":"82f06bd69782c1138c98b4276771a41e3a54c061","modified":1610341182151},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1610341182152},{"_id":"themes/maupassant/source/js/love.js","hash":"60df5dc3d09c8f33d1d02f54cbc73bf8d62f52fb","modified":1610341182153},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1610341182153},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1610341182154},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1610341182155},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1610341182155},{"_id":"themes/maupassant/_config.yml","hash":"dd477fb2e514874ae2b76aa651914ddaa1629080","modified":1610341248866},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1610341274309},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1610341274309},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1610341274309},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1610341274309},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1610341274309},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1610341274309},{"_id":"public/css/dark.css","hash":"0faf42a84e243032b736c5f06ddbb95ac69e779c","modified":1610341274309},{"_id":"public/css/donate.css","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1610341274309},{"_id":"public/css/copycode.css","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1610341274309},{"_id":"public/css/copyright.css","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1610341274309},{"_id":"public/css/search.css","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1610341274309},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1610341274309},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1610341274309},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1610341274309},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1610341274309},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1610341274309},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1610341274309},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1610341274309},{"_id":"public/js/search.js","hash":"62493e5477618f259eec9b9d626f5bfd000589df","modified":1610342918406},{"_id":"public/js/totop.js","hash":"560baaa7bbf70ce67261b39aef61293646d9e539","modified":1610346162450},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1610341274309},{"_id":"themes/hipaper/source/css/_partial/footer.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610341408368},{"_id":"themes/hipaper/source/css/_partial/header-post.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610341408368},{"_id":"themes/hipaper/source/css/_partial/header.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610341408369},{"_id":"themes/hipaper/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1610341408313},{"_id":"themes/hipaper/.travis.yml","hash":"7ed5eb33c899eb49ec323f7ed7ee431bea52bf4f","modified":1610341408314},{"_id":"themes/hipaper/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1610341408314},{"_id":"themes/hipaper/LICENSE","hash":"53bb975b001b0d0bb2ddd7c302a9c8a20195f0be","modified":1610341408315},{"_id":"themes/hipaper/README.md","hash":"b74615451dcf680f9058dc818d3bb9577e4e3875","modified":1610341408316},{"_id":"themes/hipaper/README.cn.md","hash":"56e2ed603f518fd2ac9dc5e1e128778e51e30e4c","modified":1610341408316},{"_id":"themes/hipaper/package.json","hash":"f28bbd9f21b5c166adf59b6f989f63e9afdb1ba7","modified":1610341408361},{"_id":"themes/hipaper/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1610341408318},{"_id":"themes/hipaper/languages/default.yml","hash":"78ba14d792550cf1e250692b68fedd8fb7c25f4f","modified":1610341408319},{"_id":"themes/hipaper/languages/en.yml","hash":"78ba14d792550cf1e250692b68fedd8fb7c25f4f","modified":1610341408319},{"_id":"themes/hipaper/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1610341408320},{"_id":"themes/hipaper/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1610341408320},{"_id":"themes/hipaper/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1610341408321},{"_id":"themes/hipaper/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1610341408322},{"_id":"themes/hipaper/languages/pt.yml","hash":"0ec64b7e134e802846125770782fab9590495bcd","modified":1610341408322},{"_id":"themes/hipaper/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1610341408323},{"_id":"themes/hipaper/languages/zh-CN.yml","hash":"d529622a486c66506465b6b1b23d7c35a1f85904","modified":1610341408324},{"_id":"themes/hipaper/languages/zh-TW.yml","hash":"65d18e892a6f11f2784001d5a5d1acf958b71711","modified":1610341408324},{"_id":"themes/hipaper/layout/archive.ejs","hash":"f21c508bca9d810e33a10a735d9bfdae21ef687d","modified":1610341408350},{"_id":"themes/hipaper/layout/categories.ejs","hash":"da4c1eb60ad99bc724913e21cde239ce8869c25e","modified":1610341408351},{"_id":"themes/hipaper/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1610341408352},{"_id":"themes/hipaper/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1610341408352},{"_id":"themes/hipaper/layout/layout.ejs","hash":"5ca6c559319c570587dcbc689ac349deea6cd06a","modified":1610341408353},{"_id":"themes/hipaper/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1610341408354},{"_id":"themes/hipaper/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1610341408354},{"_id":"themes/hipaper/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1610341408359},{"_id":"themes/hipaper/layout/tags.ejs","hash":"2ecf18cf840207c5688af0be0ded77e770661037","modified":1610341408360},{"_id":"themes/hipaper/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1610341408363},{"_id":"themes/hipaper/layout/_partial/after-footer.ejs","hash":"3d8578e4bd4287b3424c40fde2fc5414b06b6a53","modified":1610341408326},{"_id":"themes/hipaper/layout/_partial/archive-post.ejs","hash":"f380e5459a043979e0c7429dcf33f20302631214","modified":1610341408327},{"_id":"themes/hipaper/layout/_partial/article.ejs","hash":"9eacb67d0674d481c179730940c0c0f137b2e74a","modified":1610341408328},{"_id":"themes/hipaper/layout/_partial/baidu-analytics.ejs","hash":"1edc20ced3c255c09405f0750b6c7bdf328af554","modified":1610341408329},{"_id":"themes/hipaper/layout/_partial/busuanzi-analytics.ejs","hash":"7a3a810e343c59fd16896de3165f41253d4121e1","modified":1610341408330},{"_id":"themes/hipaper/layout/_partial/archive.ejs","hash":"62ff097c313c1b87724c9916ec3fd44545b56d35","modified":1610341408327},{"_id":"themes/hipaper/layout/_partial/cnzz-analytics.ejs","hash":"b340ae5f2b7550ff1eb771904bc374e09b6880b0","modified":1610341408330},{"_id":"themes/hipaper/layout/_partial/comment.ejs","hash":"5e574aac7100e61f082cfd4c13a4719317fb6b50","modified":1610341408331},{"_id":"themes/hipaper/layout/_partial/facebook-sdk.ejs","hash":"8fc5cf7abbfd587057fb86ee028c7f216d30d68c","modified":1610341408332},{"_id":"themes/hipaper/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1610341408334},{"_id":"themes/hipaper/layout/_partial/footer.ejs","hash":"b26ba714b17997ac58df3363639fa3c4b52a5881","modified":1610341408333},{"_id":"themes/hipaper/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1610341408334},{"_id":"themes/hipaper/layout/_partial/head.ejs","hash":"bda3532beb8bade32f516304536d32c0ea2095cf","modified":1610341408335},{"_id":"themes/hipaper/layout/_partial/header-post.ejs","hash":"3d7c32aa562ce0d55aa68d1e533bd532a6359162","modified":1610341408336},{"_id":"themes/hipaper/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1610341408337},{"_id":"themes/hipaper/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1610341408343},{"_id":"themes/hipaper/layout/_partial/tencent-analytics.ejs","hash":"6a50e6fe7701ff131b2fc0c066a4615dd2a37da7","modified":1610341408344},{"_id":"themes/hipaper/layout/_widget/archive.ejs","hash":"856a6352a0f8d55f3d2965eea8ad4ec517f6af96","modified":1610341408345},{"_id":"themes/hipaper/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1610341408346},{"_id":"themes/hipaper/layout/_widget/recent_posts.ejs","hash":"b8d29ab002e7fa855f4322dccc6546841eaecd80","modified":1610341408346},{"_id":"themes/hipaper/layout/_widget/search.ejs","hash":"1241e08e33208a3b7175b9aa3ff740934b110143","modified":1610341408347},{"_id":"themes/hipaper/layout/_widget/social.ejs","hash":"0a321259dcc2a55f8e6c257aaaecea9edd9e4932","modified":1610341408348},{"_id":"themes/hipaper/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1610341408349},{"_id":"themes/hipaper/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1610341408349},{"_id":"themes/hipaper/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1610341408355},{"_id":"themes/hipaper/layout/search/index.ejs","hash":"45b8ef82fb642364818b4d0fcbdf852eb629a061","modified":1610341408357},{"_id":"themes/hipaper/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1610341408356},{"_id":"themes/hipaper/layout/search/insight.ejs","hash":"11a07a4ea37b64e36a85f1f8889cce00c5979e1f","modified":1610341408357},{"_id":"themes/hipaper/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1610341408358},{"_id":"themes/hipaper/source/css/_extend.styl","hash":"e3bb9a6ec8b2c2341e97e92e5d92b106651d7144","modified":1610341408364},{"_id":"themes/hipaper/source/css/_variables.styl","hash":"fa8e5ddacf8a3a0b4b5618d363fb4e030ea705a7","modified":1610341408376},{"_id":"themes/hipaper/source/css/comment.css","hash":"33aa139c629fae0c5647c985973d59de7a9fad49","modified":1610341408379},{"_id":"themes/hipaper/source/css/fashion.css","hash":"b9528068c4559c4e2f77ab1d62d522e1dd1371e5","modified":1610341408380},{"_id":"themes/hipaper/source/css/glyphs.css","hash":"788c8d61a24dcdbaa9d8026a18fb19fbb27dcd4d","modified":1610341408389},{"_id":"themes/hipaper/source/css/style.styl","hash":"073fe3e674b3d3900cc313466963bccc4d23e354","modified":1610341408394},{"_id":"themes/hipaper/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1610341408395},{"_id":"themes/hipaper/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1610341408396},{"_id":"themes/hipaper/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1610341408397},{"_id":"themes/hipaper/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1610341408398},{"_id":"themes/hipaper/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1610341408398},{"_id":"themes/hipaper/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1610341408406},{"_id":"themes/hipaper/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1610341408408},{"_id":"themes/hipaper/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1610341408399},{"_id":"themes/hipaper/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1610341408409},{"_id":"themes/hipaper/source/js/insight.js","hash":"a69c9f5aecea2eae8f740b5857ee28694609373d","modified":1610341408411},{"_id":"themes/hipaper/source/js/main.js","hash":"836d1a43819a2347ddeab6185a753e35815d8ba4","modified":1610341408413},{"_id":"themes/hipaper/source/js/script.js","hash":"19ead858aa1ddfd80eb37bd9ca3b2f1f5c149b36","modified":1610341408414},{"_id":"themes/hipaper/source/js/totop.js","hash":"e9f388666901f97a601d2f3e44eb246413e5db9e","modified":1610341408415},{"_id":"themes/hipaper/source/preview/browser-support.png","hash":"a6d8498553550c6b18a8f22bcd2f53c993c7d677","modified":1610341408416},{"_id":"themes/hipaper/_config.yml","hash":"d0d6f7c2a675da97f86dfaa8a5847149bdc59f70","modified":1610341815415},{"_id":"themes/hipaper/layout/_partial/post/category.ejs","hash":"f60d3c9a0943b8af97b1a8a82be0addf46cda1d9","modified":1610341408338},{"_id":"themes/hipaper/layout/_partial/post/busuanzi-analytics.ejs","hash":"d49ddbafab9fa6ebbb5108870901fcba0c8bcc6c","modified":1610341408337},{"_id":"themes/hipaper/layout/_partial/post/gallery.ejs","hash":"bfde040b4c4a8ce43645e0783cdd2b944269ec80","modified":1610341408339},{"_id":"themes/hipaper/layout/_partial/post/mathjax.ejs","hash":"ae998e014666cb354ded5a11a8a6bc7eae3e3c34","modified":1610341408340},{"_id":"themes/hipaper/layout/_partial/post/date.ejs","hash":"7b050bb6990737bfe19bfeeb65246c05cb2f8318","modified":1610341408339},{"_id":"themes/hipaper/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1610341408341},{"_id":"themes/hipaper/layout/_partial/post/tag.ejs","hash":"22a3580e569cb6a616d6817e32075759c6554801","modified":1610341408341},{"_id":"themes/hipaper/layout/_partial/post/title.ejs","hash":"9ee31f67ad337d5dcaaa10aa8ba55c7c22074b1c","modified":1610341408342},{"_id":"themes/hipaper/layout/_partial/post/urlconvert.ejs","hash":"2133f1029632417f9043b9d4749d580ed0c75db0","modified":1610341408343},{"_id":"themes/hipaper/source/css/_partial/archive.styl","hash":"54fe4df7a3b0c73e4c37e1d98d8191857bf0138d","modified":1610341408366},{"_id":"themes/hipaper/source/css/_partial/comment.styl","hash":"43279aaaa00cc07b4a65b13ef01c391355e82717","modified":1610341408367},{"_id":"themes/hipaper/source/css/_partial/article.styl","hash":"7143c5dd12418cca8ce56cbef3bb03720487fb0b","modified":1610341408366},{"_id":"themes/hipaper/source/css/_partial/highlight.styl","hash":"a12d13407903d4847c4207e2cd62190367acae64","modified":1610341408370},{"_id":"themes/hipaper/source/css/_partial/insight.styl","hash":"0bc5eee2822e5abffbfed7b01f6eb0d0d11b24af","modified":1610341408371},{"_id":"themes/hipaper/source/css/_partial/mobile.styl","hash":"3920e4c3cd11f294d3e7835ed628f169cbea6b21","modified":1610341408371},{"_id":"themes/hipaper/source/css/_partial/sidebar-aside.styl","hash":"60b8a4b64790a6bd51da99e6477a2bbfd24cd61c","modified":1610341408372},{"_id":"themes/hipaper/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1610341408373},{"_id":"themes/hipaper/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1610341408374},{"_id":"themes/hipaper/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1610341408375},{"_id":"themes/hipaper/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1610341408375},{"_id":"themes/hipaper/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1610341408381},{"_id":"themes/hipaper/source/css/fonts/athemes-glyphs.woff","hash":"f1ac9ffcc97571ceff48b68792c34de97bc289c0","modified":1610341408382},{"_id":"themes/hipaper/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1610341408383},{"_id":"themes/hipaper/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1610341408388},{"_id":"themes/hipaper/source/css/images/favicon.ico","hash":"55db8e7a607d37486f73e967e9389cd6578009cf","modified":1610341408390},{"_id":"themes/hipaper/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1610341408393},{"_id":"themes/hipaper/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1610341408400},{"_id":"themes/hipaper/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1610341408401},{"_id":"themes/hipaper/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1610341408404},{"_id":"themes/hipaper/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1610341408405},{"_id":"themes/hipaper/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1610341408402},{"_id":"themes/hipaper/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1610341408405},{"_id":"themes/hipaper/source/js/bootstrap.js","hash":"474b25cebd06d57a38090c6716d5dfaa5591baad","modified":1610341408410},{"_id":"themes/hipaper/source/js/jquery-3.1.1.min.js","hash":"042dd055cd289215835a58507c9531f808e1648a","modified":1610341408412},{"_id":"themes/hipaper/source/preview/code-theme-default.png","hash":"504991f74e6508f0516b655f0310e403e4248347","modified":1610341408418},{"_id":"themes/hipaper/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1610341408387},{"_id":"themes/hipaper/source/css/bootstrap.css","hash":"52ce1589569e6c2026296f57d09bb9b4f5c5285e","modified":1610341408378},{"_id":"themes/hipaper/source/preview/logo-preview.jpg","hash":"7dde15dc09c11162c3f28fe8516c879ddd7d8e60","modified":1610341408429},{"_id":"themes/hipaper/source/preview/search-preview.png","hash":"833e34fdebadb15609fc758ff5786b2c713e0ecc","modified":1610341408435},{"_id":"themes/hipaper/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1610341408386},{"_id":"themes/hipaper/source/preview/mobile-preview.png","hash":"cf7b24d88aa28b71dbcafda2371d70ef97052e21","modified":1610341408432},{"_id":"themes/hipaper/source/css/images/pose01.jpg","hash":"8c2a604c149850ee3fa0abb25b43b77093bd1772","modified":1610341408393},{"_id":"themes/hipaper/source/preview/hipaper-preview.png","hash":"12d42037cb2758ec395342ca55009e092c3d013f","modified":1610341408427},{"_id":"themes/hipaper/source/preview/code-theme.jpg","hash":"8c8512fd04e6106033656d10e92d51de76cca6d8","modified":1610341408424},{"_id":"public/preview/browser-support.png","hash":"a6d8498553550c6b18a8f22bcd2f53c993c7d677","modified":1610346162450},{"_id":"public/css/fonts/athemes-glyphs.woff","hash":"f1ac9ffcc97571ceff48b68792c34de97bc289c0","modified":1610346162450},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1610341502696},{"_id":"public/preview/code-theme-default.png","hash":"504991f74e6508f0516b655f0310e403e4248347","modified":1610341502696},{"_id":"public/css/glyphs.css","hash":"c4088f9a347e42a31d9aabc8aa17ead3d1ed8b8e","modified":1610346162450},{"_id":"public/css/comment.css","hash":"0f0d50e4153ce92b22ee18b214dfc76d8c386376","modified":1610341502696},{"_id":"public/js/main.js","hash":"2381eccd9a1ac3d70988f9ea5a36d34f63153bcf","modified":1610346162450},{"_id":"public/preview/logo-preview.jpg","hash":"18ec270e302e6870953bb59bf57052cd663659ec","modified":1610346162450},{"_id":"public/css/fashion.css","hash":"3870e1ee8c850e92d9c3aa71d03afa7b0eef2a5c","modified":1610341502696},{"_id":"public/preview/search-preview.png","hash":"833e34fdebadb15609fc758ff5786b2c713e0ecc","modified":1610341502696},{"_id":"public/css/images/pose01.jpg","hash":"8c2a604c149850ee3fa0abb25b43b77093bd1772","modified":1610341502696},{"_id":"public/preview/mobile-preview.png","hash":"daa8cec3fdae123d97dd9893502e138a3779535e","modified":1610346162450},{"_id":"public/js/bootstrap.js","hash":"3b965a36a6b08854ad6eddedf85c5319fd392b4a","modified":1610341502696},{"_id":"public/preview/hipaper-preview.png","hash":"12d42037cb2758ec395342ca55009e092c3d013f","modified":1610341502696},{"_id":"public/js/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1610341502696},{"_id":"public/css/bootstrap.css","hash":"afa4ed6bce62b265d08b0a5011558fe63e0bd289","modified":1610341502696},{"_id":"public/preview/code-theme.jpg","hash":"8c8512fd04e6106033656d10e92d51de76cca6d8","modified":1610346162450},{"_id":"themes/hexo-theme-aloha/.bowerrc","hash":"09b4947b6c6f8e300f4927b96a487f16f02d702a","modified":1610342190234},{"_id":"themes/hexo-theme-aloha/.editorconfig","hash":"283db36db9f92dc78a4356843f2a8eca8258062d","modified":1610342190235},{"_id":"themes/hexo-theme-aloha/.gitignore","hash":"4b470a2895981600d261a8b5e99e3d3eab194db4","modified":1610342190236},{"_id":"themes/hexo-theme-aloha/.travis.yml","hash":"6e22a6e0780514b956a86bbaa48d56748e61e765","modified":1610342190236},{"_id":"themes/hexo-theme-aloha/LICENSE","hash":"c7e926756fe0df01877b265b7bf137f57b2f4bd8","modified":1610342190237},{"_id":"themes/hexo-theme-aloha/README.md","hash":"e8e934c1dac0547491ef38ae31eade7180fc083b","modified":1610342190237},{"_id":"themes/hexo-theme-aloha/_config.yml","hash":"6d49c22ed5a247830e7537277a2d8c382086cc56","modified":1610342190238},{"_id":"themes/hexo-theme-aloha/bower.json","hash":"a0c8bbd68b949a17f7bb4937a64d42e8ea99c327","modified":1610342190239},{"_id":"themes/hexo-theme-aloha/gulpfile.js","hash":"99b0687de20780cdbc639f02c026095f0c1cb541","modified":1610342190239},{"_id":"themes/hexo-theme-aloha/package.json","hash":"a0c8bbd68b949a17f7bb4937a64d42e8ea99c327","modified":1610342190264},{"_id":"themes/hexo-theme-aloha/languages/en.yml","hash":"d007d5000de294646fa872c9900c77628bce8195","modified":1610342190240},{"_id":"themes/hexo-theme-aloha/languages/zh-CN.yml","hash":"a2043f0ebd67d4b02032ff36018b65e9882d0434","modified":1610342190241},{"_id":"themes/hexo-theme-aloha/layout/category.ejs","hash":"781f7aad81c56f376e20ec19be9589468fd8939d","modified":1610342190260},{"_id":"themes/hexo-theme-aloha/layout/archive.ejs","hash":"4d19421e7da01cb3836f88b8b2d09cff831315c3","modified":1610342190259},{"_id":"themes/hexo-theme-aloha/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1610342190261},{"_id":"themes/hexo-theme-aloha/layout/layout.ejs","hash":"46bc344b537329e5322a4da4ef26a33d063fe753","modified":1610342190261},{"_id":"themes/hexo-theme-aloha/layout/page.ejs","hash":"406ae60be1121344f4c65205c12bd984d107b0cf","modified":1610342190262},{"_id":"themes/hexo-theme-aloha/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1610342190262},{"_id":"themes/hexo-theme-aloha/layout/tag.ejs","hash":"6bd55cc1ce28ca517f983238b0b3411317553fd0","modified":1610342190263},{"_id":"themes/hexo-theme-aloha/scripts/aloha-util.js","hash":"41ab4862d253e923d3828efbf1b858b21f8a9f99","modified":1610342190265},{"_id":"themes/hexo-theme-aloha/scripts/filter.js","hash":"efc79ce47f2bd3e49b61abbc71a3d6c9cd5413a5","modified":1610342190266},{"_id":"themes/hexo-theme-aloha/scripts/helper.js","hash":"0803912708018c969630fe92f040deeb091b561a","modified":1610342190267},{"_id":"themes/hexo-theme-aloha/layout/_partial/archive-post.ejs","hash":"ec2a72eabce63a68b97d26e4b85ce0f2d88c5e16","modified":1610342190242},{"_id":"themes/hexo-theme-aloha/layout/_partial/article.ejs","hash":"b21e3a2d00976c153fc82298095fb064349afebc","modified":1610342190244},{"_id":"themes/hexo-theme-aloha/layout/_partial/archive.ejs","hash":"7b36c75276eb35413549f357582b2b1781107197","modified":1610342190243},{"_id":"themes/hexo-theme-aloha/layout/_partial/footer.ejs","hash":"7a57b6b38078ac7fa1cc02f0ef63dbed50ce34f9","modified":1610342190245},{"_id":"themes/hexo-theme-aloha/layout/_partial/header.ejs","hash":"040d32fc09a56851e1c2dd7a18215c20998e0551","modified":1610342190246},{"_id":"themes/hexo-theme-aloha/layout/_partial/js-params.ejs","hash":"43deaad19460f74791236fba9d068a43061eccf3","modified":1610342190247},{"_id":"themes/hexo-theme-aloha/layout/_partial/pagination.ejs","hash":"cec815d38dbbb7312a822b4772bb82cbbc418ab8","modified":1610342190248},{"_id":"themes/hexo-theme-aloha/layout/_partial/menu.ejs","hash":"3a9a15b9373e2cb9060784fc7bdac8ac6225759b","modified":1610342190248},{"_id":"themes/hexo-theme-aloha/layout/_partial/search-modal.ejs","hash":"3984b71538bfcdb89db6a030f763d1ee0482fabd","modified":1610342190254},{"_id":"themes/hexo-theme-aloha/layout/_partial/recent-posts.ejs","hash":"72f76ca49eb9640054a32725ef462e8085e1ca43","modified":1610342190253},{"_id":"themes/hexo-theme-aloha/layout/_partial/sidebar-card.ejs","hash":"1991e0cdccf136f99b3ca37feb2e87f0fe930c02","modified":1610342190255},{"_id":"themes/hexo-theme-aloha/layout/_partial/structured-data-markup.ejs","hash":"b92ef9fe00c254133128e1e753ace34ef9bee83c","modified":1610342190255},{"_id":"themes/hexo-theme-aloha/layout/_widget/disqus.ejs","hash":"c5fd73e89bda1735fae96e1a9b3b56f6aa28aa7f","modified":1610342190258},{"_id":"themes/hexo-theme-aloha/layout/_widget/duoshuo.ejs","hash":"ea38ad15778a440597b433d5fd9729fb77897465","modified":1610342190259},{"_id":"themes/hexo-theme-aloha/scripts/filter/after_post_render.js","hash":"8d2cd6dd4779d6053f0c79d9d34b9c1b787aed06","modified":1610342190266},{"_id":"themes/hexo-theme-aloha/scripts/helper/toc.js","hash":"db11eeea39c87299488d654f2dd728c327ac720e","modified":1610342190268},{"_id":"themes/hexo-theme-aloha/source/css/aloha.css","hash":"12839700c7b42eb32bad08b1fc23efd3f5b31265","modified":1610342190271},{"_id":"themes/hexo-theme-aloha/source/css/aloha.less","hash":"6954a24655fa4dcfd4df64a023d121559a5ead8d","modified":1610342190272},{"_id":"themes/hexo-theme-aloha/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1610342190288},{"_id":"themes/hexo-theme-aloha/source/images/scrolltop.png","hash":"97ae9aeea6178c2d73ced32aa7161743b1962998","modified":1610342190292},{"_id":"themes/hexo-theme-aloha/source/js/aloha-events.js","hash":"ac1a9586fdd2bca2b46c9528631319c357bd51d5","modified":1610342190293},{"_id":"themes/hexo-theme-aloha/source/js/aloha.js","hash":"d79633c44596d74fc4010dbd0c2689589dc29cb7","modified":1610342190293},{"_id":"themes/hexo-theme-aloha/source/js/semantic-ui-algolia.js","hash":"06e98d330d39a8849c45ee4eba3c95f6e82a19b8","modified":1610342190294},{"_id":"themes/hexo-theme-aloha/layout/_partial/post/category.ejs","hash":"2b1b42725870b2fbff6fc58863b977bae4f4b677","modified":1610342190249},{"_id":"themes/hexo-theme-aloha/layout/_partial/post/date.ejs","hash":"f0d1805eda51e0e99ecb0b0cb2bef51375784e72","modified":1610342190250},{"_id":"themes/hexo-theme-aloha/layout/_partial/post/gallery.ejs","hash":"3bfdf3bd2b61ae772f1c09fca78fbfa1e5335ec0","modified":1610342190251},{"_id":"themes/hexo-theme-aloha/layout/_partial/post/nav.ejs","hash":"920203abe545f5bb57121132f7915a100d52c7d1","modified":1610342190251},{"_id":"themes/hexo-theme-aloha/layout/_partial/post/tag.ejs","hash":"fd3c5f247b76de10956bba97798a24f7ea7cd937","modified":1610342190252},{"_id":"themes/hexo-theme-aloha/layout/_partial/post/title.ejs","hash":"055e4c80b5b6b1651618a00810a952c6b81ec8a9","modified":1610342190253},{"_id":"themes/hexo-theme-aloha/source/css/_partial/highlight.less","hash":"04ed5daa6ca64cc7af92d6cbb655f2a8c222e85e","modified":1610342190269},{"_id":"themes/hexo-theme-aloha/source/css/_partial/variables.less","hash":"2efeab45e14aa5420d3ae90675c47ed081ac7f00","modified":1610342190271},{"_id":"themes/hexo-theme-aloha/source/css/_partial/main.less","hash":"eece1f228fac25badcf214ec56f9a7649af3ffa2","modified":1610342190270},{"_id":"themes/hexo-theme-aloha/layout/_partial/theme/simple/post-description.ejs","hash":"4ec84b15615fe7ae1ec69d1ed74b7fb281e55c92","modified":1610342190257},{"_id":"themes/hexo-theme-aloha/layout/_partial/theme/simple/post_item.ejs","hash":"0200dccf3aa943127818295d093f98a7b80ef417","modified":1610342190257},{"_id":"themes/hexo-theme-aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.eot","hash":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1610342190278},{"_id":"themes/hexo-theme-aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff2","hash":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1610342190285},{"_id":"themes/hexo-theme-aloha/source/favicon.ico","hash":"732a554507e50045577bb007d0e11eeb1b775b66","modified":1610342190287},{"_id":"themes/hexo-theme-aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff","hash":"56ce13e71c2150d81bc972940584915181bd6081","modified":1610342190284},{"_id":"themes/hexo-theme-aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.ttf","hash":"9088143b19979779b2116cef38b661f72d982e19","modified":1610342190283},{"_id":"themes/hexo-theme-aloha/source/images/avatar.jpg","hash":"8f35072a67cc7de306601cf5a56e988207430620","modified":1610342190291},{"_id":"themes/hexo-theme-aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.svg","hash":"0b42e5ee7daafb72b1237b9d5b7f5ab0775fffc7","modified":1610342190281},{"_id":"themes/hexo-theme-aloha/source/css/semantic-ui/2.2.4/semantic.min.css","hash":"43e48879ba2fd994e3af5a96162209d40c43ed2e","modified":1610342190276},{"_id":"public/css/aloha.less","hash":"6954a24655fa4dcfd4df64a023d121559a5ead8d","modified":1610345781567},{"_id":"public/images/scrolltop.png","hash":"97ae9aeea6178c2d73ced32aa7161743b1962998","modified":1610345781567},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.eot","hash":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1610345781567},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff2","hash":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1610345781567},{"_id":"public/favicon.ico","hash":"732a554507e50045577bb007d0e11eeb1b775b66","modified":1610345781567},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff","hash":"56ce13e71c2150d81bc972940584915181bd6081","modified":1610345781567},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.ttf","hash":"9088143b19979779b2116cef38b661f72d982e19","modified":1610345781567},{"_id":"public/css/aloha.css","hash":"bec88f07f869e55381425b493d458ef8d3b11e82","modified":1610345781567},{"_id":"public/js/aloha-events.js","hash":"2cd034c5bce6e1260bf7918ebfa1efa287694f6b","modified":1610345781567},{"_id":"public/js/aloha.js","hash":"679001bf3666d0d32702308cfa77e3d714d2d2f6","modified":1610345781567},{"_id":"public/js/semantic-ui-algolia.js","hash":"108379745038ae336bbcb11e53fc2733248632b0","modified":1610345781567},{"_id":"public/images/avatar.jpg","hash":"8f35072a67cc7de306601cf5a56e988207430620","modified":1610345781567},{"_id":"public/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.svg","hash":"0b42e5ee7daafb72b1237b9d5b7f5ab0775fffc7","modified":1610345781567},{"_id":"public/css/semantic-ui/2.2.4/semantic.min.css","hash":"00d3a19960b111ae8e805afce3788ee0213aa363","modified":1610345781567},{"_id":"themes/hexo-theme-aloha/languages/zh-TW.yml","hash":"301163e30703f7996bf814aca68386f738eb6d64","modified":1610342430726},{"_id":"themes/cactus-white/LICENSE","hash":"db6b2f722060bf5a069355c3052bbddb658e75dc","modified":1610342814659},{"_id":"themes/cactus-white/README.md","hash":"d90181f7a95b15d5efda66bbc5c700aaa2046ebe","modified":1610342814659},{"_id":"themes/cactus-white/layout/archive.ejs","hash":"e9c1bae9a72d318b983d3e104467b636f9e2af08","modified":1610342814671},{"_id":"themes/cactus-white/layout/index.ejs","hash":"babb6707abbc841cd53950b4346951772c906135","modified":1610342814671},{"_id":"themes/cactus-white/layout/layout.ejs","hash":"37a7f1f6f289c1cec4528e33f6f3f8435b5616ff","modified":1610342814672},{"_id":"themes/cactus-white/layout/page.ejs","hash":"55c58a1924f632c5fa22d5a17465d6fc3bb16127","modified":1610342814673},{"_id":"themes/cactus-white/layout/post.ejs","hash":"07245374d3b74bfd5fd7b91228e55aa19b14e017","modified":1610342814674},{"_id":"themes/cactus-white/scripts/meta.js","hash":"6b05bc75ab2478a1f01deab46919164895eb1f6d","modified":1610342814675},{"_id":"themes/cactus-white/scripts/thumbnail.js","hash":"3d841aa267026703a5cc29f4ffbb613f0a2bbd45","modified":1610342814675},{"_id":"themes/cactus-white/layout/_partial/comments.ejs","hash":"394b5c90e562093c19d69f2b30a5bfb34dd75369","modified":1610342814661},{"_id":"themes/cactus-white/layout/_partial/footer.ejs","hash":"7b030b46e9a2377bfef7c0cc4ae5242f6f017561","modified":1610342814662},{"_id":"themes/cactus-white/layout/_partial/head.ejs","hash":"c733e6b0324b7dc033721c794c56befc81a35a82","modified":1610342814663},{"_id":"themes/cactus-white/layout/_partial/header.ejs","hash":"b71b93f9a703730b5d76644b8a45858a7987a8c9","modified":1610342814663},{"_id":"themes/cactus-white/layout/_partial/pagination.ejs","hash":"71220263c8a5df42cda0ec1b544b24c19a4de945","modified":1610342814664},{"_id":"themes/cactus-white/layout/_partial/scripts.ejs","hash":"47f48747c450ed53a92b023d7a6b9ee3140405eb","modified":1610342814669},{"_id":"themes/cactus-white/layout/_partial/search.ejs","hash":"2d6f454e866d97538a7f750047f280aacf50b60a","modified":1610342814670},{"_id":"themes/cactus-white/layout/_partial/styles.ejs","hash":"6635ddb976662c21a8e65d634e4144d1ff14f13d","modified":1610342814670},{"_id":"themes/cactus-white/source/css/_extend.styl","hash":"462a988e7db345eea30b1a41323507f1d2e1e0d9","modified":1610342814677},{"_id":"themes/cactus-white/source/css/_mixins.styl","hash":"851e49d3d42482958cf20b6e845f4bc2ee08acdd","modified":1610342814701},{"_id":"themes/cactus-white/source/css/_util.styl","hash":"4b2ee65cab4c3d775947a476c71252dc49cbbb1b","modified":1610342814710},{"_id":"themes/cactus-white/source/css/_variables.styl","hash":"0d3346412ff1fa35fda62782ea89353382804670","modified":1610342814711},{"_id":"themes/cactus-white/source/css/style.styl","hash":"643ad568fdca0112e94e54968df1b0b6193e60d2","modified":1610342814712},{"_id":"themes/cactus-white/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1610342814713},{"_id":"themes/cactus-white/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1610342814714},{"_id":"themes/cactus-white/source/images/favicon_cactus.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1610342814715},{"_id":"themes/cactus-white/source/images/logo.png","hash":"199750f3a39251ca97d36ed8317d88dfdc2dfe66","modified":1610342814716},{"_id":"themes/cactus-white/source/js/main.js","hash":"c931412d49965e013d853e701d7d28968e07c622","modified":1610342814742},{"_id":"themes/cactus-white/source/js/search.js","hash":"a3ed5a07536101ad34d83858f5efc98b648e9c11","modified":1610342814743},{"_id":"themes/cactus-white/layout/_partial/post/actions_desktop.ejs","hash":"c34e4c51c4aec8fd40491f0d26328c3a19920b16","modified":1610342814665},{"_id":"themes/cactus-white/layout/_partial/post/actions_mobile.ejs","hash":"071cf366d94bea8b8bbbb51e2c5657dce04ae500","modified":1610342814665},{"_id":"themes/cactus-white/layout/_partial/post/date.ejs","hash":"1e4023733ab7f1321c2d6ff75d358f3e49b6e42c","modified":1610342814666},{"_id":"themes/cactus-white/layout/_partial/post/gallery.ejs","hash":"725ab823c2fb4a5e444eca3afa617d88f305ef71","modified":1610342814667},{"_id":"themes/cactus-white/layout/_partial/post/share.ejs","hash":"8f31bd4d509a6c6aff35dfc76fd99460ffeeb0dd","modified":1610342814667},{"_id":"themes/cactus-white/layout/_partial/post/tag.ejs","hash":"b35e8b20eff179b197fd97da3871bd84f3952634","modified":1610342814668},{"_id":"themes/cactus-white/layout/_partial/post/title.ejs","hash":"67da1757316408a72393e6d2aab4ec635e1d30c1","modified":1610342814668},{"_id":"themes/cactus-white/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1610342814678},{"_id":"themes/cactus-white/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1610342814678},{"_id":"themes/cactus-white/source/css/_highlight/arta.styl","hash":"9deabb52b0eb82f08e89d384f71c4ecc77b4e233","modified":1610342814679},{"_id":"themes/cactus-white/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1610342814680},{"_id":"themes/cactus-white/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1610342814680},{"_id":"themes/cactus-white/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1610342814681},{"_id":"themes/cactus-white/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1610342814682},{"_id":"themes/cactus-white/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1610342814683},{"_id":"themes/cactus-white/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1610342814684},{"_id":"themes/cactus-white/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1610342814684},{"_id":"themes/cactus-white/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1610342814685},{"_id":"themes/cactus-white/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1610342814686},{"_id":"themes/cactus-white/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1610342814687},{"_id":"themes/cactus-white/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1610342814687},{"_id":"themes/cactus-white/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1610342814688},{"_id":"themes/cactus-white/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1610342814689},{"_id":"themes/cactus-white/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1610342814689},{"_id":"themes/cactus-white/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1610342814690},{"_id":"themes/cactus-white/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1610342814691},{"_id":"themes/cactus-white/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1610342814691},{"_id":"themes/cactus-white/source/css/_highlight/kimbie.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1610342814691},{"_id":"themes/cactus-white/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1610342814692},{"_id":"themes/cactus-white/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1610342814692},{"_id":"themes/cactus-white/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1610342814693},{"_id":"themes/cactus-white/source/css/_highlight/paraiso.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1610342814694},{"_id":"themes/cactus-white/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1610342814694},{"_id":"themes/cactus-white/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1610342814695},{"_id":"themes/cactus-white/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1610342814696},{"_id":"themes/cactus-white/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1610342814696},{"_id":"themes/cactus-white/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1610342814697},{"_id":"themes/cactus-white/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1610342814698},{"_id":"themes/cactus-white/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1610342814698},{"_id":"themes/cactus-white/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1610342814699},{"_id":"themes/cactus-white/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1610342814700},{"_id":"themes/cactus-white/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1610342814700},{"_id":"themes/cactus-white/source/css/_partial/archive.styl","hash":"bb53652b5e740a3f6ab38292dfd609af968e40a7","modified":1610342814702},{"_id":"themes/cactus-white/source/css/_partial/article.styl","hash":"4cfccf15cee0286674bb8611ca1f90aee6b18fe4","modified":1610342814703},{"_id":"themes/cactus-white/source/css/_partial/comments.styl","hash":"d2700a2454fc2cd2d0e351d77db4f8d26de14da7","modified":1610342814703},{"_id":"themes/cactus-white/source/css/_partial/footer.styl","hash":"4ae39c4f880831bb130e0bd0e1e1f3e4cd9367b0","modified":1610342814704},{"_id":"themes/cactus-white/source/css/_partial/header.styl","hash":"dbdc2f3b0b06f3090f3c1d22c5719c8361d38027","modified":1610342814705},{"_id":"themes/cactus-white/source/css/_partial/index.styl","hash":"c71ce83b2e82df16d04a3c3af0dc79570266d49b","modified":1610342814705},{"_id":"themes/cactus-white/source/css/_partial/pagination.styl","hash":"650b157893ec2247f0854f269705806ca6b375ba","modified":1610342814706},{"_id":"themes/cactus-white/source/css/_partial/search.styl","hash":"e4e77ce71a64c47f4fc9a741579abd69e69bc415","modified":1610342814709},{"_id":"themes/cactus-white/source/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1610342814761},{"_id":"themes/cactus-white/source/lib/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1610342814762},{"_id":"themes/cactus-white/source/lib/meslo-LG/styles.css","hash":"b366332901cf5cdf2b7891053cfa3791d06e52d5","modified":1610342814824},{"_id":"themes/cactus-white/source/css/_partial/post/actions_desktop.styl","hash":"2f130e9cb16b7958cd0f0bda48e3451674c36d79","modified":1610342814707},{"_id":"themes/cactus-white/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1610342814745},{"_id":"themes/cactus-white/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1610342814746},{"_id":"themes/cactus-white/_config.yml","hash":"f628d7a9aeb1f60eb86877f41a6c7f3f16c1d8a0","modified":1610342978268},{"_id":"themes/cactus-white/source/css/_partial/post/actions_mobile.styl","hash":"654316bcfdf02ccc5d8546417c07c7fed65e7ec2","modified":1610342814708},{"_id":"themes/cactus-white/source/lib/jquery/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1610342814760},{"_id":"themes/cactus-white/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610342814758},{"_id":"themes/cactus-white/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610342814759},{"_id":"themes/cactus-white/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1610342814749},{"_id":"themes/cactus-white/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1610342814757},{"_id":"themes/cactus-white/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610342814751},{"_id":"themes/cactus-white/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1610342814755},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1610342814775},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1610342814781},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1610342814798},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1610342814805},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1610342814812},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1610342814816},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1610342814819},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1610342814823},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1610342814787},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1610342814792},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1610342814809},{"_id":"themes/cactus-white/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1610342814769},{"_id":"themes/cactus-white/source/images/theme overview.psd","hash":"8dc11d9d289c247423911e962c4eb3a556dc67d1","modified":1610342814740},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1610342918406},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1610342918406},{"_id":"public/images/favicon_cactus.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1610342918406},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610342918406},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610342918406},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610342918406},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1610342918406},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1610342918406},{"_id":"public/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1610342918406},{"_id":"public/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1610342918406},{"_id":"public/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1610342918406},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1610342918406},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1610342918406},{"_id":"public/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1610342918406},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1610342918406},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1610342918406},{"_id":"public/images/theme overview.psd","hash":"8dc11d9d289c247423911e962c4eb3a556dc67d1","modified":1610342918406},{"_id":"themes/artemis/.gitignore","hash":"0c654cf64f3859487f9a428de458f21ec8d6e4c6","modified":1610343898090},{"_id":"themes/artemis/Gruntfile.js","hash":"bcb55a1f2ed3ac66d932b6b2d31c8def0bf9477c","modified":1610343898091},{"_id":"themes/artemis/README.md","hash":"e6fee90d69d3b28ebe03afb540aa2c7ed88b2ec1","modified":1610343898093},{"_id":"themes/artemis/LICENSE","hash":"67b7cb7be78f78d380f50bdc9e13db5c5e9705aa","modified":1610343898092},{"_id":"themes/artemis/_config.yml","hash":"564c37d5c4e45146326fa2248eeea3b4830c712b","modified":1610343898094},{"_id":"themes/artemis/package.json","hash":"e5f5c416645bafbdb6e91ffd835d6526675f5b43","modified":1610343898103},{"_id":"themes/artemis/screenshot.png","hash":"65565ef169c633e62d2735961fa8dbe8c47a6ffb","modified":1610343898104},{"_id":"themes/artemis/languages/en.yml","hash":"7899fd3f86988060e835327434559017fe97abbe","modified":1610343898095},{"_id":"themes/artemis/layout/archive.pug","hash":"ee65dd10e1824265d68863d0538f32a55118a00b","modified":1610343898096},{"_id":"themes/artemis/layout/index.pug","hash":"ad82ff39d9c1a21b5fa34244f47dca1ea4b6b06e","modified":1610343898097},{"_id":"themes/artemis/layout/post.pug","hash":"d7509b39cfa0a1cbda845046ac349284abe4f5d8","modified":1610343898102},{"_id":"themes/artemis/source/favicon.png","hash":"388bc1ee7d189af29cb7cc02b47fe0aba0922d27","modified":1610343898106},{"_id":"themes/artemis/source/logo-alt.png","hash":"b3027419b010a576d26d2531470c189566fa94cf","modified":1610343898109},{"_id":"themes/artemis/source/logo.png","hash":"388bc1ee7d189af29cb7cc02b47fe0aba0922d27","modified":1610343898109},{"_id":"themes/artemis/layout/mixins/paginator.pug","hash":"68b407aab4413db39c6d93c52f151078e026277e","modified":1610343898097},{"_id":"themes/artemis/layout/mixins/post.pug","hash":"49d7e73b3dc72f09bd5128f61593db1d5ceab7f4","modified":1610343898098},{"_id":"themes/artemis/layout/partial/comment.pug","hash":"80ce968346512bf2b5692515d39cd2393f668803","modified":1610343898099},{"_id":"themes/artemis/layout/partial/copyright.pug","hash":"6fc86307f3a0cb2c62268597b40b2e580f2356f8","modified":1610343898099},{"_id":"themes/artemis/layout/partial/head.pug","hash":"f7c9f0eb65f96b0a103d4b88ed9d63a7f20db3c2","modified":1610343898100},{"_id":"themes/artemis/layout/partial/layout.pug","hash":"4e79a647fe7b607116f2feb13442581a597559e5","modified":1610343898101},{"_id":"themes/artemis/layout/partial/nav.pug","hash":"c03cbe8cc7d4f6c16c1199051a24eee1cd3e5df6","modified":1610343898101},{"_id":"themes/artemis/layout/partial/scripts.pug","hash":"e583f82b5e76e9df1fdffe011199e268ba5cc827","modified":1610343898102},{"_id":"themes/artemis/source/css/theme.css","hash":"2b06561e922b1d78a059d094eee96f8aca9d0101","modified":1610343898105},{"_id":"themes/artemis/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1610343898107},{"_id":"themes/artemis/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1610343898108},{"_id":"themes/artemis/source/scss/theme.scss","hash":"fdba60d1991872d199f5498f63da818a8b4cbdc4","modified":1610343898116},{"_id":"themes/artemis/source/scss/_partial/archive-post-list.scss","hash":"03be3cae6e1286b9893c97e056988117f92d4ada","modified":1610343898111},{"_id":"themes/artemis/source/scss/_partial/base.scss","hash":"998d9346bab536132236bccee725054f3a8fcb0e","modified":1610343898111},{"_id":"themes/artemis/source/scss/_partial/copyright.scss","hash":"e87b144a8389eefeab4f50c353eef18c428a761c","modified":1610343898112},{"_id":"themes/artemis/source/scss/_partial/footer.scss","hash":"8cd2631d46be05a9518f1966bd84e1a8b0270857","modified":1610343898112},{"_id":"themes/artemis/source/scss/_partial/header.scss","hash":"ecf7586ef5948a683dec35a15875d737b8d36b9b","modified":1610343898113},{"_id":"themes/artemis/source/scss/_partial/highlight.scss","hash":"5107d1e128e032c0416c51c9bdc26413167dc27b","modified":1610343898114},{"_id":"themes/artemis/source/scss/_partial/home-post-list.scss","hash":"658eef39c7cf6f730f784751c2e4701e8eb02e0d","modified":1610343898114},{"_id":"themes/artemis/source/scss/_partial/mq.scss","hash":"09923ebc056594f9130576f46320ed0e3e5d456b","modified":1610343898115},{"_id":"themes/artemis/source/scss/_partial/normalize.scss","hash":"612b367b0e9a0b9f66d37694ee64ce896c552967","modified":1610343898115},{"_id":"themes/artemis/source/scss/_partial/post.scss","hash":"33fcb4d3a99bead802d6c7eec9cf3a9b9c6e288b","modified":1610343898116},{"_id":"public/sitemap.xml","hash":"826093cecb7dde9a680d2f51271284882af55cdd","modified":1617873573960},{"_id":"public/atom.xml","hash":"e731d8942da4ecdd2946d4b0f1396a685ca11425","modified":1617877822469},{"_id":"public/favicon.png","hash":"388bc1ee7d189af29cb7cc02b47fe0aba0922d27","modified":1610343922551},{"_id":"public/logo-alt.png","hash":"b3027419b010a576d26d2531470c189566fa94cf","modified":1610343922551},{"_id":"public/logo.png","hash":"388bc1ee7d189af29cb7cc02b47fe0aba0922d27","modified":1610343922551},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1610343922551},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1610343922551},{"_id":"public/css/theme.css","hash":"9935ff3cb524bb0fa66480d24b3392da670ff623","modified":1610343922551},{"_id":"public/scss/theme.css","hash":"b987ee8ba247fb614d2e1af3dc29e460b71bfe9b","modified":1610343922551},{"_id":"themes/hexo-theme-minos/_config.yml","hash":"899179ec2b558ef9e02710d50262110f86a42d52","modified":1612252970579},{"_id":"themes/hexo-theme-minos/_config.zh-tw.yml","hash":"af2fefb896612a38258cdf63bd901a4ab4121754","modified":1610344997242},{"_id":"themes/minos/LICENSE","hash":"c3aeede5ce76bbbf93cec6656644b16bc08f206b","modified":1610344573085},{"_id":"themes/minos/.gitignore","hash":"1e32cd03954ae9a15e790df87605f9bc11c33e4c","modified":1610344573085},{"_id":"themes/minos/_config.zh-tw.yml","hash":"af2fefb896612a38258cdf63bd901a4ab4121754","modified":1610344997242},{"_id":"themes/minos/README.md","hash":"c407e58328acba3e8a9442dbc8401c79cc9e8f36","modified":1610344573086},{"_id":"themes/minos/package.json","hash":"76b6439e405b7b479535d40bad6d982957ac4fa7","modified":1610344573117},{"_id":"themes/minos/package-lock.json","hash":"1fdf3ebc293bb2df47fe5c4f833c6797d5e8a546","modified":1610344573116},{"_id":"themes/minos/languages/en.yml","hash":"8a41c00471ed9fb452aab05664e04ce2460658b1","modified":1610347099933},{"_id":"themes/minos/languages/es.yml","hash":"2492235c429294caef66d220d2b958d147d2a8e7","modified":1610344573088},{"_id":"themes/minos/languages/fr.yml","hash":"14fe6ca8e0dc50791e1c4d2e190bf75774c1bf0f","modified":1610344573089},{"_id":"themes/minos/languages/ko.yml","hash":"5cdf4a031fc3fcbab392dec89053e2417485e4c7","modified":1610344573089},{"_id":"themes/minos/languages/ru.yml","hash":"d85aa077151e65bc5caf5bc9e1dbcfb69e213a93","modified":1610347099936},{"_id":"themes/minos/languages/zh-cn.yml","hash":"ba7eabb49391804f1d83acd1a4e03d1a73e02089","modified":1610344573091},{"_id":"themes/minos/languages/zh-tw.yml","hash":"235107d79bc8a6e0796d46fb409045c7c5142865","modified":1610347099938},{"_id":"themes/minos/layout/archive.ejs","hash":"4239b7b97f02d86e83878ee0c32b0eccb9893420","modified":1610347099939},{"_id":"themes/minos/layout/categories.ejs","hash":"b609b00fd03b521689dfc2d267aead94d49fcc80","modified":1610347099939},{"_id":"themes/minos/layout/category.ejs","hash":"587fc7dac77115589ed8cb368ed4a8a2a6f129af","modified":1610344573094},{"_id":"themes/minos/layout/index.ejs","hash":"64c432857172b1c775bf82c0a60ca1ecdc7d9d21","modified":1610344573105},{"_id":"themes/minos/layout/layout.ejs","hash":"d1293320d738ac7f097869a4e74f6089a79d1c46","modified":1610344573105},{"_id":"themes/minos/layout/post.ejs","hash":"bba00a681d797817baf34737467be2eca3bdcfbb","modified":1610344573109},{"_id":"themes/minos/layout/tag.ejs","hash":"b72bf2ebd9c5d9d7546f448a4331f13dc6b49950","modified":1610344573113},{"_id":"themes/minos/layout/tags.ejs","hash":"9b54bfb0c56e54ff89da9a0a390414ef13a14931","modified":1610344573114},{"_id":"themes/minos/lib/i18n.js","hash":"89a99d1d69cf8ca6be326880a8b01809535e8ac8","modified":1610347099968},{"_id":"themes/minos/lib/rfc5646.js","hash":"50de178e1fcd2224c99db56227652eb1dbaabe40","modified":1610344573116},{"_id":"themes/minos/scripts/01_check.js","hash":"799fee2a7e989e211a1727f3f52cec47ae887b18","modified":1610344573118},{"_id":"themes/minos/scripts/10_i18n.js","hash":"bb73b36056f5b6e877225d28f08f220a0485077a","modified":1610347099972},{"_id":"themes/minos/scripts/99_config.js","hash":"c4496562e4ecae5e49dbc57490edae0682f77989","modified":1610344573120},{"_id":"themes/minos/scripts/99_content.js","hash":"d73731b1eecbef4874621bf35e4ed70ca3fd8979","modified":1610347099974},{"_id":"themes/minos/scripts/99_tags.js","hash":"e78269dddd98bc9c9b02a16b1ced20ebd13f21df","modified":1610347099975},{"_id":"themes/minos/layout/comment/changyan.ejs","hash":"e0a2716e7a6c7da26182135fce4776596761a699","modified":1610344573095},{"_id":"themes/minos/layout/comment/disqus.ejs","hash":"2e35b7578478cf25544ae7f4b3535521ad73c5a2","modified":1610347099942},{"_id":"themes/minos/layout/comment/facebook.ejs","hash":"cd2fe44bc6be457d4cb6dc43c75023e9f83d66f7","modified":1610344573096},{"_id":"themes/minos/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1610344573097},{"_id":"themes/minos/layout/comment/isso.ejs","hash":"55bfe636859f118b40750bd36e2c3ef1a2ec4c0e","modified":1610344573098},{"_id":"themes/minos/layout/comment/livere.ejs","hash":"792a1e44b71ed8048903ea898aeaf74a6c109037","modified":1610344573098},{"_id":"themes/minos/layout/comment/valine.ejs","hash":"4400de3b0d2d16e2c3e79d1f6ea0841395bd5477","modified":1610344573099},{"_id":"themes/minos/layout/comment/youyan.ejs","hash":"bcb4b7282a7bcfcb514133e752c0f9d606b3c4d5","modified":1610344573099},{"_id":"themes/minos/layout/common/article.ejs","hash":"c95f16be3e9fd5a065d481595161e1de7a54822b","modified":1610347099947},{"_id":"themes/minos/layout/common/footer.ejs","hash":"29ae75b00af4f9f39dfad709398bc159cc7e5db3","modified":1610347099948},{"_id":"themes/minos/layout/common/head.ejs","hash":"4b3085f2fe06f684b8e12184dcbbdffb05509d20","modified":1610347099949},{"_id":"themes/minos/layout/common/languages.ejs","hash":"9b503282ca6e665ca41412b277debf4cd15635fd","modified":1610344573102},{"_id":"themes/minos/layout/common/navbar.ejs","hash":"075b13ec8d6450bad5f6080505449630ffecb66a","modified":1610347099950},{"_id":"themes/minos/layout/common/paginator.ejs","hash":"2ea7e6c7349d4529bfcfd50c51088c7475743686","modified":1610344573103},{"_id":"themes/minos/layout/common/scripts.ejs","hash":"0262a28c2e0f4a9e57fe1da871c517909710eca3","modified":1610344573104},{"_id":"themes/minos/layout/plugins/clipboard.ejs","hash":"3ba8b96450707cef02f243c9ec4688b1adf06c72","modified":1610344573106},{"_id":"themes/minos/layout/plugins/google-analytics.ejs","hash":"725fd626b6535c6d05b88e736eeefbca6d39e7e8","modified":1610344573107},{"_id":"themes/minos/layout/plugins/katex.ejs","hash":"9fbd9065ead2f35a2f69f9e0b2421b5bc0ae81b5","modified":1610344573108},{"_id":"themes/minos/layout/plugins/gallery.ejs","hash":"a1b9814c597f0e6b74be2bb5550e50c2915ae482","modified":1610344573107},{"_id":"themes/minos/layout/plugins/mathjax.ejs","hash":"461c9b17ceddfdfd15ce4ed648d903953d2c7e9b","modified":1610344573109},{"_id":"themes/minos/layout/share/addthis.ejs","hash":"9cc26da261527bbba8b0180e0f73e0c6ae5416b5","modified":1610344573112},{"_id":"themes/minos/layout/share/sharethis.ejs","hash":"307d905cd39ac4908ef5589829a18777f314428d","modified":1610344573112},{"_id":"themes/minos/layout/search/google-cse.ejs","hash":"ab3aa6c57d7dd045b8838280548aa447ec38ffa6","modified":1610344573110},{"_id":"themes/minos/layout/search/insight.ejs","hash":"2ef94c3ddae02db57c9dc5cf69da72b1c90c9236","modified":1610344573111},{"_id":"themes/minos/source/css/insight.scss","hash":"b7340f343e8bfe967b21b502d6cb5b78295fd9e0","modified":1610344573125},{"_id":"themes/minos/source/css/style.scss","hash":"8f2f5db5903908916440073e6e948005cbd6b529","modified":1610347099978},{"_id":"themes/minos/source/images/check.svg","hash":"16e9a53d7c49621be8e3f1a28b11bcf5e751105e","modified":1610344573127},{"_id":"themes/minos/source/images/exclamation.svg","hash":"213125a083bcef89806b4285190e050eef2660f2","modified":1610344573128},{"_id":"themes/minos/source/images/info.svg","hash":"60613abd8f8522c6cebdbb4bf7bf3fcc482245bd","modified":1610344573128},{"_id":"themes/minos/source/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1610344573129},{"_id":"themes/minos/source/images/question.svg","hash":"e4005d2eabfbd3bdd291236f56a4d385e3b337b2","modified":1610344573130},{"_id":"themes/minos/source/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1610344573130},{"_id":"themes/minos/source/js/insight.js","hash":"4be407e66c2c45333a8cf1a064a9302cd6d90422","modified":1610344573132},{"_id":"themes/minos/source/js/script.js","hash":"b51152561a894d1b0afee2d908364e69b253bfc2","modified":1610347099985},{"_id":"themes/minos/source/css/fonts/untitled-font-1.svg","hash":"e00b42e9a0cfd1e2f2e85b9af2e4906c72c6494f","modified":1610344573123},{"_id":"themes/minos/source/css/fonts/untitled-font-1.eot","hash":"3f3f192a8fa0dde81f6cf617e14b6a4ec32e5a10","modified":1610344573123},{"_id":"themes/minos/source/css/fonts/untitled-font-1.ttf","hash":"38bde5ceb6f16831c9a11b634bf921ba6f889f2f","modified":1610344573124},{"_id":"themes/minos/source/css/fonts/untitled-font-1.woff","hash":"a21774065f3ac67ac7f75c5f78fe10d28fae34c5","modified":1610344573125},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1597283356078},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1597283356101},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1597283356080},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1597283356079},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1597283356079},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1597283356079},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1597283356081},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1597283356081},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1597283356082},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1597283356082},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1597283356083},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1597283356082},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1597283356084},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1597283356084},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1597283356084},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1597283356086},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1597283356085},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1597283356085},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1597283356097},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1597283356101},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1597283356098},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1597283356098},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1597283356099},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1597283356100},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1597283356100},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1597283356098},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1597283356087},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1597283356087},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1597283356088},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1597283356089},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1597283356089},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1597283356088},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1597283356090},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1597283356091},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1597283356091},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1597283356090},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1597283356094},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1597283356095},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1597283356096},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1597283356097},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1597283356120},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1597283356096},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1597283356096},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1597283356120},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1597283356109},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1597283356102},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1597283356119},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1597283356127},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1597283356121},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1597283356122},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1597283356121},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1597283356122},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1597283356092},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1597283356129},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1597283356128},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1597283356128},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1597283356093},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1597283356094},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1597283356092},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1597283356093},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1597283356103},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1597283356104},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1597283356103},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1597283356093},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1597283356105},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1597283356105},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1597283356106},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1597283356106},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1597283356107},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1597283356109},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1597283356108},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1597283356107},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1597283356107},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1597283356111},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1597283356124},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1597283356123},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1597283356112},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1597283356116},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1597283356126},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1597283356125},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1597283356125},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1597283356126},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1597283356114},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1597283356115},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1597283356118},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1610345483923},{"_id":"themes/aloha/.editorconfig","hash":"283db36db9f92dc78a4356843f2a8eca8258062d","modified":1610345747632},{"_id":"themes/aloha/.bowerrc","hash":"09b4947b6c6f8e300f4927b96a487f16f02d702a","modified":1610345747631},{"_id":"themes/aloha/.travis.yml","hash":"6e22a6e0780514b956a86bbaa48d56748e61e765","modified":1610345747634},{"_id":"themes/aloha/.gitignore","hash":"4b470a2895981600d261a8b5e99e3d3eab194db4","modified":1610345747633},{"_id":"themes/aloha/LICENSE","hash":"c7e926756fe0df01877b265b7bf137f57b2f4bd8","modified":1610345747634},{"_id":"themes/aloha/README.md","hash":"e8e934c1dac0547491ef38ae31eade7180fc083b","modified":1610345747635},{"_id":"themes/aloha/_config.yml","hash":"dc5da1fafea7824d731ba4a331df7d7631f0dab4","modified":1610345839615},{"_id":"themes/aloha/bower.json","hash":"a0c8bbd68b949a17f7bb4937a64d42e8ea99c327","modified":1610345747636},{"_id":"themes/aloha/gulpfile.js","hash":"99b0687de20780cdbc639f02c026095f0c1cb541","modified":1610345747636},{"_id":"themes/aloha/package.json","hash":"a0c8bbd68b949a17f7bb4937a64d42e8ea99c327","modified":1610345747660},{"_id":"themes/aloha/languages/en.yml","hash":"d007d5000de294646fa872c9900c77628bce8195","modified":1610345747637},{"_id":"themes/aloha/languages/zh-CN.yml","hash":"a2043f0ebd67d4b02032ff36018b65e9882d0434","modified":1610345747638},{"_id":"themes/aloha/languages/zh-tw.yml","hash":"a2043f0ebd67d4b02032ff36018b65e9882d0434","modified":1610345773007},{"_id":"themes/aloha/layout/archive.ejs","hash":"4d19421e7da01cb3836f88b8b2d09cff831315c3","modified":1610345747655},{"_id":"themes/aloha/layout/category.ejs","hash":"781f7aad81c56f376e20ec19be9589468fd8939d","modified":1610345747656},{"_id":"themes/aloha/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1610345747656},{"_id":"themes/aloha/layout/layout.ejs","hash":"46bc344b537329e5322a4da4ef26a33d063fe753","modified":1610345747657},{"_id":"themes/aloha/layout/page.ejs","hash":"406ae60be1121344f4c65205c12bd984d107b0cf","modified":1610345747658},{"_id":"themes/aloha/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1610345747659},{"_id":"themes/aloha/layout/tag.ejs","hash":"6bd55cc1ce28ca517f983238b0b3411317553fd0","modified":1610345747659},{"_id":"themes/aloha/scripts/aloha-util.js","hash":"41ab4862d253e923d3828efbf1b858b21f8a9f99","modified":1610345747661},{"_id":"themes/aloha/scripts/filter.js","hash":"efc79ce47f2bd3e49b61abbc71a3d6c9cd5413a5","modified":1610345747662},{"_id":"themes/aloha/scripts/helper.js","hash":"0803912708018c969630fe92f040deeb091b561a","modified":1610345747664},{"_id":"themes/aloha/layout/_partial/archive-post.ejs","hash":"ec2a72eabce63a68b97d26e4b85ce0f2d88c5e16","modified":1610345747639},{"_id":"themes/aloha/layout/_partial/article.ejs","hash":"b21e3a2d00976c153fc82298095fb064349afebc","modified":1610345747641},{"_id":"themes/aloha/layout/_partial/footer.ejs","hash":"7a57b6b38078ac7fa1cc02f0ef63dbed50ce34f9","modified":1610345747641},{"_id":"themes/aloha/layout/_partial/header.ejs","hash":"040d32fc09a56851e1c2dd7a18215c20998e0551","modified":1610345747642},{"_id":"themes/aloha/layout/_partial/archive.ejs","hash":"7b36c75276eb35413549f357582b2b1781107197","modified":1610345747640},{"_id":"themes/aloha/layout/_partial/js-params.ejs","hash":"43deaad19460f74791236fba9d068a43061eccf3","modified":1610345747643},{"_id":"themes/aloha/layout/_partial/menu.ejs","hash":"3a9a15b9373e2cb9060784fc7bdac8ac6225759b","modified":1610345747644},{"_id":"themes/aloha/layout/_partial/pagination.ejs","hash":"cec815d38dbbb7312a822b4772bb82cbbc418ab8","modified":1610345747644},{"_id":"themes/aloha/layout/_partial/recent-posts.ejs","hash":"72f76ca49eb9640054a32725ef462e8085e1ca43","modified":1610345747649},{"_id":"themes/aloha/layout/_partial/search-modal.ejs","hash":"3984b71538bfcdb89db6a030f763d1ee0482fabd","modified":1610345747650},{"_id":"themes/aloha/layout/_partial/sidebar-card.ejs","hash":"1991e0cdccf136f99b3ca37feb2e87f0fe930c02","modified":1610345747650},{"_id":"themes/aloha/layout/_partial/structured-data-markup.ejs","hash":"b92ef9fe00c254133128e1e753ace34ef9bee83c","modified":1610345747651},{"_id":"themes/aloha/layout/_widget/disqus.ejs","hash":"c5fd73e89bda1735fae96e1a9b3b56f6aa28aa7f","modified":1610345747654},{"_id":"themes/aloha/layout/_widget/duoshuo.ejs","hash":"ea38ad15778a440597b433d5fd9729fb77897465","modified":1610345747654},{"_id":"themes/aloha/scripts/filter/after_post_render.js","hash":"8d2cd6dd4779d6053f0c79d9d34b9c1b787aed06","modified":1610345747663},{"_id":"themes/aloha/scripts/helper/toc.js","hash":"db11eeea39c87299488d654f2dd728c327ac720e","modified":1610345747665},{"_id":"themes/aloha/source/css/aloha.css","hash":"12839700c7b42eb32bad08b1fc23efd3f5b31265","modified":1610345747669},{"_id":"themes/aloha/source/css/aloha.less","hash":"6954a24655fa4dcfd4df64a023d121559a5ead8d","modified":1610345747669},{"_id":"themes/aloha/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1610345747687},{"_id":"themes/aloha/source/images/scrolltop.png","hash":"97ae9aeea6178c2d73ced32aa7161743b1962998","modified":1610345747689},{"_id":"themes/aloha/source/js/aloha-events.js","hash":"ac1a9586fdd2bca2b46c9528631319c357bd51d5","modified":1610345747691},{"_id":"themes/aloha/source/js/aloha.js","hash":"d79633c44596d74fc4010dbd0c2689589dc29cb7","modified":1610345747691},{"_id":"themes/aloha/source/js/semantic-ui-algolia.js","hash":"06e98d330d39a8849c45ee4eba3c95f6e82a19b8","modified":1610345747692},{"_id":"themes/aloha/layout/_partial/post/date.ejs","hash":"f0d1805eda51e0e99ecb0b0cb2bef51375784e72","modified":1610345747646},{"_id":"themes/aloha/layout/_partial/post/category.ejs","hash":"2b1b42725870b2fbff6fc58863b977bae4f4b677","modified":1610345747645},{"_id":"themes/aloha/layout/_partial/post/gallery.ejs","hash":"3bfdf3bd2b61ae772f1c09fca78fbfa1e5335ec0","modified":1610345747647},{"_id":"themes/aloha/layout/_partial/post/tag.ejs","hash":"fd3c5f247b76de10956bba97798a24f7ea7cd937","modified":1610345747648},{"_id":"themes/aloha/layout/_partial/post/nav.ejs","hash":"920203abe545f5bb57121132f7915a100d52c7d1","modified":1610345747647},{"_id":"themes/aloha/layout/_partial/post/title.ejs","hash":"055e4c80b5b6b1651618a00810a952c6b81ec8a9","modified":1610345747648},{"_id":"themes/aloha/source/css/_partial/highlight.less","hash":"04ed5daa6ca64cc7af92d6cbb655f2a8c222e85e","modified":1610345747667},{"_id":"themes/aloha/source/css/_partial/main.less","hash":"eece1f228fac25badcf214ec56f9a7649af3ffa2","modified":1610345747667},{"_id":"themes/aloha/source/css/_partial/variables.less","hash":"2efeab45e14aa5420d3ae90675c47ed081ac7f00","modified":1610345747668},{"_id":"themes/aloha/layout/_partial/theme/simple/post-description.ejs","hash":"4ec84b15615fe7ae1ec69d1ed74b7fb281e55c92","modified":1610345747652},{"_id":"themes/aloha/layout/_partial/theme/simple/post_item.ejs","hash":"0200dccf3aa943127818295d093f98a7b80ef417","modified":1610345747653},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.eot","hash":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1610345747676},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff2","hash":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1610345747684},{"_id":"themes/aloha/source/favicon.ico","hash":"732a554507e50045577bb007d0e11eeb1b775b66","modified":1610345747685},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.ttf","hash":"9088143b19979779b2116cef38b661f72d982e19","modified":1610345747681},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.woff","hash":"56ce13e71c2150d81bc972940584915181bd6081","modified":1610345747682},{"_id":"themes/aloha/source/images/avatar.jpg","hash":"8f35072a67cc7de306601cf5a56e988207430620","modified":1610345747689},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/themes/default/assets/fonts/icons.svg","hash":"0b42e5ee7daafb72b1237b9d5b7f5ab0775fffc7","modified":1610345747679},{"_id":"themes/aloha/source/css/semantic-ui/2.2.4/semantic.min.css","hash":"43e48879ba2fd994e3af5a96162209d40c43ed2e","modified":1610345747674},{"_id":"themes/hexo-theme-purer/layout/_common/fancybox.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610346005240},{"_id":"themes/hexo-theme-purer/.browserslistrc","hash":"c510e9fa07dacc673f60b12f5e0e87ddd51b745f","modified":1610346005223},{"_id":"themes/hexo-theme-purer/.eslintrc.json","hash":"475e8af5968dae3e7d57014dece47094e2f845d5","modified":1610346005224},{"_id":"themes/hexo-theme-purer/.gitignore","hash":"657489b971ba61038133a5d74f8e0f3b9b876278","modified":1610346005226},{"_id":"themes/hexo-theme-purer/LICENSE","hash":"259c27c03da43b6eb405a4e777554c72438a32f8","modified":1610346005227},{"_id":"themes/hexo-theme-purer/README.md","hash":"e252f29302c2103d2e0c4967d8e3d84b0c6c9069","modified":1610346005227},{"_id":"themes/hexo-theme-purer/_config.example.yml","hash":"30fe69d68bd3a0ed0d1e3f55bfb079b784832506","modified":1610346005229},{"_id":"themes/hexo-theme-purer/gulpfile.js","hash":"66f3dfdec0cc7dbeb038be1ace4a07075af226c1","modified":1610346005230},{"_id":"themes/hexo-theme-purer/package.json","hash":"559377de9ab6a4640397b1abad26966f9c570d2b","modified":1610346005270},{"_id":"themes/hexo-theme-purer/tailwind.config.js","hash":"32e7506bb513a167a886b59c32645890ac0074d1","modified":1610346005291},{"_id":"themes/hexo-theme-purer/languages/default.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1610346005231},{"_id":"themes/hexo-theme-purer/languages/en.yml","hash":"fd7cfced0d6df765f66ebb4cbe726df213ea0bfe","modified":1610346005232},{"_id":"themes/hexo-theme-purer/languages/zh-CN.yml","hash":"c156e46ac09b2e6e94780f5f08040d3ac0af5165","modified":1610346005233},{"_id":"themes/hexo-theme-purer/languages/zh-TW.yml","hash":"81112900e9154d6defca5ae8a7cb2f5527e980c4","modified":1610346005234},{"_id":"themes/hexo-theme-purer/layout/archive.ejs","hash":"60db91d09f773e8ca307048c7ff418ccccd9105e","modified":1610346005263},{"_id":"themes/hexo-theme-purer/layout/category.ejs","hash":"1425bb87cfa4d6e958bdcab53d91c616bfab44fe","modified":1610346005264},{"_id":"themes/hexo-theme-purer/layout/index.ejs","hash":"8e4db9634727afe1ddde996810c75c3bd4017a62","modified":1610346005265},{"_id":"themes/hexo-theme-purer/layout/layout.ejs","hash":"c57f2b3ea35252a20e7cd277f59bfc1898722d1c","modified":1610346005265},{"_id":"themes/hexo-theme-purer/layout/post.ejs","hash":"dc3763ec8ee2b82351d52bca6b214cd8827a1866","modified":1610346005266},{"_id":"themes/hexo-theme-purer/layout/tag.ejs","hash":"d05c43cc8a69d0770a3d5c409ee2a157180ba170","modified":1610346005266},{"_id":"themes/hexo-theme-purer/scripts/page_title.js","hash":"0386b04a7c20733585f814514242b24f90b50da3","modified":1610346005271},{"_id":"themes/hexo-theme-purer/.github/workflows/build.yml","hash":"14e467894ce5e5b53b4b05f2ad69ae3b0fc6d755","modified":1610346005225},{"_id":"themes/hexo-theme-purer/layout/_comment/disqus.ejs","hash":"b3df87271dba0a5ce1866fe908d7a4ff4c755261","modified":1610346005235},{"_id":"themes/hexo-theme-purer/layout/_comment/gitalk.ejs","hash":"9830f92b4f34c1558ac03e2e1083b2ecb59ee695","modified":1610346005236},{"_id":"themes/hexo-theme-purer/layout/_comment/livere.ejs","hash":"6c6fad3e8b62cdad7736b95c5fc6662e32d34c43","modified":1610346005238},{"_id":"themes/hexo-theme-purer/layout/_comment/valine.ejs","hash":"005e01526292dd5d84c5fa48b96aa52a0ac2314e","modified":1610346005239},{"_id":"themes/hexo-theme-purer/layout/_common/aside.ejs","hash":"2d8aed06b823ffec303c664f3726d9c86230c455","modified":1610346005240},{"_id":"themes/hexo-theme-purer/layout/_common/footer.ejs","hash":"3a40ee017499129deb3ee2595555b01c5a82ecde","modified":1610346005241},{"_id":"themes/hexo-theme-purer/layout/_common/head.ejs","hash":"bd61b91cf418c3601bd1b4440911d1596a1c7cec","modified":1610346005242},{"_id":"themes/hexo-theme-purer/layout/_common/header.ejs","hash":"018f459d46729ae90a66b728bfa3c0dc70212ed9","modified":1610346005242},{"_id":"themes/hexo-theme-purer/layout/_common/scripts.ejs","hash":"95d9549e7d8b6abd651539d9f3156494eef4cca1","modified":1610346005243},{"_id":"themes/hexo-theme-purer/layout/_common/social.ejs","hash":"c6d1c9a89f7099f58965d6b7be23c649eb669c1c","modified":1610346005244},{"_id":"themes/hexo-theme-purer/layout/_page/categories.ejs","hash":"25f35e638a9439a9db83d1ccae70fb537214d2bf","modified":1610346005245},{"_id":"themes/hexo-theme-purer/layout/_page/links.ejs","hash":"d17834d229bb8104d35a17d6775720b379c7bfd7","modified":1610346005245},{"_id":"themes/hexo-theme-purer/layout/_page/post.ejs","hash":"0c6421f448f5e18da2f64bfe166dbb7680b8b01c","modified":1610346005246},{"_id":"themes/hexo-theme-purer/layout/_page/repository.ejs","hash":"2b59a7b2ec56bd110046ab10c04ee56a16ab6556","modified":1610346005247},{"_id":"themes/hexo-theme-purer/layout/_page/tagcloud.ejs","hash":"450bf9c764bf3205583db65e76559c0a89dab238","modified":1610346005247},{"_id":"themes/hexo-theme-purer/layout/_partial/archive.ejs","hash":"ca615f390d671544b847bc7d0a623313ab1805b1","modified":1610346005248},{"_id":"themes/hexo-theme-purer/layout/_partial/article-list.ejs","hash":"d92168ffa058d88fd10add583d5cf3dfa668dd60","modified":1610346005249},{"_id":"themes/hexo-theme-purer/layout/_partial/article-post.ejs","hash":"16371001c65760339742ff9d5c228823a2ee23ec","modified":1610346005250},{"_id":"themes/hexo-theme-purer/layout/_partial/comment.ejs","hash":"2d2d76467c85f65059a38028c441aa65e500fb01","modified":1610346005250},{"_id":"themes/hexo-theme-purer/layout/_partial/pagination.ejs","hash":"d4931051ff557d00a3d56736e0cb74e16f4fe2b5","modified":1610346005251},{"_id":"themes/hexo-theme-purer/layout/_partial/post-item-list.ejs","hash":"2c8d61cf7a07705276c2cb9d62ee3c32fa42665e","modified":1610346005251},{"_id":"themes/hexo-theme-purer/layout/_partial/sidebar-about.ejs","hash":"ea86099835e288e1bb8b219f688816762cd2a504","modified":1610346005257},{"_id":"themes/hexo-theme-purer/layout/_partial/sidebar-toc.ejs","hash":"46cb6ebaa7ff31238ef282c86b61125253b2f573","modified":1610346005257},{"_id":"themes/hexo-theme-purer/layout/_search/index.ejs","hash":"5d2a5872fc26f543df02128448fd85c3c4de04e0","modified":1610346005258},{"_id":"themes/hexo-theme-purer/layout/_search/local.ejs","hash":"e004fdcedc3881b603f796cdd896d0ce07a4d419","modified":1610346005259},{"_id":"themes/hexo-theme-purer/layout/_widget/archive.ejs","hash":"e7252ea36766aa94c0b59d6dd1cf755b9f9f4b62","modified":1610346005260},{"_id":"themes/hexo-theme-purer/layout/_widget/category.ejs","hash":"3e257859af1dfded084402333a32635fff9b53d0","modified":1610346005261},{"_id":"themes/hexo-theme-purer/layout/_widget/recent_posts.ejs","hash":"79079c547c13fd8b60c4081eaae9b025de5d3138","modified":1610346005262},{"_id":"themes/hexo-theme-purer/layout/_widget/tag.ejs","hash":"40c5baf96c51afab831e4f246c61e5ec6c926677","modified":1610346005262},{"_id":"themes/hexo-theme-purer/layout/_widget/tagcloud.ejs","hash":"ce05004ba8e34a55a8accf79b5fc9d0b82a67465","modified":1610346005263},{"_id":"themes/hexo-theme-purer/source/css/iconfont.min.css","hash":"ad1368ebb996376abb4e4fec22fbc1efe55cdc6a","modified":1610346005280},{"_id":"themes/hexo-theme-purer/source/js/dom-event.min.js","hash":"cca69743e4f5987f686726b5ca066bf9015c0bd9","modified":1610346005281},{"_id":"themes/hexo-theme-purer/source/js/light-gallery.min.js","hash":"953423e65beb524fa48bfa420f54f4d5bb9bb95f","modified":1610346005281},{"_id":"themes/hexo-theme-purer/source/js/repository.min.js","hash":"23209310ad09344faf34fdbc5120956f3df2512f","modified":1610346005282},{"_id":"themes/hexo-theme-purer/source/js/search.min.js","hash":"0fe3edbb6034abe3ae54aa3fa0ade6aa084dcd88","modified":1610346005283},{"_id":"themes/hexo-theme-purer/src/css/common.css","hash":"e1223f78b064aa80302fdc9bd3150f567a808863","modified":1610346005284},{"_id":"themes/hexo-theme-purer/src/css/iconfont.css","hash":"f6f1b11670122a08a668e459382ec07540a7e0cb","modified":1610346005285},{"_id":"themes/hexo-theme-purer/src/js/repository.js","hash":"3a2f3b77a4fe64615883aeae410217c90bb2ea11","modified":1610346005289},{"_id":"themes/hexo-theme-purer/layout/_partial/post/category.ejs","hash":"b43418f7458d16a0d04d05ae6699a5d91333a9b1","modified":1610346005252},{"_id":"themes/hexo-theme-purer/layout/_partial/post/copyright.ejs","hash":"b0fc1f5b7a11ceb0d85ace39bc972c00cff5a904","modified":1610346005253},{"_id":"themes/hexo-theme-purer/layout/_partial/post/date.ejs","hash":"0a3368ae70fa1ded1024c4bd55630cef15a03401","modified":1610346005254},{"_id":"themes/hexo-theme-purer/layout/_partial/post/gallery.ejs","hash":"cfd86f493022b71b39ae4fb2884d3bcb73fc70ef","modified":1610346005254},{"_id":"themes/hexo-theme-purer/layout/_partial/post/tag.ejs","hash":"5a38bfb13125e804d467afe510293a4a830b9138","modified":1610346005255},{"_id":"themes/hexo-theme-purer/layout/_partial/post/title.ejs","hash":"e3c833ec2c29ff4960474289985485097431e4c3","modified":1610346005255},{"_id":"themes/hexo-theme-purer/layout/_partial/post/wordcount.ejs","hash":"72eddd7e3f3f7028d20bb42683dc061ffd632093","modified":1610346005256},{"_id":"themes/hexo-theme-purer/src/js/dom-event/menu-toggle-btn.js","hash":"057e2f1e6166d7468f4151d6d26c47498e7f4de1","modified":1610346005286},{"_id":"themes/hexo-theme-purer/src/js/dom-event/search-toggle.js","hash":"b40b9cd709afdd77a4f12dc227390782ea373a3f","modified":1610346005286},{"_id":"themes/hexo-theme-purer/src/js/light-gallery/lg-fullscreen.js","hash":"a8c3882e39c7c92531a894383500e68b7c6a95bb","modified":1610346005287},{"_id":"themes/hexo-theme-purer/src/js/light-gallery/lg-zoom.js","hash":"ff36463833d3aca6316c8474dd644a5521bcb257","modified":1610346005288},{"_id":"themes/hexo-theme-purer/src/js/light-gallery/light-gallery.js","hash":"b005db9513f42cef6d1293e4a726497e6345da63","modified":1610346005289},{"_id":"themes/hexo-theme-purer/src/js/search/local-search.js","hash":"352f5578f3947a0f89e7c4c3681ba9be09044499","modified":1610346005291},{"_id":"themes/hexo-theme-purer/package-lock.json","hash":"7b5a6d8f9e658265ee56140b04962e8b685ef1e2","modified":1610346005269},{"_id":"themes/hexo-theme-purer/source/css/common.min.css","hash":"a289a772c33014ab49d08b6d3aada63979738fc2","modified":1610346005279},{"_id":"public/css/iconfont.min.css","hash":"ad1368ebb996376abb4e4fec22fbc1efe55cdc6a","modified":1610346024850},{"_id":"public/js/dom-event.min.js","hash":"cca69743e4f5987f686726b5ca066bf9015c0bd9","modified":1610346024850},{"_id":"public/js/repository.min.js","hash":"23209310ad09344faf34fdbc5120956f3df2512f","modified":1610346024850},{"_id":"public/js/light-gallery.min.js","hash":"8c35c7d21474427dcd1956f8c0e5fd9dfe27d643","modified":1610346024850},{"_id":"public/js/search.min.js","hash":"0fe3edbb6034abe3ae54aa3fa0ade6aa084dcd88","modified":1610346024850},{"_id":"public/css/common.min.css","hash":"a289a772c33014ab49d08b6d3aada63979738fc2","modified":1610346024850},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/footer.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/header-post.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/header.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/.travis.yml","hash":"24851843a40973daaee47b2697e8b0dc4e6556b3","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/.gitignore","hash":"e16d3ff001df02e0572757bffa1147e968deeab8","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/README.cn.md","hash":"6023949265a04ca86c3f3b2fed7f9d3e8a758400","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/LICENSE","hash":"e84291eaaeb4a02004d4aa6a504cbf9475f5c562","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/package.json","hash":"2f2998f0db3e376d767dc9cddad9a6203952d6aa","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/README.md","hash":"29d54c23fa8225e95f853a691b5ae0fba7fde219","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/_config.yml","hash":"dd3b0771825a33d46d9b8fb2dd07ac1be7033613","modified":1610346331222},{"_id":"themes/hexo-theme-hiero-master/languages/es.yml","hash":"3f1bf53f4b14199dd4fec5a9d845e83651527f29","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/en.yml","hash":"30432ef15f87a660cff93074d12552d5d72c53e6","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/default.yml","hash":"30432ef15f87a660cff93074d12552d5d72c53e6","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/pt.yml","hash":"46bd5f121f4704e2cd6c0950ec18b549f03bfe5c","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/zh-TW.yml","hash":"99cf68e340ba02b4a5afdc31c86e7295ae88dfc0","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/languages/zh-CN.yml","hash":"af75c31f0b9e87e9f7fa1eaa5fe4e74d225a7366","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/categories.ejs","hash":"0788a872a9d407af8f0fad87f50416c11b512fc9","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/scripts/hierarchical-categories.js","hash":"6f761c8bf1c44e8bd4f8cb3c77cb585480d7a6ca","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/layout.ejs","hash":"e96105f14a0ca9c53f0bf143c790c069a81fc2a2","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/archive.ejs","hash":"8f56d91c8057fd045064379599a12460fdb16e1a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/tags.ejs","hash":"d98cb3bbc72dab15b1b518e30cfda58ef35c842e","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/archive-post.ejs","hash":"29a9f178815ff7f9f1393d11afe016d7230a6b51","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/after-footer.ejs","hash":"d17211328a78544b3bb984ec9461751f0bfb240a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/baidu-analytics.ejs","hash":"990da0a787e78a8e44973536cc2dd547ee5aeaaf","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/busuanzi-analytics.ejs","hash":"990024f40425098a615b901160349034e7da1dcc","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/cnzz-analytics.ejs","hash":"b0df992adf3c3c37189a66a98e6ef5ed06517ac4","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/archive.ejs","hash":"ba641e2e4801bcc9df994d0596823af1982b5a00","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/donate.ejs","hash":"046e168c6aad9889199c9a48b57dc973b4f46dab","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/facebook-sdk.ejs","hash":"06038db50d2e1febdefa3f8e1512b332c7da5a17","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/footer.ejs","hash":"1c87619018bf3e3e1adb98dd8ab96e366320c197","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/article.ejs","hash":"0daed49e64d6715c150e6f1c7c233193b5e2f14d","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/header-post.ejs","hash":"4ed9bc8b72bb236378ee8cc9ba3a3b9508b821e1","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/jsHelper.ejs","hash":"39d8783c5381098bd79a065e3b2a5cff68486513","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/comment.ejs","hash":"5cea3f3d18ff181d51ffeace4a64a71ac0f773c6","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_widget/archive.ejs","hash":"9fffde4e794b35f07c96eaec6d9373a40014da8f","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/tencent-analytics.ejs","hash":"93120ad06c5d73ca777470faf570e993a805e049","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_widget/search.ejs","hash":"9cd1f4d511e0cf5ffd95abb078bb683f2046000e","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_widget/social.ejs","hash":"013beb5d78dfe34507b766f551b4a43ff628a5fe","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_widget/recent_posts.ejs","hash":"4ce0632c42a1aed974026c88ed945421e775695e","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/head.ejs","hash":"a295c395ed479eaf4ae0d6b67d4e02a9a9a6aa68","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/search/insight.ejs","hash":"7d2a6d9639c08852345239d131784328ddf0493b","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/search/index.ejs","hash":"6ac6b28dc2085613dd380f5b3419e3040f2313df","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_extend.styl","hash":"b099bbeb871790dbc9e1e48533a1f9a52c767506","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_variables.styl","hash":"dc75c6537863aeb741acf1e838355306c4d03b61","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/search/baidu.ejs","hash":"5ab1e59191c95d58a9935f011c7e1a2129643b36","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/comment-gitment.css","hash":"0a109d778790ee7938626a6611009d80a47375ed","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/comment-ds.css","hash":"f699db93c8901b302b85385698228e8511d5e9d6","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/glyphs.css","hash":"c4088f9a347e42a31d9aabc8aa17ead3d1ed8b8e","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/hiero.css","hash":"6f8daafd4defef83d5fe36f1310fe63226e41885","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/my.css","hash":"bff3ece34f1fdbe4f83c77fd7323a7f5fce82a3e","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/style.styl","hash":"d8cdd230ffde72688581816bd8c4cc2b003ae643","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/vdonate.css","hash":"bca2d291a71e7358654c51f23e8bfb467b2bc8b2","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/js/main.js","hash":"2381eccd9a1ac3d70988f9ea5a36d34f63153bcf","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/js/my.js","hash":"88772319186b065042f9a3d4433059ca0f295174","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/js/insight.js","hash":"2995f3f94d0a9887b08e38a6f5053b6ca2997c19","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/js/scripts.js","hash":"555ad1235d59d427b2ff4793aab276ffe7ed7a87","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/preview/browser-support.png","hash":"a6d8498553550c6b18a8f22bcd2f53c993c7d677","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/js/totop.js","hash":"560baaa7bbf70ce67261b39aef61293646d9e539","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/js/vdonate.js","hash":"5738414c642d30e43943a69287b3d25a0b6be135","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/post/busuanzi-analytics.ejs","hash":"125fcedc8baf7dc67587c2ded05bfa8df868989a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/post/gallery.ejs","hash":"30028f10a4f03561e53da323d06b292e1ae7990c","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/post/category.ejs","hash":"7d167be432a0f41034f7e34ea33eb8748202358d","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/post/date.ejs","hash":"441dbe17d28d784805e206d8bbe8227e9ce94c1a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/post/tag.ejs","hash":"e6ab2d49029ed4b15204f84928b14b036a0c9c84","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/post/mathjax.ejs","hash":"a6e768593f100041b930b287171b1949d73bd6a8","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/layout/_partial/post/title.ejs","hash":"a61267f27f2148321e549344be91dbc4e22e1a48","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/archive.styl","hash":"8415b0a3b8cf696be0470f01db071ee327e5cc0a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/comment.styl","hash":"f23dbf9c1224559314f7d10b7fee030a9ffab58a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/article.styl","hash":"cfd1387ad25ba3515754e8f4d24dcf451109449a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/highlight.styl","hash":"c30e647464bda8bc425b98761c6ed36a5dbedf76","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/insight.styl","hash":"f1a152ef3b6998e313b7771ce57cb675cd95b269","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/mobile.styl","hash":"fcfbaf24634519063af46953e0eb733a8ada5556","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/sidebar-aside.styl","hash":"67e8073e88bf48761e590dbd0f66eb376b748ba9","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/fonts/athemes-glyphs.woff","hash":"f1ac9ffcc97571ceff48b68792c34de97bc289c0","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/images/favicon.ico","hash":"277372f07132304ea7933196b9cfa07fd23fa603","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/preview/Hiero_home.png","hash":"7b430bf82a3f8f4194bac272822ed697e976117f","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/preview/logo-preview.jpg","hash":"18ec270e302e6870953bb59bf57052cd663659ec","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/preview/mobile-preview.png","hash":"daa8cec3fdae123d97dd9893502e138a3779535e","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/css/images/pose.jpg","hash":"e8dcdb6e03bd02d831bae593feccb7028c9dc5e9","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/preview/code-default-preview.png","hash":"0862313cb73a498155d72aa2fa309470b12bf0cd","modified":1544338144000},{"_id":"themes/hexo-theme-hiero-master/source/preview/code-theme.jpg","hash":"8c8512fd04e6106033656d10e92d51de76cca6d8","modified":1544338144000},{"_id":"public/css/comment-ds.css","hash":"f699db93c8901b302b85385698228e8511d5e9d6","modified":1610346162450},{"_id":"public/css/my.css","hash":"bff3ece34f1fdbe4f83c77fd7323a7f5fce82a3e","modified":1610346162450},{"_id":"public/css/vdonate.css","hash":"bca2d291a71e7358654c51f23e8bfb467b2bc8b2","modified":1610346162450},{"_id":"public/js/my.js","hash":"88772319186b065042f9a3d4433059ca0f295174","modified":1610346162450},{"_id":"public/js/scripts.js","hash":"555ad1235d59d427b2ff4793aab276ffe7ed7a87","modified":1610346162450},{"_id":"public/js/vdonate.js","hash":"5738414c642d30e43943a69287b3d25a0b6be135","modified":1610346162450},{"_id":"public/css/comment-gitment.css","hash":"0a109d778790ee7938626a6611009d80a47375ed","modified":1610346162450},{"_id":"public/preview/Hiero_home.png","hash":"7b430bf82a3f8f4194bac272822ed697e976117f","modified":1610346162450},{"_id":"public/css/hiero.css","hash":"6f8daafd4defef83d5fe36f1310fe63226e41885","modified":1610346162450},{"_id":"public/css/images/pose.jpg","hash":"e8dcdb6e03bd02d831bae593feccb7028c9dc5e9","modified":1610346162450},{"_id":"public/preview/code-default-preview.png","hash":"0862313cb73a498155d72aa2fa309470b12bf0cd","modified":1610346162450},{"_id":"themes/hexo-theme-xoxo/source/js/xoxo.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610346848931},{"_id":"themes/hexo-theme-xoxo/README.md","hash":"a1f59810e70ef45fb1b918aa1bfea649bdbeed9e","modified":1610346848894},{"_id":"themes/hexo-theme-xoxo/.gitignore","hash":"e355699544358cef7ed34a09c15264e851c9b562","modified":1610346848893},{"_id":"themes/hexo-theme-xoxo/_config.yml","hash":"523a55cfb80d5aedf2e379451dc6c52d4b4b3fcb","modified":1610346848895},{"_id":"themes/hexo-theme-xoxo/gulpfile.js","hash":"d5f9cc74e2ea4a5d6de8b7931bf90e6a04a02dc9","modified":1610346848896},{"_id":"themes/hexo-theme-xoxo/package.json","hash":"3e4d6c6ada597b9cea1d3feb0429784914b3feb9","modified":1610346848915},{"_id":"themes/hexo-theme-xoxo/languages/default.yml","hash":"6a222cf724acd809581b6bbef7dd3ed41718bf7c","modified":1610346848897},{"_id":"themes/hexo-theme-xoxo/languages/en.yml","hash":"d59e82e63da3e6b47e419d127d2cf3e2c45c5595","modified":1610346848898},{"_id":"themes/hexo-theme-xoxo/languages/zh-CN.yml","hash":"d746d8254e57476ac95164131ca18913b6180e7f","modified":1610346848898},{"_id":"themes/hexo-theme-xoxo/languages/zh-TW.yml","hash":"a3c7f87c48d38ade3dbb8684dd056e85dd6f93a8","modified":1610346848899},{"_id":"themes/hexo-theme-xoxo/layout/archive.ejs","hash":"bd98c4a500422340d829b918b86963f810607205","modified":1610346848900},{"_id":"themes/hexo-theme-xoxo/layout/index.ejs","hash":"521d59e27fd397dd7338f909884e081a2706085a","modified":1610346848901},{"_id":"themes/hexo-theme-xoxo/layout/layout.ejs","hash":"c2f863ea205261e0125a18d40af6a8d43d882a40","modified":1610346848902},{"_id":"themes/hexo-theme-xoxo/layout/page.ejs","hash":"ba0faa4e6703a662297d74ec5ba83895177a4c34","modified":1610346848902},{"_id":"themes/hexo-theme-xoxo/layout/post.ejs","hash":"753eb3ffc64bb0c5b2d6e506f5fbae5034288ec3","modified":1610346848913},{"_id":"themes/hexo-theme-xoxo/layout/tag.ejs","hash":"872a0854811e637c794f883853de2d90c4076302","modified":1610346848914},{"_id":"themes/hexo-theme-xoxo/layout/partials/analytics.ejs","hash":"df9871e7d66f1b703c5b757df94fd0f3fd5ea1b6","modified":1610346848903},{"_id":"themes/hexo-theme-xoxo/layout/partials/archive-post.ejs","hash":"464086c3fd545aa2e059acade02e8382985e22e8","modified":1610346848904},{"_id":"themes/hexo-theme-xoxo/layout/partials/archive.ejs","hash":"1c7b538bee91be6213db63e4e10349df73ec1e73","modified":1610346848904},{"_id":"themes/hexo-theme-xoxo/layout/partials/copyright.ejs","hash":"0b88c686f9c2dd27f1aad0a768bc8adbd9974ee4","modified":1610346848905},{"_id":"themes/hexo-theme-xoxo/layout/partials/disqus.ejs","hash":"efdd456a2ee49d2a2eb8ada28cee68a637121e50","modified":1610346848906},{"_id":"themes/hexo-theme-xoxo/layout/partials/footer.ejs","hash":"b656ac3f0b2ddff5cd0e9011b966cad744df03aa","modified":1610346848906},{"_id":"themes/hexo-theme-xoxo/layout/partials/head.ejs","hash":"9ccc0bd6de3addfebb4720c810ff431c57b40cb2","modified":1610346848907},{"_id":"themes/hexo-theme-xoxo/layout/partials/js.ejs","hash":"281e2504e687db6dc65c0fa6a2e6ff747efbc324","modified":1610346848907},{"_id":"themes/hexo-theme-xoxo/layout/partials/nav.ejs","hash":"a0f030695e1507c4090ecca3f669bed9062e5568","modified":1610346848908},{"_id":"themes/hexo-theme-xoxo/layout/partials/prenext.ejs","hash":"8ca2261a9fc465b1f1921569ac59b9aa4c83a8c1","modified":1610346848909},{"_id":"themes/hexo-theme-xoxo/layout/partials/recent-posts.ejs","hash":"7448fd1afad053d416e70b97d8c741438b5f7dd1","modified":1610346848909},{"_id":"themes/hexo-theme-xoxo/layout/partials/scripts.ejs","hash":"edc7c81143cd624719a43d2b3edb325fd3cd8019","modified":1610346848910},{"_id":"themes/hexo-theme-xoxo/layout/partials/share.ejs","hash":"fb1b523479fcbddab967ff176c566c31e96a011c","modified":1610346848911},{"_id":"themes/hexo-theme-xoxo/layout/partials/search.ejs","hash":"1a03040e44ab0b91064c3d22a5a8d7cb70a379ca","modified":1610346848911},{"_id":"themes/hexo-theme-xoxo/layout/partials/toc.ejs","hash":"be02b5e03ecf4cac8d0fe22854a4c7632d36a6a5","modified":1610346848912},{"_id":"themes/hexo-theme-xoxo/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1610346848917},{"_id":"themes/hexo-theme-xoxo/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1610346848918},{"_id":"themes/hexo-theme-xoxo/scripts/tags/lazy-image.js","hash":"ff06f4cd722e5e62117dd26c7796c6c017ddbed6","modified":1610346848918},{"_id":"themes/hexo-theme-xoxo/source/css/common.less","hash":"5d3b78c83e36faec5ae5cf77b8f05ee90a310910","modified":1610346848920},{"_id":"themes/hexo-theme-xoxo/source/css/core.less","hash":"cc7bd8065e0d45bdec12a98d33c3c8d770c81fa0","modified":1610346848921},{"_id":"themes/hexo-theme-xoxo/source/css/highlight.less","hash":"a7ae4e53c04249f69a2b878fe5e56bf1d23a8b9d","modified":1610346848921},{"_id":"themes/hexo-theme-xoxo/source/css/normalize.css","hash":"30778d446832f3e3922c360e69c22edd65935537","modified":1610346848923},{"_id":"themes/hexo-theme-xoxo/source/css/mixin.less","hash":"e7336eca0285aa1189ad47bf6dc7f59fde60e67c","modified":1610346848922},{"_id":"themes/hexo-theme-xoxo/source/css/xoxo.css","hash":"1e9f2b43dbdea29408ccba5c0c3d5734cdf7bee6","modified":1610346848926},{"_id":"themes/hexo-theme-xoxo/source/css/variables.less","hash":"52aafe1e3a907a85b69b2cf02f14e5e9973b8388","modified":1610346848924},{"_id":"themes/hexo-theme-xoxo/source/css/xoxo.css.map","hash":"9e43c4ab3dede729c344ad4e6c1bbf9ad0bee6a9","modified":1610346848927},{"_id":"themes/hexo-theme-xoxo/source/css/xoxo.less","hash":"571d8dfc1a90f724f427bf11cc4d8aa5e1c40d6b","modified":1610346848928},{"_id":"themes/hexo-theme-xoxo/source/css/xxoo.css","hash":"5912d70c01ab6a1b389d32735d1e068a74b37c3b","modified":1610346848929},{"_id":"themes/hexo-theme-xoxo/source/css/xxoo.css.map","hash":"d07fe1cc9edd53ca13b3e43ada5ac9788da609a9","modified":1610346848930},{"_id":"public/css/common.less","hash":"5d3b78c83e36faec5ae5cf77b8f05ee90a310910","modified":1610346879661},{"_id":"public/css/core.less","hash":"cc7bd8065e0d45bdec12a98d33c3c8d770c81fa0","modified":1610346879661},{"_id":"public/css/highlight.less","hash":"a7ae4e53c04249f69a2b878fe5e56bf1d23a8b9d","modified":1610346879661},{"_id":"public/css/mixin.less","hash":"e7336eca0285aa1189ad47bf6dc7f59fde60e67c","modified":1610346879661},{"_id":"public/css/variables.less","hash":"52aafe1e3a907a85b69b2cf02f14e5e9973b8388","modified":1610346879661},{"_id":"public/css/xoxo.less","hash":"571d8dfc1a90f724f427bf11cc4d8aa5e1c40d6b","modified":1610346879661},{"_id":"public/css/xoxo.css.map","hash":"9e43c4ab3dede729c344ad4e6c1bbf9ad0bee6a9","modified":1610346879661},{"_id":"public/css/xxoo.css.map","hash":"d07fe1cc9edd53ca13b3e43ada5ac9788da609a9","modified":1610346879661},{"_id":"public/js/xoxo.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610346879661},{"_id":"public/css/xoxo.css","hash":"e3255fc18e04cf9a6f07be45ac1b34cfa0ea2b48","modified":1610346879661},{"_id":"public/css/xxoo.css","hash":"c3d0d559499adea9e89892b5d714f4ab00e0ffa9","modified":1610346879661},{"_id":"themes/minos/_config.yml","hash":"a09f9d92ec5adcb3aafe5b6d0ad9463c02e00f9a","modified":1610381265337},{"_id":"themes/minos/languages/de.yml","hash":"c11b89f6f671e10a9bda0e6ea0f49bae044f1f5e","modified":1610347099932},{"_id":"themes/minos/languages/pl.yml","hash":"df8f1f451ae52b4868b9485a0b03cdc2cf06af82","modified":1610347099936},{"_id":"themes/minos/_config.yml.example","hash":"19669c3da87a41e37687360639dfc4a6adb54456","modified":1610379869941},{"_id":"themes/hexo-theme-minos-master/_config.yml.example","hash":"bb4c9460057233749b201382baa799cdbd477d36","modified":1570458281000},{"_id":"source/_posts/記帳.md","hash":"c85cfcdb67b3c553efd0f97dbced2bb538bc1849","modified":1615021742870},{"_id":"public/2021/01/13/記帳/index.html","hash":"b5362cbf78d4919f3042e7e730b14168fe959123","modified":1616775293220},{"_id":"source/_posts/selector.md","hash":"df38d9cd6cfeb34383b0867c574e27ba2b027a3b","modified":1610610395535},{"_id":"public/2021/01/14/selector/index.html","hash":"4265569a35f8085de4af4f7a5379a9f9f0c3491f","modified":1616775293220},{"_id":"source/_posts/Traversal.md","hash":"2d6094f1be284d86154d19eb1b0859caba811be5","modified":1610710394826},{"_id":"public/2021/01/15/Traversal/index.html","hash":"b9e34f8dffc281d66d5330a97010dcfa4f633267","modified":1616775293220},{"_id":"source/_posts/JavaScript - Movie-seat-booking.md","hash":"2ed695bbe5e90fb604b640a3a7e3b6f9098a26ef","modified":1615021803951},{"_id":"public/2021/01/16/JavaScript - Movie-seat-booking/index.html","hash":"87bff6ad8e252708c2116001ecbdc9fa00804986","modified":1616775293220},{"_id":"source/_posts/JavaScript - Cookie、LocalStorage、Sessi.md","hash":"ac9a7d48be15f5dd9deb5cf748c78eed74eda4f0","modified":1615021797569},{"_id":"public/categories/Cookie/index.html","hash":"837f3c54382e2f82e43556350ad7589f0dd584fd","modified":1616775293220},{"_id":"public/categories/Cookie/LocalStorage/index.html","hash":"6cd54f562d0378a7529d824185bd55ac69ed26e2","modified":1616775293220},{"_id":"public/categories/Cookie/LocalStorage/SessionStorage/index.html","hash":"6dda8769ee04e353b61ba9298755b2fdbbc1a3da","modified":1616775293220},{"_id":"public/2021/01/18/JavaScript - Cookie、LocalStorage、Sessi/index.html","hash":"ba7bd4e220bbe055233fd8186050d1fd7e204d04","modified":1616775293220},{"_id":"source/_posts/JS進階.md","hash":"65f60b16f4382903380ef60a7a2b26f9bac1cfe0","modified":1615021901538},{"_id":"public/categories/JavaScrip/index.html","hash":"af31e86fe396dc106bf7869c3c075018cd58cb5a","modified":1617877822469},{"_id":"public/tags/map/index.html","hash":"a4582e756b78baf856cbe1a6ca093105d8eb3e04","modified":1615021904849},{"_id":"public/tags/filter/index.html","hash":"cb2405f010424911e8a5faa5fced75b9e1ba87cd","modified":1615021904849},{"_id":"public/tags/forEach/index.html","hash":"ecd31022126cda5abaf967988e16e94a3746953a","modified":1615021904849},{"_id":"public/2021/01/19/JS進階/index.html","hash":"94004e6fe74ec906f0e0092aa38807c420d5246d","modified":1616775293220},{"_id":"public/tags/find/index.html","hash":"4524c160969f492955a744208e7811adf349ff28","modified":1615021904849},{"_id":"source/_posts/cosnt、var、let.md","hash":"1133da1ba1d0da7895f5e81d28440df5552a38c8","modified":1615023816805},{"_id":"public/tags/var/index.html","hash":"cfa3b6ff7697f634264ecedae906fd97c39da429","modified":1615023824122},{"_id":"public/tags/let/index.html","hash":"c15421109ad500bd6491cf964899d91affa58835","modified":1615023824122},{"_id":"public/2021/01/20/cosnt、var、let/index.html","hash":"cc67b2f7ddbed840a996e351e2b4bc0130799f18","modified":1615023824122},{"_id":"public/tags/const/index.html","hash":"5a735c987dfb6103f1dcf8255a67b25cfde13eb0","modified":1615023824122},{"_id":"source/_posts/Music-player.md","hash":"b7b231ff4109f151f36eaef9781540636f690680","modified":1615021816165},{"_id":"public/2021/01/22/Music-player/index.html","hash":"f0260b29baab970820c716ec97d23ca3705826af","modified":1616775293220},{"_id":"public/tags/JavaScrip/index.html","hash":"b26e0a8554a12dcd6cac847691e7442d6f396a8c","modified":1617877822469},{"_id":"source/_posts/Infinite_scroll_blog.md","hash":"e14c37ccb751a2a2983d1212e9d83f39a267144f","modified":1615021789847},{"_id":"public/2021/01/26/Infinite_scroll_blog/index.html","hash":"78146549c537a4993565c39fa380b7dcfe3b17b8","modified":1616775293220},{"_id":"public/categories/JavaScrip/作品集/index.html","hash":"89f9170367558708a5b665771488f9cc40010f2f","modified":1614666130313},{"_id":"source/_posts/typingGmae.md","hash":"09de8e0e41fc3a5357272fc74803293fcb7d0abf","modified":1615021837483},{"_id":"public/archives/2021/page/2/index.html","hash":"06c2abe2c864f05baba6a93bd7ff54392b630b27","modified":1612252675102},{"_id":"public/archives/2021/01/page/2/index.html","hash":"b2189bc8f11adda5c468280bf057238b4413f768","modified":1612252675102},{"_id":"public/2021/01/29/typingGmae/index.html","hash":"f342029507d551380ba58ad0a729a729c72b55d1","modified":1616775293220},{"_id":"source/_posts/猜數字.md","hash":"6004802008587a4bd1b037504c9c0cf9f656f2a7","modified":1615021753196},{"_id":"public/archives/2021/02/index.html","hash":"659f8aa820e2d68e5760d5525c48d6129287d8ae","modified":1616775293220},{"_id":"public/2021/02/01/猜數字/index.html","hash":"73a6b3965dcf26ad8c5b142681c73054362d7004","modified":1615021849387},{"_id":"themes/hexo-theme-minos/source/images/image.png","hash":"9b0e7cb7d49f16c2befb688986c78ecdcd8c6cb9","modified":1612253235544},{"_id":"public/images/image.png","hash":"9b0e7cb7d49f16c2befb688986c78ecdcd8c6cb9","modified":1612491978772},{"_id":"source/_posts/countdown.md","hash":"8adcb54e7ca3b41589f5b56a5d4f6f513eca9d10","modified":1615021767283},{"_id":"public/tags/偽元素/index.html","hash":"b15dcdd49c43cc9195aa0ebbcc0b10ceda99c06b","modified":1615021849387},{"_id":"public/2021/02/05/countdown/index.html","hash":"8927881884dc3e119ec66b006f480bd4e5299022","modified":1615021849387},{"_id":"source/_posts/dragdrop.md","hash":"9c39f59841ba22a732e4d8c89975a68097031746","modified":1615021776831},{"_id":"public/2021/01/02/dragdrop/index.html","hash":"1fbc45ad11c72d99d5a25d9e81def83ebbe64ba7","modified":1612771036985},{"_id":"public/tags/dragDrop/index.html","hash":"c8a9bd006dbf0312c8b1910b257499f194c7e682","modified":1615021849387},{"_id":"public/2021/02/08/dragdrop/index.html","hash":"22b00dbbaf25d9f4dff120cb69eeac483eb8296e","modified":1615021849387},{"_id":"source/_posts/mvvm.md","hash":"27269932dfb6f0e0a880c065b9b60c4b4f5fbb2b","modified":1614009824104},{"_id":"public/2020/08/13/mvvm/index.html","hash":"da15d24d39b415b0d137c4cc2992d5788c81ace0","modified":1613996976820},{"_id":"source/_posts/Vue基本語法.md","hash":"56d8f3390cd84b6788b92c0c3a7e633b520f6a6a","modified":1614010300825},{"_id":"public/2021/02/23/Vue基本語法/index.html","hash":"49a1bb3e856d99b27f36ff11f6813ced5361d3c8","modified":1614010168278},{"_id":"public/2021/02/22/mvvm/index.html","hash":"7ebfcdfb402da182fd439c19465c4fccb642f61d","modified":1614072215678},{"_id":"public/tags/mustache/index.html","hash":"11f360bc92a1d52750ca8f28c97cb7190c029272","modified":1615012846441},{"_id":"public/tags/v-once/index.html","hash":"da5a676287d365abc04312f8d91c6e08b06f6f1f","modified":1615012846441},{"_id":"public/tags/v-html/index.html","hash":"44c6561710916ac194cf8900b925e02b1c63d6c9","modified":1615012846441},{"_id":"public/tags/v-text/index.html","hash":"22332139eecceb954c82e8df459932547b53bc06","modified":1615012846441},{"_id":"public/categories/v-bind/index.html","hash":"8be30cdd65b185f5c7783bbdcb0fe048b288f5ce","modified":1615012846441},{"_id":"public/categories/v-bind/mustache/index.html","hash":"d28e30224bb60d4a3dd5843e8764e9e5a004acb9","modified":1615012846441},{"_id":"public/categories/v-bind/mustache/v-once/index.html","hash":"5256e096f1e2523917d8c6501941f1f8a2217a40","modified":1615012846441},{"_id":"public/categories/v-bind/mustache/v-once/v-html/index.html","hash":"03843358e12db730643e12f80e480343633b2575","modified":1615012846441},{"_id":"public/categories/v-bind/mustache/v-once/v-html/v-text/index.html","hash":"a4edda50ec475bc6fa6d417e2495b385aced328c","modified":1615012846441},{"_id":"public/categories/v-bind/mustache/v-once/v-html/v-text/Vue/index.html","hash":"b9d0ffbe4a6a92fe3e27660f9706562e840bf76c","modified":1615012846441},{"_id":"source/_posts/基本模板語法.md","hash":"7f525ec3dd50ecb2e3c0b67d2c1bfdb41ee38efa","modified":1614743324984},{"_id":"public/2021/02/23/基本模板語法/index.html","hash":"4fa139b7e09bb4ff14449b46d7fa07b5a9979e85","modified":1614072008357},{"_id":"source/_posts/Vue基本語法2.md","hash":"0a9c0a19b2812bc4833c562e3330db8432a45d5d","modified":1614071993415},{"_id":"public/categories/Vue/computed/index.html","hash":"a28843fccde169d758df202adf67a2cd21eca057","modified":1614072008357},{"_id":"public/categories/Vue/computed/v-on/index.html","hash":"035487ab445c4e092ddc2a0337ce82c6a3e1098e","modified":1614072008357},{"_id":"public/2021/02/23/Vue基本語法2/index.html","hash":"242bf96c57865ec16ae06b8435eda49a6a5d71d5","modified":1614139548996},{"_id":"public/2021/02/22/基本模板語法/index.html","hash":"3a7343bde376f22f93b094db24046641157724a5","modified":1615012846441},{"_id":"source/_posts/Vue基本語法( 三 ).md","hash":"70e0692717af8a2517c62bc3b77f0c50265b2049","modified":1614141104999},{"_id":"public/tags/v-show/index.html","hash":"dd5d834853afb9cb2a43cd31116696d34cf3786f","modified":1614141122790},{"_id":"public/2021/02/24/Vue基本語法( 三 )/index.html","hash":"b46fd8937307998af9c703a1c902609e7d967191","modified":1615029946998},{"_id":"source/_posts/Vue 組件一.md","hash":"da8386660562991f1d9399f0dcc04009db42bf8a","modified":1615024327033},{"_id":"public/tags/components/index.html","hash":"cf05867cbecf374b7d3c1b9184517c8552ca2a3f","modified":1616775293220},{"_id":"public/2021/02/28/Vue 組件一/index.html","hash":"50b517c062b4c14331a295720fd11214ee33086d","modified":1616775293220},{"_id":"source/_posts/Vue 組件化 ( 二 ).md","hash":"19224f55ef9770accaab5f55ba7764c03a21ca39","modified":1615014974248},{"_id":"public/2021/02/28/Vue 組件化 ( 二 )/index.html","hash":"90c29240aaf28e43fb9a23fff2bc2cdcbcfafe8e","modified":1614666130313},{"_id":"public/tags/data-函數/index.html","hash":"bddcb4b7b15a481fa52e068d9413409136c25372","modified":1615029946998},{"_id":"public/2021/02/28/Vue-組件一/index.html","hash":"7c0e4a46f6918710c5b9a70e00ca4ae4beb7f3d5","modified":1616238310477},{"_id":"public/2021/02/28/Vue-組件化-二/index.html","hash":"43368d6a25f2faeab1871b58373abe7fb6b9550e","modified":1615021603898},{"_id":"public/2021/01/26/Infinite-scroll-blog/index.html","hash":"5eabfa12d4d7251c24454e79cf420f6ab93861b7","modified":1615021849387},{"_id":"public/2021/01/18/JavaScript-Cookie、LocalStorage、Sessi/index.html","hash":"224bc3f41b9482918d67b986064c200ec65168bd","modified":1615021904849},{"_id":"public/2021/01/16/JavaScript-Movie-seat-booking/index.html","hash":"7ae157664a2443b35591b64e5bcb3474e553922e","modified":1615021849387},{"_id":"public/tags/JavaScript/index.html","hash":"de6f6dc7d861158e56c194ae41a530f50340153b","modified":1617877822469},{"_id":"public/categories/JavaScript/作品集/index.html","hash":"e0955a6adfece134a4404c42495f08a3b7bfba49","modified":1616775293220},{"_id":"source/_posts/Vue-data.md","hash":"6b76593d5fcae4f53f7d63db165b7696765b61e4","modified":1615031272414},{"_id":"public/2021/02/28/Vue-data/index.html","hash":"0402f996176c563d6f99f3c8a8af5572b7e0f71e","modified":1616775293220},{"_id":"source/_posts/props.md","hash":"65a9055d841f4a434b1f6cbc41ce4fc15a91d03a","modified":1616330011683},{"_id":"public/archives/2021/03/index.html","hash":"a2cdf97e6b3dbd43f8c256e995cce98d97fa11f9","modified":1617124514873},{"_id":"public/2021/03/08/props/index.html","hash":"bff818381966c5de26fc388e3aeaa5187d7c9c94","modified":1615170010150},{"_id":"public/tags/props/index.html","hash":"3f26ba62c3e724260fc007405a4437cb7f15758f","modified":1616330021654},{"_id":"source/_posts/2021/2021this.md","hash":"eba1948983045034b89dcc86167ab00367729d9c","modified":1616224588768},{"_id":"public/2020/08/16/2021this/index.html","hash":"63d392e367f5ff09f8e741548d6cf1dd0998365b","modified":1616238310477},{"_id":"source/_posts/2021/JavaScript 網頁事件處理.md","hash":"4f02893b25f6e13e7f5eaf76d77ab55f4ec99e1b","modified":1616405210942},{"_id":"source/_posts/2021/Flex 上課筆記.md","hash":"14a8652d08932ff4f3c2badb415fb2d0d25a3d8d","modified":1616405202159},{"_id":"source/_posts/2021/Javascript 核心篇-執行環境.md","hash":"ac2f0c2b6046d0702516479ddb5f1d6b3a90c24e","modified":1616405206952},{"_id":"source/_posts/2021/jQuery - 事件 (event).md","hash":"9919290d964117f0a5ca6cbf38d8105ff02c03e1","modified":1616405215285},{"_id":"source/_posts/2021/Vue出電商網站-1.md","hash":"aaadd53af48b597e865ea56392c27284758010e2","modified":1616226073244},{"_id":"source/_posts/2021/jQuery - 介紹.md","hash":"30d1654c08c0e841ae65cf0ea15c7df9814e0ad6","modified":1616225986222},{"_id":"source/_posts/2021/router 0924.md","hash":"6c273eeb997cad43de3a69d9563983ea829cbf60","modified":1616225663394},{"_id":"source/_posts/2021/Vue組件的使用.md","hash":"59f253f03a10cbf72651a927ab063de5af902191","modified":1616226553772},{"_id":"source/_posts/2021/v-if.md","hash":"c58141ffd6681b1556d6c4104102524e08314269","modified":1616226528859},{"_id":"source/_posts/2021/下拉選單.md","hash":"13c534e57901c0043d929d735c254d38930c5ac0","modified":1616406264437},{"_id":"source/_posts/2021/v-bind 及 v-on 的使用.md","hash":"bfce15424bca0da2cdb1a62ba178199edd18b953","modified":1616226536817},{"_id":"source/_posts/2021/列表渲染.md","hash":"05f9b5b2c694483c15eb62039ad9f3414c740616","modified":1616406254543},{"_id":"source/_posts/2021/表單綁定.md","hash":"664a40acdebe08b01fb25fd2636ab28de01b0930","modified":1616226517215},{"_id":"source/_posts/2021/表單綁定—按鈕.md","hash":"0a90ca16a6060816e0e69e8c83b9aa3a1c4a477e","modified":1616226509775},{"_id":"source/_posts/2021/計算屬性(computed).md","hash":"f8c1aea8457e7e9984a5b7c8cbc1f9624fc6c4e8","modified":1616225935111},{"_id":"source/_posts/2021/製作局部或是全域的 Loading 效果.md","hash":"0f2ad4b76e57908f256668aa855dee33866c78de","modified":1616226312312},{"_id":"public/archives/2020/06/index.html","hash":"14f76b9d9581f44831841ec002d896c73ae40fcb","modified":1616238310477},{"_id":"public/archives/2020/07/index.html","hash":"ba562d22c96f56dd0318d9de2d6a1cbb2094be9c","modified":1616389989629},{"_id":"public/2020/09/25/計算屬性(computed)/index.html","hash":"9cb2af0cff07f0e7b43ebee1ced7da2c7f5b8962","modified":1616775293220},{"_id":"public/2020/09/25/製作局部或是全域的 Loading 效果/index.html","hash":"2afa6e5d1d06a9b8d801e39d066ffecf1948d0ef","modified":1616226363412},{"_id":"public/2020/08/13/v-if/index.html","hash":"508a6ff1da7369b2906c9eeb78b7d4464a6cc14e","modified":1616226363412},{"_id":"public/2020/08/13/v-bind 及 v-on 的使用/index.html","hash":"2e07f6ef00e07e12e0caa2c74c5efb7dcf6bcdd4","modified":1616226363412},{"_id":"public/2020/08/13/列表渲染/index.html","hash":"a0213393c3ed7420f52d17906a7437f4a2f2436d","modified":1616226363412},{"_id":"public/2020/08/10/下拉選單/index.html","hash":"05d0376455c536ceeb6d1c29154e64ec3d1e3aba","modified":1616226363412},{"_id":"public/2020/08/08/Vue出電商網站-1/index.html","hash":"774d354eb7b95e2a0a466abd7a0c1d69d2609096","modified":1616226363412},{"_id":"public/2020/07/31/props/index.html","hash":"8390584c0d1c096a45cb0c4a724e4dae68af1b9a","modified":1616238310477},{"_id":"public/2020/07/31/Vue組件的使用/index.html","hash":"2931e58340d69174ce8bdb7d1d813cac3a6fac10","modified":1616226363412},{"_id":"public/2020/07/16/JavaScript 網頁事件處理/index.html","hash":"27d26913a0abf66cf3634b39c6772ce812f82b8c","modified":1616775293220},{"_id":"public/2020/07/16/jQuery - 介紹/index.html","hash":"9259dfab1c149b67e0887fd74fb3160c3a6c4826","modified":1616226363412},{"_id":"public/2020/07/16/jQuery - 事件 (event)/index.html","hash":"bf54d21f5c5decccaee7965d9fc176ce82a24e9b","modified":1616238310477},{"_id":"public/2020/06/30/表單綁定—按鈕/index.html","hash":"1a32d615b1b038e187db9cd478c16d250aa1d536","modified":1616226363412},{"_id":"public/2020/06/25/表單綁定/index.html","hash":"d6f2609ec8f53caefcd85d017def5ed44d7ded8d","modified":1616226363412},{"_id":"public/2020/06/13/Javascript 核心篇-執行環境/index.html","hash":"97ebabc171495a0fc6b1058ee293c2aaeb0c62f6","modified":1616405246317},{"_id":"public/2020/06/13/Flex 上課筆記/index.html","hash":"edd54705d0a83cf730cf08028fd397301b40043a","modified":1616405246317},{"_id":"public/categories/Loading/index.html","hash":"7752868f19ff4379444c4b9c9529a42ea8d3a8df","modified":1616405246317},{"_id":"public/tags/Loading/index.html","hash":"cc2e8733400a1d337ca1579d6d640b6b68f827f0","modified":1616405246317},{"_id":"source/_posts/2021/Axios.md","hash":"b4fe0c819187a88686aa54d1a1644b0c6ec2ab60","modified":1616405194273},{"_id":"source/_posts/2021/loading.md","hash":"936a0ef9d3d60121b8551c824a2dde363b567a61","modified":1616405229789},{"_id":"public/2021/03/10/loading/index.html","hash":"5c53746fe555ef7c8a44edf3af0d869b38304fe8","modified":1616405246317},{"_id":"public/2021/03/06/下拉選單/index.html","hash":"5f656186500f122fda5147a2d5f627fc82042e33","modified":1616406578428},{"_id":"public/2021/03/06/Vue組件的使用/index.html","hash":"6dfae7e547c99bbd860c638e32db8fdddc53db19","modified":1616238310477},{"_id":"public/2021/03/05/v-bind 及 v-on 的使用/index.html","hash":"2930c6d94c5e8ec973a8ab7553ec9abee5a439c9","modified":1616238310477},{"_id":"public/2021/03/04/v-if/index.html","hash":"5a9f02484737556ae2eb22aa3aacf2bf2c8013da","modified":1616238310477},{"_id":"public/2021/03/04/表單綁定/index.html","hash":"167a29bd8c08393ce9ca96b57f25c26b67aada04","modified":1616406578428},{"_id":"public/2021/03/03/表單綁定—按鈕/index.html","hash":"da01b46ff4d5a151900d7299ed050a028cb08e4c","modified":1616775293220},{"_id":"public/2021/03/02/列表渲染/index.html","hash":"ce4884cabe72a00bbb3ad34534839a0243a5046d","modified":1616775293220},{"_id":"public/2020/08/10/Axios/index.html","hash":"8b8442e874570f441bf9979b68782c39952cec1e","modified":1616406578428},{"_id":"public/2021/03/02/props/index.html","hash":"73ac66e9d8ae9c0e4599771f34b555cf02962777","modified":1616775293220},{"_id":"source/_posts/2021/避免顯示陣列內重複的值.md","hash":"d7ce57aec8191f2d744ab5c987a26cd07bfec8a2","modified":1616406139879},{"_id":"source/_posts/2021/顯示類型的數量.md","hash":"2d6f409581159213404ba55ee2c02394d12c8888","modified":1616405460692},{"_id":"public/2021/03/22/顯示類型的數量/index.html","hash":"7a0aff9a53d448a28feace0233264d32cc82d649","modified":1616654758496},{"_id":"public/2021/03/21/避免顯示陣列內重複的值/index.html","hash":"d65a9e4cbac7db6427b60ad0e06e2d87e25f96ba","modified":1616406143567},{"_id":"public/2021/01/13/jQuery - 事件 (event)/index.html","hash":"29c3b6fcd30acefccf1c71689ee82293a8af60b2","modified":1616775293220},{"_id":"source/_posts/Vue組件的使用.md","hash":"af053891852fd6e66c304921a72b0962b4339314","modified":1616406409913},{"_id":"source/_posts/v-bind 及 v-on 的使用.md","hash":"759706f5a86e9c020730d2bbf549f32981c191a1","modified":1616406518939},{"_id":"source/_posts/v-if.md","hash":"741c09b734cf0f9ebfec4a48e15fb91f3c20c861","modified":1616406575245},{"_id":"public/2020/09/06/Vue組件的使用/index.html","hash":"83c98319498bf539492212f87779853e5b1fd809","modified":1616406578428},{"_id":"public/2020/08/08/v-if/index.html","hash":"a4e8021fca3b07c1508164d87353e7654d05c336","modified":1616775293220},{"_id":"public/2020/08/07/v-bind-及-v-on-的使用/index.html","hash":"2188c0cf5e98f1a47f1a0672af09b7de0be66a89","modified":1616406578428},{"_id":"source/_posts/2021/this.md","hash":"601826153bbd9449991ef02ba2394a843d1b95d6","modified":1616738515420},{"_id":"public/2021/03/24/this/index.html","hash":"4dfab0812559386f895984bdd89ddd1e96093c21","modified":1616775293220},{"_id":"public/categories/JavaScrip/this/index.html","hash":"e1a2aaa5b97541eaa4d65d960863c4392a8c8d2f","modified":1616775293220},{"_id":"source/_posts/2021/this的實作.md","hash":"b2d49c09c07d63e0a0af65ecb8a903dd9ef3e121","modified":1616657494342},{"_id":"public/categories/JavaScrip/this/arrow-function/index.html","hash":"cdb766f3cf2da3b4a3b51391f6a33be33fa2f9b5","modified":1616657535137},{"_id":"public/2021/03/25/this的實作/index.html","hash":"d01630e6fb2d463df4b3128376e2ca2abe986859","modified":1616775293220},{"_id":"public/tags/arrow-function/index.html","hash":"9331fb3b45b68c01ba4d1ff5fb307e129b3a9753","modified":1616657535137},{"_id":"source/_posts/2020/Infinite_scroll_blog.md","hash":"e14c37ccb751a2a2983d1212e9d83f39a267144f","modified":1616775190337},{"_id":"source/_posts/2020/JS進階.md","hash":"65f60b16f4382903380ef60a7a2b26f9bac1cfe0","modified":1616775190524},{"_id":"source/_posts/2020/JavaScript - Cookie、LocalStorage、Sessi.md","hash":"ac9a7d48be15f5dd9deb5cf748c78eed74eda4f0","modified":1616775190385},{"_id":"source/_posts/2020/Loading.md","hash":"2771604ca5633ceea258af6374f452881b2ce0d2","modified":1616775190572},{"_id":"source/_posts/2020/Music-player.md","hash":"b7b231ff4109f151f36eaef9781540636f690680","modified":1616775190620},{"_id":"source/_posts/2020/Traversal.md","hash":"2d6094f1be284d86154d19eb1b0859caba811be5","modified":1616775190926},{"_id":"source/_posts/2020/Vue-data.md","hash":"6b76593d5fcae4f53f7d63db165b7696765b61e4","modified":1616775191199},{"_id":"source/_posts/2020/Vue 組件一.md","hash":"da8386660562991f1d9399f0dcc04009db42bf8a","modified":1616775191149},{"_id":"source/_posts/2020/Vue基本語法( 三 ).md","hash":"70e0692717af8a2517c62bc3b77f0c50265b2049","modified":1616775191253},{"_id":"source/_posts/2020/Vue基本語法2.md","hash":"0a9c0a19b2812bc4833c562e3330db8432a45d5d","modified":1616775191309},{"_id":"source/_posts/2020/JavaScript - Movie-seat-booking.md","hash":"2ed695bbe5e90fb604b640a3a7e3b6f9098a26ef","modified":1616775190477},{"_id":"source/_posts/2020/WSL.md","hash":"61458a7c41be7d49c149333a21402872b9bd9d5c","modified":1616775191397},{"_id":"source/_posts/2020/Vue組件的使用.md","hash":"af053891852fd6e66c304921a72b0962b4339314","modified":1616775191359},{"_id":"source/_posts/2020/ZAP.md","hash":"a61c621b9d6bedcdbfc1914cd476339b36f9c9ca","modified":1616775191449},{"_id":"source/_posts/2020/changeRate.md","hash":"1d538697c813876cb963f36295afc0c4ebfc712c","modified":1616775190043},{"_id":"source/_posts/2020/countdown.md","hash":"8adcb54e7ca3b41589f5b56a5d4f6f513eca9d10","modified":1616775190136},{"_id":"source/_posts/2020/formVaild.md","hash":"03dbec4b51192e09966d5199371edbfa62d73637","modified":1616775190234},{"_id":"source/_posts/2020/cosnt、var、let.md","hash":"1133da1ba1d0da7895f5e81d28440df5552a38c8","modified":1616775190087},{"_id":"source/_posts/2020/git.md","hash":"a1684e0c6cff7ca485f3e7225dfa9022d9dd08f0","modified":1616775190288},{"_id":"source/_posts/2020/mvvm.md","hash":"27269932dfb6f0e0a880c065b9b60c4b4f5fbb2b","modified":1616775190661},{"_id":"source/_posts/2020/props.md","hash":"65a9055d841f4a434b1f6cbc41ce4fc15a91d03a","modified":1616775190719},{"_id":"source/_posts/2020/dragdrop.md","hash":"9c39f59841ba22a732e4d8c89975a68097031746","modified":1616775190183},{"_id":"source/_posts/2020/pullRequest.md","hash":"90dc9b649a431945da6dcf819b9195a9e548a887","modified":1616775190781},{"_id":"source/_posts/2020/router.md","hash":"3436c16d08453d72cbf196930e03187ab18bdfe7","modified":1616775190828},{"_id":"source/_posts/2020/selector.md","hash":"df38d9cd6cfeb34383b0867c574e27ba2b027a3b","modified":1616775190877},{"_id":"source/_posts/2020/v-bind 及 v-on 的使用.md","hash":"759706f5a86e9c020730d2bbf549f32981c191a1","modified":1616775191045},{"_id":"source/_posts/2020/記帳.md","hash":"c85cfcdb67b3c553efd0f97dbced2bb538bc1849","modified":1616775189609},{"_id":"source/_posts/2020/typingGmae.md","hash":"09de8e0e41fc3a5357272fc74803293fcb7d0abf","modified":1616775190990},{"_id":"source/_posts/2020/v-if.md","hash":"741c09b734cf0f9ebfec4a48e15fb91f3c20c861","modified":1616775191096},{"_id":"source/_posts/2021/Hoisting.md","hash":"91226bee4583f71634a0ea879b5277c3e2966ec5","modified":1616776402792},{"_id":"source/_posts/2020/基本模板語法.md","hash":"7f525ec3dd50ecb2e3c0b67d2c1bfdb41ee38efa","modified":1616775189815},{"_id":"source/_posts/2020/語法修飾.md","hash":"9a6b54223f347390635dce0a77122bebd1c91447","modified":1616775189998},{"_id":"source/_posts/2020/猜數字.md","hash":"6004802008587a4bd1b037504c9c0cf9f656f2a7","modified":1616775189950},{"_id":"public/categories/JavaScrip/Hoisting/index.html","hash":"df5b0b97bb505019dba801323af674ce6218b356","modified":1616776405999},{"_id":"public/2021/03/27/Hoisting/index.html","hash":"8046ba87bc4174902539e4ff5443d974411eb34b","modified":1617124514873},{"_id":"public/2020/08/07/v-bind 及 v-on 的使用/index.html","hash":"ddd9021fa68fd3a9628a71a0f07b5a905e190b72","modified":1616775293220},{"_id":"public/tags/Hoisting/index.html","hash":"4ca3b41f2c1a93015cc029ddfbacefa3dbd05f34","modified":1616776405999},{"_id":"source/_posts/2021/python_flask.md","hash":"bbf4f49ad61bfc04d7e2c4765ee56f9059318b46","modified":1617124481526},{"_id":"public/2021/03/31/python_flask/index.html","hash":"3519b6ce4f01f8f7f3a7005ac6d7b9cd6ae56193","modified":1617873573960},{"_id":"public/categories/Python/index.html","hash":"218694ab4dc938733f5cd36ccfba867a995f7c74","modified":1617124514873},{"_id":"public/categories/Python/WSL/index.html","hash":"53c55b08bd7b43616b0b5a710e5deca6e3c93b25","modified":1617124514873},{"_id":"public/tags/Python/index.html","hash":"ff7e645b84793e278d9b7f15ee6eadc0a6eb4be3","modified":1617124514873},{"_id":"public/tags/WSL/index.html","hash":"2de425e23b7fd6eb6c0229c74d822dd5f21b94be","modified":1617124514873},{"_id":"source/_posts/2021/Scope.md","hash":"d6a2fc5eb97d1093a3332ce495199743d5fa71f8","modified":1617877816301},{"_id":"public/archives/2021/04/index.html","hash":"d5b8064dc605860acc466fa2c72debba5f81f43f","modified":1617873573960},{"_id":"public/categories/JavaScrip/Scope/index.html","hash":"898b1705ac7d0306de7201863e2526ce5a9eda9b","modified":1617877822469},{"_id":"public/2021/04/08/Scope/index.html","hash":"6d73ce9e4a48790235cd77bc449e3cd8a468654a","modified":1617877822469},{"_id":"public/tags/Scope/index.html","hash":"ed3044d4db60632347e1948a067f61d7c18f1ecb","modified":1617877822469}],"Category":[{"name":"vue","_id":"ckdsz847q0000fctr18kie02w"},{"name":"javascript","_id":"ckdszf5b2000168tr5mxqaivk"},{"name":"this","parent":"ckdszf5b2000168tr5mxqaivk","_id":"ckdszhaak0000y0tr5ifc30up"},{"name":"v-for","parent":"ckdsz847q0000fctr18kie02w","_id":"ckdszimhf0004y0tr7csn7ypl"},{"name":"v","_id":"ckdszj0va0007y0tr0heo6zw1"},{"name":"v-on","_id":"ckdszj2bw0009y0trfbgxczc7"},{"name":"v-for","_id":"ckdszjd9a000cy0tr5icpeshx"},{"name":"v-if","_id":"ckdszjtwz000ey0trdxidb2xl"},{"name":"ue","_id":"ckdszl5tz000ky0tr5h190a74"},{"name":"Vue","_id":"ckdszl6uo000my0tr7hmver8j"},{"name":"JavaScript","_id":"ckdx34osv0000kotr1o4s5tj8"},{"name":"Flex","_id":"cke29tv0y000a78tr8mba1af4"},{"name":"電商網站","_id":"ckeo4paj90001v4tr93526v5z"},{"name":"ZAP","_id":"ckiq06om60001r0tr3yx3gz8y"},{"name":"chocolatey","_id":"ckirlq87s0001zotr5zvpdxut"},{"name":"cmder","parent":"ckirlq87s0001zotr5zvpdxut","_id":"ckirlq8820004zotrccq4dca8"},{"name":"WSL1","_id":"ckisvvbyr0001yotr44xofsk2"},{"name":"Git","_id":"ckiwultyo0001z8tr822fd45t"},{"name":"Pull Request","_id":"ckj82ja2e0001r0trdewf39me"},{"name":"Javascript","_id":"ckjo90jun0001q4trcp9p9xje"},{"name":"jQuery","parent":"ckjo90jun0001q4trcp9p9xje","_id":"ckjr2brg900003ctr0tjacmuq"},{"name":"作品集","_id":"ckjr3n5po0000estr2ir8e7np"},{"name":"作品集","parent":"ckjr2brg900003ctr0tjacmuq","_id":"ckjr3n5q30002estr8y5f4ccr"},{"name":"JavaScript","parent":"ckjr3n5po0000estr2ir8e7np","_id":"ckjr3n5q60005estr9bm1hbtq"},{"name":"jQuery","parent":"ckjr3n5q60005estr9bm1hbtq","_id":"ckjr3n5q80008estrcmcm8iuu"},{"name":"Cookie","_id":"ckk2km1zi0001nktrdjng8u15"},{"name":"LocalStorage","parent":"ckk2km1zi0001nktrdjng8u15","_id":"ckk2km1zq0003nktr3yusgimp"},{"name":"SessionStorage","parent":"ckk2km1zq0003nktr3yusgimp","_id":"ckk2km1zr0004nktref9f7wux"},{"name":"JavaScrip","_id":"ckk3pwnvi00019otr41jh3ezc"},{"name":"作品集","parent":"ckk3pwnvi00019otr41jh3ezc","_id":"ckkdyp2ol0002l4trgdd55let"},{"name":"v-bind","_id":"cklgrqq1i0001q8tr33ru2j6q"},{"name":"mustache","parent":"cklgrqq1i0001q8tr33ru2j6q","_id":"cklgrqq1r0004q8tr7w8tgqjq"},{"name":"v-once","parent":"cklgrqq1r0004q8tr7w8tgqjq","_id":"cklgrqq1s0006q8trdcc7cbbe"},{"name":"v-html","parent":"cklgrqq1s0006q8trdcc7cbbe","_id":"cklgrqq1t0008q8tr68k9hyq2"},{"name":"v-text","parent":"cklgrqq1t0008q8tr68k9hyq2","_id":"cklgrqq1u000dq8tr5yq72ap6"},{"name":"Vue","parent":"cklgrqq1u000dq8tr5yq72ap6","_id":"cklgrqq1v000gq8tre6fe2aww"},{"name":"computed","parent":"ckdszl6uo000my0tr7hmver8j","_id":"cklhsszaj00023wtr059ncop8"},{"name":"v-on","parent":"cklhsszaj00023wtr059ncop8","_id":"cklhsszau00053wtra47f71qk"},{"name":"作品集","parent":"ckdx34osv0000kotr1o4s5tj8","_id":"cklxib7qz0001dwtr5bi60zdu"},{"name":"Loading","_id":"ckmhexpn70010tctr6dfu74lz"},{"name":"router","_id":"ckmhf11dm001htctr3hqq136a"},{"name":"this","parent":"ckk3pwnvi00019otr41jh3ezc","_id":"ckmoii5wo000200trghje4cbp"},{"name":"arrow function","parent":"ckmoii5wo000200trghje4cbp","_id":"ckmok5n190002xctrf6im7qyk"},{"name":"Hoisting","parent":"ckk3pwnvi00019otr41jh3ezc","_id":"ckmqi9lr2002ng0tr8btp7p2u"},{"name":"Python","_id":"ckmwa6o2e0001wktr6rt825dm"},{"name":"WSL","parent":"ckmwa6o2e0001wktr6rt825dm","_id":"ckmwa6o2v0004wktrecws2oz0"},{"name":"Scope","parent":"ckk3pwnvi00019otr41jh3ezc","_id":"ckn8o5klm0002rotrd92d9y8p"}],"Data":[],"Page":[{"type":"tags","_content":"","source":"tags/index.md","raw":"---\n# title: 標籤\ntype: \"tags\"\n---\n","date":"2021-01-10T12:48:28.221Z","updated":"2021-01-10T12:48:28.221Z","path":"tags/index.html","_id":"ckdsyu2jy00000ktr5d5c7tfe","title":"","comments":1,"layout":"page","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"type":"categories","_content":"","source":"categories/index.md","raw":"---\n# title: 分類\ntype: \"categories\"\n---\n","date":"2021-01-10T12:48:29.631Z","updated":"2021-01-10T12:48:29.631Z","path":"categories/index.html","_id":"ckdsz60dc0000s8tr42z7aws1","title":"","comments":1,"layout":"page","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2021-01-10T11:33:20.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2021-01-10 19:33:20\n---\n","updated":"2021-01-10T11:33:20.123Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"ckjr286m40000cstr9qop5st9","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"categories","date":"2021-01-10T12:45:23.000Z","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2021-01-10 20:45:23\n---\n","updated":"2021-01-10T12:45:23.949Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"ckjr4vewj0000d0trgqye2lit","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2021-01-10T12:45:21.000Z","_content":"","source":"tags/index-2.md","raw":"---\ntitle: tags\ndate: 2021-01-10 20:45:21\n---\n","updated":"2021-01-10T12:45:21.934Z","path":"tags/index-2.html","comments":1,"layout":"page","_id":"ckjr4vewm0001d0trg2a198o9","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"JavaScript - 介紹 this 的指向及觀念","date":"2020-08-15T16:00:00.000Z","_content":"\n函式裡面一定會帶上一個 this ， this 在執行函式的時候自然就會產生，不需要特別宣告\n![](https://i.imgur.com/9jiIVE1.png)\n\n![](https://i.imgur.com/OmKjnpU.png)\n\n作用域不一樣，var 的作用域在函數 (function) 裡，let 的作用域則是在區塊 (block) 裡。\n\n![6角](https://i.imgur.com/sRu5pPK.png)\n![](https://i.imgur.com/pyjbDxQ.png)\n![](https://i.imgur.com/rlpXaM8.png)\n\n### 範例 1\n\n```javascript\nvar myName = '驚不驚喜'\nfunction callName() {\n  console.log(this, this.myName)\n}\n\nvar family = {\n  myName: '老王',\n  callName: callName,\n}\nfamily.callName()\n```\n\n![](https://i.imgur.com/MNVJCY4.png)\n`this` 會指向函式前面的物件，所以 `this` 顯示 `family` 物件， `this.myName` 會顯示老王\n\n---\n\n### 範例 2\n\n```javascript\nvar myName = '驚不驚喜'\nfunction callName() {\n  console.log(this, this.myName)\n}\n\nvar family = {\n  myName: '來因',\n  callName: callName,\n  ana: {\n    myName: '安納',\n    callName: callName,\n  },\n}\nfamily.callName()\nfamily.ana.callName()\n```\n\n![](https://i.imgur.com/FB2N78p.png)\n這邊 `family` 裡面多了 `ana` 物件，\n執行 `family.callName()` 會找到物件第一層，跟範例 1 一樣\n在執行 `family.ana.callName()` 時，`callName()`的 this 會指向 `ana` 物件\n\n---\n\n### 範例 3\n\n```javascript\nvar myName = '驚不驚喜'\n\nfunction callName() {\n  console.log(this, this.myName)\n}\n\nvar family = {\n  myName: '來因',\n  callName: function () {\n    console.log(this, this.myName)\n  },\n}\n\n// family.callName();\nvar callName = family.callName\ncallName()\n```\n\n![](https://i.imgur.com/YMU8nGg.png)\n如果執行 `family.callName()` 結果會跟範例 1 一樣，但如果重新宣告 `callName` 再執行結果為什麼會是 `驚不驚喜` ?\n因為`callName` 是在全域執行，所以 this 就不會指向 `family` 這個物件，是指向全域的 `window` ，而全域 `window` 的 `myName` 就是 `驚不驚喜` 。\n就算少了 `var callName = family.callName;` 結果仍是一樣\n\n---\n\n## [參考資料: JavaScript 核心篇](https://courses.hexschool.com/courses/enrolled/670037)\n","source":"_posts/2021/2021this.md","raw":"---\ntitle: JavaScript - 介紹 this 的指向及觀念\ndate: 2020/08/16\ntags:\n  - JavaScript\n  - this\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n函式裡面一定會帶上一個 this ， this 在執行函式的時候自然就會產生，不需要特別宣告\n![](https://i.imgur.com/9jiIVE1.png)\n\n![](https://i.imgur.com/OmKjnpU.png)\n\n作用域不一樣，var 的作用域在函數 (function) 裡，let 的作用域則是在區塊 (block) 裡。\n\n![6角](https://i.imgur.com/sRu5pPK.png)\n![](https://i.imgur.com/pyjbDxQ.png)\n![](https://i.imgur.com/rlpXaM8.png)\n\n### 範例 1\n\n```javascript\nvar myName = '驚不驚喜'\nfunction callName() {\n  console.log(this, this.myName)\n}\n\nvar family = {\n  myName: '老王',\n  callName: callName,\n}\nfamily.callName()\n```\n\n![](https://i.imgur.com/MNVJCY4.png)\n`this` 會指向函式前面的物件，所以 `this` 顯示 `family` 物件， `this.myName` 會顯示老王\n\n---\n\n### 範例 2\n\n```javascript\nvar myName = '驚不驚喜'\nfunction callName() {\n  console.log(this, this.myName)\n}\n\nvar family = {\n  myName: '來因',\n  callName: callName,\n  ana: {\n    myName: '安納',\n    callName: callName,\n  },\n}\nfamily.callName()\nfamily.ana.callName()\n```\n\n![](https://i.imgur.com/FB2N78p.png)\n這邊 `family` 裡面多了 `ana` 物件，\n執行 `family.callName()` 會找到物件第一層，跟範例 1 一樣\n在執行 `family.ana.callName()` 時，`callName()`的 this 會指向 `ana` 物件\n\n---\n\n### 範例 3\n\n```javascript\nvar myName = '驚不驚喜'\n\nfunction callName() {\n  console.log(this, this.myName)\n}\n\nvar family = {\n  myName: '來因',\n  callName: function () {\n    console.log(this, this.myName)\n  },\n}\n\n// family.callName();\nvar callName = family.callName\ncallName()\n```\n\n![](https://i.imgur.com/YMU8nGg.png)\n如果執行 `family.callName()` 結果會跟範例 1 一樣，但如果重新宣告 `callName` 再執行結果為什麼會是 `驚不驚喜` ?\n因為`callName` 是在全域執行，所以 this 就不會指向 `family` 這個物件，是指向全域的 `window` ，而全域 `window` 的 `myName` 就是 `驚不驚喜` 。\n就算少了 `var callName = family.callName;` 結果仍是一樣\n\n---\n\n## [參考資料: JavaScript 核心篇](https://courses.hexschool.com/courses/enrolled/670037)\n","slug":"2021this","published":1,"updated":"2021-03-20T07:16:28.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmheenok0000w4tr2vo46jzv","content":"<html><head></head><body><p>函式裡面一定會帶上一個 this ， this 在執行函式的時候自然就會產生，不需要特別宣告<br><img src=\"https://i.imgur.com/9jiIVE1.png\"></p>\n<p><img src=\"https://i.imgur.com/OmKjnpU.png\"></p>\n<p>作用域不一樣，var 的作用域在函數 (function) 裡，let 的作用域則是在區塊 (block) 裡。</p>\n<p><img src=\"https://i.imgur.com/sRu5pPK.png\" alt=\"6角\"><br><img src=\"https://i.imgur.com/pyjbDxQ.png\"><br><img src=\"https://i.imgur.com/rlpXaM8.png\"></p>\n<h3 id=\"範例-1\"><a href=\"#範例-1\" class=\"headerlink\" title=\"範例 1\"></a>範例 1</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">'驚不驚喜'</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">this</span>.myName)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> family = {</span><br><span class=\"line\">  myName: <span class=\"hljs-string\">'老王'</span>,</span><br><span class=\"line\">  callName: callName,</span><br><span class=\"line\">}</span><br><span class=\"line\">family.callName()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/MNVJCY4.png\"><br><code>this</code> 會指向函式前面的物件，所以 <code>this</code> 顯示 <code>family</code> 物件， <code>this.myName</code> 會顯示老王</p>\n<hr>\n<h3 id=\"範例-2\"><a href=\"#範例-2\" class=\"headerlink\" title=\"範例 2\"></a>範例 2</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">'驚不驚喜'</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">this</span>.myName)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> family = {</span><br><span class=\"line\">  myName: <span class=\"hljs-string\">'來因'</span>,</span><br><span class=\"line\">  callName: callName,</span><br><span class=\"line\">  ana: {</span><br><span class=\"line\">    myName: <span class=\"hljs-string\">'安納'</span>,</span><br><span class=\"line\">    callName: callName,</span><br><span class=\"line\">  },</span><br><span class=\"line\">}</span><br><span class=\"line\">family.callName()</span><br><span class=\"line\">family.ana.callName()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/FB2N78p.png\"><br>這邊 <code>family</code> 裡面多了 <code>ana</code> 物件，<br>執行 <code>family.callName()</code> 會找到物件第一層，跟範例 1 一樣<br>在執行 <code>family.ana.callName()</code> 時，<code>callName()</code>的 this 會指向 <code>ana</code> 物件</p>\n<hr>\n<h3 id=\"範例-3\"><a href=\"#範例-3\" class=\"headerlink\" title=\"範例 3\"></a>範例 3</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> myName = <span class=\"hljs-string\">'驚不驚喜'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">this</span>.myName)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> family = {</span><br><span class=\"line\">  myName: <span class=\"hljs-string\">'來因'</span>,</span><br><span class=\"line\">  callName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">this</span>.myName)</span><br><span class=\"line\">  },</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// family.callName();</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> callName = family.callName</span><br><span class=\"line\">callName()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/YMU8nGg.png\"><br>如果執行 <code>family.callName()</code> 結果會跟範例 1 一樣，但如果重新宣告 <code>callName</code> 再執行結果為什麼會是 <code>驚不驚喜</code> ?<br>因為<code>callName</code> 是在全域執行，所以 this 就不會指向 <code>family</code> 這個物件，是指向全域的 <code>window</code> ，而全域 <code>window</code> 的 <code>myName</code> 就是 <code>驚不驚喜</code> 。<br>就算少了 <code>var callName = family.callName;</code> 結果仍是一樣</p>\n<hr>\n<h2 id=\"參考資料-JavaScript-核心篇\"><a href=\"#參考資料-JavaScript-核心篇\" class=\"headerlink\" title=\"參考資料: JavaScript 核心篇\"></a><a href=\"https://courses.hexschool.com/courses/enrolled/670037\">參考資料: JavaScript 核心篇</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"this","path":"tags/this/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"","more":"<p>函式裡面一定會帶上一個 this ， this 在執行函式的時候自然就會產生，不需要特別宣告<br><img src=\"https://i.imgur.com/9jiIVE1.png\"></p>\n<p><img src=\"https://i.imgur.com/OmKjnpU.png\"></p>\n<p>作用域不一樣，var 的作用域在函數 (function) 裡，let 的作用域則是在區塊 (block) 裡。</p>\n<p><img src=\"https://i.imgur.com/sRu5pPK.png\" alt=\"6角\"><br><img src=\"https://i.imgur.com/pyjbDxQ.png\"><br><img src=\"https://i.imgur.com/rlpXaM8.png\"></p>\n<h3 id=\"範例-1\"><a href=\"#範例-1\" class=\"headerlink\" title=\"範例 1\"></a>範例 1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">&#x27;驚不驚喜&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>.myName)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">&#x27;老王&#x27;</span>,</span><br><span class=\"line\">  callName: callName,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">family.callName()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/MNVJCY4.png\"><br><code>this</code> 會指向函式前面的物件，所以 <code>this</code> 顯示 <code>family</code> 物件， <code>this.myName</code> 會顯示老王</p>\n<hr>\n<h3 id=\"範例-2\"><a href=\"#範例-2\" class=\"headerlink\" title=\"範例 2\"></a>範例 2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">&#x27;驚不驚喜&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>.myName)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">&#x27;來因&#x27;</span>,</span><br><span class=\"line\">  callName: callName,</span><br><span class=\"line\">  ana: &#123;</span><br><span class=\"line\">    myName: <span class=\"string\">&#x27;安納&#x27;</span>,</span><br><span class=\"line\">    callName: callName,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">family.callName()</span><br><span class=\"line\">family.ana.callName()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/FB2N78p.png\"><br>這邊 <code>family</code> 裡面多了 <code>ana</code> 物件，<br>執行 <code>family.callName()</code> 會找到物件第一層，跟範例 1 一樣<br>在執行 <code>family.ana.callName()</code> 時，<code>callName()</code>的 this 會指向 <code>ana</code> 物件</p>\n<hr>\n<h3 id=\"範例-3\"><a href=\"#範例-3\" class=\"headerlink\" title=\"範例 3\"></a>範例 3</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">&#x27;驚不驚喜&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>.myName)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">&#x27;來因&#x27;</span>,</span><br><span class=\"line\">  callName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>.myName)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// family.callName();</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> callName = family.callName</span><br><span class=\"line\">callName()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/YMU8nGg.png\"><br>如果執行 <code>family.callName()</code> 結果會跟範例 1 一樣，但如果重新宣告 <code>callName</code> 再執行結果為什麼會是 <code>驚不驚喜</code> ?<br>因為<code>callName</code> 是在全域執行，所以 this 就不會指向 <code>family</code> 這個物件，是指向全域的 <code>window</code> ，而全域 <code>window</code> 的 <code>myName</code> 就是 <code>驚不驚喜</code> 。<br>就算少了 <code>var callName = family.callName;</code> 結果仍是一樣</p>\n<hr>\n<h2 id=\"參考資料-JavaScript-核心篇\"><a href=\"#參考資料-JavaScript-核心篇\" class=\"headerlink\" title=\"參考資料: JavaScript 核心篇\"></a><a href=\"https://courses.hexschool.com/courses/enrolled/670037\">參考資料: JavaScript 核心篇</a></h2>"},{"title":"Vue - 下拉選單","date":"2021-03-05T16:00:00.000Z","description":"可用在選年份日期等等。","_content":"\n先將 `select` 用 `v-model` 做作雙向綁定，因為 `number` 是空字串，所以在一開始 `option` 會指定到 `value` 為空值的選項。\n假設 `option` 裡面沒有 `value` ，那 `option` 就會顯示 2020 等年分，但給了 `value` 就會顯示 `value` 值。\n\n<!-- more -->\n\n```html\n<div id=\"app\">\n  <select v-model=\"number\">\n    <option disabled value=\"\">select number</option>\n    <option value=\"001\">2020</option>\n    <option value=\"002\">2021</option>\n    <option value=\"003\">2022</option>\n\n    <!--<option>2020</option>\n    <option>2021</option>\n    <option>2022</option> -->\n  </select>\n  <h1>{{number}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      number: '',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/qBZOOWY?editors=1010)\n![](https://i.imgur.com/xRbTzEh.png)\n\n---\n\n下拉選單還可以綁定到陣列上\n\n```html\n<div id=\"app\">\n  <select>\n    <option v-for=\"number in numbers\" :value=\"number\">{{number}}</option>\n  </select>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      numbers: [2020, 2021, 2022],\n    },\n  })\n</script>\n```\n\n![](https://i.imgur.com/oBE9iQg.png)\n\n利用 `v-for` 的方式將 `option` 內的 `value` 指定為 `number` ，在用 `v-model` 將初始值設定為 2020，範例如下\n\n```html\n<div id=\"app\">\n  <select v-model=\"selectNumber\">\n    <option v-for=\"number in numbers\">{{number}}</option>\n  </select>\n  <h1>{{selectNumber}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      numbers: [2020, 2021, 2022],\n      selectNumber: 2020,\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/zYqvrMY?editors=1010)\n\n---\n\n還有月份選擇，但有更為簡潔的寫法，範例如下\n\n直接在 `option` 裡面寫最大數字，並將初始值 `selectMonth` 設定為 `1`，這樣就有下拉選單裡面有包含 `12` 個數字\n\n```html\n<div id=\"app\">\n  <select v-model=\"selectMonth\">\n    <option v-for=\"month in 12\">{{month}}</option>\n  </select>\n  <h1>{{selectMonth}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      selectMonth: 1,\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/dyMYGxv?editors=1010)\n\n---\n\n### 陣列包物件寫法\n\n透過陣列將陣列內的物件顯示出來\n\n```html\n<div id=\"app\">\n  <select v-model=\"selectGender\">\n    <option v-for=\"option in options\" :value=\"option.value\">\n      {{option.text}}\n    </option>\n  </select>\n  <h1>{{selectGender}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      options: [\n        { value: 1, text: 'boy' },\n        { value: 2, text: 'girl' },\n        { value: 3, text: 'others' },\n      ],\n      selectGender: 1,\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/jOqbqEJ?editors=1010)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","source":"_posts/2021/下拉選單.md","raw":"---\ntitle: Vue - 下拉選單\ndate: 2021/03/06\ntags: v-model\ncategories: Vue\ndescription: 可用在選年份日期等等。\n---\n\n先將 `select` 用 `v-model` 做作雙向綁定，因為 `number` 是空字串，所以在一開始 `option` 會指定到 `value` 為空值的選項。\n假設 `option` 裡面沒有 `value` ，那 `option` 就會顯示 2020 等年分，但給了 `value` 就會顯示 `value` 值。\n\n<!-- more -->\n\n```html\n<div id=\"app\">\n  <select v-model=\"number\">\n    <option disabled value=\"\">select number</option>\n    <option value=\"001\">2020</option>\n    <option value=\"002\">2021</option>\n    <option value=\"003\">2022</option>\n\n    <!--<option>2020</option>\n    <option>2021</option>\n    <option>2022</option> -->\n  </select>\n  <h1>{{number}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      number: '',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/qBZOOWY?editors=1010)\n![](https://i.imgur.com/xRbTzEh.png)\n\n---\n\n下拉選單還可以綁定到陣列上\n\n```html\n<div id=\"app\">\n  <select>\n    <option v-for=\"number in numbers\" :value=\"number\">{{number}}</option>\n  </select>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      numbers: [2020, 2021, 2022],\n    },\n  })\n</script>\n```\n\n![](https://i.imgur.com/oBE9iQg.png)\n\n利用 `v-for` 的方式將 `option` 內的 `value` 指定為 `number` ，在用 `v-model` 將初始值設定為 2020，範例如下\n\n```html\n<div id=\"app\">\n  <select v-model=\"selectNumber\">\n    <option v-for=\"number in numbers\">{{number}}</option>\n  </select>\n  <h1>{{selectNumber}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      numbers: [2020, 2021, 2022],\n      selectNumber: 2020,\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/zYqvrMY?editors=1010)\n\n---\n\n還有月份選擇，但有更為簡潔的寫法，範例如下\n\n直接在 `option` 裡面寫最大數字，並將初始值 `selectMonth` 設定為 `1`，這樣就有下拉選單裡面有包含 `12` 個數字\n\n```html\n<div id=\"app\">\n  <select v-model=\"selectMonth\">\n    <option v-for=\"month in 12\">{{month}}</option>\n  </select>\n  <h1>{{selectMonth}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      selectMonth: 1,\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/dyMYGxv?editors=1010)\n\n---\n\n### 陣列包物件寫法\n\n透過陣列將陣列內的物件顯示出來\n\n```html\n<div id=\"app\">\n  <select v-model=\"selectGender\">\n    <option v-for=\"option in options\" :value=\"option.value\">\n      {{option.text}}\n    </option>\n  </select>\n  <h1>{{selectGender}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      options: [\n        { value: 1, text: 'boy' },\n        { value: 2, text: 'girl' },\n        { value: 3, text: 'others' },\n      ],\n      selectGender: 1,\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/jOqbqEJ?editors=1010)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","slug":"下拉選單","published":1,"updated":"2021-03-22T09:44:24.437Z","_id":"ckmhei7le0001tctrf26c6ly8","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>先將 <code>select</code> 用 <code>v-model</code> 做作雙向綁定，因為 <code>number</code> 是空字串，所以在一開始 <code>option</code> 會指定到 <code>value</code> 為空值的選項。<br>假設 <code>option</code> 裡面沒有 <code>value</code> ，那 <code>option</code> 就會顯示 2020 等年分，但給了 <code>value</code> 就會顯示 <code>value</code> 值。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"number\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">disabled</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span>select number<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"001\"</span>&gt;</span>2020<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"002\"</span>&gt;</span>2021<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"003\"</span>&gt;</span>2022<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">&lt;!--&lt;option&gt;2020&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">    &lt;option&gt;2021&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">    &lt;option&gt;2022&lt;/option&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{number}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      number: <span class=\"hljs-string\">''</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/qBZOOWY?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/xRbTzEh.png\"></p>\n<hr>\n<p>下拉選單還可以綁定到陣列上</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"number in numbers\"</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">\"number\"</span>&gt;</span>{{number}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      numbers: [2020, 2021, 2022],</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/oBE9iQg.png\"></p>\n<p>利用 <code>v-for</code> 的方式將 <code>option</code> 內的 <code>value</code> 指定為 <code>number</code> ，在用 <code>v-model</code> 將初始值設定為 2020，範例如下</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"selectNumber\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"number in numbers\"</span>&gt;</span>{{number}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{selectNumber}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      numbers: [2020, 2021, 2022],</span><br><span class=\"line\">      selectNumber: 2020,</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/zYqvrMY?editors=1010\">codepen</a></p>\n<hr>\n<p>還有月份選擇，但有更為簡潔的寫法，範例如下</p>\n<p>直接在 <code>option</code> 裡面寫最大數字，並將初始值 <code>selectMonth</code> 設定為 <code>1</code>，這樣就有下拉選單裡面有包含 <code>12</code> 個數字</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"selectMonth\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"month in 12\"</span>&gt;</span>{{month}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{selectMonth}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      selectMonth: 1,</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/dyMYGxv?editors=1010\">codepen</a></p>\n<hr>\n<h3 id=\"陣列包物件寫法\"><a href=\"#陣列包物件寫法\" class=\"headerlink\" title=\"陣列包物件寫法\"></a>陣列包物件寫法</h3><p>透過陣列將陣列內的物件顯示出來</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"selectGender\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"option in options\"</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">\"option.value\"</span>&gt;</span></span><br><span class=\"line\">      {{option.text}}</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{selectGender}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      options: [</span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'boy'</span> },</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'girl'</span> },</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'others'</span> },</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      selectGender: 1,</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/jOqbqEJ?editors=1010\">codepen</a></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"v-model","path":"tags/v-model/"}],"excerpt":"<html><head></head><body><p>先將 <code>select</code> 用 <code>v-model</code> 做作雙向綁定，因為 <code>number</code> 是空字串，所以在一開始 <code>option</code> 會指定到 <code>value</code> 為空值的選項。<br>假設 <code>option</code> 裡面沒有 <code>value</code> ，那 <code>option</code> 就會顯示 2020 等年分，但給了 <code>value</code> 就會顯示 <code>value</code> 值。</p></body></html>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;number&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>select number<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;001&quot;</span>&gt;</span>2020<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;002&quot;</span>&gt;</span>2021<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;003&quot;</span>&gt;</span>2022<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;option&gt;2020&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;option&gt;2021&lt;/option&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;option&gt;2022&lt;/option&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;number&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      number: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/qBZOOWY?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/xRbTzEh.png\"></p>\n<hr>\n<p>下拉選單還可以綁定到陣列上</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;number in numbers&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;number&quot;</span>&gt;</span>&#123;&#123;number&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      numbers: [2020, 2021, 2022],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/oBE9iQg.png\"></p>\n<p>利用 <code>v-for</code> 的方式將 <code>option</code> 內的 <code>value</code> 指定為 <code>number</code> ，在用 <code>v-model</code> 將初始值設定為 2020，範例如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selectNumber&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;number in numbers&quot;</span>&gt;</span>&#123;&#123;number&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;selectNumber&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      numbers: [2020, 2021, 2022],</span><br><span class=\"line\">      selectNumber: 2020,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/zYqvrMY?editors=1010\">codepen</a></p>\n<hr>\n<p>還有月份選擇，但有更為簡潔的寫法，範例如下</p>\n<p>直接在 <code>option</code> 裡面寫最大數字，並將初始值 <code>selectMonth</code> 設定為 <code>1</code>，這樣就有下拉選單裡面有包含 <code>12</code> 個數字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selectMonth&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;month in 12&quot;</span>&gt;</span>&#123;&#123;month&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;selectMonth&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      selectMonth: 1,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/dyMYGxv?editors=1010\">codepen</a></p>\n<hr>\n<h3 id=\"陣列包物件寫法\"><a href=\"#陣列包物件寫法\" class=\"headerlink\" title=\"陣列包物件寫法\"></a>陣列包物件寫法</h3><p>透過陣列將陣列內的物件顯示出來</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selectGender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;option in options&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;option.value&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;option.text&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;selectGender&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      options: [</span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">&#x27;boy&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">&#x27;girl&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">3</span>, <span class=\"attr\">text</span>: <span class=\"string\">&#x27;others&#x27;</span> &#125;,</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      selectGender: 1,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/jOqbqEJ?editors=1010\">codepen</a></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2>"},{"title":"JavaScript - 執行環境","date":"2020-06-12T16:00:00.000Z","description":"介紹 Javascript 如何執行跟作用域","_content":"\nJavaScript 是直譯式語言\n當 JavaScript 在函示內找不到變數就會向外查找\nwindow === this\n但 this 會隨執行環境而有所不同\n\n<!--more-->\n\n## 語法作用域 (Lexical scope)\n\n```javascript\nvar value = 1\nfunction fn1() {\n  console.log(value) // 語法作用域：1\n  // 動態作用域：2\n}\nfunction fn2() {\n  var value = 2\n  fn1()\n}\nfn2()\n```\n\n1. **語法作用域的順序:**\n   (因為 JS 式語法作用域，所以會跑這個步驟)fu2 執行 value 值就會變 2 ，在執行 fn1 ，因為裡面沒有 value 值所以會向外查找全域變數 value = 1，函式執行完結果為 1\n2. **動態作用域的順序:**\n   全域賦予 value=1，這時候會執行 fn2 ，並且重新定義 value = 2 ，再執行 fn1 ，這時會開始查找 value 值在哪裡，這時因為函式調用的時候才會決定它的作用域，並向上一層函式查找宣告的變數值\n\n   ***\n\n## 範圍鍊\n\n```javascript\nvar person = '老媽'\nfunction sayHi() {\n  console.log('hi ' + person)\n}\nfunction doMorningWork() {\n  var person = '老爸'\n  function meetAuntie() {\n    var person = '漂亮阿姨'\n    console.log('哈囉～ ' + person)\n  }\n  // sayHi();\n  //meetAuntie();\n}\nsayHi()\n//doMorningWork();  // 執行\n```\n\n因為 sayHi function 裡面沒有 person 變數，所以會向外尋找\n![](https://i.imgur.com/lATjYBE.png)\n\n```javascript\nvar person = '老媽'\nfunction sayHi() {\n  console.log('hi ' + person)\n}\nfunction doMorningWork() {\n  var person = '老爸'\n  function meetAuntie() {\n    var person = '漂亮阿姨'\n    console.log('哈囉～ ' + person)\n  }\n  sayHi()\n  //meetAuntie();\n}\n//sayHi();\ndoMorningWork() // 執行\n```\n\ndoMorningWork 函式雖然有 person 變數，但不會影響到 sayHi 函式的範圍練，所以 sayHi 函式一樣會向外尋找 person 變數\n![](https://i.imgur.com/lbU8OCA.png)\n\n```javascript\nvar person = '老媽'\nfunction sayHi() {\n  console.log('hi ' + person)\n}\nfunction doMorningWork() {\n  var person = '老爸'\n  function meetAuntie() {\n    var person = '漂亮阿姨'\n    console.log('哈囉～ ' + person)\n  }\n  // sayHi();\n  meetAuntie()\n}\n//sayHi();\ndoMorningWork() // 執行\n```\n\n因為 meetAuntie 函式本身就有 person 變數，所以不會像尋找，結果為 哈囉~ 漂亮阿姨\n如果把 var person = '漂亮阿姨'; 註解掉，那 person 變數會向外尋找。結果為 哈囉~老爸\n\n#### 論是: 只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止\n\n---\n\n## 提升\n\n![](https://i.imgur.com/uXG14Oe.png)\n先想像記憶體是成對的，左邊的格子表示 key，右邊是 value。\n再創造環境的時候，會先把 a (變數)放到記憶體裡面(左邊格子)，但這時候還不會給 a 值，所以用 console.log 的時候會 defined ，等到執行時才會把 1 套到 a 裡面。\n\n所以執行環境的時候會先創造環境，創造環境會先把程式碼裡面的變數全部挑出來並存在記憶體上，這個動作稱為\"提升 Hoisting\"，在這個階段還不會給他值，所以如果在此時去取用這些變數的話，值會是 undefined。到執行環境的時候才會賦予它的值\n\n![](https://i.imgur.com/GRULStI.png)\n\n再創造階段 a 是沒有值的，所以會顯示 undefined，直到宣告階段才會把值帶入 。\n但是函式會把整個函式內容都先載入，所以**函式再創造階段就已經可以運行了**。\n\n```javascript\nvar ming //創造階段\nming = '小名' //執行\nconsole.log('ming')\n\ncallName()\n\nfunction callName() {\n  console.log('呼叫小名')\n}\n//會等於下列\n//-----------------------\n//創造階段\nfunction callName() {\n  console.log('呼叫小名')\n}\n//執行\ncallName()\n```\n\n![](https://i.imgur.com/I8kQ3ob.png)\n\n### 函式表達式寫法:\n\n```javascript\ncallName() //這時候的 callName 是還沒有被定義的\nvar callName = function () {\n  console.log('呼叫小名')\n}\n```\n\n輸出如下圖:\n![](https://i.imgur.com/32RDACz.png)\n\n```javascript\n//創造階段\nvar callName(); //這時候 callName 被定義了但沒給值，所以會undefine\n//執行\ncallName = function(){ //這時 function 已經被賦予到 callName  這個函式上\n    console.log('呼叫小名');\n    }\n\n callName(); //才可呼叫\n```\n\n![](https://i.imgur.com/ddWNmYt.png)\n\n### 範例:\n\n```javascript\n// var callName = function () {\n//   console.log('呼叫小明 2');\n// }\n// function callName() {\n//   console.log('呼叫小明 1');\n// }\n// callName();\n//以上為原式\n//-----------------------------------\n//拆解過後\nfunction callName() {\n  // 首先函式優先 創造階段\n  console.log('呼叫小明 1')\n}\nvar callName //第2階段才把變數往前移\ncallName = function () {\n  //因為變數往前移的關係，這時 function 已經被賦予到 callName  這個函式上\n  console.log('呼叫小明 2')\n}\n//執行\ncallName()\n```\n\n![](https://i.imgur.com/uPdFhSw.png)\n\n## 範例:\n\n```javascript\n//創造，函式陳述式優先創造\nfunction callName() {\n  console.log('小明')\n}\n\ncallName() // 第一次執行\nfunction callName() {\n  console.log('杰倫')\n}\n```\n\n![](https://i.imgur.com/FwfUh7L.png)\n\n## 拆解&分析:\n\n```javascript\n// 創造\nfunction callName() {\n  console.log('小明')\n}\nfunction callName() {\n  console.log('杰倫')\n}\n// 執行\ncallName() // 第一次執行\ncallName() // 第二次執行\n```\n\n兩個函式長一樣，後面得值會蓋掉前面的值\n\n### 測驗分析:\n\n```javascript\nfunction whosName() {\n  if (name) {\n    name = '杰倫'\n  }\n}\nvar name = '小明'\nconsole.log(name)\nwhosName()\n```\n\n因為創造階段，函式陳述式優先創造，變數 name 只生出記憶體，並未賦予值執行階段，呼叫 whosName 的函式時，name 向外查找 name 變數，但未賦予值，所以在 whosName 裡面的 name 被賦予為\"杰倫\"的值\n函式跟一般變數不太一樣，函式陳述式在創造環境階段會被優先載入，記憶體在這個階段就會有函式的完整內容。所以函式在創造環境階段就已經可以被運行。\n\n## Not Defined VS undefined\n\n```\nvar a ;\nconsole.log(a) //輸出 undefined\n```\n\n因為記憶體已經有 a 了，但沒有賦值，所以會跳 undefined\n同理，記憶體沒有 a 就會跳 Not Defined\n\n```\n//如果要賦予空值要寫\nvar a = null;\n```\n\n---\n\n## 執行緒與同步、非同步\n\nJavaScript 是單執行序的語言\n\n```javascript\nfunction eatBreakfast() {\n  console.log('吃早餐')\n}\nfunction washingPlate() {\n  console.log('洗餐盤')\n}\nfunction callSomeone(someone) {\n  console.log('打給' + someone)\n  setTimeout(function () {\n    //這段為非同步，而非同步的任務會移到事件佇列\n    console.log(someone + '回電')\n  }, 1000) //就算這邊秒數調成0秒，也不會優先執行\n}\nfunction doWork() {\n  var auntie = '漂亮阿姨'\n  eatBreakfast()\n  callSomeone(auntie)\n  washingPlate()\n}\ndoWork()\n```\n\n![](https://i.imgur.com/2aFzBGJ.png)\n\n同步概念來看的話，這三個概念是依序執行的，不會有早餐沒吃完就跳到洗碗盤去\n\n![](https://i.imgur.com/iVYdmVA.png)\n![](https://i.imgur.com/WYchUh0.png)\n\n---\n\n執行順序為:\n\n1. do work\n2. 吃早餐\n3. 打給漂亮阿姨，但因為裡面有 SetTimeout 事件，所以會移到\"事件佇列\"裡面\n4. 洗碗\n5. 直到 do work 執行完後才會再去執行 SetTimeout 函式\n   ![](https://i.imgur.com/aNRGXtW.png)\n\n---\n\n## [參考資料: JavaScript 核心篇](https://courses.hexschool.com/courses/enrolled/670037)\n","source":"_posts/2021/Javascript 核心篇-執行環境.md","raw":"---\ntitle: JavaScript - 執行環境\ndate: 2020/06/13\ntags: 執行環境\ncategories: JavaScript\ndescription: 介紹 Javascript 如何執行跟作用域\n---\n\nJavaScript 是直譯式語言\n當 JavaScript 在函示內找不到變數就會向外查找\nwindow === this\n但 this 會隨執行環境而有所不同\n\n<!--more-->\n\n## 語法作用域 (Lexical scope)\n\n```javascript\nvar value = 1\nfunction fn1() {\n  console.log(value) // 語法作用域：1\n  // 動態作用域：2\n}\nfunction fn2() {\n  var value = 2\n  fn1()\n}\nfn2()\n```\n\n1. **語法作用域的順序:**\n   (因為 JS 式語法作用域，所以會跑這個步驟)fu2 執行 value 值就會變 2 ，在執行 fn1 ，因為裡面沒有 value 值所以會向外查找全域變數 value = 1，函式執行完結果為 1\n2. **動態作用域的順序:**\n   全域賦予 value=1，這時候會執行 fn2 ，並且重新定義 value = 2 ，再執行 fn1 ，這時會開始查找 value 值在哪裡，這時因為函式調用的時候才會決定它的作用域，並向上一層函式查找宣告的變數值\n\n   ***\n\n## 範圍鍊\n\n```javascript\nvar person = '老媽'\nfunction sayHi() {\n  console.log('hi ' + person)\n}\nfunction doMorningWork() {\n  var person = '老爸'\n  function meetAuntie() {\n    var person = '漂亮阿姨'\n    console.log('哈囉～ ' + person)\n  }\n  // sayHi();\n  //meetAuntie();\n}\nsayHi()\n//doMorningWork();  // 執行\n```\n\n因為 sayHi function 裡面沒有 person 變數，所以會向外尋找\n![](https://i.imgur.com/lATjYBE.png)\n\n```javascript\nvar person = '老媽'\nfunction sayHi() {\n  console.log('hi ' + person)\n}\nfunction doMorningWork() {\n  var person = '老爸'\n  function meetAuntie() {\n    var person = '漂亮阿姨'\n    console.log('哈囉～ ' + person)\n  }\n  sayHi()\n  //meetAuntie();\n}\n//sayHi();\ndoMorningWork() // 執行\n```\n\ndoMorningWork 函式雖然有 person 變數，但不會影響到 sayHi 函式的範圍練，所以 sayHi 函式一樣會向外尋找 person 變數\n![](https://i.imgur.com/lbU8OCA.png)\n\n```javascript\nvar person = '老媽'\nfunction sayHi() {\n  console.log('hi ' + person)\n}\nfunction doMorningWork() {\n  var person = '老爸'\n  function meetAuntie() {\n    var person = '漂亮阿姨'\n    console.log('哈囉～ ' + person)\n  }\n  // sayHi();\n  meetAuntie()\n}\n//sayHi();\ndoMorningWork() // 執行\n```\n\n因為 meetAuntie 函式本身就有 person 變數，所以不會像尋找，結果為 哈囉~ 漂亮阿姨\n如果把 var person = '漂亮阿姨'; 註解掉，那 person 變數會向外尋找。結果為 哈囉~老爸\n\n#### 論是: 只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止\n\n---\n\n## 提升\n\n![](https://i.imgur.com/uXG14Oe.png)\n先想像記憶體是成對的，左邊的格子表示 key，右邊是 value。\n再創造環境的時候，會先把 a (變數)放到記憶體裡面(左邊格子)，但這時候還不會給 a 值，所以用 console.log 的時候會 defined ，等到執行時才會把 1 套到 a 裡面。\n\n所以執行環境的時候會先創造環境，創造環境會先把程式碼裡面的變數全部挑出來並存在記憶體上，這個動作稱為\"提升 Hoisting\"，在這個階段還不會給他值，所以如果在此時去取用這些變數的話，值會是 undefined。到執行環境的時候才會賦予它的值\n\n![](https://i.imgur.com/GRULStI.png)\n\n再創造階段 a 是沒有值的，所以會顯示 undefined，直到宣告階段才會把值帶入 。\n但是函式會把整個函式內容都先載入，所以**函式再創造階段就已經可以運行了**。\n\n```javascript\nvar ming //創造階段\nming = '小名' //執行\nconsole.log('ming')\n\ncallName()\n\nfunction callName() {\n  console.log('呼叫小名')\n}\n//會等於下列\n//-----------------------\n//創造階段\nfunction callName() {\n  console.log('呼叫小名')\n}\n//執行\ncallName()\n```\n\n![](https://i.imgur.com/I8kQ3ob.png)\n\n### 函式表達式寫法:\n\n```javascript\ncallName() //這時候的 callName 是還沒有被定義的\nvar callName = function () {\n  console.log('呼叫小名')\n}\n```\n\n輸出如下圖:\n![](https://i.imgur.com/32RDACz.png)\n\n```javascript\n//創造階段\nvar callName(); //這時候 callName 被定義了但沒給值，所以會undefine\n//執行\ncallName = function(){ //這時 function 已經被賦予到 callName  這個函式上\n    console.log('呼叫小名');\n    }\n\n callName(); //才可呼叫\n```\n\n![](https://i.imgur.com/ddWNmYt.png)\n\n### 範例:\n\n```javascript\n// var callName = function () {\n//   console.log('呼叫小明 2');\n// }\n// function callName() {\n//   console.log('呼叫小明 1');\n// }\n// callName();\n//以上為原式\n//-----------------------------------\n//拆解過後\nfunction callName() {\n  // 首先函式優先 創造階段\n  console.log('呼叫小明 1')\n}\nvar callName //第2階段才把變數往前移\ncallName = function () {\n  //因為變數往前移的關係，這時 function 已經被賦予到 callName  這個函式上\n  console.log('呼叫小明 2')\n}\n//執行\ncallName()\n```\n\n![](https://i.imgur.com/uPdFhSw.png)\n\n## 範例:\n\n```javascript\n//創造，函式陳述式優先創造\nfunction callName() {\n  console.log('小明')\n}\n\ncallName() // 第一次執行\nfunction callName() {\n  console.log('杰倫')\n}\n```\n\n![](https://i.imgur.com/FwfUh7L.png)\n\n## 拆解&分析:\n\n```javascript\n// 創造\nfunction callName() {\n  console.log('小明')\n}\nfunction callName() {\n  console.log('杰倫')\n}\n// 執行\ncallName() // 第一次執行\ncallName() // 第二次執行\n```\n\n兩個函式長一樣，後面得值會蓋掉前面的值\n\n### 測驗分析:\n\n```javascript\nfunction whosName() {\n  if (name) {\n    name = '杰倫'\n  }\n}\nvar name = '小明'\nconsole.log(name)\nwhosName()\n```\n\n因為創造階段，函式陳述式優先創造，變數 name 只生出記憶體，並未賦予值執行階段，呼叫 whosName 的函式時，name 向外查找 name 變數，但未賦予值，所以在 whosName 裡面的 name 被賦予為\"杰倫\"的值\n函式跟一般變數不太一樣，函式陳述式在創造環境階段會被優先載入，記憶體在這個階段就會有函式的完整內容。所以函式在創造環境階段就已經可以被運行。\n\n## Not Defined VS undefined\n\n```\nvar a ;\nconsole.log(a) //輸出 undefined\n```\n\n因為記憶體已經有 a 了，但沒有賦值，所以會跳 undefined\n同理，記憶體沒有 a 就會跳 Not Defined\n\n```\n//如果要賦予空值要寫\nvar a = null;\n```\n\n---\n\n## 執行緒與同步、非同步\n\nJavaScript 是單執行序的語言\n\n```javascript\nfunction eatBreakfast() {\n  console.log('吃早餐')\n}\nfunction washingPlate() {\n  console.log('洗餐盤')\n}\nfunction callSomeone(someone) {\n  console.log('打給' + someone)\n  setTimeout(function () {\n    //這段為非同步，而非同步的任務會移到事件佇列\n    console.log(someone + '回電')\n  }, 1000) //就算這邊秒數調成0秒，也不會優先執行\n}\nfunction doWork() {\n  var auntie = '漂亮阿姨'\n  eatBreakfast()\n  callSomeone(auntie)\n  washingPlate()\n}\ndoWork()\n```\n\n![](https://i.imgur.com/2aFzBGJ.png)\n\n同步概念來看的話，這三個概念是依序執行的，不會有早餐沒吃完就跳到洗碗盤去\n\n![](https://i.imgur.com/iVYdmVA.png)\n![](https://i.imgur.com/WYchUh0.png)\n\n---\n\n執行順序為:\n\n1. do work\n2. 吃早餐\n3. 打給漂亮阿姨，但因為裡面有 SetTimeout 事件，所以會移到\"事件佇列\"裡面\n4. 洗碗\n5. 直到 do work 執行完後才會再去執行 SetTimeout 函式\n   ![](https://i.imgur.com/aNRGXtW.png)\n\n---\n\n## [參考資料: JavaScript 核心篇](https://courses.hexschool.com/courses/enrolled/670037)\n","slug":"Javascript 核心篇-執行環境","published":1,"updated":"2021-03-22T09:26:46.952Z","_id":"ckmhenvvl000dtctr6zd6913k","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>JavaScript 是直譯式語言<br>當 JavaScript 在函示內找不到變數就會向外查找<br>window === this<br>但 this 會隨執行環境而有所不同</p>\n<a id=\"more\"></a>\n\n<h2 id=\"語法作用域-Lexical-scope\"><a href=\"#語法作用域-Lexical-scope\" class=\"headerlink\" title=\"語法作用域 (Lexical scope)\"></a>語法作用域 (Lexical scope)</h2><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> value = <span class=\"hljs-number\">1</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn1</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(value) <span class=\"hljs-comment\">// 語法作用域：1</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 動態作用域：2</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> value = <span class=\"hljs-number\">2</span></span><br><span class=\"line\">  fn1()</span><br><span class=\"line\">}</span><br><span class=\"line\">fn2()</span><br></pre></td></tr></tbody></table></figure>\n\n<ol>\n<li><p><strong>語法作用域的順序:</strong><br>(因為 JS 式語法作用域，所以會跑這個步驟)fu2 執行 value 值就會變 2 ，在執行 fn1 ，因為裡面沒有 value 值所以會向外查找全域變數 value = 1，函式執行完結果為 1</p>\n</li>\n<li><p><strong>動態作用域的順序:</strong><br>全域賦予 value=1，這時候會執行 fn2 ，並且重新定義 value = 2 ，再執行 fn1 ，這時會開始查找 value 值在哪裡，這時因為函式調用的時候才會決定它的作用域，並向上一層函式查找宣告的變數值</p>\n<hr>\n</li>\n</ol>\n<h2 id=\"範圍鍊\"><a href=\"#範圍鍊\" class=\"headerlink\" title=\"範圍鍊\"></a>範圍鍊</h2><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-string\">'老媽'</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hi '</span> + person)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doMorningWork</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-string\">'老爸'</span></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">meetAuntie</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-string\">'漂亮阿姨'</span></span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'哈囉～ '</span> + person)</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"hljs-comment\">// sayHi();</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">//meetAuntie();</span></span><br><span class=\"line\">}</span><br><span class=\"line\">sayHi()</span><br><span class=\"line\"><span class=\"hljs-comment\">//doMorningWork();  // 執行</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>因為 sayHi function 裡面沒有 person 變數，所以會向外尋找<br><img src=\"https://i.imgur.com/lATjYBE.png\"></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-string\">'老媽'</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hi '</span> + person)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doMorningWork</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-string\">'老爸'</span></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">meetAuntie</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-string\">'漂亮阿姨'</span></span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'哈囉～ '</span> + person)</span><br><span class=\"line\">  }</span><br><span class=\"line\">  sayHi()</span><br><span class=\"line\">  <span class=\"hljs-comment\">//meetAuntie();</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-comment\">//sayHi();</span></span><br><span class=\"line\">doMorningWork() <span class=\"hljs-comment\">// 執行</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>doMorningWork 函式雖然有 person 變數，但不會影響到 sayHi 函式的範圍練，所以 sayHi 函式一樣會向外尋找 person 變數<br><img src=\"https://i.imgur.com/lbU8OCA.png\"></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-string\">'老媽'</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hi '</span> + person)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doMorningWork</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-string\">'老爸'</span></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">meetAuntie</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-string\">'漂亮阿姨'</span></span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'哈囉～ '</span> + person)</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"hljs-comment\">// sayHi();</span></span><br><span class=\"line\">  meetAuntie()</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-comment\">//sayHi();</span></span><br><span class=\"line\">doMorningWork() <span class=\"hljs-comment\">// 執行</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>因為 meetAuntie 函式本身就有 person 變數，所以不會像尋找，結果為 哈囉~ 漂亮阿姨<br>如果把 var person = ‘漂亮阿姨’; 註解掉，那 person 變數會向外尋找。結果為 哈囉~老爸</p>\n<h4 id=\"論是-只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止\"><a href=\"#論是-只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止\" class=\"headerlink\" title=\"論是: 只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止\"></a>論是: 只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止</h4><hr>\n<h2 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h2><p><img src=\"https://i.imgur.com/uXG14Oe.png\"><br>先想像記憶體是成對的，左邊的格子表示 key，右邊是 value。<br>再創造環境的時候，會先把 a (變數)放到記憶體裡面(左邊格子)，但這時候還不會給 a 值，所以用 console.log 的時候會 defined ，等到執行時才會把 1 套到 a 裡面。</p>\n<p>所以執行環境的時候會先創造環境，創造環境會先把程式碼裡面的變數全部挑出來並存在記憶體上，這個動作稱為”提升 Hoisting”，在這個階段還不會給他值，所以如果在此時去取用這些變數的話，值會是 undefined。到執行環境的時候才會賦予它的值</p>\n<p><img src=\"https://i.imgur.com/GRULStI.png\"></p>\n<p>再創造階段 a 是沒有值的，所以會顯示 undefined，直到宣告階段才會把值帶入 。<br>但是函式會把整個函式內容都先載入，所以<strong>函式再創造階段就已經可以運行了</strong>。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> ming <span class=\"hljs-comment\">//創造階段</span></span><br><span class=\"line\">ming = <span class=\"hljs-string\">'小名'</span> <span class=\"hljs-comment\">//執行</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'ming'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">callName()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'呼叫小名'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-comment\">//會等於下列</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//-----------------------</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//創造階段</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'呼叫小名'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-comment\">//執行</span></span><br><span class=\"line\">callName()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/I8kQ3ob.png\"></p>\n<h3 id=\"函式表達式寫法\"><a href=\"#函式表達式寫法\" class=\"headerlink\" title=\"函式表達式寫法:\"></a>函式表達式寫法:</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callName() <span class=\"hljs-comment\">//這時候的 callName 是還沒有被定義的</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> callName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'呼叫小名'</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>輸出如下圖:<br><img src=\"https://i.imgur.com/32RDACz.png\"></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//創造階段</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> callName(); <span class=\"hljs-comment\">//這時候 callName 被定義了但沒給值，所以會undefine</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//執行</span></span><br><span class=\"line\">callName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-comment\">//這時 function 已經被賦予到 callName  這個函式上</span></span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'呼叫小名'</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"> callName(); <span class=\"hljs-comment\">//才可呼叫</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/ddWNmYt.png\"></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例:\"></a>範例:</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// var callName = function () {</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//   console.log('呼叫小明 2');</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// }</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// function callName() {</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//   console.log('呼叫小明 1');</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// }</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// callName();</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//以上為原式</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//-----------------------------------</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//拆解過後</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 首先函式優先 創造階段</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'呼叫小明 1'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> callName <span class=\"hljs-comment\">//第2階段才把變數往前移</span></span><br><span class=\"line\">callName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">//因為變數往前移的關係，這時 function 已經被賦予到 callName  這個函式上</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'呼叫小明 2'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-comment\">//執行</span></span><br><span class=\"line\">callName()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/uPdFhSw.png\"></p>\n<h2 id=\"範例-1\"><a href=\"#範例-1\" class=\"headerlink\" title=\"範例:\"></a>範例:</h2><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//創造，函式陳述式優先創造</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'小明'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">callName() <span class=\"hljs-comment\">// 第一次執行</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'杰倫'</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/FwfUh7L.png\"></p>\n<h2 id=\"拆解-amp-分析\"><a href=\"#拆解-amp-分析\" class=\"headerlink\" title=\"拆解&amp;分析:\"></a>拆解&amp;分析:</h2><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 創造</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'小明'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'杰倫'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-comment\">// 執行</span></span><br><span class=\"line\">callName() <span class=\"hljs-comment\">// 第一次執行</span></span><br><span class=\"line\">callName() <span class=\"hljs-comment\">// 第二次執行</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>兩個函式長一樣，後面得值會蓋掉前面的值</p>\n<h3 id=\"測驗分析\"><a href=\"#測驗分析\" class=\"headerlink\" title=\"測驗分析:\"></a>測驗分析:</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">whosName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (name) {</span><br><span class=\"line\">    name = <span class=\"hljs-string\">'杰倫'</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'小明'</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(name)</span><br><span class=\"line\">whosName()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>因為創造階段，函式陳述式優先創造，變數 name 只生出記憶體，並未賦予值執行階段，呼叫 whosName 的函式時，name 向外查找 name 變數，但未賦予值，所以在 whosName 裡面的 name 被賦予為”杰倫”的值<br>函式跟一般變數不太一樣，函式陳述式在創造環境階段會被優先載入，記憶體在這個階段就會有函式的完整內容。所以函式在創造環境階段就已經可以被運行。</p>\n<h2 id=\"Not-Defined-VS-undefined\"><a href=\"#Not-Defined-VS-undefined\" class=\"headerlink\" title=\"Not Defined VS undefined\"></a>Not Defined VS undefined</h2><figure class=\"highlight plain hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a ;</span><br><span class=\"line\">console.log(a) //輸出 undefined</span><br></pre></td></tr></tbody></table></figure>\n\n<p>因為記憶體已經有 a 了，但沒有賦值，所以會跳 undefined<br>同理，記憶體沒有 a 就會跳 Not Defined</p>\n<figure class=\"highlight plain hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果要賦予空值要寫</span><br><span class=\"line\">var a = null;</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"執行緒與同步、非同步\"><a href=\"#執行緒與同步、非同步\" class=\"headerlink\" title=\"執行緒與同步、非同步\"></a>執行緒與同步、非同步</h2><p>JavaScript 是單執行序的語言</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatBreakfast</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'吃早餐'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">washingPlate</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'洗餐盤'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callSomeone</span>(<span class=\"hljs-params\">someone</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'打給'</span> + someone)</span><br><span class=\"line\">  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"hljs-comment\">//這段為非同步，而非同步的任務會移到事件佇列</span></span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(someone + <span class=\"hljs-string\">'回電'</span>)</span><br><span class=\"line\">  }, <span class=\"hljs-number\">1000</span>) <span class=\"hljs-comment\">//就算這邊秒數調成0秒，也不會優先執行</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doWork</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> auntie = <span class=\"hljs-string\">'漂亮阿姨'</span></span><br><span class=\"line\">  eatBreakfast()</span><br><span class=\"line\">  callSomeone(auntie)</span><br><span class=\"line\">  washingPlate()</span><br><span class=\"line\">}</span><br><span class=\"line\">doWork()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/2aFzBGJ.png\"></p>\n<p>同步概念來看的話，這三個概念是依序執行的，不會有早餐沒吃完就跳到洗碗盤去</p>\n<p><img src=\"https://i.imgur.com/iVYdmVA.png\"><br><img src=\"https://i.imgur.com/WYchUh0.png\"></p>\n<hr>\n<p>執行順序為:</p>\n<ol>\n<li>do work</li>\n<li>吃早餐</li>\n<li>打給漂亮阿姨，但因為裡面有 SetTimeout 事件，所以會移到”事件佇列”裡面</li>\n<li>洗碗</li>\n<li>直到 do work 執行完後才會再去執行 SetTimeout 函式<br><img src=\"https://i.imgur.com/aNRGXtW.png\"></li>\n</ol>\n<hr>\n<h2 id=\"參考資料-JavaScript-核心篇\"><a href=\"#參考資料-JavaScript-核心篇\" class=\"headerlink\" title=\"參考資料: JavaScript 核心篇\"></a><a href=\"https://courses.hexschool.com/courses/enrolled/670037\">參考資料: JavaScript 核心篇</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"}],"_tags":[{"name":"執行環境","path":"tags/執行環境/"}],"excerpt":"<html><head></head><body><p>JavaScript 是直譯式語言<br>當 JavaScript 在函示內找不到變數就會向外查找<br>window === this<br>但 this 會隨執行環境而有所不同</p></body></html>","more":"<h2 id=\"語法作用域-Lexical-scope\"><a href=\"#語法作用域-Lexical-scope\" class=\"headerlink\" title=\"語法作用域 (Lexical scope)\"></a>語法作用域 (Lexical scope)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value) <span class=\"comment\">// 語法作用域：1</span></span><br><span class=\"line\">  <span class=\"comment\">// 動態作用域：2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"number\">2</span></span><br><span class=\"line\">  fn1()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn2()</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>語法作用域的順序:</strong><br>(因為 JS 式語法作用域，所以會跑這個步驟)fu2 執行 value 值就會變 2 ，在執行 fn1 ，因為裡面沒有 value 值所以會向外查找全域變數 value = 1，函式執行完結果為 1</p>\n</li>\n<li><p><strong>動態作用域的順序:</strong><br>全域賦予 value=1，這時候會執行 fn2 ，並且重新定義 value = 2 ，再執行 fn1 ，這時會開始查找 value 值在哪裡，這時因為函式調用的時候才會決定它的作用域，並向上一層函式查找宣告的變數值</p>\n<hr>\n</li>\n</ol>\n<h2 id=\"範圍鍊\"><a href=\"#範圍鍊\" class=\"headerlink\" title=\"範圍鍊\"></a>範圍鍊</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"string\">&#x27;老媽&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hi &#x27;</span> + person)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doMorningWork</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"string\">&#x27;老爸&#x27;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">meetAuntie</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"string\">&#x27;漂亮阿姨&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;哈囉～ &#x27;</span> + person)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// sayHi();</span></span><br><span class=\"line\">  <span class=\"comment\">//meetAuntie();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayHi()</span><br><span class=\"line\"><span class=\"comment\">//doMorningWork();  // 執行</span></span><br></pre></td></tr></table></figure>\n\n<p>因為 sayHi function 裡面沒有 person 變數，所以會向外尋找<br><img src=\"https://i.imgur.com/lATjYBE.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"string\">&#x27;老媽&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hi &#x27;</span> + person)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doMorningWork</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"string\">&#x27;老爸&#x27;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">meetAuntie</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"string\">&#x27;漂亮阿姨&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;哈囉～ &#x27;</span> + person)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sayHi()</span><br><span class=\"line\">  <span class=\"comment\">//meetAuntie();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//sayHi();</span></span><br><span class=\"line\">doMorningWork() <span class=\"comment\">// 執行</span></span><br></pre></td></tr></table></figure>\n\n<p>doMorningWork 函式雖然有 person 變數，但不會影響到 sayHi 函式的範圍練，所以 sayHi 函式一樣會向外尋找 person 變數<br><img src=\"https://i.imgur.com/lbU8OCA.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"string\">&#x27;老媽&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hi &#x27;</span> + person)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doMorningWork</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"string\">&#x27;老爸&#x27;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">meetAuntie</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"string\">&#x27;漂亮阿姨&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;哈囉～ &#x27;</span> + person)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// sayHi();</span></span><br><span class=\"line\">  meetAuntie()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//sayHi();</span></span><br><span class=\"line\">doMorningWork() <span class=\"comment\">// 執行</span></span><br></pre></td></tr></table></figure>\n\n<p>因為 meetAuntie 函式本身就有 person 變數，所以不會像尋找，結果為 哈囉~ 漂亮阿姨<br>如果把 var person = ‘漂亮阿姨’; 註解掉，那 person 變數會向外尋找。結果為 哈囉~老爸</p>\n<h4 id=\"論是-只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止\"><a href=\"#論是-只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止\" class=\"headerlink\" title=\"論是: 只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止\"></a>論是: 只要函式內沒找到相對應的變數，就會像向外一層尋找相對應的變數，直到找到為止</h4><hr>\n<h2 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h2><p><img src=\"https://i.imgur.com/uXG14Oe.png\"><br>先想像記憶體是成對的，左邊的格子表示 key，右邊是 value。<br>再創造環境的時候，會先把 a (變數)放到記憶體裡面(左邊格子)，但這時候還不會給 a 值，所以用 console.log 的時候會 defined ，等到執行時才會把 1 套到 a 裡面。</p>\n<p>所以執行環境的時候會先創造環境，創造環境會先把程式碼裡面的變數全部挑出來並存在記憶體上，這個動作稱為”提升 Hoisting”，在這個階段還不會給他值，所以如果在此時去取用這些變數的話，值會是 undefined。到執行環境的時候才會賦予它的值</p>\n<p><img src=\"https://i.imgur.com/GRULStI.png\"></p>\n<p>再創造階段 a 是沒有值的，所以會顯示 undefined，直到宣告階段才會把值帶入 。<br>但是函式會把整個函式內容都先載入，所以<strong>函式再創造階段就已經可以運行了</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ming <span class=\"comment\">//創造階段</span></span><br><span class=\"line\">ming = <span class=\"string\">&#x27;小名&#x27;</span> <span class=\"comment\">//執行</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;ming&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">callName()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;呼叫小名&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//會等於下列</span></span><br><span class=\"line\"><span class=\"comment\">//-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">//創造階段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;呼叫小名&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//執行</span></span><br><span class=\"line\">callName()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/I8kQ3ob.png\"></p>\n<h3 id=\"函式表達式寫法\"><a href=\"#函式表達式寫法\" class=\"headerlink\" title=\"函式表達式寫法:\"></a>函式表達式寫法:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callName() <span class=\"comment\">//這時候的 callName 是還沒有被定義的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> callName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;呼叫小名&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>輸出如下圖:<br><img src=\"https://i.imgur.com/32RDACz.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//創造階段</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> callName(); <span class=\"comment\">//這時候 callName 被定義了但沒給值，所以會undefine</span></span><br><span class=\"line\"><span class=\"comment\">//執行</span></span><br><span class=\"line\">callName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//這時 function 已經被賦予到 callName  這個函式上</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;呼叫小名&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> callName(); <span class=\"comment\">//才可呼叫</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/ddWNmYt.png\"></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例:\"></a>範例:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var callName = function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&#x27;呼叫小明 2&#x27;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// function callName() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&#x27;呼叫小明 1&#x27;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// callName();</span></span><br><span class=\"line\"><span class=\"comment\">//以上為原式</span></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">//拆解過後</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先函式優先 創造階段</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;呼叫小明 1&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> callName <span class=\"comment\">//第2階段才把變數往前移</span></span><br><span class=\"line\">callName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//因為變數往前移的關係，這時 function 已經被賦予到 callName  這個函式上</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;呼叫小明 2&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//執行</span></span><br><span class=\"line\">callName()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/uPdFhSw.png\"></p>\n<h2 id=\"範例-1\"><a href=\"#範例-1\" class=\"headerlink\" title=\"範例:\"></a>範例:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//創造，函式陳述式優先創造</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;小明&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callName() <span class=\"comment\">// 第一次執行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;杰倫&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/FwfUh7L.png\"></p>\n<h2 id=\"拆解-amp-分析\"><a href=\"#拆解-amp-分析\" class=\"headerlink\" title=\"拆解&amp;分析:\"></a>拆解&amp;分析:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 創造</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;小明&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;杰倫&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 執行</span></span><br><span class=\"line\">callName() <span class=\"comment\">// 第一次執行</span></span><br><span class=\"line\">callName() <span class=\"comment\">// 第二次執行</span></span><br></pre></td></tr></table></figure>\n\n<p>兩個函式長一樣，後面得值會蓋掉前面的值</p>\n<h3 id=\"測驗分析\"><a href=\"#測驗分析\" class=\"headerlink\" title=\"測驗分析:\"></a>測驗分析:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">whosName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name) &#123;</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;杰倫&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;小明&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">whosName()</span><br></pre></td></tr></table></figure>\n\n<p>因為創造階段，函式陳述式優先創造，變數 name 只生出記憶體，並未賦予值執行階段，呼叫 whosName 的函式時，name 向外查找 name 變數，但未賦予值，所以在 whosName 裡面的 name 被賦予為”杰倫”的值<br>函式跟一般變數不太一樣，函式陳述式在創造環境階段會被優先載入，記憶體在這個階段就會有函式的完整內容。所以函式在創造環境階段就已經可以被運行。</p>\n<h2 id=\"Not-Defined-VS-undefined\"><a href=\"#Not-Defined-VS-undefined\" class=\"headerlink\" title=\"Not Defined VS undefined\"></a>Not Defined VS undefined</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a ;</span><br><span class=\"line\">console.log(a) &#x2F;&#x2F;輸出 undefined</span><br></pre></td></tr></table></figure>\n\n<p>因為記憶體已經有 a 了，但沒有賦值，所以會跳 undefined<br>同理，記憶體沒有 a 就會跳 Not Defined</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;如果要賦予空值要寫</span><br><span class=\"line\">var a &#x3D; null;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"執行緒與同步、非同步\"><a href=\"#執行緒與同步、非同步\" class=\"headerlink\" title=\"執行緒與同步、非同步\"></a>執行緒與同步、非同步</h2><p>JavaScript 是單執行序的語言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eatBreakfast</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;吃早餐&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">washingPlate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;洗餐盤&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSomeone</span>(<span class=\"params\">someone</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;打給&#x27;</span> + someone)</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//這段為非同步，而非同步的任務會移到事件佇列</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(someone + <span class=\"string\">&#x27;回電&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>) <span class=\"comment\">//就算這邊秒數調成0秒，也不會優先執行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doWork</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> auntie = <span class=\"string\">&#x27;漂亮阿姨&#x27;</span></span><br><span class=\"line\">  eatBreakfast()</span><br><span class=\"line\">  callSomeone(auntie)</span><br><span class=\"line\">  washingPlate()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doWork()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/2aFzBGJ.png\"></p>\n<p>同步概念來看的話，這三個概念是依序執行的，不會有早餐沒吃完就跳到洗碗盤去</p>\n<p><img src=\"https://i.imgur.com/iVYdmVA.png\"><br><img src=\"https://i.imgur.com/WYchUh0.png\"></p>\n<hr>\n<p>執行順序為:</p>\n<ol>\n<li>do work</li>\n<li>吃早餐</li>\n<li>打給漂亮阿姨，但因為裡面有 SetTimeout 事件，所以會移到”事件佇列”裡面</li>\n<li>洗碗</li>\n<li>直到 do work 執行完後才會再去執行 SetTimeout 函式<br><img src=\"https://i.imgur.com/aNRGXtW.png\"></li>\n</ol>\n<hr>\n<h2 id=\"參考資料-JavaScript-核心篇\"><a href=\"#參考資料-JavaScript-核心篇\" class=\"headerlink\" title=\"參考資料: JavaScript 核心篇\"></a><a href=\"https://courses.hexschool.com/courses/enrolled/670037\">參考資料: JavaScript 核心篇</a></h2>"},{"title":"JavaScript - 監聽事件","date":"2020-07-15T16:00:00.000Z","description":"了解 eventListener 與 callback function","_content":"\n## 學習方向\n\n1. 介面:如何改變事件\n2. 事件:如何監聽事件並做出反應\n3. 資料:如何跟 sever 交換資料\n<!--more-->\n\n---\n\n## eventListener 與 callback function\n\n### eventListener\n\n給一個屬性跟屬性值，再用 `document.querySelector` 選一個元素並命名為 app ，透過點擊 hello world 做出彈跳視窗，那想做出彈跳視窗必須偵聽事件 `addEventListener` ，在 `addEventListener` 前面是事件的動作例如點擊或是按鍵盤...等等，那後面要傳入一個函式。\n\n### callback function\n\n因為不知道使用者甚麼時候才會觸發函式(做甚麼動作)，所以我們必須跟瀏覽器說一但點擊了甚麼按鈕或是做了什麼動作(事件)，就幫我呼叫那個函式(觸發)，那呼叫函式就是 `callback function`\n\nEX:\n\n```html\n<div class=\"app\">\n  <a href=\"#\">hello world</a>\n</div>\n\n<!-- ------------------------------------------->\n<!-- 匿名函式 比較常見寫法-->\n<script>\n  let app = document.querySelector('.app')\n  app.addEventListener('click', function () {\n    alert('hello world')\n  })\n</script>\n<!--------------------------------------------->\n\n<script>\n  let app = document.querySelector('.app')\n  app.addEventListener('click', onClick)\n  function onClick() {\n    alert('hello world')\n  }\n</script>\n```\n\n![](https://i.imgur.com/BYG7UOJ.png)\n\n---\n\n## event(e)\n\n當我們觸發事件時，瀏覽器就會把參數(event 縮寫為 e)帶入函示裡面。\n使用 `console.log(e)` ，可以看到很多關於 e 的參數。\n\n```html\n<div class=\"app\">\n  <a href=\"#\">hello world</a>\n</div>\n\n<script>\n  let app = document.querySelector('.app');\n  app.addEventListener('click',function(e){\n  \tconsole.log(e);\n</script>\n```\n\n![](https://i.imgur.com/WqDxtOD.png)\n\n改用 `console.log(e.target)`\n![](https://i.imgur.com/TFYrlsD.png)\n\n當然如果想知道按鍵參數的話可以這樣寫\n先改為全域 window\n\n```html\n<input type=\"text\" class=\"app\" />\n\n<script>\n  window.addEventListener('keypress', function (e) {\n    console.log(e.keyCode)\n  })\n</script>\n```\n\n![](https://i.imgur.com/A0uZqfO.png)\n![](https://i.imgur.com/lDm6hKO.png)\n分別按下 a、b、c，可以知道 a = 97 、b = 98、c = 99\n\n---\n\n## 表單事件處理 onSubmit\n\n這可以應用在表單二次確認密碼的時候\n寫出一個簡單的表單，並在判斷式內擷取密碼的值( value )\n\n```html\n<form class=\"login\">\n  username:<input type=\"text\" />\n  <br />\n  password:<input type=\"password\" class=\"password\" />\n  <br />\n  password:<input type=\"password\" class=\"password1\" />\n  <br />\n  <input type=\"submit\" />\n</form>\n\n<scrip>\n  let login = document.querySelector('.login');\n  login.addEventListener('submit',function(e){ let psw =\n  document.querySelector('.password'); let psw1 =\n  document.querySelector('.password1'); if(psw.value !== psw1.value){\n  alert('密碼錯誤'); e.preventDefault(); }else{ alert('密碼正確'); } })\n</scrip>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/wvGGdgy?editors=1010)\n![](https://i.imgur.com/ES5AVUI.png)\n\n---\n\n## 事件傳遞機制-捕獲跟冒泡事件\n\n```html\n<div class=\"one\">\n  <div class=\"two\">\n    <button>click</button>\n  </div>\n</div>\n\n<script>\n  addEvent('.one')\n  addEvent('.two')\n  addEvent('button')\n  function addEvent(className) {\n    document.querySelector(className).addEventListener('click', function () {\n      console.log(className)\n    })\n  }\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/dyMMWVO?editors=1011)\n\n![](https://i.imgur.com/iSr9A3f.png)\n當我點擊綠色區塊的時候只會跳出 one ，但點擊 click 時就會跳出上圖，但我明明只點 click 為甚麼會連帶影響到其他 class 區塊 ?\n\n因為這就是事件傳遞機制的捕獲跟冒泡事件\n\n[Huli 文章](https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/)\n下圖來源為 Huli 的文章\n![](https://i.imgur.com/V2KLVIV.png)\n以下這段話擷取自 Huli 文章\n\n> DOM 的事件在傳播時，會先從根節點開始往下傳遞到 target，這邊你如果加上事件的話，就會處於 CAPTURING_PHASE，捕獲階段。\n> target 就是你所點擊的那個目標，這時候在 target 身上所加的 eventListenr 會是 AT_TARGET 這一個 Phase。\n> 你在點擊那一個 td 的時候，這一個點擊的事件會先從 window 開始往下傳，一直傳到 td 為止，到這邊就叫做 CAPTURING_PHASE，捕獲階段。\n> 接著事件傳遞到 td 本身，這時候叫做 AT_TARGET。\n> 最後事件會從 td 一路傳回去 window，這時候叫做 BUBBLING_PHASE，冒泡階段。\n> 所以，在看一些講事件機制的文章的時候，都會看到一個口訣：先捕獲，再冒泡\n\n在監聽時函式後面加上 true 就是捕獲，false 是冒泡\n\n```javascript\naddEvent('.one')\naddEvent('.two')\naddEvent('button')\n\nfunction addEvent(className) {\n  document.querySelector(className).addEventListener(\n    'click',\n    function () {\n      console.log(className, '捕獲')\n    },\n    true\n  )\n\n  document.querySelector(className).addEventListener(\n    'click',\n    function () {\n      console.log(className, '冒泡')\n    },\n    false\n  )\n}\n```\n\n[codepen](https://codepen.io/gleofgja/pen/YzqqVjQ?editors=1011)\n\n當我點擊 click\n\n![](https://i.imgur.com/g7pwU5s.png)\n\n就算我把順序顛倒過來，它還是會先捕獲在冒泡，跟上圖一樣\n\n---\n\n## [資料來源: [FE102] 前端必備：JavaScript](https://lidemy.com/courses/390588/lectures/9653894)\n","source":"_posts/2021/JavaScript 網頁事件處理.md","raw":"---\ntitle: JavaScript - 監聽事件\ndate: 2020/07/16\ntags:\n  - eventListener\n  - callback function\n  - event\n  - onSubmit\ncategories: JavaScript\ndescription: 了解 eventListener 與 callback function\n---\n\n## 學習方向\n\n1. 介面:如何改變事件\n2. 事件:如何監聽事件並做出反應\n3. 資料:如何跟 sever 交換資料\n<!--more-->\n\n---\n\n## eventListener 與 callback function\n\n### eventListener\n\n給一個屬性跟屬性值，再用 `document.querySelector` 選一個元素並命名為 app ，透過點擊 hello world 做出彈跳視窗，那想做出彈跳視窗必須偵聽事件 `addEventListener` ，在 `addEventListener` 前面是事件的動作例如點擊或是按鍵盤...等等，那後面要傳入一個函式。\n\n### callback function\n\n因為不知道使用者甚麼時候才會觸發函式(做甚麼動作)，所以我們必須跟瀏覽器說一但點擊了甚麼按鈕或是做了什麼動作(事件)，就幫我呼叫那個函式(觸發)，那呼叫函式就是 `callback function`\n\nEX:\n\n```html\n<div class=\"app\">\n  <a href=\"#\">hello world</a>\n</div>\n\n<!-- ------------------------------------------->\n<!-- 匿名函式 比較常見寫法-->\n<script>\n  let app = document.querySelector('.app')\n  app.addEventListener('click', function () {\n    alert('hello world')\n  })\n</script>\n<!--------------------------------------------->\n\n<script>\n  let app = document.querySelector('.app')\n  app.addEventListener('click', onClick)\n  function onClick() {\n    alert('hello world')\n  }\n</script>\n```\n\n![](https://i.imgur.com/BYG7UOJ.png)\n\n---\n\n## event(e)\n\n當我們觸發事件時，瀏覽器就會把參數(event 縮寫為 e)帶入函示裡面。\n使用 `console.log(e)` ，可以看到很多關於 e 的參數。\n\n```html\n<div class=\"app\">\n  <a href=\"#\">hello world</a>\n</div>\n\n<script>\n  let app = document.querySelector('.app');\n  app.addEventListener('click',function(e){\n  \tconsole.log(e);\n</script>\n```\n\n![](https://i.imgur.com/WqDxtOD.png)\n\n改用 `console.log(e.target)`\n![](https://i.imgur.com/TFYrlsD.png)\n\n當然如果想知道按鍵參數的話可以這樣寫\n先改為全域 window\n\n```html\n<input type=\"text\" class=\"app\" />\n\n<script>\n  window.addEventListener('keypress', function (e) {\n    console.log(e.keyCode)\n  })\n</script>\n```\n\n![](https://i.imgur.com/A0uZqfO.png)\n![](https://i.imgur.com/lDm6hKO.png)\n分別按下 a、b、c，可以知道 a = 97 、b = 98、c = 99\n\n---\n\n## 表單事件處理 onSubmit\n\n這可以應用在表單二次確認密碼的時候\n寫出一個簡單的表單，並在判斷式內擷取密碼的值( value )\n\n```html\n<form class=\"login\">\n  username:<input type=\"text\" />\n  <br />\n  password:<input type=\"password\" class=\"password\" />\n  <br />\n  password:<input type=\"password\" class=\"password1\" />\n  <br />\n  <input type=\"submit\" />\n</form>\n\n<scrip>\n  let login = document.querySelector('.login');\n  login.addEventListener('submit',function(e){ let psw =\n  document.querySelector('.password'); let psw1 =\n  document.querySelector('.password1'); if(psw.value !== psw1.value){\n  alert('密碼錯誤'); e.preventDefault(); }else{ alert('密碼正確'); } })\n</scrip>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/wvGGdgy?editors=1010)\n![](https://i.imgur.com/ES5AVUI.png)\n\n---\n\n## 事件傳遞機制-捕獲跟冒泡事件\n\n```html\n<div class=\"one\">\n  <div class=\"two\">\n    <button>click</button>\n  </div>\n</div>\n\n<script>\n  addEvent('.one')\n  addEvent('.two')\n  addEvent('button')\n  function addEvent(className) {\n    document.querySelector(className).addEventListener('click', function () {\n      console.log(className)\n    })\n  }\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/dyMMWVO?editors=1011)\n\n![](https://i.imgur.com/iSr9A3f.png)\n當我點擊綠色區塊的時候只會跳出 one ，但點擊 click 時就會跳出上圖，但我明明只點 click 為甚麼會連帶影響到其他 class 區塊 ?\n\n因為這就是事件傳遞機制的捕獲跟冒泡事件\n\n[Huli 文章](https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/)\n下圖來源為 Huli 的文章\n![](https://i.imgur.com/V2KLVIV.png)\n以下這段話擷取自 Huli 文章\n\n> DOM 的事件在傳播時，會先從根節點開始往下傳遞到 target，這邊你如果加上事件的話，就會處於 CAPTURING_PHASE，捕獲階段。\n> target 就是你所點擊的那個目標，這時候在 target 身上所加的 eventListenr 會是 AT_TARGET 這一個 Phase。\n> 你在點擊那一個 td 的時候，這一個點擊的事件會先從 window 開始往下傳，一直傳到 td 為止，到這邊就叫做 CAPTURING_PHASE，捕獲階段。\n> 接著事件傳遞到 td 本身，這時候叫做 AT_TARGET。\n> 最後事件會從 td 一路傳回去 window，這時候叫做 BUBBLING_PHASE，冒泡階段。\n> 所以，在看一些講事件機制的文章的時候，都會看到一個口訣：先捕獲，再冒泡\n\n在監聽時函式後面加上 true 就是捕獲，false 是冒泡\n\n```javascript\naddEvent('.one')\naddEvent('.two')\naddEvent('button')\n\nfunction addEvent(className) {\n  document.querySelector(className).addEventListener(\n    'click',\n    function () {\n      console.log(className, '捕獲')\n    },\n    true\n  )\n\n  document.querySelector(className).addEventListener(\n    'click',\n    function () {\n      console.log(className, '冒泡')\n    },\n    false\n  )\n}\n```\n\n[codepen](https://codepen.io/gleofgja/pen/YzqqVjQ?editors=1011)\n\n當我點擊 click\n\n![](https://i.imgur.com/g7pwU5s.png)\n\n就算我把順序顛倒過來，它還是會先捕獲在冒泡，跟上圖一樣\n\n---\n\n## [資料來源: [FE102] 前端必備：JavaScript](https://lidemy.com/courses/390588/lectures/9653894)\n","slug":"JavaScript 網頁事件處理","published":1,"updated":"2021-03-22T09:26:50.942Z","_id":"ckmheowzb000etctr47ae2lfp","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h2 id=\"學習方向\"><a href=\"#學習方向\" class=\"headerlink\" title=\"學習方向\"></a>學習方向</h2><ol>\n<li>介面:如何改變事件</li>\n<li>事件:如何監聽事件並做出反應</li>\n<li>資料:如何跟 sever 交換資料<a id=\"more\"></a>\n\n</li>\n</ol>\n<hr>\n<h2 id=\"eventListener-與-callback-function\"><a href=\"#eventListener-與-callback-function\" class=\"headerlink\" title=\"eventListener 與 callback function\"></a>eventListener 與 callback function</h2><h3 id=\"eventListener\"><a href=\"#eventListener\" class=\"headerlink\" title=\"eventListener\"></a>eventListener</h3><p>給一個屬性跟屬性值，再用 <code>document.querySelector</code> 選一個元素並命名為 app ，透過點擊 hello world 做出彈跳視窗，那想做出彈跳視窗必須偵聽事件 <code>addEventListener</code> ，在 <code>addEventListener</code> 前面是事件的動作例如點擊或是按鍵盤…等等，那後面要傳入一個函式。</p>\n<h3 id=\"callback-function\"><a href=\"#callback-function\" class=\"headerlink\" title=\"callback function\"></a>callback function</h3><p>因為不知道使用者甚麼時候才會觸發函式(做甚麼動作)，所以我們必須跟瀏覽器說一但點擊了甚麼按鈕或是做了什麼動作(事件)，就幫我呼叫那個函式(觸發)，那呼叫函式就是 <code>callback function</code></p>\n<p>EX:</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- -------------------------------------------&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- 匿名函式 比較常見寫法--&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.app'</span>)</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  app.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    alert(<span class=\"hljs-string\">'hello world'</span>)</span></span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!---------------------------------------------&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.app'</span>)</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  app.addEventListener(<span class=\"hljs-string\">'click'</span>, onClick)</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onClick</span>(<span class=\"hljs-params\"></span>) </span>{</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    alert(<span class=\"hljs-string\">'hello world'</span>)</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/BYG7UOJ.png\"></p>\n<hr>\n<h2 id=\"event-e\"><a href=\"#event-e\" class=\"headerlink\" title=\"event(e)\"></a>event(e)</h2><p>當我們觸發事件時，瀏覽器就會把參數(event 縮寫為 e)帶入函示裡面。<br>使用 <code>console.log(e)</code> ，可以看到很多關於 e 的參數。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.app'</span>);</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  app.addEventListener(<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">      <span class=\"hljs-built_in\">console</span>.log(e);</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/WqDxtOD.png\"></p>\n<p>改用 <code>console.log(e.target)</code><br><img src=\"https://i.imgur.com/TFYrlsD.png\"></p>\n<p>當然如果想知道按鍵參數的話可以這樣寫<br>先改為全域 window</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'keypress'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    <span class=\"hljs-built_in\">console</span>.log(e.keyCode)</span></span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/A0uZqfO.png\"><br><img src=\"https://i.imgur.com/lDm6hKO.png\"><br>分別按下 a、b、c，可以知道 a = 97 、b = 98、c = 99</p>\n<hr>\n<h2 id=\"表單事件處理-onSubmit\"><a href=\"#表單事件處理-onSubmit\" class=\"headerlink\" title=\"表單事件處理 onSubmit\"></a>表單事件處理 onSubmit</h2><p>這可以應用在表單二次確認密碼的時候<br>寫出一個簡單的表單，並在判斷式內擷取密碼的值( value )</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"login\"</span>&gt;</span></span><br><span class=\"line\">  username:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span><br><span class=\"line\">  password:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span><br><span class=\"line\">  password:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"password1\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scrip</span>&gt;</span></span><br><span class=\"line\">  let login = document.querySelector('.login');</span><br><span class=\"line\">  login.addEventListener('submit',function(e){ let psw =</span><br><span class=\"line\">  document.querySelector('.password'); let psw1 =</span><br><span class=\"line\">  document.querySelector('.password1'); if(psw.value !== psw1.value){</span><br><span class=\"line\">  alert('密碼錯誤'); e.preventDefault(); }else{ alert('密碼正確'); } })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scrip</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/wvGGdgy?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/ES5AVUI.png\"></p>\n<hr>\n<h2 id=\"事件傳遞機制-捕獲跟冒泡事件\"><a href=\"#事件傳遞機制-捕獲跟冒泡事件\" class=\"headerlink\" title=\"事件傳遞機制-捕獲跟冒泡事件\"></a>事件傳遞機制-捕獲跟冒泡事件</h2><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"one\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"two\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  addEvent(<span class=\"hljs-string\">'.one'</span>)</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  addEvent(<span class=\"hljs-string\">'.two'</span>)</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  addEvent(<span class=\"hljs-string\">'button'</span>)</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addEvent</span>(<span class=\"hljs-params\">className</span>) </span>{</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    <span class=\"hljs-built_in\">document</span>.querySelector(className).addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">      <span class=\"hljs-built_in\">console</span>.log(className)</span></span><br><span class=\"line\">    })</span><br><span class=\"line\">  }</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/dyMMWVO?editors=1011\">codepen</a></p>\n<p><img src=\"https://i.imgur.com/iSr9A3f.png\"><br>當我點擊綠色區塊的時候只會跳出 one ，但點擊 click 時就會跳出上圖，但我明明只點 click 為甚麼會連帶影響到其他 class 區塊 ?</p>\n<p>因為這就是事件傳遞機制的捕獲跟冒泡事件</p>\n<p><a href=\"https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/\">Huli 文章</a><br>下圖來源為 Huli 的文章<br><img src=\"https://i.imgur.com/V2KLVIV.png\"><br>以下這段話擷取自 Huli 文章</p>\n<blockquote>\n<p>DOM 的事件在傳播時，會先從根節點開始往下傳遞到 target，這邊你如果加上事件的話，就會處於 CAPTURING_PHASE，捕獲階段。<br>target 就是你所點擊的那個目標，這時候在 target 身上所加的 eventListenr 會是 AT_TARGET 這一個 Phase。<br>你在點擊那一個 td 的時候，這一個點擊的事件會先從 window 開始往下傳，一直傳到 td 為止，到這邊就叫做 CAPTURING_PHASE，捕獲階段。<br>接著事件傳遞到 td 本身，這時候叫做 AT_TARGET。<br>最後事件會從 td 一路傳回去 window，這時候叫做 BUBBLING_PHASE，冒泡階段。<br>所以，在看一些講事件機制的文章的時候，都會看到一個口訣：先捕獲，再冒泡</p>\n</blockquote>\n<p>在監聽時函式後面加上 true 就是捕獲，false 是冒泡</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEvent(<span class=\"hljs-string\">'.one'</span>)</span><br><span class=\"line\">addEvent(<span class=\"hljs-string\">'.two'</span>)</span><br><span class=\"line\">addEvent(<span class=\"hljs-string\">'button'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addEvent</span>(<span class=\"hljs-params\">className</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">document</span>.querySelector(className).addEventListener(</span><br><span class=\"line\">    <span class=\"hljs-string\">'click'</span>,</span><br><span class=\"line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(className, <span class=\"hljs-string\">'捕獲'</span>)</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-built_in\">document</span>.querySelector(className).addEventListener(</span><br><span class=\"line\">    <span class=\"hljs-string\">'click'</span>,</span><br><span class=\"line\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(className, <span class=\"hljs-string\">'冒泡'</span>)</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/YzqqVjQ?editors=1011\">codepen</a></p>\n<p>當我點擊 click</p>\n<p><img src=\"https://i.imgur.com/g7pwU5s.png\"></p>\n<p>就算我把順序顛倒過來，它還是會先捕獲在冒泡，跟上圖一樣</p>\n<hr>\n<h2 id=\"資料來源-FE102-前端必備：JavaScript\"><a href=\"#資料來源-FE102-前端必備：JavaScript\" class=\"headerlink\" title=\"資料來源: [FE102] 前端必備：JavaScript\"></a><a href=\"https://lidemy.com/courses/390588/lectures/9653894\">資料來源: [FE102] 前端必備：JavaScript</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"}],"_tags":[{"name":"eventListener","path":"tags/eventListener/"},{"name":"callback function","path":"tags/callback-function/"},{"name":"event","path":"tags/event/"},{"name":"onSubmit","path":"tags/onSubmit/"}],"excerpt":"<html><head></head><body><h2 id=\"學習方向\"><a href=\"#學習方向\" class=\"headerlink\" title=\"學習方向\"></a>學習方向</h2><ol>\n<li>介面:如何改變事件</li>\n<li>事件:如何監聽事件並做出反應</li>\n<li>資料:如何跟 sever 交換資料</li></ol></body></html>","more":"</li>\n</ol>\n<hr>\n<h2 id=\"eventListener-與-callback-function\"><a href=\"#eventListener-與-callback-function\" class=\"headerlink\" title=\"eventListener 與 callback function\"></a>eventListener 與 callback function</h2><h3 id=\"eventListener\"><a href=\"#eventListener\" class=\"headerlink\" title=\"eventListener\"></a>eventListener</h3><p>給一個屬性跟屬性值，再用 <code>document.querySelector</code> 選一個元素並命名為 app ，透過點擊 hello world 做出彈跳視窗，那想做出彈跳視窗必須偵聽事件 <code>addEventListener</code> ，在 <code>addEventListener</code> 前面是事件的動作例如點擊或是按鍵盤…等等，那後面要傳入一個函式。</p>\n<h3 id=\"callback-function\"><a href=\"#callback-function\" class=\"headerlink\" title=\"callback function\"></a>callback function</h3><p>因為不知道使用者甚麼時候才會觸發函式(做甚麼動作)，所以我們必須跟瀏覽器說一但點擊了甚麼按鈕或是做了什麼動作(事件)，就幫我呼叫那個函式(觸發)，那呼叫函式就是 <code>callback function</code></p>\n<p>EX:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- -------------------------------------------&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 匿名函式 比較常見寫法--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> app = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.app&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  app.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&#x27;hello world&#x27;</span>)</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!---------------------------------------------&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> app = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.app&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  app.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, onClick)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onClick</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&#x27;hello world&#x27;</span>)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/BYG7UOJ.png\"></p>\n<hr>\n<h2 id=\"event-e\"><a href=\"#event-e\" class=\"headerlink\" title=\"event(e)\"></a>event(e)</h2><p>當我們觸發事件時，瀏覽器就會把參數(event 縮寫為 e)帶入函示裡面。<br>使用 <code>console.log(e)</code> ，可以看到很多關於 e 的參數。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> app = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  app.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(e);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/WqDxtOD.png\"></p>\n<p>改用 <code>console.log(e.target)</code><br><img src=\"https://i.imgur.com/TFYrlsD.png\"></p>\n<p>當然如果想知道按鍵參數的話可以這樣寫<br>先改為全域 window</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;keypress&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(e.keyCode)</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/A0uZqfO.png\"><br><img src=\"https://i.imgur.com/lDm6hKO.png\"><br>分別按下 a、b、c，可以知道 a = 97 、b = 98、c = 99</p>\n<hr>\n<h2 id=\"表單事件處理-onSubmit\"><a href=\"#表單事件處理-onSubmit\" class=\"headerlink\" title=\"表單事件處理 onSubmit\"></a>表單事件處理 onSubmit</h2><p>這可以應用在表單二次確認密碼的時候<br>寫出一個簡單的表單，並在判斷式內擷取密碼的值( value )</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">  username:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  password:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  password:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;password1&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scrip</span>&gt;</span></span><br><span class=\"line\">  let login = document.querySelector(&#x27;.login&#x27;);</span><br><span class=\"line\">  login.addEventListener(&#x27;submit&#x27;,function(e)&#123; let psw =</span><br><span class=\"line\">  document.querySelector(&#x27;.password&#x27;); let psw1 =</span><br><span class=\"line\">  document.querySelector(&#x27;.password1&#x27;); if(psw.value !== psw1.value)&#123;</span><br><span class=\"line\">  alert(&#x27;密碼錯誤&#x27;); e.preventDefault(); &#125;else&#123; alert(&#x27;密碼正確&#x27;); &#125; &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/wvGGdgy?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/ES5AVUI.png\"></p>\n<hr>\n<h2 id=\"事件傳遞機制-捕獲跟冒泡事件\"><a href=\"#事件傳遞機制-捕獲跟冒泡事件\" class=\"headerlink\" title=\"事件傳遞機制-捕獲跟冒泡事件\"></a>事件傳遞機制-捕獲跟冒泡事件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;one&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;two&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  addEvent(<span class=\"string\">&#x27;.one&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  addEvent(<span class=\"string\">&#x27;.two&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  addEvent(<span class=\"string\">&#x27;button&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEvent</span>(<span class=\"params\">className</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.querySelector(className).addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(className)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/dyMMWVO?editors=1011\">codepen</a></p>\n<p><img src=\"https://i.imgur.com/iSr9A3f.png\"><br>當我點擊綠色區塊的時候只會跳出 one ，但點擊 click 時就會跳出上圖，但我明明只點 click 為甚麼會連帶影響到其他 class 區塊 ?</p>\n<p>因為這就是事件傳遞機制的捕獲跟冒泡事件</p>\n<p><a href=\"https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/\">Huli 文章</a><br>下圖來源為 Huli 的文章<br><img src=\"https://i.imgur.com/V2KLVIV.png\"><br>以下這段話擷取自 Huli 文章</p>\n<blockquote>\n<p>DOM 的事件在傳播時，會先從根節點開始往下傳遞到 target，這邊你如果加上事件的話，就會處於 CAPTURING_PHASE，捕獲階段。<br>target 就是你所點擊的那個目標，這時候在 target 身上所加的 eventListenr 會是 AT_TARGET 這一個 Phase。<br>你在點擊那一個 td 的時候，這一個點擊的事件會先從 window 開始往下傳，一直傳到 td 為止，到這邊就叫做 CAPTURING_PHASE，捕獲階段。<br>接著事件傳遞到 td 本身，這時候叫做 AT_TARGET。<br>最後事件會從 td 一路傳回去 window，這時候叫做 BUBBLING_PHASE，冒泡階段。<br>所以，在看一些講事件機制的文章的時候，都會看到一個口訣：先捕獲，再冒泡</p>\n</blockquote>\n<p>在監聽時函式後面加上 true 就是捕獲，false 是冒泡</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEvent(<span class=\"string\">&#x27;.one&#x27;</span>)</span><br><span class=\"line\">addEvent(<span class=\"string\">&#x27;.two&#x27;</span>)</span><br><span class=\"line\">addEvent(<span class=\"string\">&#x27;button&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEvent</span>(<span class=\"params\">className</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(className).addEventListener(</span><br><span class=\"line\">    <span class=\"string\">&#x27;click&#x27;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(className, <span class=\"string\">&#x27;捕獲&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"literal\">true</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(className).addEventListener(</span><br><span class=\"line\">    <span class=\"string\">&#x27;click&#x27;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(className, <span class=\"string\">&#x27;冒泡&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"literal\">false</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/YzqqVjQ?editors=1011\">codepen</a></p>\n<p>當我點擊 click</p>\n<p><img src=\"https://i.imgur.com/g7pwU5s.png\"></p>\n<p>就算我把順序顛倒過來，它還是會先捕獲在冒泡，跟上圖一樣</p>\n<hr>\n<h2 id=\"資料來源-FE102-前端必備：JavaScript\"><a href=\"#資料來源-FE102-前端必備：JavaScript\" class=\"headerlink\" title=\"資料來源: [FE102] 前端必備：JavaScript\"></a><a href=\"https://lidemy.com/courses/390588/lectures/9653894\">資料來源: [FE102] 前端必備：JavaScript</a></h2>"},{"title":"Html - Flex 上課筆記","date":"2020-06-12T16:00:00.000Z","description":"了解 d-flex 屬性","_content":"\n## Note:\n\ndisplay:必備屬性\nflex-direction:決定 flex 軸線\njustify-content:主要軸線的對齊\nalign-items:交錯軸線的對齊\n\n<!--more-->\n\n## Flex 外層屬性 (container) 介紹\n\n父元素有 display:flex，內層子元素之間的比例就會自動調整位置\n\n```pug\n.container\n .item.item1 1\n .item.item2 2\n .item.item3 3\n```\n\n即使 item 寬度調成 200 5000 10000 px，也不會超出 container，因為父層有 display:flex，但內層如果單一設定高度，其他項目也會跟著一起變更高度\n若在 item1、2、3 個別加上屬性值\n會呈現下圖\n\n```css\n.container {\n  width: 500px;\n  background: #0099ff;\n  margin: 0 auto;\n}\n.container .item {\n  background: #00ffa2;\n  color: #d32a2a;\n  text-align: center;\n  font-size: 36px;\n  margin-bottom: 10px;\n}\n.container .item1 {\n  height: 150px;\n  width: 150px;\n}\n.container .item2 {\n  height: 200px;\n  width: auto;\n  //因為沒設定寬度，所以會自適應延伸父元素，\n  //父元素寬多少ex:500px，子元素寬就會多少ex:500px\n}\n.container .item3 {\n  height: auto;\n  width: 400px;\n}\n```\n\n即使 item 寬度調成 200 5000 10000 px，也不會超出 container，因為父層有 display:flex，但內層如果單一設定高度，其他項目也會跟著一起變更高度\n\n若在 item1、2、3 個別加上屬性值\n\n```css\n.container {\n  width: 500px;\n  background: #0099ff;\n  margin: 0 auto;\n}\n.container .item {\n  background: #00ffa2;\n  color: #d32a2a;\n  text-align: center;\n  font-size: 36px;\n  margin-bottom: 10px;\n}\n.container .item1 {\n  height: 150px;\n  width: 150px;\n}\n.container .item2 {\n  height: 200px;\n  width: auto;\n  //因為沒設定寬度，所以會自適應延伸父元素，\n  //父元素寬多少ex:500px，子元素寬就會多少ex:500px\n}\n.container .item3 {\n  height: auto;\n  width: 400px;\n}\n```\n\n會呈現下圖\n![](https://i.imgur.com/CI2KfeC.png)\n若在.container css 加上 display: flex 跟 .item + margin: 0 0 10px 10px\n會呈現下圖\n![](https://i.imgur.com/8POvW8H.png)\nitem3 因為沒設定高度，所以會依照.item2 的高度自適應延伸\nitem1 因為\"有\"設定高度，所以不會自適應延伸\n如果 item 都沒設定高度，就會依照元素內的內容設定高度\nnote: item 預設是等高(or 寬)的，會依照 container 內部距離自動調整\n\n[codepen 範例](https://codepen.io/gleofgja/pen/wvaVmZB?editors=0100)\n\n---\n\n## Flex-direction 排版方向\n\n### flex-direction: row\n\n![](https://i.imgur.com/TM0sx6x.png)\n\n### flex-direction: row-reverse\n\n![](https://i.imgur.com/FFkZsKJ.png)\n\n### flex-direction: colume\n\n![](https://i.imgur.com/P8e2EUb.png)\n\n### flex-direction: colume-reverse\n\n![](https://i.imgur.com/7VOAUuk.png)\n\n### justify-content — 決定主軸對齊方式\n\n![](https://i.imgur.com/GiOy9xd.png)\n![](https://i.imgur.com/v3otwc7.png)\n![](https://i.imgur.com/kpyczNo.png)\n\n```\ndisplay: flex\nflex-direction: column\njustify-content: space-between\n```\n\n![](https://i.imgur.com/VGGHA5f.png)\n要改變方向要下 display: flex & flex-direction: column(垂直)\nrow 橫向本身是預設可不寫\n\n[六角 Flex 模擬器](https://codepen.io/gleofgja/pen/gOpVKzo)\n[TEST CSS FLEXBOX RULES](http://flexbox.help/)\n\n---\n\n## [資料來源:六角學院-Flex 網頁排版技巧](https://courses.hexschool.com/courses/enrolled/666803)\n\n## [資料來源:職人必修的 RWD 網頁入門班](https://hahow.in/courses/591d96d300f58c070078c4c6/discussions?item=5a1e1759a2c4b000589ddcff)\n","source":"_posts/2021/Flex 上課筆記.md","raw":"---\ntitle: Html - Flex 上課筆記\ndate: 2020/06/13\ntags: d-flex\ncategories: Flex\ndescription: 了解 d-flex 屬性\n---\n\n## Note:\n\ndisplay:必備屬性\nflex-direction:決定 flex 軸線\njustify-content:主要軸線的對齊\nalign-items:交錯軸線的對齊\n\n<!--more-->\n\n## Flex 外層屬性 (container) 介紹\n\n父元素有 display:flex，內層子元素之間的比例就會自動調整位置\n\n```pug\n.container\n .item.item1 1\n .item.item2 2\n .item.item3 3\n```\n\n即使 item 寬度調成 200 5000 10000 px，也不會超出 container，因為父層有 display:flex，但內層如果單一設定高度，其他項目也會跟著一起變更高度\n若在 item1、2、3 個別加上屬性值\n會呈現下圖\n\n```css\n.container {\n  width: 500px;\n  background: #0099ff;\n  margin: 0 auto;\n}\n.container .item {\n  background: #00ffa2;\n  color: #d32a2a;\n  text-align: center;\n  font-size: 36px;\n  margin-bottom: 10px;\n}\n.container .item1 {\n  height: 150px;\n  width: 150px;\n}\n.container .item2 {\n  height: 200px;\n  width: auto;\n  //因為沒設定寬度，所以會自適應延伸父元素，\n  //父元素寬多少ex:500px，子元素寬就會多少ex:500px\n}\n.container .item3 {\n  height: auto;\n  width: 400px;\n}\n```\n\n即使 item 寬度調成 200 5000 10000 px，也不會超出 container，因為父層有 display:flex，但內層如果單一設定高度，其他項目也會跟著一起變更高度\n\n若在 item1、2、3 個別加上屬性值\n\n```css\n.container {\n  width: 500px;\n  background: #0099ff;\n  margin: 0 auto;\n}\n.container .item {\n  background: #00ffa2;\n  color: #d32a2a;\n  text-align: center;\n  font-size: 36px;\n  margin-bottom: 10px;\n}\n.container .item1 {\n  height: 150px;\n  width: 150px;\n}\n.container .item2 {\n  height: 200px;\n  width: auto;\n  //因為沒設定寬度，所以會自適應延伸父元素，\n  //父元素寬多少ex:500px，子元素寬就會多少ex:500px\n}\n.container .item3 {\n  height: auto;\n  width: 400px;\n}\n```\n\n會呈現下圖\n![](https://i.imgur.com/CI2KfeC.png)\n若在.container css 加上 display: flex 跟 .item + margin: 0 0 10px 10px\n會呈現下圖\n![](https://i.imgur.com/8POvW8H.png)\nitem3 因為沒設定高度，所以會依照.item2 的高度自適應延伸\nitem1 因為\"有\"設定高度，所以不會自適應延伸\n如果 item 都沒設定高度，就會依照元素內的內容設定高度\nnote: item 預設是等高(or 寬)的，會依照 container 內部距離自動調整\n\n[codepen 範例](https://codepen.io/gleofgja/pen/wvaVmZB?editors=0100)\n\n---\n\n## Flex-direction 排版方向\n\n### flex-direction: row\n\n![](https://i.imgur.com/TM0sx6x.png)\n\n### flex-direction: row-reverse\n\n![](https://i.imgur.com/FFkZsKJ.png)\n\n### flex-direction: colume\n\n![](https://i.imgur.com/P8e2EUb.png)\n\n### flex-direction: colume-reverse\n\n![](https://i.imgur.com/7VOAUuk.png)\n\n### justify-content — 決定主軸對齊方式\n\n![](https://i.imgur.com/GiOy9xd.png)\n![](https://i.imgur.com/v3otwc7.png)\n![](https://i.imgur.com/kpyczNo.png)\n\n```\ndisplay: flex\nflex-direction: column\njustify-content: space-between\n```\n\n![](https://i.imgur.com/VGGHA5f.png)\n要改變方向要下 display: flex & flex-direction: column(垂直)\nrow 橫向本身是預設可不寫\n\n[六角 Flex 模擬器](https://codepen.io/gleofgja/pen/gOpVKzo)\n[TEST CSS FLEXBOX RULES](http://flexbox.help/)\n\n---\n\n## [資料來源:六角學院-Flex 網頁排版技巧](https://courses.hexschool.com/courses/enrolled/666803)\n\n## [資料來源:職人必修的 RWD 網頁入門班](https://hahow.in/courses/591d96d300f58c070078c4c6/discussions?item=5a1e1759a2c4b000589ddcff)\n","slug":"Flex 上課筆記","published":1,"updated":"2021-03-22T09:26:42.159Z","_id":"ckmheq6cc000ktctr204u7cat","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note:\"></a>Note:</h2><p>display:必備屬性<br>flex-direction:決定 flex 軸線<br>justify-content:主要軸線的對齊<br>align-items:交錯軸線的對齊</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Flex-外層屬性-container-介紹\"><a href=\"#Flex-外層屬性-container-介紹\" class=\"headerlink\" title=\"Flex 外層屬性 (container) 介紹\"></a>Flex 外層屬性 (container) 介紹</h2><p>父元素有 display:flex，內層子元素之間的比例就會自動調整位置</p>\n<figure class=\"highlight plain hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container</span><br><span class=\"line\"> .item.item1 1</span><br><span class=\"line\"> .item.item2 2</span><br><span class=\"line\"> .item.item3 3</span><br></pre></td></tr></tbody></table></figure>\n\n<p>即使 item 寬度調成 200 5000 10000 px，也不會超出 container，因為父層有 display:flex，但內層如果單一設定高度，其他項目也會跟著一起變更高度<br>若在 item1、2、3 個別加上屬性值<br>會呈現下圖</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#0099ff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.item</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#00ffa2</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#d32a2a</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">36px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.item1</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.item2</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: auto;</span><br><span class=\"line\">  //因為沒設定寬度，所以會自適應延伸父元素，</span><br><span class=\"line\">  //父元素寬多少ex:500px，子元素寬就會多少ex:500px</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.item3</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: auto;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">400px</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>即使 item 寬度調成 200 5000 10000 px，也不會超出 container，因為父層有 display:flex，但內層如果單一設定高度，其他項目也會跟著一起變更高度</p>\n<p>若在 item1、2、3 個別加上屬性值</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#0099ff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.item</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#00ffa2</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#d32a2a</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">36px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.item1</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.item2</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: auto;</span><br><span class=\"line\">  //因為沒設定寬度，所以會自適應延伸父元素，</span><br><span class=\"line\">  //父元素寬多少ex:500px，子元素寬就會多少ex:500px</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.item3</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: auto;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">400px</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>會呈現下圖<br><img src=\"https://i.imgur.com/CI2KfeC.png\"><br>若在.container css 加上 display: flex 跟 .item + margin: 0 0 10px 10px<br>會呈現下圖<br><img src=\"https://i.imgur.com/8POvW8H.png\"><br>item3 因為沒設定高度，所以會依照.item2 的高度自適應延伸<br>item1 因為”有”設定高度，所以不會自適應延伸<br>如果 item 都沒設定高度，就會依照元素內的內容設定高度<br>note: item 預設是等高(or 寬)的，會依照 container 內部距離自動調整</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/wvaVmZB?editors=0100\">codepen 範例</a></p>\n<hr>\n<h2 id=\"Flex-direction-排版方向\"><a href=\"#Flex-direction-排版方向\" class=\"headerlink\" title=\"Flex-direction 排版方向\"></a>Flex-direction 排版方向</h2><h3 id=\"flex-direction-row\"><a href=\"#flex-direction-row\" class=\"headerlink\" title=\"flex-direction: row\"></a>flex-direction: row</h3><p><img src=\"https://i.imgur.com/TM0sx6x.png\"></p>\n<h3 id=\"flex-direction-row-reverse\"><a href=\"#flex-direction-row-reverse\" class=\"headerlink\" title=\"flex-direction: row-reverse\"></a>flex-direction: row-reverse</h3><p><img src=\"https://i.imgur.com/FFkZsKJ.png\"></p>\n<h3 id=\"flex-direction-colume\"><a href=\"#flex-direction-colume\" class=\"headerlink\" title=\"flex-direction: colume\"></a>flex-direction: colume</h3><p><img src=\"https://i.imgur.com/P8e2EUb.png\"></p>\n<h3 id=\"flex-direction-colume-reverse\"><a href=\"#flex-direction-colume-reverse\" class=\"headerlink\" title=\"flex-direction: colume-reverse\"></a>flex-direction: colume-reverse</h3><p><img src=\"https://i.imgur.com/7VOAUuk.png\"></p>\n<h3 id=\"justify-content-—-決定主軸對齊方式\"><a href=\"#justify-content-—-決定主軸對齊方式\" class=\"headerlink\" title=\"justify-content — 決定主軸對齊方式\"></a>justify-content — 決定主軸對齊方式</h3><p><img src=\"https://i.imgur.com/GiOy9xd.png\"><br><img src=\"https://i.imgur.com/v3otwc7.png\"><br><img src=\"https://i.imgur.com/kpyczNo.png\"></p>\n<figure class=\"highlight plain hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex</span><br><span class=\"line\">flex-direction: column</span><br><span class=\"line\">justify-content: space-between</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/VGGHA5f.png\"><br>要改變方向要下 display: flex &amp; flex-direction: column(垂直)<br>row 橫向本身是預設可不寫</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/gOpVKzo\">六角 Flex 模擬器</a><br><a href=\"http://flexbox.help/\">TEST CSS FLEXBOX RULES</a></p>\n<hr>\n<h2 id=\"資料來源-六角學院-Flex-網頁排版技巧\"><a href=\"#資料來源-六角學院-Flex-網頁排版技巧\" class=\"headerlink\" title=\"資料來源:六角學院-Flex 網頁排版技巧\"></a><a href=\"https://courses.hexschool.com/courses/enrolled/666803\">資料來源:六角學院-Flex 網頁排版技巧</a></h2><h2 id=\"資料來源-職人必修的-RWD-網頁入門班\"><a href=\"#資料來源-職人必修的-RWD-網頁入門班\" class=\"headerlink\" title=\"資料來源:職人必修的 RWD 網頁入門班\"></a><a href=\"https://hahow.in/courses/591d96d300f58c070078c4c6/discussions?item=5a1e1759a2c4b000589ddcff\">資料來源:職人必修的 RWD 網頁入門班</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Flex","path":"categories/Flex/"}],"_tags":[{"name":"d-flex","path":"tags/d-flex/"}],"excerpt":"<html><head></head><body><h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note:\"></a>Note:</h2><p>display:必備屬性<br>flex-direction:決定 flex 軸線<br>justify-content:主要軸線的對齊<br>align-items:交錯軸線的對齊</p></body></html>","more":"<h2 id=\"Flex-外層屬性-container-介紹\"><a href=\"#Flex-外層屬性-container-介紹\" class=\"headerlink\" title=\"Flex 外層屬性 (container) 介紹\"></a>Flex 外層屬性 (container) 介紹</h2><p>父元素有 display:flex，內層子元素之間的比例就會自動調整位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container</span><br><span class=\"line\"> .item.item1 1</span><br><span class=\"line\"> .item.item2 2</span><br><span class=\"line\"> .item.item3 3</span><br></pre></td></tr></table></figure>\n\n<p>即使 item 寬度調成 200 5000 10000 px，也不會超出 container，因為父層有 display:flex，但內層如果單一設定高度，其他項目也會跟著一起變更高度<br>若在 item1、2、3 個別加上屬性值<br>會呈現下圖</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#0099ff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#00ffa2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#d32a2a</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">36px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.item1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.item2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: auto;</span><br><span class=\"line\">  //因為沒設定寬度，所以會自適應延伸父元素，</span><br><span class=\"line\">  //父元素寬多少ex:500px，子元素寬就會多少ex:500px</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.item3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>即使 item 寬度調成 200 5000 10000 px，也不會超出 container，因為父層有 display:flex，但內層如果單一設定高度，其他項目也會跟著一起變更高度</p>\n<p>若在 item1、2、3 個別加上屬性值</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#0099ff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#00ffa2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#d32a2a</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">36px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.item1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.item2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: auto;</span><br><span class=\"line\">  //因為沒設定寬度，所以會自適應延伸父元素，</span><br><span class=\"line\">  //父元素寬多少ex:500px，子元素寬就會多少ex:500px</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.item3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>會呈現下圖<br><img src=\"https://i.imgur.com/CI2KfeC.png\"><br>若在.container css 加上 display: flex 跟 .item + margin: 0 0 10px 10px<br>會呈現下圖<br><img src=\"https://i.imgur.com/8POvW8H.png\"><br>item3 因為沒設定高度，所以會依照.item2 的高度自適應延伸<br>item1 因為”有”設定高度，所以不會自適應延伸<br>如果 item 都沒設定高度，就會依照元素內的內容設定高度<br>note: item 預設是等高(or 寬)的，會依照 container 內部距離自動調整</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/wvaVmZB?editors=0100\">codepen 範例</a></p>\n<hr>\n<h2 id=\"Flex-direction-排版方向\"><a href=\"#Flex-direction-排版方向\" class=\"headerlink\" title=\"Flex-direction 排版方向\"></a>Flex-direction 排版方向</h2><h3 id=\"flex-direction-row\"><a href=\"#flex-direction-row\" class=\"headerlink\" title=\"flex-direction: row\"></a>flex-direction: row</h3><p><img src=\"https://i.imgur.com/TM0sx6x.png\"></p>\n<h3 id=\"flex-direction-row-reverse\"><a href=\"#flex-direction-row-reverse\" class=\"headerlink\" title=\"flex-direction: row-reverse\"></a>flex-direction: row-reverse</h3><p><img src=\"https://i.imgur.com/FFkZsKJ.png\"></p>\n<h3 id=\"flex-direction-colume\"><a href=\"#flex-direction-colume\" class=\"headerlink\" title=\"flex-direction: colume\"></a>flex-direction: colume</h3><p><img src=\"https://i.imgur.com/P8e2EUb.png\"></p>\n<h3 id=\"flex-direction-colume-reverse\"><a href=\"#flex-direction-colume-reverse\" class=\"headerlink\" title=\"flex-direction: colume-reverse\"></a>flex-direction: colume-reverse</h3><p><img src=\"https://i.imgur.com/7VOAUuk.png\"></p>\n<h3 id=\"justify-content-—-決定主軸對齊方式\"><a href=\"#justify-content-—-決定主軸對齊方式\" class=\"headerlink\" title=\"justify-content — 決定主軸對齊方式\"></a>justify-content — 決定主軸對齊方式</h3><p><img src=\"https://i.imgur.com/GiOy9xd.png\"><br><img src=\"https://i.imgur.com/v3otwc7.png\"><br><img src=\"https://i.imgur.com/kpyczNo.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex</span><br><span class=\"line\">flex-direction: column</span><br><span class=\"line\">justify-content: space-between</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/VGGHA5f.png\"><br>要改變方向要下 display: flex &amp; flex-direction: column(垂直)<br>row 橫向本身是預設可不寫</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/gOpVKzo\">六角 Flex 模擬器</a><br><a href=\"http://flexbox.help/\">TEST CSS FLEXBOX RULES</a></p>\n<hr>\n<h2 id=\"資料來源-六角學院-Flex-網頁排版技巧\"><a href=\"#資料來源-六角學院-Flex-網頁排版技巧\" class=\"headerlink\" title=\"資料來源:六角學院-Flex 網頁排版技巧\"></a><a href=\"https://courses.hexschool.com/courses/enrolled/666803\">資料來源:六角學院-Flex 網頁排版技巧</a></h2><h2 id=\"資料來源-職人必修的-RWD-網頁入門班\"><a href=\"#資料來源-職人必修的-RWD-網頁入門班\" class=\"headerlink\" title=\"資料來源:職人必修的 RWD 網頁入門班\"></a><a href=\"https://hahow.in/courses/591d96d300f58c070078c4c6/discussions?item=5a1e1759a2c4b000589ddcff\">資料來源:職人必修的 RWD 網頁入門班</a></h2>"},{"title":"Vue - 列表渲染","date":"2021-03-01T16:00:00.000Z","description":"用 v-for 把陣列轉換為一組元素","_content":"\n## 8-1 用 v-for 把陣列轉換為一組元素\n\n將 `data` 裡面的 `todo` 陣列顯示在 `li` 上，`v-for=\"todos in todo\"` 後面的`todos` 代表陣列，前面的`todo` 代表陣列裡面的每個元素\n\n<!-- more -->\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"todos in todo\">{{todos}}</li>\n  </ul>\n</div>\n```\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    todo: ['html', 'javascript', 'css'],\n  },\n})\n```\n\n![](https://i.imgur.com/br0hybR.png)\n\n---\n\n### 下拉選單\n\n```html\n<div id=\"app\">\n  <select>\n    <option v-for=\"month in months\">{{month}}</option>\n  </select>\n</div>\n```\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    months: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n  },\n})\n```\n\n[codepen](https://codepen.io/gleofgja/pen/yLemJQy?editors=1010)\n\n這種數字的有另一個寫法，可以將 `months` 改寫成數字，而改寫的數字就會是最大值，而 `months` 的陣列可以刪除。\n範例如下:\n\n```html\n<div id=\"app\">\n  <select>\n    <option v-for=\"month in 30\">{{month}}</option>\n  </select>\n</div>\n```\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {},\n})\n```\n\n這樣就會有 30 個數字選項\n\n### 月份綁 value\n\n這是在陣列是字串下，但又希望 value 值是數字 123，這時可以在 `month` 後面加上 `index` 或是 `idx` 、 `i `等等任意變數，再用 `v-bind` 綁 `value`\n\n```html\n<div id=\"app\">\n  <select>\n    <option v-for=\"(month, index) in months\" :vlaue=\"index+1\">{{month}}</option>\n  </select>\n</div>\n```\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    months: [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ],\n  },\n})\n```\n\n![](https://i.imgur.com/8HMNTpb.png)\n[codepen](https://codepen.io/gleofgja/pen/MWKNjgK?editors=1010)\n\n---\n\n## 8-2 用 v-for 把一個物件轉換為一組元素\n\n如果要取物件內的 key 值，就在 value 後面加上 key 就好\n跟陣列很像，**陣列**是 (元素, idx) ，**物件**是 (value, key)\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(value, key) in obj\">{{key}} : {{value}}</li>\n  </ul>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      obj: {\n        // 前面為 key: 後面為 value\n        name: 'PKT',\n        number: '123456',\n        age: '22',\n      },\n    },\n  })\n</script>\n```\n\n![](https://i.imgur.com/2WF7ILF.png)\n\n---\n\nv-for 轉物件，渲染出來的順序不一定會跟我寫的一樣，例如我用不規律的數字做開頭\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(value, key) in obj\">{{key}} : {{value}}</li>\n  </ul>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      obj: {\n        name: 'PKT',\n        number: '123456',\n        age: '22',\n        12: '中餐',\n        8: '早餐',\n        6: '晚餐',\n        2: '宵夜',\n      },\n    },\n  })\n</script>\n```\n\n渲染出來的結果會長這樣\n![](https://i.imgur.com/hKlcyV5.png)\n明明我的順序是 12 => 8 => 6 => 2，但是選染出來卻是按照順序排列，這是因為我們用 **v-for 來轉物件**，若真要按照順序排列的話 code 也不會這樣打，但這是特定情況，必須依照我寫 code 的順序排列，所以就要用 **v-for 轉陣列**的方式，來修正。\n\n先把物件轉陣列型式，並且在陣列內新增 prop & value 屬性\n再把 v-for 轉成陣列，下面的 obj 是陣列\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"item in obj\">{{item.prop}} : {{item.value}}</li>\n  </ul>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      obj: [\n        { prop: 'name', value: 'PKT' },\n        { prop: 'number', value: '123456' },\n        { prop: 'age', value: '22' },\n        { prop: 12, value: '中餐' },\n        { prop: 8, value: '早餐' },\n        { prop: 6, value: '晚餐' },\n        { prop: 2, value: '宵夜' },\n      ],\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/ZEWoRoy?editors=1010)\n這樣就可以依照我指定的順序來顯示了\n![](https://i.imgur.com/8O4Uqwo.png)\n\n---\n\n## 修改陣列或物件的注意事項\n\n常用語法：\n\n1. push: 新增數字\n2. pop: 減少數字\n3. shift: 移除並回傳陣列的第一個元素\n4. unshift: 從陣列開頭塞數字\n5. splice: 從頭數到第 X 個，移除 Y 個，加入 Z\n6. sort: 把亂掉的順序，按順序排列\n7. reverse: 順序顛倒\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"item in nums\">{{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: [1, 2, 3, 4, 5],\n\n      // sort 用\n      // nums:[1,3,5,7,2,4,6,8],\n    },\n    methods: {\n      add() {\n        // this.nums.push(this.nums.length+1);\n        // this.nums.pop();\n        // this.nums.shift();\n        // this.nums.unshift(0);\n        // this.nums.splice(idx, length);\n        // this.nums.splice(2, 1, 9,8,7,);\n        //\n        // this.nums.sort();\n        // this.nums.reverse();\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/NWNMLgO?editors=1010)\n\n---\n\n### filter\n\n[文件](https://cn.vuejs.org/v2/guide/filters.html)\n`filter` 會把陣列內的所有元素拿去跑函式，同時又不會更動原本的陣列，而是產生新的陣列。\n那函式跑完回傳的值是 true ，就會產生新的陣列，是 false 就不會有新元素出現在新陣列內。\n\n簡言之，就是把原本的陣列過濾並產生新的陣列。\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"item in nums\">{{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    },\n    methods: {\n      add() {\n        this.nums = this.nums.filter((elm) => elm % 2 === 0)\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/BaKVyym?editors=1010)\n過濾後會變成下圖\n![](https://i.imgur.com/t5ziwrX.png)\n\n---\n\n### 修改陣列並反應在元素上\n\n想感變陣列內的值可以用 `splice`\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"item in nums\">{{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    },\n    methods: {\n      add() {\n        // 這樣是不會有任何反應的\n        // this.nums[0] = 10;\n        // 從第2個，移除1個，加入789 或是 單值\n        // 從第0開始算，移除1開始算\n        // this.nums.splice(2, 1, 7,8,9);\n        // 從第 X 個之後都移除掉\n        // 移除1開始算\n        // this.nums.splice(2);\n        // 只保留從 X 到 Y，其他移除掉\n        // 從第0開始算，移除1開始算\n        // slice(從, 第)\n        // this.nums = this.nums.slice(1, 4);\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/VwadYbP?editors=1010)\n\n---\n\n### 物件內新增值\n\n以上都是 v-for 轉陣列，現在是轉物件，並在物件內新增值\n\n新方法 `$set(設定屬性的物件, 設定物件的 key, key 的值)`\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(item, key) in nums\">{{key}}: {{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: {\n        x: 10,\n        y: 20,\n      },\n    },\n    methods: {\n      add() {\n        // 這樣是無法新增的\n        // this.nums.z = 30;\n\n        this.$set(this.nums, 'z', 30)\n\n        // 除了 $set 還可以用 Vue，但是用 Vue 就沒有$\n        Vue.set(this.nums, 'z', 30)\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/vYGrEaW?editors=1010)\n這樣就可以新增了\n![](https://i.imgur.com/pjDK5Rr.png)\n\n以上是示範物件內原本沒有的，但是要新增新的物件，才會用到 set\n那如果原本就有的，但是要修改原本的物件要怎麼寫? 以下示範\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(item, key) in nums\">{{key}}: {{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: {\n        x: 10,\n        y: 20,\n      },\n    },\n    methods: {\n      add() {\n        this.nums.x = 30\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/bGpKNZz?editors=1010)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","source":"_posts/2021/列表渲染.md","raw":"---\ntitle: Vue - 列表渲染\ndate: 2021/03/02\ntags:\n  - 8-1用 v-for 把陣列轉換為一組元素\n  - 8-2用 v-for 把一個物件轉換為一組元素\n  - 8-3修改陣列或物件的注意事項\ncategories:\n  - Vue\ndescription: 用 v-for 把陣列轉換為一組元素\n---\n\n## 8-1 用 v-for 把陣列轉換為一組元素\n\n將 `data` 裡面的 `todo` 陣列顯示在 `li` 上，`v-for=\"todos in todo\"` 後面的`todos` 代表陣列，前面的`todo` 代表陣列裡面的每個元素\n\n<!-- more -->\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"todos in todo\">{{todos}}</li>\n  </ul>\n</div>\n```\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    todo: ['html', 'javascript', 'css'],\n  },\n})\n```\n\n![](https://i.imgur.com/br0hybR.png)\n\n---\n\n### 下拉選單\n\n```html\n<div id=\"app\">\n  <select>\n    <option v-for=\"month in months\">{{month}}</option>\n  </select>\n</div>\n```\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    months: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n  },\n})\n```\n\n[codepen](https://codepen.io/gleofgja/pen/yLemJQy?editors=1010)\n\n這種數字的有另一個寫法，可以將 `months` 改寫成數字，而改寫的數字就會是最大值，而 `months` 的陣列可以刪除。\n範例如下:\n\n```html\n<div id=\"app\">\n  <select>\n    <option v-for=\"month in 30\">{{month}}</option>\n  </select>\n</div>\n```\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {},\n})\n```\n\n這樣就會有 30 個數字選項\n\n### 月份綁 value\n\n這是在陣列是字串下，但又希望 value 值是數字 123，這時可以在 `month` 後面加上 `index` 或是 `idx` 、 `i `等等任意變數，再用 `v-bind` 綁 `value`\n\n```html\n<div id=\"app\">\n  <select>\n    <option v-for=\"(month, index) in months\" :vlaue=\"index+1\">{{month}}</option>\n  </select>\n</div>\n```\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    months: [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ],\n  },\n})\n```\n\n![](https://i.imgur.com/8HMNTpb.png)\n[codepen](https://codepen.io/gleofgja/pen/MWKNjgK?editors=1010)\n\n---\n\n## 8-2 用 v-for 把一個物件轉換為一組元素\n\n如果要取物件內的 key 值，就在 value 後面加上 key 就好\n跟陣列很像，**陣列**是 (元素, idx) ，**物件**是 (value, key)\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(value, key) in obj\">{{key}} : {{value}}</li>\n  </ul>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      obj: {\n        // 前面為 key: 後面為 value\n        name: 'PKT',\n        number: '123456',\n        age: '22',\n      },\n    },\n  })\n</script>\n```\n\n![](https://i.imgur.com/2WF7ILF.png)\n\n---\n\nv-for 轉物件，渲染出來的順序不一定會跟我寫的一樣，例如我用不規律的數字做開頭\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(value, key) in obj\">{{key}} : {{value}}</li>\n  </ul>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      obj: {\n        name: 'PKT',\n        number: '123456',\n        age: '22',\n        12: '中餐',\n        8: '早餐',\n        6: '晚餐',\n        2: '宵夜',\n      },\n    },\n  })\n</script>\n```\n\n渲染出來的結果會長這樣\n![](https://i.imgur.com/hKlcyV5.png)\n明明我的順序是 12 => 8 => 6 => 2，但是選染出來卻是按照順序排列，這是因為我們用 **v-for 來轉物件**，若真要按照順序排列的話 code 也不會這樣打，但這是特定情況，必須依照我寫 code 的順序排列，所以就要用 **v-for 轉陣列**的方式，來修正。\n\n先把物件轉陣列型式，並且在陣列內新增 prop & value 屬性\n再把 v-for 轉成陣列，下面的 obj 是陣列\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"item in obj\">{{item.prop}} : {{item.value}}</li>\n  </ul>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      obj: [\n        { prop: 'name', value: 'PKT' },\n        { prop: 'number', value: '123456' },\n        { prop: 'age', value: '22' },\n        { prop: 12, value: '中餐' },\n        { prop: 8, value: '早餐' },\n        { prop: 6, value: '晚餐' },\n        { prop: 2, value: '宵夜' },\n      ],\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/ZEWoRoy?editors=1010)\n這樣就可以依照我指定的順序來顯示了\n![](https://i.imgur.com/8O4Uqwo.png)\n\n---\n\n## 修改陣列或物件的注意事項\n\n常用語法：\n\n1. push: 新增數字\n2. pop: 減少數字\n3. shift: 移除並回傳陣列的第一個元素\n4. unshift: 從陣列開頭塞數字\n5. splice: 從頭數到第 X 個，移除 Y 個，加入 Z\n6. sort: 把亂掉的順序，按順序排列\n7. reverse: 順序顛倒\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"item in nums\">{{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: [1, 2, 3, 4, 5],\n\n      // sort 用\n      // nums:[1,3,5,7,2,4,6,8],\n    },\n    methods: {\n      add() {\n        // this.nums.push(this.nums.length+1);\n        // this.nums.pop();\n        // this.nums.shift();\n        // this.nums.unshift(0);\n        // this.nums.splice(idx, length);\n        // this.nums.splice(2, 1, 9,8,7,);\n        //\n        // this.nums.sort();\n        // this.nums.reverse();\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/NWNMLgO?editors=1010)\n\n---\n\n### filter\n\n[文件](https://cn.vuejs.org/v2/guide/filters.html)\n`filter` 會把陣列內的所有元素拿去跑函式，同時又不會更動原本的陣列，而是產生新的陣列。\n那函式跑完回傳的值是 true ，就會產生新的陣列，是 false 就不會有新元素出現在新陣列內。\n\n簡言之，就是把原本的陣列過濾並產生新的陣列。\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"item in nums\">{{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    },\n    methods: {\n      add() {\n        this.nums = this.nums.filter((elm) => elm % 2 === 0)\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/BaKVyym?editors=1010)\n過濾後會變成下圖\n![](https://i.imgur.com/t5ziwrX.png)\n\n---\n\n### 修改陣列並反應在元素上\n\n想感變陣列內的值可以用 `splice`\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"item in nums\">{{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    },\n    methods: {\n      add() {\n        // 這樣是不會有任何反應的\n        // this.nums[0] = 10;\n        // 從第2個，移除1個，加入789 或是 單值\n        // 從第0開始算，移除1開始算\n        // this.nums.splice(2, 1, 7,8,9);\n        // 從第 X 個之後都移除掉\n        // 移除1開始算\n        // this.nums.splice(2);\n        // 只保留從 X 到 Y，其他移除掉\n        // 從第0開始算，移除1開始算\n        // slice(從, 第)\n        // this.nums = this.nums.slice(1, 4);\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/VwadYbP?editors=1010)\n\n---\n\n### 物件內新增值\n\n以上都是 v-for 轉陣列，現在是轉物件，並在物件內新增值\n\n新方法 `$set(設定屬性的物件, 設定物件的 key, key 的值)`\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(item, key) in nums\">{{key}}: {{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: {\n        x: 10,\n        y: 20,\n      },\n    },\n    methods: {\n      add() {\n        // 這樣是無法新增的\n        // this.nums.z = 30;\n\n        this.$set(this.nums, 'z', 30)\n\n        // 除了 $set 還可以用 Vue，但是用 Vue 就沒有$\n        Vue.set(this.nums, 'z', 30)\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/vYGrEaW?editors=1010)\n這樣就可以新增了\n![](https://i.imgur.com/pjDK5Rr.png)\n\n以上是示範物件內原本沒有的，但是要新增新的物件，才會用到 set\n那如果原本就有的，但是要修改原本的物件要怎麼寫? 以下示範\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(item, key) in nums\">{{key}}: {{item}}</li>\n  </ul>\n  <button @click=\"add\">add</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      nums: {\n        x: 10,\n        y: 20,\n      },\n    },\n    methods: {\n      add() {\n        this.nums.x = 30\n      },\n    },\n  })\n</script>\n```\n\n[code](https://codepen.io/gleofgja/pen/bGpKNZz?editors=1010)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","slug":"列表渲染","published":1,"updated":"2021-03-22T09:44:14.543Z","_id":"ckmheujj3000rtctr45tvbe0g","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h2 id=\"8-1-用-v-for-把陣列轉換為一組元素\"><a href=\"#8-1-用-v-for-把陣列轉換為一組元素\" class=\"headerlink\" title=\"8-1 用 v-for 把陣列轉換為一組元素\"></a>8-1 用 v-for 把陣列轉換為一組元素</h2><p>將 <code>data</code> 裡面的 <code>todo</code> 陣列顯示在 <code>li</code> 上，<code>v-for=\"todos in todo\"</code> 後面的<code>todos</code> 代表陣列，前面的<code>todo</code> 代表陣列裡面的每個元素</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"todos in todo\"</span>&gt;</span>{{todos}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    todo: [<span class=\"hljs-string\">'html'</span>, <span class=\"hljs-string\">'javascript'</span>, <span class=\"hljs-string\">'css'</span>],</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/br0hybR.png\"></p>\n<hr>\n<h3 id=\"下拉選單\"><a href=\"#下拉選單\" class=\"headerlink\" title=\"下拉選單\"></a>下拉選單</h3><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"month in months\"</span>&gt;</span>{{month}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    months: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>],</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/yLemJQy?editors=1010\">codepen</a></p>\n<p>這種數字的有另一個寫法，可以將 <code>months</code> 改寫成數字，而改寫的數字就會是最大值，而 <code>months</code> 的陣列可以刪除。<br>範例如下:</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"month in 30\"</span>&gt;</span>{{month}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {},</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>這樣就會有 30 個數字選項</p>\n<h3 id=\"月份綁-value\"><a href=\"#月份綁-value\" class=\"headerlink\" title=\"月份綁 value\"></a>月份綁 value</h3><p>這是在陣列是字串下，但又希望 value 值是數字 123，這時可以在 <code>month</code> 後面加上 <code>index</code> 或是 <code>idx</code> 、 <code>i </code>等等任意變數，再用 <code>v-bind</code> 綁 <code>value</code></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(month, index) in months\"</span> <span class=\"hljs-attr\">:vlaue</span>=<span class=\"hljs-string\">\"index+1\"</span>&gt;</span>{{month}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    months: [</span><br><span class=\"line\">      <span class=\"hljs-string\">'Jan'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Feb'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Mar'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Apr'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'May'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Jun'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Jul'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Aug'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Sep'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Oct'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Nov'</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">'Dec'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/8HMNTpb.png\"><br><a href=\"https://codepen.io/gleofgja/pen/MWKNjgK?editors=1010\">codepen</a></p>\n<hr>\n<h2 id=\"8-2-用-v-for-把一個物件轉換為一組元素\"><a href=\"#8-2-用-v-for-把一個物件轉換為一組元素\" class=\"headerlink\" title=\"8-2 用 v-for 把一個物件轉換為一組元素\"></a>8-2 用 v-for 把一個物件轉換為一組元素</h2><p>如果要取物件內的 key 值，就在 value 後面加上 key 就好<br>跟陣列很像，<strong>陣列</strong>是 (元素, idx) ，<strong>物件</strong>是 (value, key)</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(value, key) in obj\"</span>&gt;</span>{{key}} : {{value}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      obj: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 前面為 key: 後面為 value</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        name: <span class=\"hljs-string\">'PKT'</span>,</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        number: <span class=\"hljs-string\">'123456'</span>,</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        age: <span class=\"hljs-string\">'22'</span>,</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/2WF7ILF.png\"></p>\n<hr>\n<p>v-for 轉物件，渲染出來的順序不一定會跟我寫的一樣，例如我用不規律的數字做開頭</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(value, key) in obj\"</span>&gt;</span>{{key}} : {{value}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      obj: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        name: <span class=\"hljs-string\">'PKT'</span>,</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        number: <span class=\"hljs-string\">'123456'</span>,</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        age: <span class=\"hljs-string\">'22'</span>,</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-number\">12</span>: <span class=\"hljs-string\">'中餐'</span>,</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-number\">8</span>: <span class=\"hljs-string\">'早餐'</span>,</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-number\">6</span>: <span class=\"hljs-string\">'晚餐'</span>,</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-number\">2</span>: <span class=\"hljs-string\">'宵夜'</span>,</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>渲染出來的結果會長這樣<br><img src=\"https://i.imgur.com/hKlcyV5.png\"><br>明明我的順序是 12 =&gt; 8 =&gt; 6 =&gt; 2，但是選染出來卻是按照順序排列，這是因為我們用 <strong>v-for 來轉物件</strong>，若真要按照順序排列的話 code 也不會這樣打，但這是特定情況，必須依照我寫 code 的順序排列，所以就要用 <strong>v-for 轉陣列</strong>的方式，來修正。</p>\n<p>先把物件轉陣列型式，並且在陣列內新增 prop &amp; value 屬性<br>再把 v-for 轉成陣列，下面的 obj 是陣列</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"item in obj\"</span>&gt;</span>{{item.prop}} : {{item.value}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      obj: [</span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-string\">'name'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'PKT'</span> },</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-string\">'number'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'123456'</span> },</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-string\">'age'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'22'</span> },</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-number\">12</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'中餐'</span> },</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-number\">8</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'早餐'</span> },</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'晚餐'</span> },</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'宵夜'</span> },</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEWoRoy?editors=1010\">code</a><br>這樣就可以依照我指定的順序來顯示了<br><img src=\"https://i.imgur.com/8O4Uqwo.png\"></p>\n<hr>\n<h2 id=\"修改陣列或物件的注意事項\"><a href=\"#修改陣列或物件的注意事項\" class=\"headerlink\" title=\"修改陣列或物件的注意事項\"></a>修改陣列或物件的注意事項</h2><p>常用語法：</p>\n<ol>\n<li>push: 新增數字</li>\n<li>pop: 減少數字</li>\n<li>shift: 移除並回傳陣列的第一個元素</li>\n<li>unshift: 從陣列開頭塞數字</li>\n<li>splice: 從頭數到第 X 個，移除 Y 個，加入 Z</li>\n<li>sort: 把亂掉的順序，按順序排列</li>\n<li>reverse: 順序顛倒</li>\n</ol>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"item in nums\"</span>&gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"add\"</span>&gt;</span>add<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      nums: [1, 2, 3, 4, 5],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\">      <span class=\"hljs-comment\">// sort 用</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">      <span class=\"hljs-comment\">// nums:[1,3,5,7,2,4,6,8],</span></span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      add() {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.push(this.nums.length+1);</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.pop();</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.shift();</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.unshift(0);</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.splice(idx, length);</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.splice(2, 1, 9,8,7,);</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">//</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.sort();</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.reverse();</span></span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/NWNMLgO?editors=1010\">code</a></p>\n<hr>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p><a href=\"https://cn.vuejs.org/v2/guide/filters.html\">文件</a><br><code>filter</code> 會把陣列內的所有元素拿去跑函式，同時又不會更動原本的陣列，而是產生新的陣列。<br>那函式跑完回傳的值是 true ，就會產生新的陣列，是 false 就不會有新元素出現在新陣列內。</p>\n<p>簡言之，就是把原本的陣列過濾並產生新的陣列。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"item in nums\"</span>&gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"add\"</span>&gt;</span>add<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class=\"line\">    },</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      add() {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-built_in\">this</span>.nums = <span class=\"hljs-built_in\">this</span>.nums.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">elm</span>) =&gt;</span> elm % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/BaKVyym?editors=1010\">code</a><br>過濾後會變成下圖<br><img src=\"https://i.imgur.com/t5ziwrX.png\"></p>\n<hr>\n<h3 id=\"修改陣列並反應在元素上\"><a href=\"#修改陣列並反應在元素上\" class=\"headerlink\" title=\"修改陣列並反應在元素上\"></a>修改陣列並反應在元素上</h3><p>想感變陣列內的值可以用 <code>splice</code></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"item in nums\"</span>&gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"add\"</span>&gt;</span>add<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class=\"line\">    },</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      add() {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 這樣是不會有任何反應的</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums[0] = 10;</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 從第2個，移除1個，加入789 或是 單值</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 從第0開始算，移除1開始算</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.splice(2, 1, 7,8,9);</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 從第 X 個之後都移除掉</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 移除1開始算</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.splice(2);</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 只保留從 X 到 Y，其他移除掉</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 從第0開始算，移除1開始算</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// slice(從, 第)</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums = this.nums.slice(1, 4);</span></span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/VwadYbP?editors=1010\">code</a></p>\n<hr>\n<h3 id=\"物件內新增值\"><a href=\"#物件內新增值\" class=\"headerlink\" title=\"物件內新增值\"></a>物件內新增值</h3><p>以上都是 v-for 轉陣列，現在是轉物件，並在物件內新增值</p>\n<p>新方法 <code>$set(設定屬性的物件, 設定物件的 key, key 的值)</code></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item, key) in nums\"</span>&gt;</span>{{key}}: {{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"add\"</span>&gt;</span>add<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      nums: {</span><br><span class=\"line\">        x: 10,</span><br><span class=\"line\">        y: 20,</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      add() {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 這樣是無法新增的</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// this.nums.z = 30;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-built_in\">this</span>.$set(<span class=\"hljs-built_in\">this</span>.nums, <span class=\"hljs-string\">'z'</span>, <span class=\"hljs-number\">30</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 除了 $set 還可以用 Vue，但是用 Vue 就沒有$</span></span></span><br><span class=\"line\"><span class=\"hljs-javascript\">        Vue.set(<span class=\"hljs-built_in\">this</span>.nums, <span class=\"hljs-string\">'z'</span>, <span class=\"hljs-number\">30</span>)</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/vYGrEaW?editors=1010\">code</a><br>這樣就可以新增了<br><img src=\"https://i.imgur.com/pjDK5Rr.png\"></p>\n<p>以上是示範物件內原本沒有的，但是要新增新的物件，才會用到 set<br>那如果原本就有的，但是要修改原本的物件要怎麼寫? 以下示範</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item, key) in nums\"</span>&gt;</span>{{key}}: {{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"add\"</span>&gt;</span>add<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      nums: {</span><br><span class=\"line\">        x: 10,</span><br><span class=\"line\">        y: 20,</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      add() {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-built_in\">this</span>.nums.x = <span class=\"hljs-number\">30</span></span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/bGpKNZz?editors=1010\">code</a></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"8-1用 v-for 把陣列轉換為一組元素","path":"tags/8-1用-v-for-把陣列轉換為一組元素/"},{"name":"8-2用 v-for 把一個物件轉換為一組元素","path":"tags/8-2用-v-for-把一個物件轉換為一組元素/"},{"name":"8-3修改陣列或物件的注意事項","path":"tags/8-3修改陣列或物件的注意事項/"}],"excerpt":"<html><head></head><body><h2 id=\"8-1-用-v-for-把陣列轉換為一組元素\"><a href=\"#8-1-用-v-for-把陣列轉換為一組元素\" class=\"headerlink\" title=\"8-1 用 v-for 把陣列轉換為一組元素\"></a>8-1 用 v-for 把陣列轉換為一組元素</h2><p>將 <code>data</code> 裡面的 <code>todo</code> 陣列顯示在 <code>li</code> 上，<code>v-for=\"todos in todo\"</code> 後面的<code>todos</code> 代表陣列，前面的<code>todo</code> 代表陣列裡面的每個元素</p></body></html>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;todos in todo&quot;</span>&gt;</span>&#123;&#123;todos&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    todo: [<span class=\"string\">&#x27;html&#x27;</span>, <span class=\"string\">&#x27;javascript&#x27;</span>, <span class=\"string\">&#x27;css&#x27;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/br0hybR.png\"></p>\n<hr>\n<h3 id=\"下拉選單\"><a href=\"#下拉選單\" class=\"headerlink\" title=\"下拉選單\"></a>下拉選單</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;month in months&quot;</span>&gt;</span>&#123;&#123;month&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    months: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/yLemJQy?editors=1010\">codepen</a></p>\n<p>這種數字的有另一個寫法，可以將 <code>months</code> 改寫成數字，而改寫的數字就會是最大值，而 <code>months</code> 的陣列可以刪除。<br>範例如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;month in 30&quot;</span>&gt;</span>&#123;&#123;month&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這樣就會有 30 個數字選項</p>\n<h3 id=\"月份綁-value\"><a href=\"#月份綁-value\" class=\"headerlink\" title=\"月份綁 value\"></a>月份綁 value</h3><p>這是在陣列是字串下，但又希望 value 值是數字 123，這時可以在 <code>month</code> 後面加上 <code>index</code> 或是 <code>idx</code> 、 <code>i </code>等等任意變數，再用 <code>v-bind</code> 綁 <code>value</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(month, index) in months&quot;</span> <span class=\"attr\">:vlaue</span>=<span class=\"string\">&quot;index+1&quot;</span>&gt;</span>&#123;&#123;month&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    months: [</span><br><span class=\"line\">      <span class=\"string\">&#x27;Jan&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Feb&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Mar&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Apr&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;May&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Jun&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Jul&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Aug&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Sep&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Oct&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Nov&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;Dec&#x27;</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/8HMNTpb.png\"><br><a href=\"https://codepen.io/gleofgja/pen/MWKNjgK?editors=1010\">codepen</a></p>\n<hr>\n<h2 id=\"8-2-用-v-for-把一個物件轉換為一組元素\"><a href=\"#8-2-用-v-for-把一個物件轉換為一組元素\" class=\"headerlink\" title=\"8-2 用 v-for 把一個物件轉換為一組元素\"></a>8-2 用 v-for 把一個物件轉換為一組元素</h2><p>如果要取物件內的 key 值，就在 value 後面加上 key 就好<br>跟陣列很像，<strong>陣列</strong>是 (元素, idx) ，<strong>物件</strong>是 (value, key)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(value, key) in obj&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      obj: &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 前面為 key: 後面為 value</span></span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">&#x27;PKT&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        number: <span class=\"string\">&#x27;123456&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        age: <span class=\"string\">&#x27;22&#x27;</span>,</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/2WF7ILF.png\"></p>\n<hr>\n<p>v-for 轉物件，渲染出來的順序不一定會跟我寫的一樣，例如我用不規律的數字做開頭</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(value, key) in obj&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      obj: &#123;</span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">&#x27;PKT&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        number: <span class=\"string\">&#x27;123456&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        age: <span class=\"string\">&#x27;22&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"number\">12</span>: <span class=\"string\">&#x27;中餐&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"number\">8</span>: <span class=\"string\">&#x27;早餐&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"number\">6</span>: <span class=\"string\">&#x27;晚餐&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"number\">2</span>: <span class=\"string\">&#x27;宵夜&#x27;</span>,</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染出來的結果會長這樣<br><img src=\"https://i.imgur.com/hKlcyV5.png\"><br>明明我的順序是 12 =&gt; 8 =&gt; 6 =&gt; 2，但是選染出來卻是按照順序排列，這是因為我們用 <strong>v-for 來轉物件</strong>，若真要按照順序排列的話 code 也不會這樣打，但這是特定情況，必須依照我寫 code 的順序排列，所以就要用 <strong>v-for 轉陣列</strong>的方式，來修正。</p>\n<p>先把物件轉陣列型式，並且在陣列內新增 prop &amp; value 屬性<br>再把 v-for 轉成陣列，下面的 obj 是陣列</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in obj&quot;</span>&gt;</span>&#123;&#123;item.prop&#125;&#125; : &#123;&#123;item.value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      obj: [</span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">prop</span>: <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;PKT&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">prop</span>: <span class=\"string\">&#x27;number&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;123456&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">prop</span>: <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;22&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">prop</span>: <span class=\"number\">12</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;中餐&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">prop</span>: <span class=\"number\">8</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;早餐&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">prop</span>: <span class=\"number\">6</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;晚餐&#x27;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">prop</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;宵夜&#x27;</span> &#125;,</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEWoRoy?editors=1010\">code</a><br>這樣就可以依照我指定的順序來顯示了<br><img src=\"https://i.imgur.com/8O4Uqwo.png\"></p>\n<hr>\n<h2 id=\"修改陣列或物件的注意事項\"><a href=\"#修改陣列或物件的注意事項\" class=\"headerlink\" title=\"修改陣列或物件的注意事項\"></a>修改陣列或物件的注意事項</h2><p>常用語法：</p>\n<ol>\n<li>push: 新增數字</li>\n<li>pop: 減少數字</li>\n<li>shift: 移除並回傳陣列的第一個元素</li>\n<li>unshift: 從陣列開頭塞數字</li>\n<li>splice: 從頭數到第 X 個，移除 Y 個，加入 Z</li>\n<li>sort: 把亂掉的順序，按順序排列</li>\n<li>reverse: 順序顛倒</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in nums&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      nums: [1, 2, 3, 4, 5],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// sort 用</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// nums:[1,3,5,7,2,4,6,8],</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      add() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.push(this.nums.length+1);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.pop();</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.shift();</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.unshift(0);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.splice(idx, length);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.splice(2, 1, 9,8,7,);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.sort();</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.reverse();</span></span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/NWNMLgO?editors=1010\">code</a></p>\n<hr>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p><a href=\"https://cn.vuejs.org/v2/guide/filters.html\">文件</a><br><code>filter</code> 會把陣列內的所有元素拿去跑函式，同時又不會更動原本的陣列，而是產生新的陣列。<br>那函式跑完回傳的值是 true ，就會產生新的陣列，是 false 就不會有新元素出現在新陣列內。</p>\n<p>簡言之，就是把原本的陣列過濾並產生新的陣列。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in nums&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      add() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.nums = <span class=\"built_in\">this</span>.nums.filter(<span class=\"function\">(<span class=\"params\">elm</span>) =&gt;</span> elm % <span class=\"number\">2</span> === <span class=\"number\">0</span>)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/BaKVyym?editors=1010\">code</a><br>過濾後會變成下圖<br><img src=\"https://i.imgur.com/t5ziwrX.png\"></p>\n<hr>\n<h3 id=\"修改陣列並反應在元素上\"><a href=\"#修改陣列並反應在元素上\" class=\"headerlink\" title=\"修改陣列並反應在元素上\"></a>修改陣列並反應在元素上</h3><p>想感變陣列內的值可以用 <code>splice</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in nums&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      nums: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      add() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 這樣是不會有任何反應的</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums[0] = 10;</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 從第2個，移除1個，加入789 或是 單值</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 從第0開始算，移除1開始算</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.splice(2, 1, 7,8,9);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 從第 X 個之後都移除掉</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 移除1開始算</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.splice(2);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 只保留從 X 到 Y，其他移除掉</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 從第0開始算，移除1開始算</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// slice(從, 第)</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums = this.nums.slice(1, 4);</span></span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/VwadYbP?editors=1010\">code</a></p>\n<hr>\n<h3 id=\"物件內新增值\"><a href=\"#物件內新增值\" class=\"headerlink\" title=\"物件內新增值\"></a>物件內新增值</h3><p>以上都是 v-for 轉陣列，現在是轉物件，並在物件內新增值</p>\n<p>新方法 <code>$set(設定屬性的物件, 設定物件的 key, key 的值)</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in nums&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;: &#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      nums: &#123;</span><br><span class=\"line\">        x: 10,</span><br><span class=\"line\">        y: 20,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      add() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 這樣是無法新增的</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.nums.z = 30;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.$set(<span class=\"built_in\">this</span>.nums, <span class=\"string\">&#x27;z&#x27;</span>, <span class=\"number\">30</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 除了 $set 還可以用 Vue，但是用 Vue 就沒有$</span></span></span><br><span class=\"line\"><span class=\"javascript\">        Vue.set(<span class=\"built_in\">this</span>.nums, <span class=\"string\">&#x27;z&#x27;</span>, <span class=\"number\">30</span>)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/vYGrEaW?editors=1010\">code</a><br>這樣就可以新增了<br><img src=\"https://i.imgur.com/pjDK5Rr.png\"></p>\n<p>以上是示範物件內原本沒有的，但是要新增新的物件，才會用到 set<br>那如果原本就有的，但是要修改原本的物件要怎麼寫? 以下示範</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in nums&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;: &#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      nums: &#123;</span><br><span class=\"line\">        x: 10,</span><br><span class=\"line\">        y: 20,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      add() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.nums.x = <span class=\"number\">30</span></span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/bGpKNZz?editors=1010\">code</a></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2>"},{"title":"Vue - 輸入框雙向綁定","date":"2021-03-03T16:00:00.000Z","description":"用 Vue 做出表單","_content":"\n## 文字輸入\n\nv-model 可以做雙向綁定，但它同時也等於 v-bind 的 value 跟偵聽 input 的事件。\n\n```html\n<div id=\"app\">\n  <!--   <input type=\"text\" v-model=\"message\"> -->\n  <input type=\"text\" :value=\"message\" @input=\"setMessage\" />\n  <h1>{{message}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      message: '',\n    },\n    methods: {\n      setMessage(e) {\n        this.message = e.target.value\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/qBZdgBR?editors=1010)\nsetMessage 函式會接收一個參數(evt 事件)，並用事件發出的 target 找到 input 元素，那 e.target.vlaue 就是使用者輸入的值。\n\n---\n\n## 多行輸入: textarea\n\n用 v-model 一樣可以雙向綁定，但是他不會換行，範例如下\n\n```html\n<div id=\"app\">\n  <textarea v-model=\"message\"></textarea>\n  <h1>{{message}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      message: '',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/eYZNxzp?editors=1010)\n![](https://i.imgur.com/1Ycm7Yr.png)\n\n這時候就要用 pre 標籤，它可以保存 message 裡面的換行字元，範例如下\n\n```html\n<div id=\"app\">\n  <textarea v-model=\"message\"></textarea>\n  <!--   <h1>{{message}}</h1> -->\n  <pre>{{message}}</pre>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      message: '',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/VwaLgXx?editors=1010)\n![](https://i.imgur.com/mwsn0S8.png)\n\n或是不想用 pre 標籤鄉用 h1 的話可以在 css 裡面加上 white-space: pre; 也會有同樣的效果。\n\n也可以套用一開始單行 v-model 一開始單行 v-model 轉換成 v-bind 跟 v-on 一樣可以運行\n\n```html\n<div id=\"app\">\n  <textarea @input=\"setMessage\">{{message}}</textarea>\n  <pre>{{message}}</pre>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      message: '',\n    },\n    methods: {\n      setMessage(e) {\n        this.message = e.target.value\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/XWdbOPR?editors=1010)\n![](https://i.imgur.com/nmyApR9.png)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","source":"_posts/2021/表單綁定.md","raw":"---\ntitle: Vue - 輸入框雙向綁定\ndate: 2021/03/04\ntags:\n  - component\n  - v-model\n  - v-bind\ncategories: Vue\ndescription: 用 Vue 做出表單\n---\n\n## 文字輸入\n\nv-model 可以做雙向綁定，但它同時也等於 v-bind 的 value 跟偵聽 input 的事件。\n\n```html\n<div id=\"app\">\n  <!--   <input type=\"text\" v-model=\"message\"> -->\n  <input type=\"text\" :value=\"message\" @input=\"setMessage\" />\n  <h1>{{message}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      message: '',\n    },\n    methods: {\n      setMessage(e) {\n        this.message = e.target.value\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/qBZdgBR?editors=1010)\nsetMessage 函式會接收一個參數(evt 事件)，並用事件發出的 target 找到 input 元素，那 e.target.vlaue 就是使用者輸入的值。\n\n---\n\n## 多行輸入: textarea\n\n用 v-model 一樣可以雙向綁定，但是他不會換行，範例如下\n\n```html\n<div id=\"app\">\n  <textarea v-model=\"message\"></textarea>\n  <h1>{{message}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      message: '',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/eYZNxzp?editors=1010)\n![](https://i.imgur.com/1Ycm7Yr.png)\n\n這時候就要用 pre 標籤，它可以保存 message 裡面的換行字元，範例如下\n\n```html\n<div id=\"app\">\n  <textarea v-model=\"message\"></textarea>\n  <!--   <h1>{{message}}</h1> -->\n  <pre>{{message}}</pre>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      message: '',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/VwaLgXx?editors=1010)\n![](https://i.imgur.com/mwsn0S8.png)\n\n或是不想用 pre 標籤鄉用 h1 的話可以在 css 裡面加上 white-space: pre; 也會有同樣的效果。\n\n也可以套用一開始單行 v-model 一開始單行 v-model 轉換成 v-bind 跟 v-on 一樣可以運行\n\n```html\n<div id=\"app\">\n  <textarea @input=\"setMessage\">{{message}}</textarea>\n  <pre>{{message}}</pre>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      message: '',\n    },\n    methods: {\n      setMessage(e) {\n        this.message = e.target.value\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/XWdbOPR?editors=1010)\n![](https://i.imgur.com/nmyApR9.png)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","slug":"表單綁定","published":1,"updated":"2021-03-20T07:48:37.215Z","_id":"ckmheuza9000utctrabzn6rce","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h2 id=\"文字輸入\"><a href=\"#文字輸入\" class=\"headerlink\" title=\"文字輸入\"></a>文字輸入</h2><p>v-model 可以做雙向綁定，但它同時也等於 v-bind 的 value 跟偵聽 input 的事件。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   &lt;input type=\"text\" v-model=\"message\"&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">\"message\"</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">\"setMessage\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      message: <span class=\"hljs-string\">''</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      setMessage(e) {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-built_in\">this</span>.message = e.target.value</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/qBZdgBR?editors=1010\">codepen</a><br>setMessage 函式會接收一個參數(evt 事件)，並用事件發出的 target 找到 input 元素，那 e.target.vlaue 就是使用者輸入的值。</p>\n<hr>\n<h2 id=\"多行輸入-textarea\"><a href=\"#多行輸入-textarea\" class=\"headerlink\" title=\"多行輸入: textarea\"></a>多行輸入: textarea</h2><p>用 v-model 一樣可以雙向綁定，但是他不會換行，範例如下</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      message: <span class=\"hljs-string\">''</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/eYZNxzp?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/1Ycm7Yr.png\"></p>\n<p>這時候就要用 pre 標籤，它可以保存 message 裡面的換行字元，範例如下</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   &lt;h1&gt;{{message}}&lt;/h1&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      message: <span class=\"hljs-string\">''</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/VwaLgXx?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/mwsn0S8.png\"></p>\n<p>或是不想用 pre 標籤鄉用 h1 的話可以在 css 裡面加上 white-space: pre; 也會有同樣的效果。</p>\n<p>也可以套用一開始單行 v-model 一開始單行 v-model 轉換成 v-bind 跟 v-on 一樣可以運行</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">\"setMessage\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      message: <span class=\"hljs-string\">''</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      setMessage(e) {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-built_in\">this</span>.message = e.target.value</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/XWdbOPR?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/nmyApR9.png\"></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"v-model","path":"tags/v-model/"},{"name":"v-bind","path":"tags/v-bind/"},{"name":"component","path":"tags/component/"}],"excerpt":"","more":"<h2 id=\"文字輸入\"><a href=\"#文字輸入\" class=\"headerlink\" title=\"文字輸入\"></a>文字輸入</h2><p>v-model 可以做雙向綁定，但它同時也等於 v-bind 的 value 跟偵聽 input 的事件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;message&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;setMessage&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      message: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      setMessage(e) &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.message = e.target.value</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/qBZdgBR?editors=1010\">codepen</a><br>setMessage 函式會接收一個參數(evt 事件)，並用事件發出的 target 找到 input 元素，那 e.target.vlaue 就是使用者輸入的值。</p>\n<hr>\n<h2 id=\"多行輸入-textarea\"><a href=\"#多行輸入-textarea\" class=\"headerlink\" title=\"多行輸入: textarea\"></a>多行輸入: textarea</h2><p>用 v-model 一樣可以雙向綁定，但是他不會換行，範例如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      message: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/eYZNxzp?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/1Ycm7Yr.png\"></p>\n<p>這時候就要用 pre 標籤，它可以保存 message 裡面的換行字元，範例如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      message: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/VwaLgXx?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/mwsn0S8.png\"></p>\n<p>或是不想用 pre 標籤鄉用 h1 的話可以在 css 裡面加上 white-space: pre; 也會有同樣的效果。</p>\n<p>也可以套用一開始單行 v-model 一開始單行 v-model 轉換成 v-bind 跟 v-on 一樣可以運行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">textarea</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;setMessage&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      message: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      setMessage(e) &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.message = e.target.value</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/XWdbOPR?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/nmyApR9.png\"></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2>"},{"title":"Vue - 表單綁定—按鈕","date":"2021-03-02T16:00:00.000Z","description":"用 Vue 做出按鈕","_content":"\n## checkbox\n\n### 單選互動按鈕:\n\n將 true & false 綁定到一個值上面，並做出沒勾選的話就會跳出 alert\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" id=\"chk\" v-model=\"agree\" />\n  <label for=\"chk\">agree</label>\n  <h1>{{agree}}</h1>\n  <button @click=\"submit\">submit</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      agree: false,\n    },\n    methods: {\n      submit() {\n        if (this.agree !== true) {\n          alert('agreeeeeeee')\n          return\n        }\n        // 表單送出後要做的事情...\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/gOrapGB?editors=1010)\n\n### 多選互動按鈕:\n\n這可以應用在客戶在什麼時段方便取貨或是什麼時方便聯絡等地方。\n\n給定三個時段，也給三個時段的 value ，同時在點選時段的時候我希望能以陣列的方式呈現\n\n```html\n<div id=\"app\">\n  <h1>可以聯絡的時段:</h1>\n  <input type=\"checkbox\" id=\"chk1\" value=\"8:00~12:00\" v-model=\"times\" />\n  <label for=\"chk1\">morning</label>\n\n  <input type=\"checkbox\" id=\"chk2\" value=\"13:00~ 18:00\" v-model=\"times\" />\n  <label for=\"chk2\">afternoon</label>\n\n  <input type=\"checkbox\" id=\"chk3\" value=\"19:00~21:00\" v-model=\"times\" />\n  <label for=\"chk3\">evening</label>\n  <h2>{{times}}</h2>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      times: [],\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/QWNjbmL?editors=1010)\n透過勾選的順序決定誰要先呈現第一個，例如我先勾選 evening 再勾 afternoon 就會呈現下圖順序\n![](https://i.imgur.com/hS7mIh0.png)\n\n---\n\n## radio\n\n這是應用在表單填寫性別或是單個選項等地方。\n給 2 個選項，在點擊 label 時會呈現 value ，要額外呈現 value 就要用 ， v-model 做雙向綁定，那 v-model 要空值或是預設值都可以。\n\n```html\n<div id=\"app\">\n  <input type=\"radio\" id=\"chk1\" value=\"male\" v-model=\"gender\" />\n  <label for=\"chk1\">male</label>\n\n  <input type=\"radio\" id=\"chk2\" value=\"female\" v-model=\"gender\" />\n  <label for=\"chk2\">female</label>\n\n  <h1>{{gender}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      gender: 'male',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/MWyawRj?editors=1010)\n![](https://i.imgur.com/oRDSx3s.png)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","source":"_posts/2021/表單綁定—按鈕.md","raw":"---\ntitle: Vue - 表單綁定—按鈕\ndate: 2021/03/03\ntags: v-model\ncategories: Vue\ndescription: 用 Vue 做出按鈕\n---\n\n## checkbox\n\n### 單選互動按鈕:\n\n將 true & false 綁定到一個值上面，並做出沒勾選的話就會跳出 alert\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" id=\"chk\" v-model=\"agree\" />\n  <label for=\"chk\">agree</label>\n  <h1>{{agree}}</h1>\n  <button @click=\"submit\">submit</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      agree: false,\n    },\n    methods: {\n      submit() {\n        if (this.agree !== true) {\n          alert('agreeeeeeee')\n          return\n        }\n        // 表單送出後要做的事情...\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/gOrapGB?editors=1010)\n\n### 多選互動按鈕:\n\n這可以應用在客戶在什麼時段方便取貨或是什麼時方便聯絡等地方。\n\n給定三個時段，也給三個時段的 value ，同時在點選時段的時候我希望能以陣列的方式呈現\n\n```html\n<div id=\"app\">\n  <h1>可以聯絡的時段:</h1>\n  <input type=\"checkbox\" id=\"chk1\" value=\"8:00~12:00\" v-model=\"times\" />\n  <label for=\"chk1\">morning</label>\n\n  <input type=\"checkbox\" id=\"chk2\" value=\"13:00~ 18:00\" v-model=\"times\" />\n  <label for=\"chk2\">afternoon</label>\n\n  <input type=\"checkbox\" id=\"chk3\" value=\"19:00~21:00\" v-model=\"times\" />\n  <label for=\"chk3\">evening</label>\n  <h2>{{times}}</h2>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      times: [],\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/QWNjbmL?editors=1010)\n透過勾選的順序決定誰要先呈現第一個，例如我先勾選 evening 再勾 afternoon 就會呈現下圖順序\n![](https://i.imgur.com/hS7mIh0.png)\n\n---\n\n## radio\n\n這是應用在表單填寫性別或是單個選項等地方。\n給 2 個選項，在點擊 label 時會呈現 value ，要額外呈現 value 就要用 ， v-model 做雙向綁定，那 v-model 要空值或是預設值都可以。\n\n```html\n<div id=\"app\">\n  <input type=\"radio\" id=\"chk1\" value=\"male\" v-model=\"gender\" />\n  <label for=\"chk1\">male</label>\n\n  <input type=\"radio\" id=\"chk2\" value=\"female\" v-model=\"gender\" />\n  <label for=\"chk2\">female</label>\n\n  <h1>{{gender}}</h1>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      gender: 'male',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/MWyawRj?editors=1010)\n![](https://i.imgur.com/oRDSx3s.png)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","slug":"表單綁定—按鈕","published":1,"updated":"2021-03-20T07:48:29.775Z","_id":"ckmheuzaa000vtctr9yd9h044","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h2 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h2><h3 id=\"單選互動按鈕\"><a href=\"#單選互動按鈕\" class=\"headerlink\" title=\"單選互動按鈕:\"></a>單選互動按鈕:</h3><p>將 true &amp; false 綁定到一個值上面，並做出沒勾選的話就會跳出 alert</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chk\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"agree\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"chk\"</span>&gt;</span>agree<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{agree}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      agree: <span class=\"hljs-literal\">false</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      submit() {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.agree !== <span class=\"hljs-literal\">true</span>) {</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">          alert(<span class=\"hljs-string\">'agreeeeeeee'</span>)</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">          <span class=\"hljs-keyword\">return</span></span></span><br><span class=\"line\">        }</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-comment\">// 表單送出後要做的事情...</span></span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/gOrapGB?editors=1010\">codepen</a></p>\n<h3 id=\"多選互動按鈕\"><a href=\"#多選互動按鈕\" class=\"headerlink\" title=\"多選互動按鈕:\"></a>多選互動按鈕:</h3><p>這可以應用在客戶在什麼時段方便取貨或是什麼時方便聯絡等地方。</p>\n<p>給定三個時段，也給三個時段的 value ，同時在點選時段的時候我希望能以陣列的方式呈現</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>可以聯絡的時段:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chk1\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"8:00~12:00\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"times\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"chk1\"</span>&gt;</span>morning<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chk2\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"13:00~ 18:00\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"times\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"chk2\"</span>&gt;</span>afternoon<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chk3\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"19:00~21:00\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"times\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"chk3\"</span>&gt;</span>evening<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{times}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      times: [],</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/QWNjbmL?editors=1010\">codepen</a><br>透過勾選的順序決定誰要先呈現第一個，例如我先勾選 evening 再勾 afternoon 就會呈現下圖順序<br><img src=\"https://i.imgur.com/hS7mIh0.png\"></p>\n<hr>\n<h2 id=\"radio\"><a href=\"#radio\" class=\"headerlink\" title=\"radio\"></a>radio</h2><p>這是應用在表單填寫性別或是單個選項等地方。<br>給 2 個選項，在點擊 label 時會呈現 value ，要額外呈現 value 就要用 ， v-model 做雙向綁定，那 v-model 要空值或是預設值都可以。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chk1\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"male\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"gender\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"chk1\"</span>&gt;</span>male<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chk2\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"female\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"gender\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"chk2\"</span>&gt;</span>female<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{gender}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      gender: <span class=\"hljs-string\">'male'</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/MWyawRj?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/oRDSx3s.png\"></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"v-model","path":"tags/v-model/"}],"excerpt":"","more":"<h2 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h2><h3 id=\"單選互動按鈕\"><a href=\"#單選互動按鈕\" class=\"headerlink\" title=\"單選互動按鈕:\"></a>單選互動按鈕:</h3><p>將 true &amp; false 綁定到一個值上面，並做出沒勾選的話就會跳出 alert</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chk&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;agree&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;chk&quot;</span>&gt;</span>agree<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;agree&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      agree: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      submit() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.agree !== <span class=\"literal\">true</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          alert(<span class=\"string\">&#x27;agreeeeeeee&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 表單送出後要做的事情...</span></span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/gOrapGB?editors=1010\">codepen</a></p>\n<h3 id=\"多選互動按鈕\"><a href=\"#多選互動按鈕\" class=\"headerlink\" title=\"多選互動按鈕:\"></a>多選互動按鈕:</h3><p>這可以應用在客戶在什麼時段方便取貨或是什麼時方便聯絡等地方。</p>\n<p>給定三個時段，也給三個時段的 value ，同時在點選時段的時候我希望能以陣列的方式呈現</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>可以聯絡的時段:<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chk1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;8:00~12:00&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;times&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;chk1&quot;</span>&gt;</span>morning<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chk2&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;13:00~ 18:00&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;times&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;chk2&quot;</span>&gt;</span>afternoon<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chk3&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;19:00~21:00&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;times&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;chk3&quot;</span>&gt;</span>evening<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;times&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      times: [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/QWNjbmL?editors=1010\">codepen</a><br>透過勾選的順序決定誰要先呈現第一個，例如我先勾選 evening 再勾 afternoon 就會呈現下圖順序<br><img src=\"https://i.imgur.com/hS7mIh0.png\"></p>\n<hr>\n<h2 id=\"radio\"><a href=\"#radio\" class=\"headerlink\" title=\"radio\"></a>radio</h2><p>這是應用在表單填寫性別或是單個選項等地方。<br>給 2 個選項，在點擊 label 時會呈現 value ，要額外呈現 value 就要用 ， v-model 做雙向綁定，那 v-model 要空值或是預設值都可以。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chk1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;male&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;gender&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;chk1&quot;</span>&gt;</span>male<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chk2&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;female&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;gender&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;chk2&quot;</span>&gt;</span>female<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;gender&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      gender: <span class=\"string\">&#x27;male&#x27;</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/MWyawRj?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/oRDSx3s.png\"></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2>"},{"title":"Vue - 計算屬性 ( computed )","date":"2020-09-24T16:00:00.000Z","description":"用簡單的加減運算介紹計算屬性","_content":"\n計算用法:\n\n```html\n<div id=\"app\">\n  <input type=\"number\" v-model=\"a\" />\n  +\n  <input type=\"number\" v-model=\"b\" />\n  =\n  <input type=\"text\" v-model=\"ans\" />\n  <br />\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      a: 0,\n      b: 0,\n      c: 0,\n    },\n    computed: {\n      ans() {\n        return parseInt(this.a) + parseInt(this.b)\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/ZEWXeer?editors=1010)\ncomputed 裡面的屬性不能跟 data、methods 撞名，同樣的在 ans 不能是箭頭函式，因為用箭頭函式，那 ans 裡面的 this 就會是 window 物件\n\n---\n\n除了簡單的計算外還有進階的用法，就是 computed 裡面除了宣告成函式外還可以宣告成物件\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    a: 0,\n    b: 0,\n    c: 0,\n  },\n  computed: {\n    ans: {\n      get() {\n        return parseInt(this.a) + parseInt(this.b)\n      },\n      set(val) {\n        this.b = parseInt(val) - parseInt(this.a)\n      },\n    },\n  },\n})\n```\n\n[codepen](https://codepen.io/gleofgja/pen/OJNxmGo?editors=1010)\nget 是指，當我需要 ans 值的時候，就會用 get 呼叫函式，取出 return 的值\n\nset 是指，當我設定某個值到 ans 的時候，要用 set 的函式，那 set 函式它吃一個值( value )，範例是當我設定 ans 的時候就要算出 a or b 的值\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","source":"_posts/2021/計算屬性(computed).md","raw":"---\ntitle: Vue - 計算屬性 ( computed )\ndate: 2020/09/25\ntags: computed\ncategories: Vue\ndescription: 用簡單的加減運算介紹計算屬性\n---\n\n計算用法:\n\n```html\n<div id=\"app\">\n  <input type=\"number\" v-model=\"a\" />\n  +\n  <input type=\"number\" v-model=\"b\" />\n  =\n  <input type=\"text\" v-model=\"ans\" />\n  <br />\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      a: 0,\n      b: 0,\n      c: 0,\n    },\n    computed: {\n      ans() {\n        return parseInt(this.a) + parseInt(this.b)\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/ZEWXeer?editors=1010)\ncomputed 裡面的屬性不能跟 data、methods 撞名，同樣的在 ans 不能是箭頭函式，因為用箭頭函式，那 ans 裡面的 this 就會是 window 物件\n\n---\n\n除了簡單的計算外還有進階的用法，就是 computed 裡面除了宣告成函式外還可以宣告成物件\n\n```javascript\nnew Vue({\n  el: '#app',\n  data: {\n    a: 0,\n    b: 0,\n    c: 0,\n  },\n  computed: {\n    ans: {\n      get() {\n        return parseInt(this.a) + parseInt(this.b)\n      },\n      set(val) {\n        this.b = parseInt(val) - parseInt(this.a)\n      },\n    },\n  },\n})\n```\n\n[codepen](https://codepen.io/gleofgja/pen/OJNxmGo?editors=1010)\nget 是指，當我需要 ans 值的時候，就會用 get 呼叫函式，取出 return 的值\n\nset 是指，當我設定某個值到 ans 的時候，要用 set 的函式，那 set 函式它吃一個值( value )，範例是當我設定 ans 的時候就要算出 a or b 的值\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","slug":"計算屬性(computed)","published":1,"updated":"2021-03-20T07:38:55.111Z","_id":"ckmheuzab000wtctrfnzf3w9b","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>計算用法:</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"a\"</span> /&gt;</span></span><br><span class=\"line\">  +</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"b\"</span> /&gt;</span></span><br><span class=\"line\">  =</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"ans\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\">      a: 0,</span><br><span class=\"line\">      b: 0,</span><br><span class=\"line\">      c: 0,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    computed: {</span><br><span class=\"line\">      ans() {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-built_in\">this</span>.a) + <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-built_in\">this</span>.b)</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEWXeer?editors=1010\">codepen</a><br>computed 裡面的屬性不能跟 data、methods 撞名，同樣的在 ans 不能是箭頭函式，因為用箭頭函式，那 ans 裡面的 this 就會是 window 物件</p>\n<hr>\n<p>除了簡單的計算外還有進階的用法，就是 computed 裡面除了宣告成函式外還可以宣告成物件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    a: <span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">    b: <span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">    c: <span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    ans: {</span><br><span class=\"line\">      get() {</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-built_in\">this</span>.a) + <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-built_in\">this</span>.b)</span><br><span class=\"line\">      },</span><br><span class=\"line\">      set(val) {</span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.b = <span class=\"hljs-built_in\">parseInt</span>(val) - <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-built_in\">this</span>.a)</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/OJNxmGo?editors=1010\">codepen</a><br>get 是指，當我需要 ans 值的時候，就會用 get 呼叫函式，取出 return 的值</p>\n<p>set 是指，當我設定某個值到 ans 的時候，要用 set 的函式，那 set 函式它吃一個值( value )，範例是當我設定 ans 的時候就要算出 a or b 的值</p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"computed","path":"tags/computed/"}],"excerpt":"","more":"<p>計算用法:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;a&quot;</span> /&gt;</span></span><br><span class=\"line\">  +</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;b&quot;</span> /&gt;</span></span><br><span class=\"line\">  =</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;ans&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      a: 0,</span><br><span class=\"line\">      b: 0,</span><br><span class=\"line\">      c: 0,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      ans() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.a) + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.b)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEWXeer?editors=1010\">codepen</a><br>computed 裡面的屬性不能跟 data、methods 撞名，同樣的在 ans 不能是箭頭函式，因為用箭頭函式，那 ans 裡面的 this 就會是 window 物件</p>\n<hr>\n<p>除了簡單的計算外還有進階的用法，就是 computed 裡面除了宣告成函式外還可以宣告成物件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: <span class=\"number\">0</span>,</span><br><span class=\"line\">    b: <span class=\"number\">0</span>,</span><br><span class=\"line\">    c: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    ans: &#123;</span><br><span class=\"line\">      get() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.a) + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.b)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      set(val) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.b = <span class=\"built_in\">parseInt</span>(val) - <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">this</span>.a)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/OJNxmGo?editors=1010\">codepen</a><br>get 是指，當我需要 ans 值的時候，就會用 get 呼叫函式，取出 return 的值</p>\n<p>set 是指，當我設定某個值到 ans 的時候，要用 set 的函式，那 set 函式它吃一個值( value )，範例是當我設定 ans 的時候就要算出 a or b 的值</p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2>"},{"title":"jQuery - 基本使用","date":"2021-01-12T16:00:00.000Z","description":"了解 eventListener 與 callback function","_content":"\n## 事件\n\n**分以下四種事件:**\n\n1. 單擊 (click)\n2. 雙擊 (dblclick)\n3. 滑鼠移入 (mouseenter)\n4. 滑鼠移出 (mouseleave)\n<!--more-->\n\n### 1. 單擊 (click) & 雙擊 (dblclick)\n\n為了方便區分，將 `id` 設定成 `click` & `dbiclick`。\n\n接下來就是 jquery 三步驟:\n\n1. 選擇要改變的元素 `id`\n2. 更改的樣式 `.css('color', 'red')`\n3. 動作: 單擊 or 雙擊\n\n```html\n<h1 id=\"click\">click</h1>\n<h1 id=\"dblclick\">dbiclick</h1>\n```\n\n```javascript\n$('#click').click(function () {\n  $(this).css('color', 'red')\n})\n\n$('#dblclick').dblclick(function () {\n  $(this).css('color', 'blue')\n})\n```\n\n原圖:\n![](https://i.imgur.com/CYKyNfz.png)\n\n當我單擊的時候會顯示下圖:\n![](https://i.imgur.com/pALzfBQ.png)\n\n雙擊如下圖:\n![](https://i.imgur.com/o4MRJ2x.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/MWjzpPb?editors=1011)\n\n如何知道 API 可以參考 [W3Schools](https://www.w3schools.com/jquery/jquery_events.asp)\n\n### 2. 滑鼠事件，移入(mouseenter)與移出(mouseout)\n\n給兩個方塊測試，當滑鼠移入或移出方塊的時候就會顯示移入或移出的 log。\n\n其中 mouseenter 事件跟 hover 一樣，在移入時都會有相同動作。\n\n```html\n<div id=\"red\"></div>\n<div id=\"blue\"></div>\n```\n\n```css=\n#red{\n  width: 100px;\n  height: 100px;\n  background: red;\n}\n\n#blue{\n  width: 100px;\n  height: 100px;\n  background: blue;\n}\n```\n\n```javascript\n$('#red').mouseenter(function () {\n  console.log('滑鼠移入紅色')\n})\n\n$('#blue').mouseleave(function () {\n  console.log('滑鼠移出藍色')\n})\n```\n\n當滑鼠移入的時候\n![](https://i.imgur.com/d5BLbbQ.png)\n\n當滑鼠移出的時候\n![](https://i.imgur.com/oiRfeKq.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/QWKJvdd?editors=0011)\n\n### 3.\n\n---\n\n[W3Schools](https://www.w3schools.com/jquery/jquery_events.asp)\n","source":"_posts/2021/jQuery - 事件 (event).md","raw":"---\ntitle: jQuery - 基本使用\ndate: 2021/01/13\ntags:\n  - eventListener\n  - callback function\n  - event\n  - onSubmit\ncategories: JavaScript\ndescription: 了解 eventListener 與 callback function\n---\n\n## 事件\n\n**分以下四種事件:**\n\n1. 單擊 (click)\n2. 雙擊 (dblclick)\n3. 滑鼠移入 (mouseenter)\n4. 滑鼠移出 (mouseleave)\n<!--more-->\n\n### 1. 單擊 (click) & 雙擊 (dblclick)\n\n為了方便區分，將 `id` 設定成 `click` & `dbiclick`。\n\n接下來就是 jquery 三步驟:\n\n1. 選擇要改變的元素 `id`\n2. 更改的樣式 `.css('color', 'red')`\n3. 動作: 單擊 or 雙擊\n\n```html\n<h1 id=\"click\">click</h1>\n<h1 id=\"dblclick\">dbiclick</h1>\n```\n\n```javascript\n$('#click').click(function () {\n  $(this).css('color', 'red')\n})\n\n$('#dblclick').dblclick(function () {\n  $(this).css('color', 'blue')\n})\n```\n\n原圖:\n![](https://i.imgur.com/CYKyNfz.png)\n\n當我單擊的時候會顯示下圖:\n![](https://i.imgur.com/pALzfBQ.png)\n\n雙擊如下圖:\n![](https://i.imgur.com/o4MRJ2x.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/MWjzpPb?editors=1011)\n\n如何知道 API 可以參考 [W3Schools](https://www.w3schools.com/jquery/jquery_events.asp)\n\n### 2. 滑鼠事件，移入(mouseenter)與移出(mouseout)\n\n給兩個方塊測試，當滑鼠移入或移出方塊的時候就會顯示移入或移出的 log。\n\n其中 mouseenter 事件跟 hover 一樣，在移入時都會有相同動作。\n\n```html\n<div id=\"red\"></div>\n<div id=\"blue\"></div>\n```\n\n```css=\n#red{\n  width: 100px;\n  height: 100px;\n  background: red;\n}\n\n#blue{\n  width: 100px;\n  height: 100px;\n  background: blue;\n}\n```\n\n```javascript\n$('#red').mouseenter(function () {\n  console.log('滑鼠移入紅色')\n})\n\n$('#blue').mouseleave(function () {\n  console.log('滑鼠移出藍色')\n})\n```\n\n當滑鼠移入的時候\n![](https://i.imgur.com/d5BLbbQ.png)\n\n當滑鼠移出的時候\n![](https://i.imgur.com/oiRfeKq.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/QWKJvdd?editors=0011)\n\n### 3.\n\n---\n\n[W3Schools](https://www.w3schools.com/jquery/jquery_events.asp)\n","slug":"jQuery - 事件 (event)","published":1,"updated":"2021-03-22T09:26:55.285Z","_id":"ckmheztjk001atctrh73w9a4e","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p><strong>分以下四種事件:</strong></p>\n<ol>\n<li>單擊 (click)</li>\n<li>雙擊 (dblclick)</li>\n<li>滑鼠移入 (mouseenter)</li>\n<li>滑鼠移出 (mouseleave)<a id=\"more\"></a>\n\n</li>\n</ol>\n<h3 id=\"1-單擊-click-amp-雙擊-dblclick\"><a href=\"#1-單擊-click-amp-雙擊-dblclick\" class=\"headerlink\" title=\"1. 單擊 (click) &amp; 雙擊 (dblclick)\"></a>1. 單擊 (click) &amp; 雙擊 (dblclick)</h3><p>為了方便區分，將 <code>id</code> 設定成 <code>click</code> &amp; <code>dbiclick</code>。</p>\n<p>接下來就是 jquery 三步驟:</p>\n<ol>\n<li>選擇要改變的元素 <code>id</code></li>\n<li>更改的樣式 <code>.css('color', 'red')</code></li>\n<li>動作: 單擊 or 雙擊</li>\n</ol>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"click\"</span>&gt;</span>click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dblclick\"</span>&gt;</span>dbiclick<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'#click'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"hljs-string\">'#dblclick'</span>).dblclick(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'blue'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>原圖:<br><img src=\"https://i.imgur.com/CYKyNfz.png\"></p>\n<p>當我單擊的時候會顯示下圖:<br><img src=\"https://i.imgur.com/pALzfBQ.png\"></p>\n<p>雙擊如下圖:<br><img src=\"https://i.imgur.com/o4MRJ2x.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWjzpPb?editors=1011\">DEMO</a></p>\n<p>如何知道 API 可以參考 <a href=\"https://www.w3schools.com/jquery/jquery_events.asp\">W3Schools</a></p>\n<h3 id=\"2-滑鼠事件，移入-mouseenter-與移出-mouseout\"><a href=\"#2-滑鼠事件，移入-mouseenter-與移出-mouseout\" class=\"headerlink\" title=\"2. 滑鼠事件，移入(mouseenter)與移出(mouseout)\"></a>2. 滑鼠事件，移入(mouseenter)與移出(mouseout)</h3><p>給兩個方塊測試，當滑鼠移入或移出方塊的時候就會顯示移入或移出的 log。</p>\n<p>其中 mouseenter 事件跟 hover 一樣，在移入時都會有相同動作。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"red\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"blue\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-id\">#red</span>{</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>: red;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-id\">#blue</span>{</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>: blue;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'#red'</span>).mouseenter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'滑鼠移入紅色'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"hljs-string\">'#blue'</span>).mouseleave(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'滑鼠移出藍色'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>當滑鼠移入的時候<br><img src=\"https://i.imgur.com/d5BLbbQ.png\"></p>\n<p>當滑鼠移出的時候<br><img src=\"https://i.imgur.com/oiRfeKq.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/QWKJvdd?editors=0011\">DEMO</a></p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><hr>\n<p><a href=\"https://www.w3schools.com/jquery/jquery_events.asp\">W3Schools</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"}],"_tags":[{"name":"eventListener","path":"tags/eventListener/"},{"name":"callback function","path":"tags/callback-function/"},{"name":"event","path":"tags/event/"},{"name":"onSubmit","path":"tags/onSubmit/"}],"excerpt":"<html><head></head><body><h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p><strong>分以下四種事件:</strong></p>\n<ol>\n<li>單擊 (click)</li>\n<li>雙擊 (dblclick)</li>\n<li>滑鼠移入 (mouseenter)</li>\n<li>滑鼠移出 (mouseleave)</li></ol></body></html>","more":"</li>\n</ol>\n<h3 id=\"1-單擊-click-amp-雙擊-dblclick\"><a href=\"#1-單擊-click-amp-雙擊-dblclick\" class=\"headerlink\" title=\"1. 單擊 (click) &amp; 雙擊 (dblclick)\"></a>1. 單擊 (click) &amp; 雙擊 (dblclick)</h3><p>為了方便區分，將 <code>id</code> 設定成 <code>click</code> &amp; <code>dbiclick</code>。</p>\n<p>接下來就是 jquery 三步驟:</p>\n<ol>\n<li>選擇要改變的元素 <code>id</code></li>\n<li>更改的樣式 <code>.css(&#39;color&#39;, &#39;red&#39;)</code></li>\n<li>動作: 單擊 or 雙擊</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;click&quot;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dblclick&quot;</span>&gt;</span>dbiclick<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#click&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#dblclick&#x27;</span>).dblclick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>原圖:<br><img src=\"https://i.imgur.com/CYKyNfz.png\"></p>\n<p>當我單擊的時候會顯示下圖:<br><img src=\"https://i.imgur.com/pALzfBQ.png\"></p>\n<p>雙擊如下圖:<br><img src=\"https://i.imgur.com/o4MRJ2x.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWjzpPb?editors=1011\">DEMO</a></p>\n<p>如何知道 API 可以參考 <a href=\"https://www.w3schools.com/jquery/jquery_events.asp\">W3Schools</a></p>\n<h3 id=\"2-滑鼠事件，移入-mouseenter-與移出-mouseout\"><a href=\"#2-滑鼠事件，移入-mouseenter-與移出-mouseout\" class=\"headerlink\" title=\"2. 滑鼠事件，移入(mouseenter)與移出(mouseout)\"></a>2. 滑鼠事件，移入(mouseenter)與移出(mouseout)</h3><p>給兩個方塊測試，當滑鼠移入或移出方塊的時候就會顯示移入或移出的 log。</p>\n<p>其中 mouseenter 事件跟 hover 一樣，在移入時都會有相同動作。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;red&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#red</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#blue</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#red&#x27;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;滑鼠移入紅色&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#blue&#x27;</span>).mouseleave(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;滑鼠移出藍色&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>當滑鼠移入的時候<br><img src=\"https://i.imgur.com/d5BLbbQ.png\"></p>\n<p>當滑鼠移出的時候<br><img src=\"https://i.imgur.com/oiRfeKq.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/QWKJvdd?editors=0011\">DEMO</a></p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><hr>\n<p><a href=\"https://www.w3schools.com/jquery/jquery_events.asp\">W3Schools</a></p>"},{"title":"Vue - loading 效果","date":"2021-03-09T16:00:00.000Z","_content":"\n<!--more-->\n\n[套件](https://github.com/ankurk91/vue-loading-overlay)\n首先安裝 npm: `npm install vue-loading-overlay`\n再到 main.js 載入\n\n```javascript\n// Import component\nimport Loading from 'vue-loading-overlay'\n// Import stylesheet\nimport 'vue-loading-overlay/dist/vue-loading.css'\n\n// 因為是全域每個 component 都會用，所以用 Vue.component\nVue.component('Loading', Loading)\n```\n\n![](https://i.imgur.com/NxbUi4i.png)\n\n---\n\n## 全域 Loading\n\n接下來要在 components 裡面加入讀取的判斷式跟綁定\n先將 lading 預設好，只有在等待的時間下才會轉 ` isLoading: false,`\n\n![](https://i.imgur.com/cLak0kf.png)\n\n然後把範例拿過來用\n\n在 div 內一層加上 `<loading :active.sync=\"isLoading\"></loading>`\n\n![](https://i.imgur.com/kX4o8Kv.png)\n\n接下來要在 AJAX 的行為上面新增 ` isLoading: false,`\n在啟用 `getProducts` 的時候就會觸發 loading ( true )，在完成的時候結束( false )\n範例如下:\n\n```javascript\ngetProducts() {\n  const api = `${process.env.APIPATH}/api/${process.env.MYPATH}/products`\n  this.isLoading = true\n  this.$http.get(api).then((response) => {\n    this.products = response.data.products\n    this.isLoading = false\n  })\n},\n```\n\n然後再重新整理，畫面中間就會出現 Loading 的效果，\n再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果\n\n這樣全域就完成了!!\n\n---\n\n## 局部 Loading\n\n再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果\n\n要加的地方在下圖紅框處\n![](https://i.imgur.com/SKEI2vd.png)\n\n這邊偷懶一下直接用 CDN 載入 [font-awesome](https://cdnjs.com/libraries/font-awesome) 到 index.html\n\n![](https://i.imgur.com/fszYHjw.png)\n![](https://i.imgur.com/jBEiM1M.png)\n\n然後再到 [Animating Icons](https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons) 選一個自己喜歡的 loading 樣式\n這邊用 `fa-spinner fa-spin` 作範例\n因為要在上傳圖片的旁邊顯示 loading 效果，所以我們把 `fa-spinner fa-spin` 加在 label 旁邊，\n\n![](https://i.imgur.com/t3XKdnP.png)\n\n再到 data 函式加入決定局部 loading 的變數\n\n![](https://i.imgur.com/oQk38Gg.png)\n\n再到模板那邊用 v-if 判斷做動態綁定\n\n![](https://i.imgur.com/doiggrR.png)\n\n然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷\n\n```javascript\nuploadImg() {\n    // 在拉圖片進去讀取的時候 fileUpLoading 會是 true\n  this.status.fileUpLoading =  true\n  const uploadFile = this.$refs.files.files[0]\n  const formData = new FormData()\n  formData.append('file-to-upload', uploadFile)\n  //接下來定義路徑\n  const url = `${process.env.APIPATH}/api/${process.env.MYPATH}/admin/upload`\n  this.$http\n    .post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    })\n    .then((res) => {\n      console.log(res.data)\n      // AJAX 結束後 fileUpLoading 就 false\n      this.status.fileUpLoading = false\n      if (res.data.success) {\n        // this.tempProduct.imgUrl = res.data.imageUrl\n        console.log(this.tempProduct)\n        this.$set(this.tempProduct, 'imgUrl', res.data.imageUrl)\n      }\n    })\n}\n```\n","source":"_posts/2021/loading.md","raw":"---\ntitle: Vue - loading 效果\ndate: 2021/03/10\ntags: Loading\ncategories: Loading\n---\n\n<!--more-->\n\n[套件](https://github.com/ankurk91/vue-loading-overlay)\n首先安裝 npm: `npm install vue-loading-overlay`\n再到 main.js 載入\n\n```javascript\n// Import component\nimport Loading from 'vue-loading-overlay'\n// Import stylesheet\nimport 'vue-loading-overlay/dist/vue-loading.css'\n\n// 因為是全域每個 component 都會用，所以用 Vue.component\nVue.component('Loading', Loading)\n```\n\n![](https://i.imgur.com/NxbUi4i.png)\n\n---\n\n## 全域 Loading\n\n接下來要在 components 裡面加入讀取的判斷式跟綁定\n先將 lading 預設好，只有在等待的時間下才會轉 ` isLoading: false,`\n\n![](https://i.imgur.com/cLak0kf.png)\n\n然後把範例拿過來用\n\n在 div 內一層加上 `<loading :active.sync=\"isLoading\"></loading>`\n\n![](https://i.imgur.com/kX4o8Kv.png)\n\n接下來要在 AJAX 的行為上面新增 ` isLoading: false,`\n在啟用 `getProducts` 的時候就會觸發 loading ( true )，在完成的時候結束( false )\n範例如下:\n\n```javascript\ngetProducts() {\n  const api = `${process.env.APIPATH}/api/${process.env.MYPATH}/products`\n  this.isLoading = true\n  this.$http.get(api).then((response) => {\n    this.products = response.data.products\n    this.isLoading = false\n  })\n},\n```\n\n然後再重新整理，畫面中間就會出現 Loading 的效果，\n再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果\n\n這樣全域就完成了!!\n\n---\n\n## 局部 Loading\n\n再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果\n\n要加的地方在下圖紅框處\n![](https://i.imgur.com/SKEI2vd.png)\n\n這邊偷懶一下直接用 CDN 載入 [font-awesome](https://cdnjs.com/libraries/font-awesome) 到 index.html\n\n![](https://i.imgur.com/fszYHjw.png)\n![](https://i.imgur.com/jBEiM1M.png)\n\n然後再到 [Animating Icons](https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons) 選一個自己喜歡的 loading 樣式\n這邊用 `fa-spinner fa-spin` 作範例\n因為要在上傳圖片的旁邊顯示 loading 效果，所以我們把 `fa-spinner fa-spin` 加在 label 旁邊，\n\n![](https://i.imgur.com/t3XKdnP.png)\n\n再到 data 函式加入決定局部 loading 的變數\n\n![](https://i.imgur.com/oQk38Gg.png)\n\n再到模板那邊用 v-if 判斷做動態綁定\n\n![](https://i.imgur.com/doiggrR.png)\n\n然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷\n\n```javascript\nuploadImg() {\n    // 在拉圖片進去讀取的時候 fileUpLoading 會是 true\n  this.status.fileUpLoading =  true\n  const uploadFile = this.$refs.files.files[0]\n  const formData = new FormData()\n  formData.append('file-to-upload', uploadFile)\n  //接下來定義路徑\n  const url = `${process.env.APIPATH}/api/${process.env.MYPATH}/admin/upload`\n  this.$http\n    .post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    })\n    .then((res) => {\n      console.log(res.data)\n      // AJAX 結束後 fileUpLoading 就 false\n      this.status.fileUpLoading = false\n      if (res.data.success) {\n        // this.tempProduct.imgUrl = res.data.imageUrl\n        console.log(this.tempProduct)\n        this.$set(this.tempProduct, 'imgUrl', res.data.imageUrl)\n      }\n    })\n}\n```\n","slug":"loading","published":1,"updated":"2021-03-22T09:27:09.789Z","_id":"ckmhfoynh0000mwtrbbjk4p8c","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><a id=\"more\"></a>\n\n<p><a href=\"https://github.com/ankurk91/vue-loading-overlay\">套件</a><br>首先安裝 npm: <code>npm install vue-loading-overlay</code><br>再到 main.js 載入</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// Import component</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Loading <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-loading-overlay'</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// Import stylesheet</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'vue-loading-overlay/dist/vue-loading.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 因為是全域每個 component 都會用，所以用 Vue.component</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'Loading'</span>, Loading)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/NxbUi4i.png\"></p>\n<hr>\n<h2 id=\"全域-Loading\"><a href=\"#全域-Loading\" class=\"headerlink\" title=\"全域 Loading\"></a>全域 Loading</h2><p>接下來要在 components 裡面加入讀取的判斷式跟綁定<br>先將 lading 預設好，只有在等待的時間下才會轉 <code> isLoading: false,</code></p>\n<p><img src=\"https://i.imgur.com/cLak0kf.png\"></p>\n<p>然後把範例拿過來用</p>\n<p>在 div 內一層加上 <code>&lt;loading :active.sync=\"isLoading\"&gt;&lt;/loading&gt;</code></p>\n<p><img src=\"https://i.imgur.com/kX4o8Kv.png\"></p>\n<p>接下來要在 AJAX 的行為上面新增 <code> isLoading: false,</code><br>在啟用 <code>getProducts</code> 的時候就會觸發 loading ( true )，在完成的時候結束( false )<br>範例如下:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getProducts() {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> api = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.APIPATH}</span>/api/<span class=\"hljs-subst\">${process.env.MYPATH}</span>/products`</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.isLoading = <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.$http.get(api).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.products = response.data.products</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.isLoading = <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  })</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然後再重新整理，畫面中間就會出現 Loading 的效果，<br>再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果</p>\n<p>這樣全域就完成了!!</p>\n<hr>\n<h2 id=\"局部-Loading\"><a href=\"#局部-Loading\" class=\"headerlink\" title=\"局部 Loading\"></a>局部 Loading</h2><p>再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果</p>\n<p>要加的地方在下圖紅框處<br><img src=\"https://i.imgur.com/SKEI2vd.png\"></p>\n<p>這邊偷懶一下直接用 CDN 載入 <a href=\"https://cdnjs.com/libraries/font-awesome\">font-awesome</a> 到 index.html</p>\n<p><img src=\"https://i.imgur.com/fszYHjw.png\"><br><img src=\"https://i.imgur.com/jBEiM1M.png\"></p>\n<p>然後再到 <a href=\"https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons\">Animating Icons</a> 選一個自己喜歡的 loading 樣式<br>這邊用 <code>fa-spinner fa-spin</code> 作範例<br>因為要在上傳圖片的旁邊顯示 loading 效果，所以我們把 <code>fa-spinner fa-spin</code> 加在 label 旁邊，</p>\n<p><img src=\"https://i.imgur.com/t3XKdnP.png\"></p>\n<p>再到 data 函式加入決定局部 loading 的變數</p>\n<p><img src=\"https://i.imgur.com/oQk38Gg.png\"></p>\n<p>再到模板那邊用 v-if 判斷做動態綁定</p>\n<p><img src=\"https://i.imgur.com/doiggrR.png\"></p>\n<p>然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadImg() {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 在拉圖片進去讀取的時候 fileUpLoading 會是 true</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.status.fileUpLoading =  <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> uploadFile = <span class=\"hljs-built_in\">this</span>.$refs.files.files[<span class=\"hljs-number\">0</span>]</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData()</span><br><span class=\"line\">  formData.append(<span class=\"hljs-string\">'file-to-upload'</span>, uploadFile)</span><br><span class=\"line\">  <span class=\"hljs-comment\">//接下來定義路徑</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.APIPATH}</span>/api/<span class=\"hljs-subst\">${process.env.MYPATH}</span>/admin/upload`</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.$http</span><br><span class=\"line\">    .post(url, formData, {</span><br><span class=\"line\">      headers: {</span><br><span class=\"line\">        <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'multipart/form-data'</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    })</span><br><span class=\"line\">    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(res.data)</span><br><span class=\"line\">      <span class=\"hljs-comment\">// AJAX 結束後 fileUpLoading 就 false</span></span><br><span class=\"line\">      <span class=\"hljs-built_in\">this</span>.status.fileUpLoading = <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (res.data.success) {</span><br><span class=\"line\">        <span class=\"hljs-comment\">// this.tempProduct.imgUrl = res.data.imageUrl</span></span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.tempProduct)</span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.$set(<span class=\"hljs-built_in\">this</span>.tempProduct, <span class=\"hljs-string\">'imgUrl'</span>, res.data.imageUrl)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    })</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Loading","path":"categories/Loading/"}],"_tags":[{"name":"Loading","path":"tags/Loading/"}],"excerpt":"","more":"<p><a href=\"https://github.com/ankurk91/vue-loading-overlay\">套件</a><br>首先安裝 npm: <code>npm install vue-loading-overlay</code><br>再到 main.js 載入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Import component</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Loading <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-loading-overlay&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// Import stylesheet</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;vue-loading-overlay/dist/vue-loading.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因為是全域每個 component 都會用，所以用 Vue.component</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;Loading&#x27;</span>, Loading)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/NxbUi4i.png\"></p>\n<hr>\n<h2 id=\"全域-Loading\"><a href=\"#全域-Loading\" class=\"headerlink\" title=\"全域 Loading\"></a>全域 Loading</h2><p>接下來要在 components 裡面加入讀取的判斷式跟綁定<br>先將 lading 預設好，只有在等待的時間下才會轉 <code> isLoading: false,</code></p>\n<p><img src=\"https://i.imgur.com/cLak0kf.png\"></p>\n<p>然後把範例拿過來用</p>\n<p>在 div 內一層加上 <code>&lt;loading :active.sync=&quot;isLoading&quot;&gt;&lt;/loading&gt;</code></p>\n<p><img src=\"https://i.imgur.com/kX4o8Kv.png\"></p>\n<p>接下來要在 AJAX 的行為上面新增 <code> isLoading: false,</code><br>在啟用 <code>getProducts</code> 的時候就會觸發 loading ( true )，在完成的時候結束( false )<br>範例如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getProducts() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> api = <span class=\"string\">`<span class=\"subst\">$&#123;process.env.APIPATH&#125;</span>/api/<span class=\"subst\">$&#123;process.env.MYPATH&#125;</span>/products`</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.isLoading = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.$http.get(api).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.products = response.data.products</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.isLoading = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>然後再重新整理，畫面中間就會出現 Loading 的效果，<br>再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果</p>\n<p>這樣全域就完成了!!</p>\n<hr>\n<h2 id=\"局部-Loading\"><a href=\"#局部-Loading\" class=\"headerlink\" title=\"局部 Loading\"></a>局部 Loading</h2><p>再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果</p>\n<p>要加的地方在下圖紅框處<br><img src=\"https://i.imgur.com/SKEI2vd.png\"></p>\n<p>這邊偷懶一下直接用 CDN 載入 <a href=\"https://cdnjs.com/libraries/font-awesome\">font-awesome</a> 到 index.html</p>\n<p><img src=\"https://i.imgur.com/fszYHjw.png\"><br><img src=\"https://i.imgur.com/jBEiM1M.png\"></p>\n<p>然後再到 <a href=\"https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons\">Animating Icons</a> 選一個自己喜歡的 loading 樣式<br>這邊用 <code>fa-spinner fa-spin</code> 作範例<br>因為要在上傳圖片的旁邊顯示 loading 效果，所以我們把 <code>fa-spinner fa-spin</code> 加在 label 旁邊，</p>\n<p><img src=\"https://i.imgur.com/t3XKdnP.png\"></p>\n<p>再到 data 函式加入決定局部 loading 的變數</p>\n<p><img src=\"https://i.imgur.com/oQk38Gg.png\"></p>\n<p>再到模板那邊用 v-if 判斷做動態綁定</p>\n<p><img src=\"https://i.imgur.com/doiggrR.png\"></p>\n<p>然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadImg() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在拉圖片進去讀取的時候 fileUpLoading 會是 true</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.status.fileUpLoading =  <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> uploadFile = <span class=\"built_in\">this</span>.$refs.files.files[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> FormData()</span><br><span class=\"line\">  formData.append(<span class=\"string\">&#x27;file-to-upload&#x27;</span>, uploadFile)</span><br><span class=\"line\">  <span class=\"comment\">//接下來定義路徑</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;process.env.APIPATH&#125;</span>/api/<span class=\"subst\">$&#123;process.env.MYPATH&#125;</span>/admin/upload`</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.$http</span><br><span class=\"line\">    .post(url, formData, &#123;</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;multipart/form-data&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res.data)</span><br><span class=\"line\">      <span class=\"comment\">// AJAX 結束後 fileUpLoading 就 false</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.status.fileUpLoading = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.data.success) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// this.tempProduct.imgUrl = res.data.imageUrl</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.tempProduct)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$set(<span class=\"built_in\">this</span>.tempProduct, <span class=\"string\">&#x27;imgUrl&#x27;</span>, res.data.imageUrl)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vue - Axios & Bootstrap 引入","date":"2020-08-09T16:00:00.000Z","description":"註冊課程專屬練習 API、啟用一個 Vue Cli 並且 引用帶入專屬 API、引用 Bootstrap 套件，並客製化樣式","_content":"\n## 相關文件\n\n[API](https://vue-course-api.hexschool.io/)\n[文件](https://github.com/hexschool/vue-course-api-wiki/wiki)\n[進度 commit](https://github.com/hexschool/vue-course-api-wiki/wiki/%E9%80%B2%E5%BA%A6-Commit)\n\n由於 Google Chrome 在後續 80 版本後會預設封鎖第三方 Cookie，所以在登入 Vue 課程 API 就會出現無法登入的問題，在這邊老師也補充相關解決方式\n[連結](https://paper.dropbox.com/doc/Vue-API-28OrjdvBouPMjspZUM7h7)\n\n<!--more-->\n\n---\n\n## 啟用一個 Vue Cli 並且 引用帶入專屬 API\n\n#### 申請 API ，並載入\n\n先申請 API ，取得資料\n再安裝 [Vue-Axios](https://www.npmjs.com/package/vue-axios) ，然後把 Vue-Axios 載入到 main.js\n**main.js 載入順序是第三方套件盡量往上放，下面再放自己撰寫的組件**\n\n```javascript\n// 第三方套件\nimport Vue from 'vue'\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\n\n// 自己撰寫\nimport App from './App'\nimport router from './router'\n```\n\nmain.js 載入後到 app.vue 組件，透過 [apiurl](https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D) 網址來取得遠端資料，\n在 [apiurl](https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D) 下面有範本，可以直接取用\n\n```javascript\n<script>\nexport default {\n  name: 'App',\n\n  // 取得遠端資料\n  created() {\n    const api = 'https://vue-course-api.hexschool.io/api/pkt/products'\n        //api申請的路經\n        //所申請的API path\n        this.$http.get(api).then((response) => {\n        console.log(response.data)\n    })\n  },\n\n}\n</script>\n```\n\n然後用 console 確認 API 資料有沒有載入(記得刷新頁面)，查看產品裡面有個測試分類，確認是否跟自己的 API 一樣\n![](https://i.imgur.com/TU0kFnx.jpg)\n![](https://i.imgur.com/wfOguTk.png)\n\n#### 修改 API 路徑，確認是否有抓到\n\nAPI 路徑在開發時段有可能會修改，為了方便管理，所以要去 config/dev.env.js 新增變數\n(dev.env.js 是開發中的環境，prod.env.js 是正式上線的環境)\n\n```javascript\nmodule.exports = merge(prodEnv, {\n  NODE_ENV: '\"development\"',\n  APIPATH:'\"https://vue-course-api.hexschool.io\"',// 這是伺服器路徑\n  COSTOMPATH:'\"pkt\"',// 這是自定義的路徑\n})\n\n------------下面這塊是重要提醒!!!!!!-------------------\nAPIPATH路經尾巴不能有\"/\"，不然會出現\"你所查看的API不存在\"\n路徑是外面一個單引號，裡面再用雙引號包住\n\n錯誤示範:\nAPIPATH:'https://vue-course-api.hexschool.io/',\n\n正確示範:\nAPIPATH:'\"https://vue-course-api.hexschool.io\"',\n```\n\n新增好變數後就可以把路徑用字串模板跟變數的方式來呈現\n我們要確認 dev.env.js 的路徑是否有啟用，所以在 app.vue 輸入\n`console.log(process.env.APIPATH, process.env.COSTOMPATH);`\n\n![](https://i.imgur.com/IZgZInK.png)\n\n輸入完若直接刷新頁面會出現下圖，顯示抓不到路徑\n![](https://i.imgur.com/Vof0WEE.png)\n這是正常的，解決方法是重新起動 vue `npm run rdv` !!!\n![](https://i.imgur.com/w2tbfNI.png)\n\n再用 console 查看，就會正常顯示了\n![](https://i.imgur.com/2d2UQDH.jpg)\n\n#### 將路徑改成字串模板+變數\n\n確認變數有抓到後，接下來要把路經改用字串模板+變數來呈現(單引號記得改反引號)\n\n```javascript\n<script>\nexport default {\n  name: 'App',\n\n  // 取得遠端資料\n  created() {\n  // 字串模板記得改成 反引號!!!\n    const api = `${process.env.APIPATH}/api/${process.env.COSTOMPATH}/products`;\n    // console.log(process.env.APIPATH, process.env.COSTOMPATH);\n        //api申請的路經\n        //所申請的API path\n        this.$http.get(api).then((response) => {\n        console.log(response.data)\n    })\n  },\n\n}\n</script>\n```\n\n然後重開 npm，確認是否抓到\n![](https://i.imgur.com/fEYr4jg.png)\n\n---\n\n## 引用 Bootstrap 套件，並客製化樣式\n\n接下來要將 Boostrap4 變數修改成自定義的變數，在此之前要先建立新的檔案並且把原本的變數檔存到要修改的資料夾內。\n[Dashboard](https://getbootstrap.com/docs/4.1/examples/dashboard/) 模板\n首先用 npm 載入 Boostrap4\n`npm install Boostrap --save`\n`npm install --save-d sass-loader@7.1.0`\n會限制版本是為了避免在`<style lang=\"scss\">` 出錯，如下圖，此圖來源為 [Simon](https://courses.hexschool.com/courses/670031/lectures/11949315) 同學的範例\n![](https://i.imgur.com/I9aSB6O.png)\n為避免這狀況發生，所以這邊用舊版本示範\n\n安裝好 npm 後重開，到 node_modules 資料夾下確認是否有載入\n![](https://i.imgur.com/8tQvaXh.jpg)\n\n然後到 app.vue 把預設的 CSS 刪掉，並載入 Bootstrap4\n\n```css\n<style lang='scss'>\n@import '~bootstrap/scss/bootstrap';\n//~bootstrap  是指載入 Boostrap 這個模組\n</style>\n```\n\n這時候有可能是 sass-loader 沒裝，每個 cli 出來的 webpaack 版本可能會不一樣，如果沒跳錯就沒問題，如果有跳錯(如下圖)\n![](https://i.imgur.com/2W5i1QM.png)\n那就裝一下 `npm i node-sass sass-loader --save` ，再重開就好了\n![](https://i.imgur.com/syXb01r.png)\n\n---\n\n#### 建立資料夾，新增檔案，拉連結\n\n接下來要客製化一些變數，這時候就需要將 Boostrap4 獨立出來，方便自定義跟管理\n\n先在 assets 資料夾下新增 helper 資料夾，在到 node_modules / Bootstrap4 / SCSS / variables.scss，\n把 variables 另存新檔到 helper 資料夾內，這樣透過修改 variables 就可以將原本 Boostrap4 樣式進行客製化了\n\n然後建立一個新的 all.scss 檔案，並載入方法跟要客製化的檔案\n\n```css\n@import '~bootstrap/scss/functions'; //載入 Boostrap4 套用變數的方法\n@import './helper/variables'; //有了上面的方法，才可以啟用自己定義的變數\n@import '~bootstrap/scss/bootstrap';\n```\n\n再把 app.vue 的 style 改成下圖\n\n```css\n@import './assets/all'; //不要複製造抄，請確認 all.scss 放在哪\n```\n\n![](https://i.imgur.com/mRuU4rM.png)\n\n到目前為止，畫面仍會是正常的(如下圖)\n![](https://i.imgur.com/CAGku7A.png)\n\n接下來要加入 Bootstrap4 樣式來看看會有什麼變化，這邊用 button 套件示範\n把套件放在 app.vue 的 router-view 下方(如下圖)\n![](https://i.imgur.com/Ca4wTqY.png)\n\n這時候畫面就會顯示按鈕\n![](https://i.imgur.com/m1Di9ip.png)\n\n現在要改樣式，先到 variables.scss 找要改的變數，這邊用 'indigo' 示範\n![](https://i.imgur.com/WvcRvjk.png)\n\n找到主題色做更改，這時候 primary 的顏色會被改掉\n![](https://i.imgur.com/3ulBYv5.png)\n\n#### scoped\n\nscoped 是將樣式限制在某個組件內，以下示範\n先到 helloworld 組件看一下樣式會發現預設樣式是 scoped，代表這些樣式只會在 helloworld 組件內執行，\n不會影響到外層 app 組件\n\n我們先看 router 配置圖\n![](https://i.imgur.com/hqibtwT.png)\n可以看到 helloworld (內層)組件是被 app (外層)組件包住的，雖然是包住的但內外層是互不影響的，\n因為有 scoped 的關係，讓它們之間天人永隔!\n\n我們先看看 helloworld (內層) style 裡的 a 連結，預設是 #42b983 淡綠色，\n![](https://i.imgur.com/stg9J3z.png)\n\n然後我們在 app (外層)組件內加入 a 連結\n![](https://i.imgur.com/BnAwgQe.png)\n\n刷新畫面後，可以看到 a 連結的顏色會是紫色不是淡綠色，\n這是因為在 helloworld 有下 scoped ，所以樣式不會互相影響\n![](https://i.imgur.com/9Sv6Su8.png)\n\n如果文字看不懂，就看這張吧\n![](https://i.imgur.com/izM4poR.png)\n\n如果不想讓各組件之間的樣式互相影響的話就必須在 style 加上 scoped !\n\n---\n\n## [資料來源: Vue 出電商網站](https://courses.hexschool.com/courses/670031/lectures/11949315)\n","source":"_posts/2021/Axios.md","raw":"---\ntitle: Vue - Axios & Bootstrap 引入\ndate: 2020/08/10\ntags: Vue\ncategories: 電商網站\ndescription: 註冊課程專屬練習 API、啟用一個 Vue Cli 並且 引用帶入專屬 API、引用 Bootstrap 套件，並客製化樣式\n---\n\n## 相關文件\n\n[API](https://vue-course-api.hexschool.io/)\n[文件](https://github.com/hexschool/vue-course-api-wiki/wiki)\n[進度 commit](https://github.com/hexschool/vue-course-api-wiki/wiki/%E9%80%B2%E5%BA%A6-Commit)\n\n由於 Google Chrome 在後續 80 版本後會預設封鎖第三方 Cookie，所以在登入 Vue 課程 API 就會出現無法登入的問題，在這邊老師也補充相關解決方式\n[連結](https://paper.dropbox.com/doc/Vue-API-28OrjdvBouPMjspZUM7h7)\n\n<!--more-->\n\n---\n\n## 啟用一個 Vue Cli 並且 引用帶入專屬 API\n\n#### 申請 API ，並載入\n\n先申請 API ，取得資料\n再安裝 [Vue-Axios](https://www.npmjs.com/package/vue-axios) ，然後把 Vue-Axios 載入到 main.js\n**main.js 載入順序是第三方套件盡量往上放，下面再放自己撰寫的組件**\n\n```javascript\n// 第三方套件\nimport Vue from 'vue'\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\n\n// 自己撰寫\nimport App from './App'\nimport router from './router'\n```\n\nmain.js 載入後到 app.vue 組件，透過 [apiurl](https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D) 網址來取得遠端資料，\n在 [apiurl](https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D) 下面有範本，可以直接取用\n\n```javascript\n<script>\nexport default {\n  name: 'App',\n\n  // 取得遠端資料\n  created() {\n    const api = 'https://vue-course-api.hexschool.io/api/pkt/products'\n        //api申請的路經\n        //所申請的API path\n        this.$http.get(api).then((response) => {\n        console.log(response.data)\n    })\n  },\n\n}\n</script>\n```\n\n然後用 console 確認 API 資料有沒有載入(記得刷新頁面)，查看產品裡面有個測試分類，確認是否跟自己的 API 一樣\n![](https://i.imgur.com/TU0kFnx.jpg)\n![](https://i.imgur.com/wfOguTk.png)\n\n#### 修改 API 路徑，確認是否有抓到\n\nAPI 路徑在開發時段有可能會修改，為了方便管理，所以要去 config/dev.env.js 新增變數\n(dev.env.js 是開發中的環境，prod.env.js 是正式上線的環境)\n\n```javascript\nmodule.exports = merge(prodEnv, {\n  NODE_ENV: '\"development\"',\n  APIPATH:'\"https://vue-course-api.hexschool.io\"',// 這是伺服器路徑\n  COSTOMPATH:'\"pkt\"',// 這是自定義的路徑\n})\n\n------------下面這塊是重要提醒!!!!!!-------------------\nAPIPATH路經尾巴不能有\"/\"，不然會出現\"你所查看的API不存在\"\n路徑是外面一個單引號，裡面再用雙引號包住\n\n錯誤示範:\nAPIPATH:'https://vue-course-api.hexschool.io/',\n\n正確示範:\nAPIPATH:'\"https://vue-course-api.hexschool.io\"',\n```\n\n新增好變數後就可以把路徑用字串模板跟變數的方式來呈現\n我們要確認 dev.env.js 的路徑是否有啟用，所以在 app.vue 輸入\n`console.log(process.env.APIPATH, process.env.COSTOMPATH);`\n\n![](https://i.imgur.com/IZgZInK.png)\n\n輸入完若直接刷新頁面會出現下圖，顯示抓不到路徑\n![](https://i.imgur.com/Vof0WEE.png)\n這是正常的，解決方法是重新起動 vue `npm run rdv` !!!\n![](https://i.imgur.com/w2tbfNI.png)\n\n再用 console 查看，就會正常顯示了\n![](https://i.imgur.com/2d2UQDH.jpg)\n\n#### 將路徑改成字串模板+變數\n\n確認變數有抓到後，接下來要把路經改用字串模板+變數來呈現(單引號記得改反引號)\n\n```javascript\n<script>\nexport default {\n  name: 'App',\n\n  // 取得遠端資料\n  created() {\n  // 字串模板記得改成 反引號!!!\n    const api = `${process.env.APIPATH}/api/${process.env.COSTOMPATH}/products`;\n    // console.log(process.env.APIPATH, process.env.COSTOMPATH);\n        //api申請的路經\n        //所申請的API path\n        this.$http.get(api).then((response) => {\n        console.log(response.data)\n    })\n  },\n\n}\n</script>\n```\n\n然後重開 npm，確認是否抓到\n![](https://i.imgur.com/fEYr4jg.png)\n\n---\n\n## 引用 Bootstrap 套件，並客製化樣式\n\n接下來要將 Boostrap4 變數修改成自定義的變數，在此之前要先建立新的檔案並且把原本的變數檔存到要修改的資料夾內。\n[Dashboard](https://getbootstrap.com/docs/4.1/examples/dashboard/) 模板\n首先用 npm 載入 Boostrap4\n`npm install Boostrap --save`\n`npm install --save-d sass-loader@7.1.0`\n會限制版本是為了避免在`<style lang=\"scss\">` 出錯，如下圖，此圖來源為 [Simon](https://courses.hexschool.com/courses/670031/lectures/11949315) 同學的範例\n![](https://i.imgur.com/I9aSB6O.png)\n為避免這狀況發生，所以這邊用舊版本示範\n\n安裝好 npm 後重開，到 node_modules 資料夾下確認是否有載入\n![](https://i.imgur.com/8tQvaXh.jpg)\n\n然後到 app.vue 把預設的 CSS 刪掉，並載入 Bootstrap4\n\n```css\n<style lang='scss'>\n@import '~bootstrap/scss/bootstrap';\n//~bootstrap  是指載入 Boostrap 這個模組\n</style>\n```\n\n這時候有可能是 sass-loader 沒裝，每個 cli 出來的 webpaack 版本可能會不一樣，如果沒跳錯就沒問題，如果有跳錯(如下圖)\n![](https://i.imgur.com/2W5i1QM.png)\n那就裝一下 `npm i node-sass sass-loader --save` ，再重開就好了\n![](https://i.imgur.com/syXb01r.png)\n\n---\n\n#### 建立資料夾，新增檔案，拉連結\n\n接下來要客製化一些變數，這時候就需要將 Boostrap4 獨立出來，方便自定義跟管理\n\n先在 assets 資料夾下新增 helper 資料夾，在到 node_modules / Bootstrap4 / SCSS / variables.scss，\n把 variables 另存新檔到 helper 資料夾內，這樣透過修改 variables 就可以將原本 Boostrap4 樣式進行客製化了\n\n然後建立一個新的 all.scss 檔案，並載入方法跟要客製化的檔案\n\n```css\n@import '~bootstrap/scss/functions'; //載入 Boostrap4 套用變數的方法\n@import './helper/variables'; //有了上面的方法，才可以啟用自己定義的變數\n@import '~bootstrap/scss/bootstrap';\n```\n\n再把 app.vue 的 style 改成下圖\n\n```css\n@import './assets/all'; //不要複製造抄，請確認 all.scss 放在哪\n```\n\n![](https://i.imgur.com/mRuU4rM.png)\n\n到目前為止，畫面仍會是正常的(如下圖)\n![](https://i.imgur.com/CAGku7A.png)\n\n接下來要加入 Bootstrap4 樣式來看看會有什麼變化，這邊用 button 套件示範\n把套件放在 app.vue 的 router-view 下方(如下圖)\n![](https://i.imgur.com/Ca4wTqY.png)\n\n這時候畫面就會顯示按鈕\n![](https://i.imgur.com/m1Di9ip.png)\n\n現在要改樣式，先到 variables.scss 找要改的變數，這邊用 'indigo' 示範\n![](https://i.imgur.com/WvcRvjk.png)\n\n找到主題色做更改，這時候 primary 的顏色會被改掉\n![](https://i.imgur.com/3ulBYv5.png)\n\n#### scoped\n\nscoped 是將樣式限制在某個組件內，以下示範\n先到 helloworld 組件看一下樣式會發現預設樣式是 scoped，代表這些樣式只會在 helloworld 組件內執行，\n不會影響到外層 app 組件\n\n我們先看 router 配置圖\n![](https://i.imgur.com/hqibtwT.png)\n可以看到 helloworld (內層)組件是被 app (外層)組件包住的，雖然是包住的但內外層是互不影響的，\n因為有 scoped 的關係，讓它們之間天人永隔!\n\n我們先看看 helloworld (內層) style 裡的 a 連結，預設是 #42b983 淡綠色，\n![](https://i.imgur.com/stg9J3z.png)\n\n然後我們在 app (外層)組件內加入 a 連結\n![](https://i.imgur.com/BnAwgQe.png)\n\n刷新畫面後，可以看到 a 連結的顏色會是紫色不是淡綠色，\n這是因為在 helloworld 有下 scoped ，所以樣式不會互相影響\n![](https://i.imgur.com/9Sv6Su8.png)\n\n如果文字看不懂，就看這張吧\n![](https://i.imgur.com/izM4poR.png)\n\n如果不想讓各組件之間的樣式互相影響的話就必須在 style 加上 scoped !\n\n---\n\n## [資料來源: Vue 出電商網站](https://courses.hexschool.com/courses/670031/lectures/11949315)\n","slug":"Axios","published":1,"updated":"2021-03-22T09:26:34.273Z","_id":"ckmhfs38b0003mwtr759nf770","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h2 id=\"相關文件\"><a href=\"#相關文件\" class=\"headerlink\" title=\"相關文件\"></a>相關文件</h2><p><a href=\"https://vue-course-api.hexschool.io/\">API</a><br><a href=\"https://github.com/hexschool/vue-course-api-wiki/wiki\">文件</a><br><a href=\"https://github.com/hexschool/vue-course-api-wiki/wiki/%E9%80%B2%E5%BA%A6-Commit\">進度 commit</a></p>\n<p>由於 Google Chrome 在後續 80 版本後會預設封鎖第三方 Cookie，所以在登入 Vue 課程 API 就會出現無法登入的問題，在這邊老師也補充相關解決方式<br><a href=\"https://paper.dropbox.com/doc/Vue-API-28OrjdvBouPMjspZUM7h7\">連結</a></p>\n<a id=\"more\"></a>\n\n<hr>\n<h2 id=\"啟用一個-Vue-Cli-並且-引用帶入專屬-API\"><a href=\"#啟用一個-Vue-Cli-並且-引用帶入專屬-API\" class=\"headerlink\" title=\"啟用一個 Vue Cli 並且 引用帶入專屬 API\"></a>啟用一個 Vue Cli 並且 引用帶入專屬 API</h2><h4 id=\"申請-API-，並載入\"><a href=\"#申請-API-，並載入\" class=\"headerlink\" title=\"申請 API ，並載入\"></a>申請 API ，並載入</h4><p>先申請 API ，取得資料<br>再安裝 <a href=\"https://www.npmjs.com/package/vue-axios\">Vue-Axios</a> ，然後把 Vue-Axios 載入到 main.js<br><strong>main.js 載入順序是第三方套件盡量往上放，下面再放自己撰寫的組件</strong></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 第三方套件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> VueAxios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 自己撰寫</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./App'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./router'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>main.js 載入後到 app.vue 組件，透過 <a href=\"https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D\">apiurl</a> 網址來取得遠端資料，<br>在 <a href=\"https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D\">apiurl</a> 下面有範本，可以直接取用</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {</span><br><span class=\"line\">  name: <span class=\"hljs-string\">'App'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 取得遠端資料</span></span><br><span class=\"line\">  created() {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> api = <span class=\"hljs-string\">'https://vue-course-api.hexschool.io/api/pkt/products'</span></span><br><span class=\"line\">        <span class=\"hljs-comment\">//api申請的路經</span></span><br><span class=\"line\">        <span class=\"hljs-comment\">//所申請的API path</span></span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.$http.get(api).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.log(response.data)</span><br><span class=\"line\">    })</span><br><span class=\"line\">  },</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然後用 console 確認 API 資料有沒有載入(記得刷新頁面)，查看產品裡面有個測試分類，確認是否跟自己的 API 一樣<br><img src=\"https://i.imgur.com/TU0kFnx.jpg\"><br><img src=\"https://i.imgur.com/wfOguTk.png\"></p>\n<h4 id=\"修改-API-路徑，確認是否有抓到\"><a href=\"#修改-API-路徑，確認是否有抓到\" class=\"headerlink\" title=\"修改 API 路徑，確認是否有抓到\"></a>修改 API 路徑，確認是否有抓到</h4><p>API 路徑在開發時段有可能會修改，為了方便管理，所以要去 config/dev.env.js 新增變數<br>(dev.env.js 是開發中的環境，prod.env.js 是正式上線的環境)</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = merge(prodEnv, {</span><br><span class=\"line\">  NODE_ENV: <span class=\"hljs-string\">'\"development\"'</span>,</span><br><span class=\"line\">  APIPATH:<span class=\"hljs-string\">'\"https://vue-course-api.hexschool.io\"'</span>,<span class=\"hljs-comment\">// 這是伺服器路徑</span></span><br><span class=\"line\">  COSTOMPATH:<span class=\"hljs-string\">'\"pkt\"'</span>,<span class=\"hljs-comment\">// 這是自定義的路徑</span></span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">------------下面這塊是重要提醒!!!!!!-------------------</span><br><span class=\"line\">APIPATH路經尾巴不能有<span class=\"hljs-string\">\"/\"</span>，不然會出現<span class=\"hljs-string\">\"你所查看的API不存在\"</span></span><br><span class=\"line\">路徑是外面一個單引號，裡面再用雙引號包住</span><br><span class=\"line\"></span><br><span class=\"line\">錯誤示範:</span><br><span class=\"line\">APIPATH:<span class=\"hljs-string\">'https://vue-course-api.hexschool.io/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">正確示範:</span><br><span class=\"line\">APIPATH:<span class=\"hljs-string\">'\"https://vue-course-api.hexschool.io\"'</span>,</span><br></pre></td></tr></tbody></table></figure>\n\n<p>新增好變數後就可以把路徑用字串模板跟變數的方式來呈現<br>我們要確認 dev.env.js 的路徑是否有啟用，所以在 app.vue 輸入<br><code>console.log(process.env.APIPATH, process.env.COSTOMPATH);</code></p>\n<p><img src=\"https://i.imgur.com/IZgZInK.png\"></p>\n<p>輸入完若直接刷新頁面會出現下圖，顯示抓不到路徑<br><img src=\"https://i.imgur.com/Vof0WEE.png\"><br>這是正常的，解決方法是重新起動 vue <code>npm run rdv</code> !!!<br><img src=\"https://i.imgur.com/w2tbfNI.png\"></p>\n<p>再用 console 查看，就會正常顯示了<br><img src=\"https://i.imgur.com/2d2UQDH.jpg\"></p>\n<h4 id=\"將路徑改成字串模板-變數\"><a href=\"#將路徑改成字串模板-變數\" class=\"headerlink\" title=\"將路徑改成字串模板+變數\"></a>將路徑改成字串模板+變數</h4><p>確認變數有抓到後，接下來要把路經改用字串模板+變數來呈現(單引號記得改反引號)</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {</span><br><span class=\"line\">  name: <span class=\"hljs-string\">'App'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 取得遠端資料</span></span><br><span class=\"line\">  created() {</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 字串模板記得改成 反引號!!!</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> api = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.APIPATH}</span>/api/<span class=\"hljs-subst\">${process.env.COSTOMPATH}</span>/products`</span>;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// console.log(process.env.APIPATH, process.env.COSTOMPATH);</span></span><br><span class=\"line\">        <span class=\"hljs-comment\">//api申請的路經</span></span><br><span class=\"line\">        <span class=\"hljs-comment\">//所申請的API path</span></span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.$http.get(api).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.log(response.data)</span><br><span class=\"line\">    })</span><br><span class=\"line\">  },</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然後重開 npm，確認是否抓到<br><img src=\"https://i.imgur.com/fEYr4jg.png\"></p>\n<hr>\n<h2 id=\"引用-Bootstrap-套件，並客製化樣式\"><a href=\"#引用-Bootstrap-套件，並客製化樣式\" class=\"headerlink\" title=\"引用 Bootstrap 套件，並客製化樣式\"></a>引用 Bootstrap 套件，並客製化樣式</h2><p>接下來要將 Boostrap4 變數修改成自定義的變數，在此之前要先建立新的檔案並且把原本的變數檔存到要修改的資料夾內。<br><a href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/\">Dashboard</a> 模板<br>首先用 npm 載入 Boostrap4<br><code>npm install Boostrap --save</code><br><code>npm install --save-d sass-loader@7.1.0</code><br>會限制版本是為了避免在<code>&lt;style lang=\"scss\"&gt;</code> 出錯，如下圖，此圖來源為 <a href=\"https://courses.hexschool.com/courses/670031/lectures/11949315\">Simon</a> 同學的範例<br><img src=\"https://i.imgur.com/I9aSB6O.png\"><br>為避免這狀況發生，所以這邊用舊版本示範</p>\n<p>安裝好 npm 後重開，到 node_modules 資料夾下確認是否有載入<br><img src=\"https://i.imgur.com/8tQvaXh.jpg\"></p>\n<p>然後到 app.vue 把預設的 CSS 刪掉，並載入 Bootstrap4</p>\n<figure class=\"highlight hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang='scss'&gt;</span><br><span class=\"line\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'~bootstrap/scss/bootstrap'</span>;</span><br><span class=\"line\">//~bootstrap  是指載入 Boostrap 這個模組</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>這時候有可能是 sass-loader 沒裝，每個 cli 出來的 webpaack 版本可能會不一樣，如果沒跳錯就沒問題，如果有跳錯(如下圖)<br><img src=\"https://i.imgur.com/2W5i1QM.png\"><br>那就裝一下 <code>npm i node-sass sass-loader --save</code> ，再重開就好了<br><img src=\"https://i.imgur.com/syXb01r.png\"></p>\n<hr>\n<h4 id=\"建立資料夾，新增檔案，拉連結\"><a href=\"#建立資料夾，新增檔案，拉連結\" class=\"headerlink\" title=\"建立資料夾，新增檔案，拉連結\"></a>建立資料夾，新增檔案，拉連結</h4><p>接下來要客製化一些變數，這時候就需要將 Boostrap4 獨立出來，方便自定義跟管理</p>\n<p>先在 assets 資料夾下新增 helper 資料夾，在到 node_modules / Bootstrap4 / SCSS / variables.scss，<br>把 variables 另存新檔到 helper 資料夾內，這樣透過修改 variables 就可以將原本 Boostrap4 樣式進行客製化了</p>\n<p>然後建立一個新的 all.scss 檔案，並載入方法跟要客製化的檔案</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import '~bootstrap/scss/functions'; //載入 Boostrap4 套用變數的方法</span><br><span class=\"line\">@import './helper/variables'; //有了上面的方法，才可以啟用自己定義的變數</span><br><span class=\"line\"><span class=\"hljs-keyword\">@import</span> <span class=\"hljs-string\">'~bootstrap/scss/bootstrap'</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>再把 app.vue 的 style 改成下圖</p>\n<figure class=\"highlight hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import './assets/all'; //不要複製造抄，請確認 all.scss 放在哪</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/mRuU4rM.png\"></p>\n<p>到目前為止，畫面仍會是正常的(如下圖)<br><img src=\"https://i.imgur.com/CAGku7A.png\"></p>\n<p>接下來要加入 Bootstrap4 樣式來看看會有什麼變化，這邊用 button 套件示範<br>把套件放在 app.vue 的 router-view 下方(如下圖)<br><img src=\"https://i.imgur.com/Ca4wTqY.png\"></p>\n<p>這時候畫面就會顯示按鈕<br><img src=\"https://i.imgur.com/m1Di9ip.png\"></p>\n<p>現在要改樣式，先到 variables.scss 找要改的變數，這邊用 ‘indigo’ 示範<br><img src=\"https://i.imgur.com/WvcRvjk.png\"></p>\n<p>找到主題色做更改，這時候 primary 的顏色會被改掉<br><img src=\"https://i.imgur.com/3ulBYv5.png\"></p>\n<h4 id=\"scoped\"><a href=\"#scoped\" class=\"headerlink\" title=\"scoped\"></a>scoped</h4><p>scoped 是將樣式限制在某個組件內，以下示範<br>先到 helloworld 組件看一下樣式會發現預設樣式是 scoped，代表這些樣式只會在 helloworld 組件內執行，<br>不會影響到外層 app 組件</p>\n<p>我們先看 router 配置圖<br><img src=\"https://i.imgur.com/hqibtwT.png\"><br>可以看到 helloworld (內層)組件是被 app (外層)組件包住的，雖然是包住的但內外層是互不影響的，<br>因為有 scoped 的關係，讓它們之間天人永隔!</p>\n<p>我們先看看 helloworld (內層) style 裡的 a 連結，預設是 #42b983 淡綠色，<br><img src=\"https://i.imgur.com/stg9J3z.png\"></p>\n<p>然後我們在 app (外層)組件內加入 a 連結<br><img src=\"https://i.imgur.com/BnAwgQe.png\"></p>\n<p>刷新畫面後，可以看到 a 連結的顏色會是紫色不是淡綠色，<br>這是因為在 helloworld 有下 scoped ，所以樣式不會互相影響<br><img src=\"https://i.imgur.com/9Sv6Su8.png\"></p>\n<p>如果文字看不懂，就看這張吧<br><img src=\"https://i.imgur.com/izM4poR.png\"></p>\n<p>如果不想讓各組件之間的樣式互相影響的話就必須在 style 加上 scoped !</p>\n<hr>\n<h2 id=\"資料來源-Vue-出電商網站\"><a href=\"#資料來源-Vue-出電商網站\" class=\"headerlink\" title=\"資料來源: Vue 出電商網站\"></a><a href=\"https://courses.hexschool.com/courses/670031/lectures/11949315\">資料來源: Vue 出電商網站</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"電商網站","path":"categories/電商網站/"}],"_tags":[{"name":"Vue","path":"tags/Vue/"}],"excerpt":"<html><head></head><body><h2 id=\"相關文件\"><a href=\"#相關文件\" class=\"headerlink\" title=\"相關文件\"></a>相關文件</h2><p><a href=\"https://vue-course-api.hexschool.io/\">API</a><br><a href=\"https://github.com/hexschool/vue-course-api-wiki/wiki\">文件</a><br><a href=\"https://github.com/hexschool/vue-course-api-wiki/wiki/%E9%80%B2%E5%BA%A6-Commit\">進度 commit</a></p>\n<p>由於 Google Chrome 在後續 80 版本後會預設封鎖第三方 Cookie，所以在登入 Vue 課程 API 就會出現無法登入的問題，在這邊老師也補充相關解決方式<br><a href=\"https://paper.dropbox.com/doc/Vue-API-28OrjdvBouPMjspZUM7h7\">連結</a></p></body></html>","more":"<hr>\n<h2 id=\"啟用一個-Vue-Cli-並且-引用帶入專屬-API\"><a href=\"#啟用一個-Vue-Cli-並且-引用帶入專屬-API\" class=\"headerlink\" title=\"啟用一個 Vue Cli 並且 引用帶入專屬 API\"></a>啟用一個 Vue Cli 並且 引用帶入專屬 API</h2><h4 id=\"申請-API-，並載入\"><a href=\"#申請-API-，並載入\" class=\"headerlink\" title=\"申請 API ，並載入\"></a>申請 API ，並載入</h4><p>先申請 API ，取得資料<br>再安裝 <a href=\"https://www.npmjs.com/package/vue-axios\">Vue-Axios</a> ，然後把 Vue-Axios 載入到 main.js<br><strong>main.js 載入順序是第三方套件盡量往上放，下面再放自己撰寫的組件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第三方套件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueAxios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自己撰寫</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>main.js 載入後到 app.vue 組件，透過 <a href=\"https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D\">apiurl</a> 網址來取得遠端資料，<br>在 <a href=\"https://github.com/hexschool/vue-course-api-wiki/wiki/%E5%AE%A2%E6%88%B6%E8%B3%BC%E7%89%A9-%5B%E5%85%8D%E9%A9%97%E8%AD%89%5D\">apiurl</a> 下面有範本，可以直接取用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 取得遠端資料</span></span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> api = <span class=\"string\">&#x27;https://vue-course-api.hexschool.io/api/pkt/products&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">//api申請的路經</span></span><br><span class=\"line\">        <span class=\"comment\">//所申請的API path</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$http.get(api).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(response.data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然後用 console 確認 API 資料有沒有載入(記得刷新頁面)，查看產品裡面有個測試分類，確認是否跟自己的 API 一樣<br><img src=\"https://i.imgur.com/TU0kFnx.jpg\"><br><img src=\"https://i.imgur.com/wfOguTk.png\"></p>\n<h4 id=\"修改-API-路徑，確認是否有抓到\"><a href=\"#修改-API-路徑，確認是否有抓到\" class=\"headerlink\" title=\"修改 API 路徑，確認是否有抓到\"></a>修改 API 路徑，確認是否有抓到</h4><p>API 路徑在開發時段有可能會修改，為了方便管理，所以要去 config/dev.env.js 新增變數<br>(dev.env.js 是開發中的環境，prod.env.js 是正式上線的環境)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(prodEnv, &#123;</span><br><span class=\"line\">  NODE_ENV: <span class=\"string\">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class=\"line\">  APIPATH:<span class=\"string\">&#x27;&quot;https://vue-course-api.hexschool.io&quot;&#x27;</span>,<span class=\"comment\">// 這是伺服器路徑</span></span><br><span class=\"line\">  COSTOMPATH:<span class=\"string\">&#x27;&quot;pkt&quot;&#x27;</span>,<span class=\"comment\">// 這是自定義的路徑</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">------------下面這塊是重要提醒!!!!!!-------------------</span><br><span class=\"line\">APIPATH路經尾巴不能有<span class=\"string\">&quot;/&quot;</span>，不然會出現<span class=\"string\">&quot;你所查看的API不存在&quot;</span></span><br><span class=\"line\">路徑是外面一個單引號，裡面再用雙引號包住</span><br><span class=\"line\"></span><br><span class=\"line\">錯誤示範:</span><br><span class=\"line\">APIPATH:<span class=\"string\">&#x27;https://vue-course-api.hexschool.io/&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">正確示範:</span><br><span class=\"line\">APIPATH:<span class=\"string\">&#x27;&quot;https://vue-course-api.hexschool.io&quot;&#x27;</span>,</span><br></pre></td></tr></table></figure>\n\n<p>新增好變數後就可以把路徑用字串模板跟變數的方式來呈現<br>我們要確認 dev.env.js 的路徑是否有啟用，所以在 app.vue 輸入<br><code>console.log(process.env.APIPATH, process.env.COSTOMPATH);</code></p>\n<p><img src=\"https://i.imgur.com/IZgZInK.png\"></p>\n<p>輸入完若直接刷新頁面會出現下圖，顯示抓不到路徑<br><img src=\"https://i.imgur.com/Vof0WEE.png\"><br>這是正常的，解決方法是重新起動 vue <code>npm run rdv</code> !!!<br><img src=\"https://i.imgur.com/w2tbfNI.png\"></p>\n<p>再用 console 查看，就會正常顯示了<br><img src=\"https://i.imgur.com/2d2UQDH.jpg\"></p>\n<h4 id=\"將路徑改成字串模板-變數\"><a href=\"#將路徑改成字串模板-變數\" class=\"headerlink\" title=\"將路徑改成字串模板+變數\"></a>將路徑改成字串模板+變數</h4><p>確認變數有抓到後，接下來要把路經改用字串模板+變數來呈現(單引號記得改反引號)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;App&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 取得遠端資料</span></span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 字串模板記得改成 反引號!!!</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> api = <span class=\"string\">`<span class=\"subst\">$&#123;process.env.APIPATH&#125;</span>/api/<span class=\"subst\">$&#123;process.env.COSTOMPATH&#125;</span>/products`</span>;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(process.env.APIPATH, process.env.COSTOMPATH);</span></span><br><span class=\"line\">        <span class=\"comment\">//api申請的路經</span></span><br><span class=\"line\">        <span class=\"comment\">//所申請的API path</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$http.get(api).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(response.data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然後重開 npm，確認是否抓到<br><img src=\"https://i.imgur.com/fEYr4jg.png\"></p>\n<hr>\n<h2 id=\"引用-Bootstrap-套件，並客製化樣式\"><a href=\"#引用-Bootstrap-套件，並客製化樣式\" class=\"headerlink\" title=\"引用 Bootstrap 套件，並客製化樣式\"></a>引用 Bootstrap 套件，並客製化樣式</h2><p>接下來要將 Boostrap4 變數修改成自定義的變數，在此之前要先建立新的檔案並且把原本的變數檔存到要修改的資料夾內。<br><a href=\"https://getbootstrap.com/docs/4.1/examples/dashboard/\">Dashboard</a> 模板<br>首先用 npm 載入 Boostrap4<br><code>npm install Boostrap --save</code><br><code>npm install --save-d sass-loader@7.1.0</code><br>會限制版本是為了避免在<code>&lt;style lang=&quot;scss&quot;&gt;</code> 出錯，如下圖，此圖來源為 <a href=\"https://courses.hexschool.com/courses/670031/lectures/11949315\">Simon</a> 同學的範例<br><img src=\"https://i.imgur.com/I9aSB6O.png\"><br>為避免這狀況發生，所以這邊用舊版本示範</p>\n<p>安裝好 npm 後重開，到 node_modules 資料夾下確認是否有載入<br><img src=\"https://i.imgur.com/8tQvaXh.jpg\"></p>\n<p>然後到 app.vue 把預設的 CSS 刪掉，並載入 Bootstrap4</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang=&#x27;scss&#x27;&gt;</span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&#x27;~bootstrap/scss/bootstrap&#x27;</span>;</span><br><span class=\"line\">//~bootstrap  是指載入 Boostrap 這個模組</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這時候有可能是 sass-loader 沒裝，每個 cli 出來的 webpaack 版本可能會不一樣，如果沒跳錯就沒問題，如果有跳錯(如下圖)<br><img src=\"https://i.imgur.com/2W5i1QM.png\"><br>那就裝一下 <code>npm i node-sass sass-loader --save</code> ，再重開就好了<br><img src=\"https://i.imgur.com/syXb01r.png\"></p>\n<hr>\n<h4 id=\"建立資料夾，新增檔案，拉連結\"><a href=\"#建立資料夾，新增檔案，拉連結\" class=\"headerlink\" title=\"建立資料夾，新增檔案，拉連結\"></a>建立資料夾，新增檔案，拉連結</h4><p>接下來要客製化一些變數，這時候就需要將 Boostrap4 獨立出來，方便自定義跟管理</p>\n<p>先在 assets 資料夾下新增 helper 資料夾，在到 node_modules / Bootstrap4 / SCSS / variables.scss，<br>把 variables 另存新檔到 helper 資料夾內，這樣透過修改 variables 就可以將原本 Boostrap4 樣式進行客製化了</p>\n<p>然後建立一個新的 all.scss 檔案，並載入方法跟要客製化的檔案</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &#x27;~bootstrap/scss/functions&#x27;; //載入 Boostrap4 套用變數的方法</span><br><span class=\"line\">@import &#x27;./helper/variables&#x27;; //有了上面的方法，才可以啟用自己定義的變數</span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&#x27;~bootstrap/scss/bootstrap&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>再把 app.vue 的 style 改成下圖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &#x27;./assets/all&#x27;; //不要複製造抄，請確認 all.scss 放在哪</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/mRuU4rM.png\"></p>\n<p>到目前為止，畫面仍會是正常的(如下圖)<br><img src=\"https://i.imgur.com/CAGku7A.png\"></p>\n<p>接下來要加入 Bootstrap4 樣式來看看會有什麼變化，這邊用 button 套件示範<br>把套件放在 app.vue 的 router-view 下方(如下圖)<br><img src=\"https://i.imgur.com/Ca4wTqY.png\"></p>\n<p>這時候畫面就會顯示按鈕<br><img src=\"https://i.imgur.com/m1Di9ip.png\"></p>\n<p>現在要改樣式，先到 variables.scss 找要改的變數，這邊用 ‘indigo’ 示範<br><img src=\"https://i.imgur.com/WvcRvjk.png\"></p>\n<p>找到主題色做更改，這時候 primary 的顏色會被改掉<br><img src=\"https://i.imgur.com/3ulBYv5.png\"></p>\n<h4 id=\"scoped\"><a href=\"#scoped\" class=\"headerlink\" title=\"scoped\"></a>scoped</h4><p>scoped 是將樣式限制在某個組件內，以下示範<br>先到 helloworld 組件看一下樣式會發現預設樣式是 scoped，代表這些樣式只會在 helloworld 組件內執行，<br>不會影響到外層 app 組件</p>\n<p>我們先看 router 配置圖<br><img src=\"https://i.imgur.com/hqibtwT.png\"><br>可以看到 helloworld (內層)組件是被 app (外層)組件包住的，雖然是包住的但內外層是互不影響的，<br>因為有 scoped 的關係，讓它們之間天人永隔!</p>\n<p>我們先看看 helloworld (內層) style 裡的 a 連結，預設是 #42b983 淡綠色，<br><img src=\"https://i.imgur.com/stg9J3z.png\"></p>\n<p>然後我們在 app (外層)組件內加入 a 連結<br><img src=\"https://i.imgur.com/BnAwgQe.png\"></p>\n<p>刷新畫面後，可以看到 a 連結的顏色會是紫色不是淡綠色，<br>這是因為在 helloworld 有下 scoped ，所以樣式不會互相影響<br><img src=\"https://i.imgur.com/9Sv6Su8.png\"></p>\n<p>如果文字看不懂，就看這張吧<br><img src=\"https://i.imgur.com/izM4poR.png\"></p>\n<p>如果不想讓各組件之間的樣式互相影響的話就必須在 style 加上 scoped !</p>\n<hr>\n<h2 id=\"資料來源-Vue-出電商網站\"><a href=\"#資料來源-Vue-出電商網站\" class=\"headerlink\" title=\"資料來源: Vue 出電商網站\"></a><a href=\"https://courses.hexschool.com/courses/670031/lectures/11949315\">資料來源: Vue 出電商網站</a></h2>"},{"title":"Vue - 避免顯示陣列內重複的值","date":"2021-03-20T16:00:00.000Z","_content":"\n在寫個人專案的過程中遇到一些問題，順便記錄一下。\n\n要做的需求是 sidebar 顯示電影類型。\n\n<!--more-->\n\n## 進入頁面獲取資料\n\n在進入頁面的時候我們必須發送請求跟後端索取資料，後端接受到前端的請求後會進行邏輯判斷再回傳 `response` 。\n\n要獲取資料就要用 `AJAX` 的方式，我選用 `Axios` 來獲取。\n再將後端回傳的資料賦予到 `products` 變數裡面。\n\n`this` 是指向這個 `vue 實體`。\n\n```javascript\ndata() {\n    return {\n      products: [],\n      categories: [],\n    }\n},\n\nmethods: {\n    getProducts: function () {\n      const api = 'url'\n      Vue.axios.get(api).then(response => {\n        // console.log(response)\n        this.products = response.data\n        this.getCategories()\n      })\n    }\n},\nmounted() {\nthis.getProducts()\n},\n```\n\n用 `console.log` 看一下回傳的資料。\n![](https://i.imgur.com/nnrCX4J.png)\n\n## 製作 sidebar 類型選單\n\n因為同類型的電影不只一個，會重複很多個，所以要把重複的過濾掉。\n\n思考方向:\n\n1. 第一次先用 `map` 將所有電影類型全部找出來放到新的陣列裡面。\n2. 第二次用 `filter` 將重複的電影過濾掉。\n\n下圖是 `response.data` 陣列內回傳的資料，我們要索取陣列內每筆物件的 `product_type` 屬性。\n![](https://i.imgur.com/aop2BX3.png)\n\n因為非同步的關係，必須等到後端回傳 `response` 的時候再執行。所以要在打完 `api` 回傳 `response` 後，加上 `getProducts()` 這個函式，這樣才可以同步。\n\n首先我把 `this.products` 所有資料用 `map` 函式塞選一遍， `map` 條件為將資料內的 `product_type` 屬性塞選出來放到新的陣列裡面。\n新的陣列我用 `categories` 命名。\n\n```javascript\n getCategories: function () {\n      let categories = this.products.map(element => {\n      // console.log(element.product_type)\n        return element.product_type\n      })\n    },\n```\n\n用 `console.log()` 看 `element.product_type` ， 如下圖\n( 資料是從 TMDB 用爬蟲爬得，所以會有簡體字 )\n![](https://i.imgur.com/OsobCQC.png)\n\n`map` 會產生新的陣列，新陣列內的資料有重複的電影類型，為了不要讓重複的電影類型顯示出來，我用 `filter` 方法，條件判斷是用 `indexOf` 。\n\nindexOf : `比較 array 裡面是否有元素 === 你要找的東西`。\nindexOf 的用法可以參考這篇[文章](https://ithelp.ithome.com.tw/articles/10227363)\n\n```javascript\ngetCategories: function () {\n  let categories = this.products.map(element => {\n    return element.product_type\n  })\n\n  this.categories = categories.filter(\n    (item, index) => categories.indexOf(item) === index\n  )\n  console.log(this.categories)\n},\n```\n\n塞選完會呈現下圖\n![](https://i.imgur.com/MXX7XeQ.png)\n\n重複的電影類型就不見了\n\n接下來把類型放到陣列裡面，再用 v-for 的方式渲染出來，如下圖\n![](https://i.imgur.com/J6kSJ0i.png)\n\n這樣就完成了!!!\n\n## 參考資料\n\n[JS 找出元素索引值的陣列 Array 方法 indexOf()](https://ithelp.ithome.com.tw/articles/10227363)\n","source":"_posts/2021/避免顯示陣列內重複的值.md","raw":"---\ntitle: Vue - 避免顯示陣列內重複的值\ndate: 2021/03/21\ntags:\n  - Vue\ncategories:\n  - Vue\n---\n\n在寫個人專案的過程中遇到一些問題，順便記錄一下。\n\n要做的需求是 sidebar 顯示電影類型。\n\n<!--more-->\n\n## 進入頁面獲取資料\n\n在進入頁面的時候我們必須發送請求跟後端索取資料，後端接受到前端的請求後會進行邏輯判斷再回傳 `response` 。\n\n要獲取資料就要用 `AJAX` 的方式，我選用 `Axios` 來獲取。\n再將後端回傳的資料賦予到 `products` 變數裡面。\n\n`this` 是指向這個 `vue 實體`。\n\n```javascript\ndata() {\n    return {\n      products: [],\n      categories: [],\n    }\n},\n\nmethods: {\n    getProducts: function () {\n      const api = 'url'\n      Vue.axios.get(api).then(response => {\n        // console.log(response)\n        this.products = response.data\n        this.getCategories()\n      })\n    }\n},\nmounted() {\nthis.getProducts()\n},\n```\n\n用 `console.log` 看一下回傳的資料。\n![](https://i.imgur.com/nnrCX4J.png)\n\n## 製作 sidebar 類型選單\n\n因為同類型的電影不只一個，會重複很多個，所以要把重複的過濾掉。\n\n思考方向:\n\n1. 第一次先用 `map` 將所有電影類型全部找出來放到新的陣列裡面。\n2. 第二次用 `filter` 將重複的電影過濾掉。\n\n下圖是 `response.data` 陣列內回傳的資料，我們要索取陣列內每筆物件的 `product_type` 屬性。\n![](https://i.imgur.com/aop2BX3.png)\n\n因為非同步的關係，必須等到後端回傳 `response` 的時候再執行。所以要在打完 `api` 回傳 `response` 後，加上 `getProducts()` 這個函式，這樣才可以同步。\n\n首先我把 `this.products` 所有資料用 `map` 函式塞選一遍， `map` 條件為將資料內的 `product_type` 屬性塞選出來放到新的陣列裡面。\n新的陣列我用 `categories` 命名。\n\n```javascript\n getCategories: function () {\n      let categories = this.products.map(element => {\n      // console.log(element.product_type)\n        return element.product_type\n      })\n    },\n```\n\n用 `console.log()` 看 `element.product_type` ， 如下圖\n( 資料是從 TMDB 用爬蟲爬得，所以會有簡體字 )\n![](https://i.imgur.com/OsobCQC.png)\n\n`map` 會產生新的陣列，新陣列內的資料有重複的電影類型，為了不要讓重複的電影類型顯示出來，我用 `filter` 方法，條件判斷是用 `indexOf` 。\n\nindexOf : `比較 array 裡面是否有元素 === 你要找的東西`。\nindexOf 的用法可以參考這篇[文章](https://ithelp.ithome.com.tw/articles/10227363)\n\n```javascript\ngetCategories: function () {\n  let categories = this.products.map(element => {\n    return element.product_type\n  })\n\n  this.categories = categories.filter(\n    (item, index) => categories.indexOf(item) === index\n  )\n  console.log(this.categories)\n},\n```\n\n塞選完會呈現下圖\n![](https://i.imgur.com/MXX7XeQ.png)\n\n重複的電影類型就不見了\n\n接下來把類型放到陣列裡面，再用 v-for 的方式渲染出來，如下圖\n![](https://i.imgur.com/J6kSJ0i.png)\n\n這樣就完成了!!!\n\n## 參考資料\n\n[JS 找出元素索引值的陣列 Array 方法 indexOf()](https://ithelp.ithome.com.tw/articles/10227363)\n","slug":"避免顯示陣列內重複的值","published":1,"updated":"2021-03-22T09:42:19.879Z","_id":"ckmk4t4gh0000cctrab9idupa","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>在寫個人專案的過程中遇到一些問題，順便記錄一下。</p>\n<p>要做的需求是 sidebar 顯示電影類型。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"進入頁面獲取資料\"><a href=\"#進入頁面獲取資料\" class=\"headerlink\" title=\"進入頁面獲取資料\"></a>進入頁面獲取資料</h2><p>在進入頁面的時候我們必須發送請求跟後端索取資料，後端接受到前端的請求後會進行邏輯判斷再回傳 <code>response</code> 。</p>\n<p>要獲取資料就要用 <code>AJAX</code> 的方式，我選用 <code>Axios</code> 來獲取。<br>再將後端回傳的資料賦予到 <code>products</code> 變數裡面。</p>\n<p><code>this</code> 是指向這個 <code>vue 實體</code>。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">      products: [],</span><br><span class=\"line\">      categories: [],</span><br><span class=\"line\">    }</span><br><span class=\"line\">},</span><br><span class=\"line\"></span><br><span class=\"line\">methods: {</span><br><span class=\"line\">    getProducts: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> api = <span class=\"hljs-string\">'url'</span></span><br><span class=\"line\">      Vue.axios.get(api).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"hljs-comment\">// console.log(response)</span></span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.products = response.data</span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.getCategories()</span><br><span class=\"line\">      })</span><br><span class=\"line\">    }</span><br><span class=\"line\">},</span><br><span class=\"line\">mounted() {</span><br><span class=\"line\"><span class=\"hljs-built_in\">this</span>.getProducts()</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用 <code>console.log</code> 看一下回傳的資料。<br><img src=\"https://i.imgur.com/nnrCX4J.png\"></p>\n<h2 id=\"製作-sidebar-類型選單\"><a href=\"#製作-sidebar-類型選單\" class=\"headerlink\" title=\"製作 sidebar 類型選單\"></a>製作 sidebar 類型選單</h2><p>因為同類型的電影不只一個，會重複很多個，所以要把重複的過濾掉。</p>\n<p>思考方向:</p>\n<ol>\n<li>第一次先用 <code>map</code> 將所有電影類型全部找出來放到新的陣列裡面。</li>\n<li>第二次用 <code>filter</code> 將重複的電影過濾掉。</li>\n</ol>\n<p>下圖是 <code>response.data</code> 陣列內回傳的資料，我們要索取陣列內每筆物件的 <code>product_type</code> 屬性。<br><img src=\"https://i.imgur.com/aop2BX3.png\"></p>\n<p>因為非同步的關係，必須等到後端回傳 <code>response</code> 的時候再執行。所以要在打完 <code>api</code> 回傳 <code>response</code> 後，加上 <code>getProducts()</code> 這個函式，這樣才可以同步。</p>\n<p>首先我把 <code>this.products</code> 所有資料用 <code>map</code> 函式塞選一遍， <code>map</code> 條件為將資料內的 <code>product_type</code> 屬性塞選出來放到新的陣列裡面。<br>新的陣列我用 <code>categories</code> 命名。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategories: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">     <span class=\"hljs-keyword\">let</span> categories = <span class=\"hljs-built_in\">this</span>.products.map(<span class=\"hljs-function\"><span class=\"hljs-params\">element</span> =&gt;</span> {</span><br><span class=\"line\">     <span class=\"hljs-comment\">// console.log(element.product_type)</span></span><br><span class=\"line\">       <span class=\"hljs-keyword\">return</span> element.product_type</span><br><span class=\"line\">     })</span><br><span class=\"line\">   },</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用 <code>console.log()</code> 看 <code>element.product_type</code> ， 如下圖<br>( 資料是從 TMDB 用爬蟲爬得，所以會有簡體字 )<br><img src=\"https://i.imgur.com/OsobCQC.png\"></p>\n<p><code>map</code> 會產生新的陣列，新陣列內的資料有重複的電影類型，為了不要讓重複的電影類型顯示出來，我用 <code>filter</code> 方法，條件判斷是用 <code>indexOf</code> 。</p>\n<p>indexOf : <code>比較 array 裡面是否有元素 === 你要找的東西</code>。<br>indexOf 的用法可以參考這篇<a href=\"https://ithelp.ithome.com.tw/articles/10227363\">文章</a></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategories: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> categories = <span class=\"hljs-built_in\">this</span>.products.map(<span class=\"hljs-function\"><span class=\"hljs-params\">element</span> =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> element.product_type</span><br><span class=\"line\">  })</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.categories = categories.filter(</span><br><span class=\"line\">    (item, index) =&gt; categories.indexOf(item) === index</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.categories)</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>塞選完會呈現下圖<br><img src=\"https://i.imgur.com/MXX7XeQ.png\"></p>\n<p>重複的電影類型就不見了</p>\n<p>接下來把類型放到陣列裡面，再用 v-for 的方式渲染出來，如下圖<br><img src=\"https://i.imgur.com/J6kSJ0i.png\"></p>\n<p>這樣就完成了!!!</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://ithelp.ithome.com.tw/articles/10227363\">JS 找出元素索引值的陣列 Array 方法 indexOf()</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"Vue","path":"tags/Vue/"}],"excerpt":"<html><head></head><body><p>在寫個人專案的過程中遇到一些問題，順便記錄一下。</p>\n<p>要做的需求是 sidebar 顯示電影類型。</p></body></html>","more":"<h2 id=\"進入頁面獲取資料\"><a href=\"#進入頁面獲取資料\" class=\"headerlink\" title=\"進入頁面獲取資料\"></a>進入頁面獲取資料</h2><p>在進入頁面的時候我們必須發送請求跟後端索取資料，後端接受到前端的請求後會進行邏輯判斷再回傳 <code>response</code> 。</p>\n<p>要獲取資料就要用 <code>AJAX</code> 的方式，我選用 <code>Axios</code> 來獲取。<br>再將後端回傳的資料賦予到 <code>products</code> 變數裡面。</p>\n<p><code>this</code> 是指向這個 <code>vue 實體</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      products: [],</span><br><span class=\"line\">      categories: [],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    getProducts: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> api = <span class=\"string\">&#x27;url&#x27;</span></span><br><span class=\"line\">      Vue.axios.get(api).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(response)</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.products = response.data</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getCategories()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.getProducts()</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>用 <code>console.log</code> 看一下回傳的資料。<br><img src=\"https://i.imgur.com/nnrCX4J.png\"></p>\n<h2 id=\"製作-sidebar-類型選單\"><a href=\"#製作-sidebar-類型選單\" class=\"headerlink\" title=\"製作 sidebar 類型選單\"></a>製作 sidebar 類型選單</h2><p>因為同類型的電影不只一個，會重複很多個，所以要把重複的過濾掉。</p>\n<p>思考方向:</p>\n<ol>\n<li>第一次先用 <code>map</code> 將所有電影類型全部找出來放到新的陣列裡面。</li>\n<li>第二次用 <code>filter</code> 將重複的電影過濾掉。</li>\n</ol>\n<p>下圖是 <code>response.data</code> 陣列內回傳的資料，我們要索取陣列內每筆物件的 <code>product_type</code> 屬性。<br><img src=\"https://i.imgur.com/aop2BX3.png\"></p>\n<p>因為非同步的關係，必須等到後端回傳 <code>response</code> 的時候再執行。所以要在打完 <code>api</code> 回傳 <code>response</code> 後，加上 <code>getProducts()</code> 這個函式，這樣才可以同步。</p>\n<p>首先我把 <code>this.products</code> 所有資料用 <code>map</code> 函式塞選一遍， <code>map</code> 條件為將資料內的 <code>product_type</code> 屬性塞選出來放到新的陣列裡面。<br>新的陣列我用 <code>categories</code> 命名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategories: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> categories = <span class=\"built_in\">this</span>.products.map(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// console.log(element.product_type)</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> element.product_type</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>用 <code>console.log()</code> 看 <code>element.product_type</code> ， 如下圖<br>( 資料是從 TMDB 用爬蟲爬得，所以會有簡體字 )<br><img src=\"https://i.imgur.com/OsobCQC.png\"></p>\n<p><code>map</code> 會產生新的陣列，新陣列內的資料有重複的電影類型，為了不要讓重複的電影類型顯示出來，我用 <code>filter</code> 方法，條件判斷是用 <code>indexOf</code> 。</p>\n<p>indexOf : <code>比較 array 裡面是否有元素 === 你要找的東西</code>。<br>indexOf 的用法可以參考這篇<a href=\"https://ithelp.ithome.com.tw/articles/10227363\">文章</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategories: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> categories = <span class=\"built_in\">this</span>.products.map(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element.product_type</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.categories = categories.filter(</span><br><span class=\"line\">    (item, index) =&gt; categories.indexOf(item) === index</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.categories)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>塞選完會呈現下圖<br><img src=\"https://i.imgur.com/MXX7XeQ.png\"></p>\n<p>重複的電影類型就不見了</p>\n<p>接下來把類型放到陣列裡面，再用 v-for 的方式渲染出來，如下圖<br><img src=\"https://i.imgur.com/J6kSJ0i.png\"></p>\n<p>這樣就完成了!!!</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://ithelp.ithome.com.tw/articles/10227363\">JS 找出元素索引值的陣列 Array 方法 indexOf()</a></p>"},{"title":"Vue - 顯示類型的數量 ( count )","date":"2021-03-21T16:00:00.000Z","_content":"\n需求: Sidebar 要顯示電影類型的數量，如下圖\n![](https://i.imgur.com/DMbdFHI.png)\n\n<!--more-->\n\n進入網頁時前端會發送請求就是打 api ，那後端收到請求後會回傳 `response` ，如下圖。\n![](https://i.imgur.com/nnrCX4J.png)\n\n再把 `response` 裡面的 `data` 裡面的資料賦予到 `this.products` 裡面。\n\n因為 AJAX 非同步的關係，為了確保執行程式時式有拿到資料的，所以會在打完 `api` 後同時執行 `getCategories()` 這個函式。\n\n```javascript\ndata() {\n    return {\n      products: [],\n      categoryWithCount: {},\n      categories: [],\n    }\n},\nmethods: {\n    getProducts: function () {\n      const api = `url`\n      Vue.axios.get(api).then(response => {\n        console.log(response.data)\n        this.products = response.data\n        this.getCategoryWithCount()\n      })\n    },\n},\n\nmounted() {\nthis.getProducts()\n},\n```\n\n經過 [專案筆記 Vue 避免顯示陣列內重複的值](https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/) 的解釋，已經把電影的類型賦予到 `category` 陣列上，現在要用 `category` 陣列內的值，判斷相同的類型有幾個。\n\n思考方向:\n先抓取 `category` 陣列內的值，把這個 `category` 值跟 `products` 的值做比對。\n( `products` 是打完 api 回傳的資料，資料被賦予到 `products` 陣列內 )\n\n`category` : 陣列是已經被過濾的電影類型，所以不會有重複的值 ( 請參考 [專案筆記 Vue 避免顯示陣列內重複的值](https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/) )。\n`products` : 是後端回傳 response 後沒經過處裡的資料。\n\n首先，在 `for of` 迴圈<font color=#FF0000>外</font>用 console.log() 看一下 categories 陣列內的值。\n\n```javascript\ngetCategoryWithCount: function () {\n  console.log(this.categories) //迴圈外面\n  for (const category of this.categories) {\n    console.log(category) //迴圈裡面\n  }\n},\n```\n\n會是一個<font color=#FF0000>陣列</font>，如下圖\n![](https://i.imgur.com/bCcvRz4.png)\n\n在 `for of` 迴圈<font color=#FF0000>內</font>讀取陣列內的每個值，會從陣列中<font color=#FF0000>個別取出</font>，如下圖\n![](https://i.imgur.com/Q3CnBXx.png)\n\n透過迴圈已經將值個別取出，再把這些個別的值跟 `products` 陣列內的值做比對。\n\n用 `forEach` 迴圈讀取 `this.products` 所有值。`forEach` 第一個參數 `element` 會指向代進去的所有值。\n\n```javascript\ngetCategoryWithCount: function () {\n  for (const category of this.categories) {\n    this.products.forEach(element => {\n       console.log(element)\n    })\n  }\n},\n```\n\n如果不知道 `element` ，用 `console.log()` 看一下就知道了，如下圖\n![](https://i.imgur.com/ZHEx3Mf.png)\n`element` 會指向 `products` 陣列內每一筆的物件。\n\n然後在最外層宣告一個空物件，每跑一次迴圈相同的電影類型就會 +1。\n在 `for` 迴圈裡面加入 `if` 判斷式，有相同電影類型的話那電影類型的數量就會 +1 ，當電影類型的型別判斷是 `undefined` 的話就會被歸 0，當迴圈跑完後再把 `count_hash` 物件賦予到 `categoryWithCount` 變數上\n\n```javascript\ngetCategoryWithCount: function () {\n  let count_hash = {}\n  for (const category of this.categories) {\n    this.products.forEach(element => {\n      if (element.product_type === category) {\n        if (typeof count_hash[category] === 'undefined') {\n          count_hash[category] = 0\n        }\n        count_hash[category] = count_hash[category] + 1\n      }\n    })\n  }\n  this.categoryWithCount = count_hash\n  console.log(this.categoryWithCount)\n},\n```\n\n在把跑完迴圈後的 `count_hash` 物件賦予到 `categoryWithCount` 上。\n用 `console.log` 看一下 `categoryWithCount` 變數，如下圖\n![](https://i.imgur.com/dt6yy9z.png)\n\n這樣就把所有電影類型的數量計算完成了，接下來把這些數量代到 sidebar 裡面\n\n下圖為組件的模板，我要把數量放到 `span` 裡面。\n![](https://i.imgur.com/wKPpueD.png)\n\n思考方向是執行 `function` 把值代入。\n\n```javascript\ngetCount: function (item) {\n  // console.log(item)\n  // console.log(this.categoryWithCount[item])\n  return this.categoryWithCount[item]\n},\n```\n\n用 `console.log()` 看一下 `item` ，如下圖\n![](https://i.imgur.com/02gaLWh.png)\n\n用 `console.log()` 看一下 `this.categoryWithCount[item]`，如下圖\n![](https://i.imgur.com/IBEapga.png)\n\n把 `categoryWithCount` 物件裡面的數量 `return` 出來放到 `span` 標籤裡面，這樣就可以顯示該電影類型的數量了。\n![](https://i.imgur.com/VkxeERK.png)\n","source":"_posts/2021/顯示類型的數量.md","raw":"---\ntitle: Vue - 顯示類型的數量 ( count )\ndate: 2021/03/22\ntags:\n  - Vue\ncategories:\n  - Vue\n---\n\n需求: Sidebar 要顯示電影類型的數量，如下圖\n![](https://i.imgur.com/DMbdFHI.png)\n\n<!--more-->\n\n進入網頁時前端會發送請求就是打 api ，那後端收到請求後會回傳 `response` ，如下圖。\n![](https://i.imgur.com/nnrCX4J.png)\n\n再把 `response` 裡面的 `data` 裡面的資料賦予到 `this.products` 裡面。\n\n因為 AJAX 非同步的關係，為了確保執行程式時式有拿到資料的，所以會在打完 `api` 後同時執行 `getCategories()` 這個函式。\n\n```javascript\ndata() {\n    return {\n      products: [],\n      categoryWithCount: {},\n      categories: [],\n    }\n},\nmethods: {\n    getProducts: function () {\n      const api = `url`\n      Vue.axios.get(api).then(response => {\n        console.log(response.data)\n        this.products = response.data\n        this.getCategoryWithCount()\n      })\n    },\n},\n\nmounted() {\nthis.getProducts()\n},\n```\n\n經過 [專案筆記 Vue 避免顯示陣列內重複的值](https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/) 的解釋，已經把電影的類型賦予到 `category` 陣列上，現在要用 `category` 陣列內的值，判斷相同的類型有幾個。\n\n思考方向:\n先抓取 `category` 陣列內的值，把這個 `category` 值跟 `products` 的值做比對。\n( `products` 是打完 api 回傳的資料，資料被賦予到 `products` 陣列內 )\n\n`category` : 陣列是已經被過濾的電影類型，所以不會有重複的值 ( 請參考 [專案筆記 Vue 避免顯示陣列內重複的值](https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/) )。\n`products` : 是後端回傳 response 後沒經過處裡的資料。\n\n首先，在 `for of` 迴圈<font color=#FF0000>外</font>用 console.log() 看一下 categories 陣列內的值。\n\n```javascript\ngetCategoryWithCount: function () {\n  console.log(this.categories) //迴圈外面\n  for (const category of this.categories) {\n    console.log(category) //迴圈裡面\n  }\n},\n```\n\n會是一個<font color=#FF0000>陣列</font>，如下圖\n![](https://i.imgur.com/bCcvRz4.png)\n\n在 `for of` 迴圈<font color=#FF0000>內</font>讀取陣列內的每個值，會從陣列中<font color=#FF0000>個別取出</font>，如下圖\n![](https://i.imgur.com/Q3CnBXx.png)\n\n透過迴圈已經將值個別取出，再把這些個別的值跟 `products` 陣列內的值做比對。\n\n用 `forEach` 迴圈讀取 `this.products` 所有值。`forEach` 第一個參數 `element` 會指向代進去的所有值。\n\n```javascript\ngetCategoryWithCount: function () {\n  for (const category of this.categories) {\n    this.products.forEach(element => {\n       console.log(element)\n    })\n  }\n},\n```\n\n如果不知道 `element` ，用 `console.log()` 看一下就知道了，如下圖\n![](https://i.imgur.com/ZHEx3Mf.png)\n`element` 會指向 `products` 陣列內每一筆的物件。\n\n然後在最外層宣告一個空物件，每跑一次迴圈相同的電影類型就會 +1。\n在 `for` 迴圈裡面加入 `if` 判斷式，有相同電影類型的話那電影類型的數量就會 +1 ，當電影類型的型別判斷是 `undefined` 的話就會被歸 0，當迴圈跑完後再把 `count_hash` 物件賦予到 `categoryWithCount` 變數上\n\n```javascript\ngetCategoryWithCount: function () {\n  let count_hash = {}\n  for (const category of this.categories) {\n    this.products.forEach(element => {\n      if (element.product_type === category) {\n        if (typeof count_hash[category] === 'undefined') {\n          count_hash[category] = 0\n        }\n        count_hash[category] = count_hash[category] + 1\n      }\n    })\n  }\n  this.categoryWithCount = count_hash\n  console.log(this.categoryWithCount)\n},\n```\n\n在把跑完迴圈後的 `count_hash` 物件賦予到 `categoryWithCount` 上。\n用 `console.log` 看一下 `categoryWithCount` 變數，如下圖\n![](https://i.imgur.com/dt6yy9z.png)\n\n這樣就把所有電影類型的數量計算完成了，接下來把這些數量代到 sidebar 裡面\n\n下圖為組件的模板，我要把數量放到 `span` 裡面。\n![](https://i.imgur.com/wKPpueD.png)\n\n思考方向是執行 `function` 把值代入。\n\n```javascript\ngetCount: function (item) {\n  // console.log(item)\n  // console.log(this.categoryWithCount[item])\n  return this.categoryWithCount[item]\n},\n```\n\n用 `console.log()` 看一下 `item` ，如下圖\n![](https://i.imgur.com/02gaLWh.png)\n\n用 `console.log()` 看一下 `this.categoryWithCount[item]`，如下圖\n![](https://i.imgur.com/IBEapga.png)\n\n把 `categoryWithCount` 物件裡面的數量 `return` 出來放到 `span` 標籤裡面，這樣就可以顯示該電影類型的數量了。\n![](https://i.imgur.com/VkxeERK.png)\n","slug":"顯示類型的數量","published":1,"updated":"2021-03-22T09:31:00.692Z","_id":"ckmk4t4gj0001cctr3nhyeh1e","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>需求: Sidebar 要顯示電影類型的數量，如下圖<br><img src=\"https://i.imgur.com/DMbdFHI.png\"></p>\n<a id=\"more\"></a>\n\n<p>進入網頁時前端會發送請求就是打 api ，那後端收到請求後會回傳 <code>response</code> ，如下圖。<br><img src=\"https://i.imgur.com/nnrCX4J.png\"></p>\n<p>再把 <code>response</code> 裡面的 <code>data</code> 裡面的資料賦予到 <code>this.products</code> 裡面。</p>\n<p>因為 AJAX 非同步的關係，為了確保執行程式時式有拿到資料的，所以會在打完 <code>api</code> 後同時執行 <code>getCategories()</code> 這個函式。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">      products: [],</span><br><span class=\"line\">      categoryWithCount: {},</span><br><span class=\"line\">      categories: [],</span><br><span class=\"line\">    }</span><br><span class=\"line\">},</span><br><span class=\"line\">methods: {</span><br><span class=\"line\">    getProducts: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> api = <span class=\"hljs-string\">`url`</span></span><br><span class=\"line\">      Vue.axios.get(api).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.log(response.data)</span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.products = response.data</span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.getCategoryWithCount()</span><br><span class=\"line\">      })</span><br><span class=\"line\">    },</span><br><span class=\"line\">},</span><br><span class=\"line\"></span><br><span class=\"line\">mounted() {</span><br><span class=\"line\"><span class=\"hljs-built_in\">this</span>.getProducts()</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>經過 <a href=\"https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/\">專案筆記 Vue 避免顯示陣列內重複的值</a> 的解釋，已經把電影的類型賦予到 <code>category</code> 陣列上，現在要用 <code>category</code> 陣列內的值，判斷相同的類型有幾個。</p>\n<p>思考方向:<br>先抓取 <code>category</code> 陣列內的值，把這個 <code>category</code> 值跟 <code>products</code> 的值做比對。<br>( <code>products</code> 是打完 api 回傳的資料，資料被賦予到 <code>products</code> 陣列內 )</p>\n<p><code>category</code> : 陣列是已經被過濾的電影類型，所以不會有重複的值 ( 請參考 <a href=\"https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/\">專案筆記 Vue 避免顯示陣列內重複的值</a> )。<br><code>products</code> : 是後端回傳 response 後沒經過處裡的資料。</p>\n<p>首先，在 <code>for of</code> 迴圈<font color=\"#FF0000\">外</font>用 console.log() 看一下 categories 陣列內的值。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategoryWithCount: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.categories) <span class=\"hljs-comment\">//迴圈外面</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> category <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">this</span>.categories) {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(category) <span class=\"hljs-comment\">//迴圈裡面</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>會是一個<font color=\"#FF0000\">陣列</font>，如下圖<br><img src=\"https://i.imgur.com/bCcvRz4.png\"></p>\n<p>在 <code>for of</code> 迴圈<font color=\"#FF0000\">內</font>讀取陣列內的每個值，會從陣列中<font color=\"#FF0000\">個別取出</font>，如下圖<br><img src=\"https://i.imgur.com/Q3CnBXx.png\"></p>\n<p>透過迴圈已經將值個別取出，再把這些個別的值跟 <code>products</code> 陣列內的值做比對。</p>\n<p>用 <code>forEach</code> 迴圈讀取 <code>this.products</code> 所有值。<code>forEach</code> 第一個參數 <code>element</code> 會指向代進去的所有值。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategoryWithCount: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> category <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">this</span>.categories) {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.products.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">element</span> =&gt;</span> {</span><br><span class=\"line\">       <span class=\"hljs-built_in\">console</span>.log(element)</span><br><span class=\"line\">    })</span><br><span class=\"line\">  }</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果不知道 <code>element</code> ，用 <code>console.log()</code> 看一下就知道了，如下圖<br><img src=\"https://i.imgur.com/ZHEx3Mf.png\"><br><code>element</code> 會指向 <code>products</code> 陣列內每一筆的物件。</p>\n<p>然後在最外層宣告一個空物件，每跑一次迴圈相同的電影類型就會 +1。<br>在 <code>for</code> 迴圈裡面加入 <code>if</code> 判斷式，有相同電影類型的話那電影類型的數量就會 +1 ，當電影類型的型別判斷是 <code>undefined</code> 的話就會被歸 0，當迴圈跑完後再把 <code>count_hash</code> 物件賦予到 <code>categoryWithCount</code> 變數上</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategoryWithCount: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> count_hash = {}</span><br><span class=\"line\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> category <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">this</span>.categories) {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.products.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">element</span> =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (element.product_type === category) {</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> count_hash[category] === <span class=\"hljs-string\">'undefined'</span>) {</span><br><span class=\"line\">          count_hash[category] = <span class=\"hljs-number\">0</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">        count_hash[category] = count_hash[category] + <span class=\"hljs-number\">1</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    })</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.categoryWithCount = count_hash</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.categoryWithCount)</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在把跑完迴圈後的 <code>count_hash</code> 物件賦予到 <code>categoryWithCount</code> 上。<br>用 <code>console.log</code> 看一下 <code>categoryWithCount</code> 變數，如下圖<br><img src=\"https://i.imgur.com/dt6yy9z.png\"></p>\n<p>這樣就把所有電影類型的數量計算完成了，接下來把這些數量代到 sidebar 裡面</p>\n<p>下圖為組件的模板，我要把數量放到 <code>span</code> 裡面。<br><img src=\"https://i.imgur.com/wKPpueD.png\"></p>\n<p>思考方向是執行 <code>function</code> 把值代入。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCount: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(item)</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(this.categoryWithCount[item])</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.categoryWithCount[item]</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用 <code>console.log()</code> 看一下 <code>item</code> ，如下圖<br><img src=\"https://i.imgur.com/02gaLWh.png\"></p>\n<p>用 <code>console.log()</code> 看一下 <code>this.categoryWithCount[item]</code>，如下圖<br><img src=\"https://i.imgur.com/IBEapga.png\"></p>\n<p>把 <code>categoryWithCount</code> 物件裡面的數量 <code>return</code> 出來放到 <code>span</code> 標籤裡面，這樣就可以顯示該電影類型的數量了。<br><img src=\"https://i.imgur.com/VkxeERK.png\"></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"Vue","path":"tags/Vue/"}],"excerpt":"<html><head></head><body><p>需求: Sidebar 要顯示電影類型的數量，如下圖<br><img src=\"https://i.imgur.com/DMbdFHI.png\"></p></body></html>","more":"<p>進入網頁時前端會發送請求就是打 api ，那後端收到請求後會回傳 <code>response</code> ，如下圖。<br><img src=\"https://i.imgur.com/nnrCX4J.png\"></p>\n<p>再把 <code>response</code> 裡面的 <code>data</code> 裡面的資料賦予到 <code>this.products</code> 裡面。</p>\n<p>因為 AJAX 非同步的關係，為了確保執行程式時式有拿到資料的，所以會在打完 <code>api</code> 後同時執行 <code>getCategories()</code> 這個函式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      products: [],</span><br><span class=\"line\">      categoryWithCount: &#123;&#125;,</span><br><span class=\"line\">      categories: [],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    getProducts: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> api = <span class=\"string\">`url`</span></span><br><span class=\"line\">      Vue.axios.get(api).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(response.data)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.products = response.data</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getCategoryWithCount()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.getProducts()</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>經過 <a href=\"https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/\">專案筆記 Vue 避免顯示陣列內重複的值</a> 的解釋，已經把電影的類型賦予到 <code>category</code> 陣列上，現在要用 <code>category</code> 陣列內的值，判斷相同的類型有幾個。</p>\n<p>思考方向:<br>先抓取 <code>category</code> 陣列內的值，把這個 <code>category</code> 值跟 <code>products</code> 的值做比對。<br>( <code>products</code> 是打完 api 回傳的資料，資料被賦予到 <code>products</code> 陣列內 )</p>\n<p><code>category</code> : 陣列是已經被過濾的電影類型，所以不會有重複的值 ( 請參考 <a href=\"https://pktseng.github.io/2021/03/21/%E9%81%BF%E5%85%8D%E9%A1%AF%E7%A4%BA%E9%99%A3%E5%88%97%E5%85%A7%E9%87%8D%E8%A4%87%E7%9A%84%E5%80%BC/\">專案筆記 Vue 避免顯示陣列內重複的值</a> )。<br><code>products</code> : 是後端回傳 response 後沒經過處裡的資料。</p>\n<p>首先，在 <code>for of</code> 迴圈<font color=#FF0000>外</font>用 console.log() 看一下 categories 陣列內的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategoryWithCount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.categories) <span class=\"comment\">//迴圈外面</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> category <span class=\"keyword\">of</span> <span class=\"built_in\">this</span>.categories) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(category) <span class=\"comment\">//迴圈裡面</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>會是一個<font color=#FF0000>陣列</font>，如下圖<br><img src=\"https://i.imgur.com/bCcvRz4.png\"></p>\n<p>在 <code>for of</code> 迴圈<font color=#FF0000>內</font>讀取陣列內的每個值，會從陣列中<font color=#FF0000>個別取出</font>，如下圖<br><img src=\"https://i.imgur.com/Q3CnBXx.png\"></p>\n<p>透過迴圈已經將值個別取出，再把這些個別的值跟 <code>products</code> 陣列內的值做比對。</p>\n<p>用 <code>forEach</code> 迴圈讀取 <code>this.products</code> 所有值。<code>forEach</code> 第一個參數 <code>element</code> 會指向代進去的所有值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategoryWithCount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> category <span class=\"keyword\">of</span> <span class=\"built_in\">this</span>.categories) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.products.forEach(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(element)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>如果不知道 <code>element</code> ，用 <code>console.log()</code> 看一下就知道了，如下圖<br><img src=\"https://i.imgur.com/ZHEx3Mf.png\"><br><code>element</code> 會指向 <code>products</code> 陣列內每一筆的物件。</p>\n<p>然後在最外層宣告一個空物件，每跑一次迴圈相同的電影類型就會 +1。<br>在 <code>for</code> 迴圈裡面加入 <code>if</code> 判斷式，有相同電影類型的話那電影類型的數量就會 +1 ，當電影類型的型別判斷是 <code>undefined</code> 的話就會被歸 0，當迴圈跑完後再把 <code>count_hash</code> 物件賦予到 <code>categoryWithCount</code> 變數上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCategoryWithCount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count_hash = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> category <span class=\"keyword\">of</span> <span class=\"built_in\">this</span>.categories) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.products.forEach(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (element.product_type === category) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> count_hash[category] === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">          count_hash[category] = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count_hash[category] = count_hash[category] + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.categoryWithCount = count_hash</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.categoryWithCount)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>在把跑完迴圈後的 <code>count_hash</code> 物件賦予到 <code>categoryWithCount</code> 上。<br>用 <code>console.log</code> 看一下 <code>categoryWithCount</code> 變數，如下圖<br><img src=\"https://i.imgur.com/dt6yy9z.png\"></p>\n<p>這樣就把所有電影類型的數量計算完成了，接下來把這些數量代到 sidebar 裡面</p>\n<p>下圖為組件的模板，我要把數量放到 <code>span</code> 裡面。<br><img src=\"https://i.imgur.com/wKPpueD.png\"></p>\n<p>思考方向是執行 <code>function</code> 把值代入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getCount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(item)</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(this.categoryWithCount[item])</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.categoryWithCount[item]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>用 <code>console.log()</code> 看一下 <code>item</code> ，如下圖<br><img src=\"https://i.imgur.com/02gaLWh.png\"></p>\n<p>用 <code>console.log()</code> 看一下 <code>this.categoryWithCount[item]</code>，如下圖<br><img src=\"https://i.imgur.com/IBEapga.png\"></p>\n<p>把 <code>categoryWithCount</code> 物件裡面的數量 <code>return</code> 出來放到 <code>span</code> 標籤裡面，這樣就可以顯示該電影類型的數量了。<br><img src=\"https://i.imgur.com/VkxeERK.png\"></p>"},{"title":"JavaScript - this 在 具名函式 & 箭頭函式下的差異。","date":"2021-03-23T16:00:00.000Z","_content":"\n以下示範 function & arrow function 的差異。\n\n```javascript\n//具名函釋\nfunction test1() {\n  console.log(this.name)\n}\n\n// 箭頭函式\nlet test2 = () => console.log(this.name)\n\nwindow.name = '外層'\n\nconst obj = {\n  name: 'ken',\n}\n\n// 具名函示會看命名變數作用域下的 this\ntest1() // \"外層\"\ntest1.call(obj) // \"ken\"\n\n// 箭頭函式永遠指向 window\ntest2() // \"外層\"\ntest2.call(obj) // \"外層\"\n```\n\n如果想改變函示內的 this 值可以用 call 方法，但從結果來看，這對箭頭函式來說是無效的。\n\n總結:\ntest1 具名函示的 this 會指向<font color=#FF0000>跟函示同層作用域下</font>命名變數的 this 值。\ntest2 箭頭函示的 this 會指向<font color=#FF0000>聲明時</font>所在作用域下的 this 值。\n\n[codePen](https://codepen.io/gleofgja/pen/jOyPdrL?editors=1012)\n\n## 參考資料\n\n[尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11](https://www.bilibili.com/video/BV1uK411H7on?p=9)\n","source":"_posts/2021/this.md","raw":"---\ntitle: JavaScript - this 在 具名函式 & 箭頭函式下的差異。\ndate: 2021/03/24\ntags:\n  - JavaScrip\n  - this\ncategories:\n  - JavaScrip\n  - this\n---\n\n以下示範 function & arrow function 的差異。\n\n```javascript\n//具名函釋\nfunction test1() {\n  console.log(this.name)\n}\n\n// 箭頭函式\nlet test2 = () => console.log(this.name)\n\nwindow.name = '外層'\n\nconst obj = {\n  name: 'ken',\n}\n\n// 具名函示會看命名變數作用域下的 this\ntest1() // \"外層\"\ntest1.call(obj) // \"ken\"\n\n// 箭頭函式永遠指向 window\ntest2() // \"外層\"\ntest2.call(obj) // \"外層\"\n```\n\n如果想改變函示內的 this 值可以用 call 方法，但從結果來看，這對箭頭函式來說是無效的。\n\n總結:\ntest1 具名函示的 this 會指向<font color=#FF0000>跟函示同層作用域下</font>命名變數的 this 值。\ntest2 箭頭函示的 this 會指向<font color=#FF0000>聲明時</font>所在作用域下的 this 值。\n\n[codePen](https://codepen.io/gleofgja/pen/jOyPdrL?editors=1012)\n\n## 參考資料\n\n[尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11](https://www.bilibili.com/video/BV1uK411H7on?p=9)\n","slug":"this","published":1,"updated":"2021-03-26T06:01:55.420Z","_id":"ckmoii5wi000000trhchm0mxa","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>以下示範 function &amp; arrow function 的差異。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//具名函釋</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test1</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 箭頭函式</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> test2 = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">window</span>.name = <span class=\"hljs-string\">'外層'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> obj = {</span><br><span class=\"line\">  name: <span class=\"hljs-string\">'ken'</span>,</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 具名函示會看命名變數作用域下的 this</span></span><br><span class=\"line\">test1() <span class=\"hljs-comment\">// \"外層\"</span></span><br><span class=\"line\">test1.call(obj) <span class=\"hljs-comment\">// \"ken\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 箭頭函式永遠指向 window</span></span><br><span class=\"line\">test2() <span class=\"hljs-comment\">// \"外層\"</span></span><br><span class=\"line\">test2.call(obj) <span class=\"hljs-comment\">// \"外層\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果想改變函示內的 this 值可以用 call 方法，但從結果來看，這對箭頭函式來說是無效的。</p>\n<p>總結:<br>test1 具名函示的 this 會指向<font color=\"#FF0000\">跟函示同層作用域下</font>命名變數的 this 值。<br>test2 箭頭函示的 this 會指向<font color=\"#FF0000\">聲明時</font>所在作用域下的 this 值。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/jOyPdrL?editors=1012\">codePen</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV1uK411H7on?p=9\">尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScrip","path":"categories/JavaScrip/"},{"name":"this","path":"categories/JavaScrip/this/"}],"_tags":[{"name":"this","path":"tags/this/"},{"name":"JavaScrip","path":"tags/JavaScrip/"}],"excerpt":"","more":"<p>以下示範 function &amp; arrow function 的差異。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//具名函釋</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭頭函式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> test2 = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">&#x27;外層&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;ken&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具名函示會看命名變數作用域下的 this</span></span><br><span class=\"line\">test1() <span class=\"comment\">// &quot;外層&quot;</span></span><br><span class=\"line\">test1.call(obj) <span class=\"comment\">// &quot;ken&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭頭函式永遠指向 window</span></span><br><span class=\"line\">test2() <span class=\"comment\">// &quot;外層&quot;</span></span><br><span class=\"line\">test2.call(obj) <span class=\"comment\">// &quot;外層&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果想改變函示內的 this 值可以用 call 方法，但從結果來看，這對箭頭函式來說是無效的。</p>\n<p>總結:<br>test1 具名函示的 this 會指向<font color=#FF0000>跟函示同層作用域下</font>命名變數的 this 值。<br>test2 箭頭函示的 this 會指向<font color=#FF0000>聲明時</font>所在作用域下的 this 值。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/jOyPdrL?editors=1012\">codePen</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV1uK411H7on?p=9\">尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11</a></p>\n"},{"title":"JavaScript - 箭頭函式實作","date":"2021-03-24T16:00:00.000Z","_content":"\n當我點擊藍色區塊時會改變顏色\n\n```html\n<div id=\"app\"></div>\n```\n\n```javascript\n// 綁定 DOM\nlet app = document.querySelector('#app')\n\n// 綁定事件\napp.addEventListener('click', function () {\n  //計時器\n  setTimeout(function () {\n    this.style.background = 'red'\n  }, 2000)\n})\n```\n\n但是這樣的執行結果會顯示 `fail` 。\n![](https://i.imgur.com/3gtriQM.png)\n\n用 `console.log` 看一下，會發現 `this` 是指向 `window` 的。\n![](https://i.imgur.com/teXS5Kp.png)\n\n而 `window` 是沒有 `style` 屬性的，所以會顯示 `undefined。`\n\n要解決這樣的問題就是在計時器外層將 this 命名到一個變數上，然後在計時器內層呼叫。\n\n為甚麼要這麼做?\n\n用 `console.log` 看一下外層的 `this` 。\n\n點擊前\n![](https://i.imgur.com/yJkA2ki.png)\n\n點擊兩秒後\n![](https://i.imgur.com/dRziXuc.png)\n\n會發現在這一層是有 `background style` 屬性的。\n\n所以計時器在執行到 `self` 時會呼叫到外層含有 `style` 的屬性的 `this` ，這樣就可以改變樣式了。\n\n不過有了箭頭函式後，就不需要這麼麻煩了，因為箭頭函式會指向聲明時所在作用域下的 `this` 值。\n\n```javascript\n// 綁定 DOM\nlet app = document.querySelector('#app')\n\n// 綁定事件\napp.addEventListener('click', function () {\n  // 箭頭函式是在這一層作用域下聲明的，所以會拿到這一層的 this 值\n\n  // arrow function 計時器\n  setTimeout(() => {\n    this.style.background = 'red'\n  }, 2000)\n})\n```\n\n[codePen](https://codepen.io/gleofgja/pen/oNBjdPM?editors=1011)\n\n## 參考資料\n\n[尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11](https://www.bilibili.com/video/BV1uK411H7on?p=9)\n","source":"_posts/2021/this的實作.md","raw":"---\ntitle: JavaScript - 箭頭函式實作\ndate: 2021/03/25\ntags:\n  - JavaScrip\n  - this\n  - arrow function\ncategories:\n  - JavaScrip\n  - this\n  - arrow function\n---\n\n當我點擊藍色區塊時會改變顏色\n\n```html\n<div id=\"app\"></div>\n```\n\n```javascript\n// 綁定 DOM\nlet app = document.querySelector('#app')\n\n// 綁定事件\napp.addEventListener('click', function () {\n  //計時器\n  setTimeout(function () {\n    this.style.background = 'red'\n  }, 2000)\n})\n```\n\n但是這樣的執行結果會顯示 `fail` 。\n![](https://i.imgur.com/3gtriQM.png)\n\n用 `console.log` 看一下，會發現 `this` 是指向 `window` 的。\n![](https://i.imgur.com/teXS5Kp.png)\n\n而 `window` 是沒有 `style` 屬性的，所以會顯示 `undefined。`\n\n要解決這樣的問題就是在計時器外層將 this 命名到一個變數上，然後在計時器內層呼叫。\n\n為甚麼要這麼做?\n\n用 `console.log` 看一下外層的 `this` 。\n\n點擊前\n![](https://i.imgur.com/yJkA2ki.png)\n\n點擊兩秒後\n![](https://i.imgur.com/dRziXuc.png)\n\n會發現在這一層是有 `background style` 屬性的。\n\n所以計時器在執行到 `self` 時會呼叫到外層含有 `style` 的屬性的 `this` ，這樣就可以改變樣式了。\n\n不過有了箭頭函式後，就不需要這麼麻煩了，因為箭頭函式會指向聲明時所在作用域下的 `this` 值。\n\n```javascript\n// 綁定 DOM\nlet app = document.querySelector('#app')\n\n// 綁定事件\napp.addEventListener('click', function () {\n  // 箭頭函式是在這一層作用域下聲明的，所以會拿到這一層的 this 值\n\n  // arrow function 計時器\n  setTimeout(() => {\n    this.style.background = 'red'\n  }, 2000)\n})\n```\n\n[codePen](https://codepen.io/gleofgja/pen/oNBjdPM?editors=1011)\n\n## 參考資料\n\n[尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11](https://www.bilibili.com/video/BV1uK411H7on?p=9)\n","slug":"this的實作","published":1,"updated":"2021-03-25T07:31:34.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmok5n0s0000xctr9vn6e5bd","content":"<html><head></head><body><p>當我點擊藍色區塊時會改變顏色</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 綁定 DOM</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#app'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 綁定事件</span></span><br><span class=\"line\">app.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">//計時器</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.style.background = <span class=\"hljs-string\">'red'</span></span><br><span class=\"line\">  }, <span class=\"hljs-number\">2000</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>但是這樣的執行結果會顯示 <code>fail</code> 。<br><img src=\"https://i.imgur.com/3gtriQM.png\"></p>\n<p>用 <code>console.log</code> 看一下，會發現 <code>this</code> 是指向 <code>window</code> 的。<br><img src=\"https://i.imgur.com/teXS5Kp.png\"></p>\n<p>而 <code>window</code> 是沒有 <code>style</code> 屬性的，所以會顯示 <code>undefined。</code></p>\n<p>要解決這樣的問題就是在計時器外層將 this 命名到一個變數上，然後在計時器內層呼叫。</p>\n<p>為甚麼要這麼做?</p>\n<p>用 <code>console.log</code> 看一下外層的 <code>this</code> 。</p>\n<p>點擊前<br><img src=\"https://i.imgur.com/yJkA2ki.png\"></p>\n<p>點擊兩秒後<br><img src=\"https://i.imgur.com/dRziXuc.png\"></p>\n<p>會發現在這一層是有 <code>background style</code> 屬性的。</p>\n<p>所以計時器在執行到 <code>self</code> 時會呼叫到外層含有 <code>style</code> 的屬性的 <code>this</code> ，這樣就可以改變樣式了。</p>\n<p>不過有了箭頭函式後，就不需要這麼麻煩了，因為箭頭函式會指向聲明時所在作用域下的 <code>this</code> 值。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 綁定 DOM</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#app'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 綁定事件</span></span><br><span class=\"line\">app.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 箭頭函式是在這一層作用域下聲明的，所以會拿到這一層的 this 值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// arrow function 計時器</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.style.background = <span class=\"hljs-string\">'red'</span></span><br><span class=\"line\">  }, <span class=\"hljs-number\">2000</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/oNBjdPM?editors=1011\">codePen</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV1uK411H7on?p=9\">尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScrip","path":"categories/JavaScrip/"},{"name":"this","path":"categories/JavaScrip/this/"},{"name":"arrow function","path":"categories/JavaScrip/this/arrow-function/"}],"_tags":[{"name":"this","path":"tags/this/"},{"name":"JavaScrip","path":"tags/JavaScrip/"},{"name":"arrow function","path":"tags/arrow-function/"}],"excerpt":"","more":"<p>當我點擊藍色區塊時會改變顏色</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 綁定 DOM</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 綁定事件</span></span><br><span class=\"line\">app.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//計時器</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.background = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>但是這樣的執行結果會顯示 <code>fail</code> 。<br><img src=\"https://i.imgur.com/3gtriQM.png\"></p>\n<p>用 <code>console.log</code> 看一下，會發現 <code>this</code> 是指向 <code>window</code> 的。<br><img src=\"https://i.imgur.com/teXS5Kp.png\"></p>\n<p>而 <code>window</code> 是沒有 <code>style</code> 屬性的，所以會顯示 <code>undefined。</code></p>\n<p>要解決這樣的問題就是在計時器外層將 this 命名到一個變數上，然後在計時器內層呼叫。</p>\n<p>為甚麼要這麼做?</p>\n<p>用 <code>console.log</code> 看一下外層的 <code>this</code> 。</p>\n<p>點擊前<br><img src=\"https://i.imgur.com/yJkA2ki.png\"></p>\n<p>點擊兩秒後<br><img src=\"https://i.imgur.com/dRziXuc.png\"></p>\n<p>會發現在這一層是有 <code>background style</code> 屬性的。</p>\n<p>所以計時器在執行到 <code>self</code> 時會呼叫到外層含有 <code>style</code> 的屬性的 <code>this</code> ，這樣就可以改變樣式了。</p>\n<p>不過有了箭頭函式後，就不需要這麼麻煩了，因為箭頭函式會指向聲明時所在作用域下的 <code>this</code> 值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 綁定 DOM</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 綁定事件</span></span><br><span class=\"line\">app.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 箭頭函式是在這一層作用域下聲明的，所以會拿到這一層的 this 值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// arrow function 計時器</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.background = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/oNBjdPM?editors=1011\">codePen</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV1uK411H7on?p=9\">尚硅谷 Web 前端 ES6 教程，涵盖 ES6-ES11</a></p>\n"},{"title":"JavaScript 實作 - 滾動顯示文章","date":"2021-01-25T16:00:00.000Z","_content":"\n功能敘述：\n當捲動到頁尾時，會自動讀取更多的文章。\n\n![](https://i.imgur.com/ufC6HbH.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission26)\n[DEMO](https://pktseng.github.io/Web-Side-Project/mission26/index.html)\n\n<!-- more -->\n\n## 模板\n\n主要有兩個: filter bar 跟渲染資料。\n\n```html\n<!-- search bar -->\n<div class=\"filterContainer\">\n  <input type=\"text\" id=\"filter\" class=\"filter\" placeholder=\"Filter posts\" />\n</div>\n\n<!-- 渲染內容 -->\n<div id=\"postsContainer\">\n  <!-- 渲染資料的內容使用 JavaScript 寫出來 -->\n</div>\n\n<!-- 小點 -->\n<div class=\"loader\" id=\"loader\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n```\n\n架構完成圖\n![](https://i.imgur.com/6pZd8BM.png)\n\nCSS 樣式可依照個人喜好來設定。\n\n## JaScript\n\n三大重點:\n\n1. 打 API，拿資料。\n2. 滾輪往下滑載入資料。\n3. 輸入關鍵字找到文章。\n\n### 1. 將 DOM 跟 HTML 綁在一起\n\n1. 輸入文字會需要 filter bar\n2. 在網頁內顯示資料內容\n3. 往下滑時會出現 loading 動畫\n\n```javascript\nconst filter = document.querySelector('#filter')\nconst postContainer = document.querySelector('#postsContainer')\nconst loading = document.querySelector('#loader')\n```\n\n### 2. 打 API 獲取資料\n\nAPI [URL](https://jsonplaceholder.typicode.com/posts?)\n在網址後面加入 `limit` & `page`，可以指定一個頁面下可以顯示多少內容，例如\n`limit = 4` : 顯示 4 個內容\n`page = 1` : 頁數\n\n打 API 方法有三種: AJAX、Axios、Fetch。\n原作使用 `fetch` 是現在比較新穎的技術但還是要注意瀏覽器有沒有支援到。\n使用 `fetch` 打 API ，response 回來的資料要轉 `json` 格式才可以使用。\n轉完後再把資料 `return` 出來給其他函式使用。\n\n```javascript\nlet limit = 4 // 限制一頁顯示多少個\nlet page = 1\n\nasync function getPost() {\n  const res = await fetch(\n    `https://jsonplaceholder.typicode.com/posts?_limit=${limit}&_page=${page}`\n  )\n  const data = await res.json()\n  return data\n}\n```\n\n### 3. 拿到資料後，將資料渲染出來\n\n上面模板 `postsContainer` 內的資料有提到要用 javascript 呈現，現在要將拿到的資料利用 ES6 字串模板的方式呈現出來。\n\n先將拿到的資料賦予到 `posts` 變數裡面，再將這些資料用 `forEach()` 的方式放到字串模板裡面，到這資料還不會呈現出來，必須再把這些資料放到 `postContainer` 大 \"容器\" 裡面，這樣資料就會依照模板的架構跟樣式來呈現。\n\n```javascript\nasync function showPost() {\n  const posts = await getPost()\n  // console.log(posts);\n  posts.forEach((post) => {\n    const postEl = document.createElement('div') //新增 div 標籤\n    postEl.classList.add('post') // div 標籤名為 post\n    postEl.innerHTML = `\n      <div class=\"number\">${post.id}</div>\n      <div class=\"postInfo\">\n        <h2 class=\"postTitle\">${post.title}</h2>\n        <p class=\"postBody\">${post.body}</p>\n      </div>\n    `\n\n    // 將這些 div 輸入到 postContainer 裡面\n    postContainer.appendChild(postEl)\n  })\n}\n\nshowPost() // 執行\n```\n\n### 4. 讓條件觸發，渲染出更多資料\n\n到目前為止資料只會呈現 \"一筆\" 而已，即使滾輪往下拉資料還是不會出現，這也不是我們要的功能，必須在滾輪往下拉的同時在網頁最底部會顯示小點點的動畫跟載入 \"下一筆\" 資料。\n\n> 一筆資料有 4 個內容，就是上面設定的 `let limit = 4`\n\n滾輪滾動是觸發的條件，所以要用監聽 ( `addEventListener` )，視窗到最底部時，會顯示 `loading` 效果，要判斷怎樣算是最底部就用 `scrollTop`、`scrollHeight`、`clientHeight`\n\n以下參考自 MDN\n\n1. scrollTop : 目前是瀏覽器視窗距離元素最頂端的距離。\n   ![](https://i.imgur.com/bNGxeml.png)\n\n2. scrollHeight : 整個元素的總高度。\n   ![](https://i.imgur.com/tDYgWSp.png)\n\n3. clientHeight : 元素內部包含 padding 的高度。\n   ![](https://i.imgur.com/SNz8f01.png)\n\n利用解構的方式抓取三個值，再用這三個值用來判斷是否該載入資料。\n\n```javascript\nwindow.addEventListener('scroll', () => {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement\n  if (scrollTop + clientHeight >= scrollHeight - 5) {\n    showLoading()\n  }\n})\n```\n\n觸發後顯示 loading 效果，效果 1 秒後結束，並在 0.3 秒內載入資料。\n\n```javascript\nfunction showLoading() {\n  loading.classList.add('show') // 顯示小點CSS\n\n  // 移除小點時機\n  setTimeout(() => {\n    loading.classList.remove('show') // 1秒後，移除小點CSS\n\n    // 增加頁面同時，0.3秒內打 API 抓新資料\n    setTimeout(() => {\n      page++\n      showPost()\n    }, 300)\n  }, 1000)\n}\n```\n\n### 5. 輸入關鍵字顯示相關文章\n\n輸入關鍵字是觸發條件，一樣用監聽 ( `addEventListener` )，不過函式實在太大了，可以善用 `callback function`。\n\n將 `post` `div` 裡所有的內容賦予到 `posts` 變數上，再用 `forEach` 讀取裡面的每一筆資料，再用 `indexOf` 判斷式，判斷輸入的值有沒有跟 posts 變數上的相符並依照書入的值顯示相關文字的文章。\n\n```javascript\nfilter.addEventListener('input', filterPost)\n\nfunction filterPost(e) {\n  // console.log(e.target.value);\n  const term = e.target.value.toUpperCase()\n  const posts = document.querySelectorAll('.post')\n\n  posts.forEach((post) => {\n    const title = post.querySelector('.postTitle').innerText.toUpperCase()\n    const body = post.querySelector('.postBody').innerText.toUpperCase()\n\n    if (title.indexOf(term) > -1 || body.indexOf(term) > -1) {\n      post.style.display = 'flex'\n    } else {\n      post.style.display = 'none'\n    }\n  })\n}\n```\n\n## 參考資料\n\n[Element.clientHeight](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/clientHeight)\n[Element.scrollHeight](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollHeight)\n[Element.scrollTop](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollTop)\n[String.prototype.toUpperCase()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview)\n","source":"_posts/2020/Infinite_scroll_blog.md","raw":"---\ntitle: JavaScript 實作 - 滾動顯示文章\ndate: 2021/01/26\ntags:\n  - JavaScript\n  - 作品集\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n功能敘述：\n當捲動到頁尾時，會自動讀取更多的文章。\n\n![](https://i.imgur.com/ufC6HbH.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission26)\n[DEMO](https://pktseng.github.io/Web-Side-Project/mission26/index.html)\n\n<!-- more -->\n\n## 模板\n\n主要有兩個: filter bar 跟渲染資料。\n\n```html\n<!-- search bar -->\n<div class=\"filterContainer\">\n  <input type=\"text\" id=\"filter\" class=\"filter\" placeholder=\"Filter posts\" />\n</div>\n\n<!-- 渲染內容 -->\n<div id=\"postsContainer\">\n  <!-- 渲染資料的內容使用 JavaScript 寫出來 -->\n</div>\n\n<!-- 小點 -->\n<div class=\"loader\" id=\"loader\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n```\n\n架構完成圖\n![](https://i.imgur.com/6pZd8BM.png)\n\nCSS 樣式可依照個人喜好來設定。\n\n## JaScript\n\n三大重點:\n\n1. 打 API，拿資料。\n2. 滾輪往下滑載入資料。\n3. 輸入關鍵字找到文章。\n\n### 1. 將 DOM 跟 HTML 綁在一起\n\n1. 輸入文字會需要 filter bar\n2. 在網頁內顯示資料內容\n3. 往下滑時會出現 loading 動畫\n\n```javascript\nconst filter = document.querySelector('#filter')\nconst postContainer = document.querySelector('#postsContainer')\nconst loading = document.querySelector('#loader')\n```\n\n### 2. 打 API 獲取資料\n\nAPI [URL](https://jsonplaceholder.typicode.com/posts?)\n在網址後面加入 `limit` & `page`，可以指定一個頁面下可以顯示多少內容，例如\n`limit = 4` : 顯示 4 個內容\n`page = 1` : 頁數\n\n打 API 方法有三種: AJAX、Axios、Fetch。\n原作使用 `fetch` 是現在比較新穎的技術但還是要注意瀏覽器有沒有支援到。\n使用 `fetch` 打 API ，response 回來的資料要轉 `json` 格式才可以使用。\n轉完後再把資料 `return` 出來給其他函式使用。\n\n```javascript\nlet limit = 4 // 限制一頁顯示多少個\nlet page = 1\n\nasync function getPost() {\n  const res = await fetch(\n    `https://jsonplaceholder.typicode.com/posts?_limit=${limit}&_page=${page}`\n  )\n  const data = await res.json()\n  return data\n}\n```\n\n### 3. 拿到資料後，將資料渲染出來\n\n上面模板 `postsContainer` 內的資料有提到要用 javascript 呈現，現在要將拿到的資料利用 ES6 字串模板的方式呈現出來。\n\n先將拿到的資料賦予到 `posts` 變數裡面，再將這些資料用 `forEach()` 的方式放到字串模板裡面，到這資料還不會呈現出來，必須再把這些資料放到 `postContainer` 大 \"容器\" 裡面，這樣資料就會依照模板的架構跟樣式來呈現。\n\n```javascript\nasync function showPost() {\n  const posts = await getPost()\n  // console.log(posts);\n  posts.forEach((post) => {\n    const postEl = document.createElement('div') //新增 div 標籤\n    postEl.classList.add('post') // div 標籤名為 post\n    postEl.innerHTML = `\n      <div class=\"number\">${post.id}</div>\n      <div class=\"postInfo\">\n        <h2 class=\"postTitle\">${post.title}</h2>\n        <p class=\"postBody\">${post.body}</p>\n      </div>\n    `\n\n    // 將這些 div 輸入到 postContainer 裡面\n    postContainer.appendChild(postEl)\n  })\n}\n\nshowPost() // 執行\n```\n\n### 4. 讓條件觸發，渲染出更多資料\n\n到目前為止資料只會呈現 \"一筆\" 而已，即使滾輪往下拉資料還是不會出現，這也不是我們要的功能，必須在滾輪往下拉的同時在網頁最底部會顯示小點點的動畫跟載入 \"下一筆\" 資料。\n\n> 一筆資料有 4 個內容，就是上面設定的 `let limit = 4`\n\n滾輪滾動是觸發的條件，所以要用監聽 ( `addEventListener` )，視窗到最底部時，會顯示 `loading` 效果，要判斷怎樣算是最底部就用 `scrollTop`、`scrollHeight`、`clientHeight`\n\n以下參考自 MDN\n\n1. scrollTop : 目前是瀏覽器視窗距離元素最頂端的距離。\n   ![](https://i.imgur.com/bNGxeml.png)\n\n2. scrollHeight : 整個元素的總高度。\n   ![](https://i.imgur.com/tDYgWSp.png)\n\n3. clientHeight : 元素內部包含 padding 的高度。\n   ![](https://i.imgur.com/SNz8f01.png)\n\n利用解構的方式抓取三個值，再用這三個值用來判斷是否該載入資料。\n\n```javascript\nwindow.addEventListener('scroll', () => {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement\n  if (scrollTop + clientHeight >= scrollHeight - 5) {\n    showLoading()\n  }\n})\n```\n\n觸發後顯示 loading 效果，效果 1 秒後結束，並在 0.3 秒內載入資料。\n\n```javascript\nfunction showLoading() {\n  loading.classList.add('show') // 顯示小點CSS\n\n  // 移除小點時機\n  setTimeout(() => {\n    loading.classList.remove('show') // 1秒後，移除小點CSS\n\n    // 增加頁面同時，0.3秒內打 API 抓新資料\n    setTimeout(() => {\n      page++\n      showPost()\n    }, 300)\n  }, 1000)\n}\n```\n\n### 5. 輸入關鍵字顯示相關文章\n\n輸入關鍵字是觸發條件，一樣用監聽 ( `addEventListener` )，不過函式實在太大了，可以善用 `callback function`。\n\n將 `post` `div` 裡所有的內容賦予到 `posts` 變數上，再用 `forEach` 讀取裡面的每一筆資料，再用 `indexOf` 判斷式，判斷輸入的值有沒有跟 posts 變數上的相符並依照書入的值顯示相關文字的文章。\n\n```javascript\nfilter.addEventListener('input', filterPost)\n\nfunction filterPost(e) {\n  // console.log(e.target.value);\n  const term = e.target.value.toUpperCase()\n  const posts = document.querySelectorAll('.post')\n\n  posts.forEach((post) => {\n    const title = post.querySelector('.postTitle').innerText.toUpperCase()\n    const body = post.querySelector('.postBody').innerText.toUpperCase()\n\n    if (title.indexOf(term) > -1 || body.indexOf(term) > -1) {\n      post.style.display = 'flex'\n    } else {\n      post.style.display = 'none'\n    }\n  })\n}\n```\n\n## 參考資料\n\n[Element.clientHeight](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/clientHeight)\n[Element.scrollHeight](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollHeight)\n[Element.scrollTop](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollTop)\n[String.prototype.toUpperCase()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview)\n","slug":"Infinite_scroll_blog","published":1,"updated":"2021-03-26T16:13:10.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9loy0000g0tr5clrc2sj","content":"<html><head></head><body><p>功能敘述：<br>當捲動到頁尾時，會自動讀取更多的文章。</p>\n<p><img src=\"https://i.imgur.com/ufC6HbH.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission26\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission26/index.html\">DEMO</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>主要有兩個: filter bar 跟渲染資料。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- search bar --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"filterContainer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"filter\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"filter\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Filter posts\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- 渲染內容 --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"postsContainer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!-- 渲染資料的內容使用 JavaScript 寫出來 --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- 小點 --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"loader\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"loader\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"circle\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"circle\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"circle\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>架構完成圖<br><img src=\"https://i.imgur.com/6pZd8BM.png\"></p>\n<p>CSS 樣式可依照個人喜好來設定。</p>\n<h2 id=\"JaScript\"><a href=\"#JaScript\" class=\"headerlink\" title=\"JaScript\"></a>JaScript</h2><p>三大重點:</p>\n<ol>\n<li>打 API，拿資料。</li>\n<li>滾輪往下滑載入資料。</li>\n<li>輸入關鍵字找到文章。</li>\n</ol>\n<h3 id=\"1-將-DOM-跟-HTML-綁在一起\"><a href=\"#1-將-DOM-跟-HTML-綁在一起\" class=\"headerlink\" title=\"1. 將 DOM 跟 HTML 綁在一起\"></a>1. 將 DOM 跟 HTML 綁在一起</h3><ol>\n<li>輸入文字會需要 filter bar</li>\n<li>在網頁內顯示資料內容</li>\n<li>往下滑時會出現 loading 動畫</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> filter = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#filter'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> postContainer = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#postsContainer'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> loading = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#loader'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-打-API-獲取資料\"><a href=\"#2-打-API-獲取資料\" class=\"headerlink\" title=\"2. 打 API 獲取資料\"></a>2. 打 API 獲取資料</h3><p>API <a href=\"https://jsonplaceholder.typicode.com/posts\">URL</a><br>在網址後面加入 <code>limit</code> &amp; <code>page</code>，可以指定一個頁面下可以顯示多少內容，例如<br><code>limit = 4</code> : 顯示 4 個內容<br><code>page = 1</code> : 頁數</p>\n<p>打 API 方法有三種: AJAX、Axios、Fetch。<br>原作使用 <code>fetch</code> 是現在比較新穎的技術但還是要注意瀏覽器有沒有支援到。<br>使用 <code>fetch</code> 打 API ，response 回來的資料要轉 <code>json</code> 格式才可以使用。<br>轉完後再把資料 <code>return</code> 出來給其他函式使用。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> limit = <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">// 限制一頁顯示多少個</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> page = <span class=\"hljs-number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPost</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> fetch(</span><br><span class=\"line\">    <span class=\"hljs-string\">`https://jsonplaceholder.typicode.com/posts?_limit=<span class=\"hljs-subst\">${limit}</span>&amp;_page=<span class=\"hljs-subst\">${page}</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> res.json()</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> data</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-拿到資料後，將資料渲染出來\"><a href=\"#3-拿到資料後，將資料渲染出來\" class=\"headerlink\" title=\"3. 拿到資料後，將資料渲染出來\"></a>3. 拿到資料後，將資料渲染出來</h3><p>上面模板 <code>postsContainer</code> 內的資料有提到要用 javascript 呈現，現在要將拿到的資料利用 ES6 字串模板的方式呈現出來。</p>\n<p>先將拿到的資料賦予到 <code>posts</code> 變數裡面，再將這些資料用 <code>forEach()</code> 的方式放到字串模板裡面，到這資料還不會呈現出來，必須再把這些資料放到 <code>postContainer</code> 大 “容器” 裡面，這樣資料就會依照模板的架構跟樣式來呈現。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showPost</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> posts = <span class=\"hljs-keyword\">await</span> getPost()</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(posts);</span></span><br><span class=\"line\">  posts.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> postEl = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>) <span class=\"hljs-comment\">//新增 div 標籤</span></span><br><span class=\"line\">    postEl.classList.add(<span class=\"hljs-string\">'post'</span>) <span class=\"hljs-comment\">// div 標籤名為 post</span></span><br><span class=\"line\">    postEl.innerHTML = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;div class=\"number\"&gt;<span class=\"hljs-subst\">${post.id}</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;div class=\"postInfo\"&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">        &lt;h2 class=\"postTitle\"&gt;<span class=\"hljs-subst\">${post.title}</span>&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">        &lt;p class=\"postBody\"&gt;<span class=\"hljs-subst\">${post.body}</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    `</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 將這些 div 輸入到 postContainer 裡面</span></span><br><span class=\"line\">    postContainer.appendChild(postEl)</span><br><span class=\"line\">  })</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">showPost() <span class=\"hljs-comment\">// 執行</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-讓條件觸發，渲染出更多資料\"><a href=\"#4-讓條件觸發，渲染出更多資料\" class=\"headerlink\" title=\"4. 讓條件觸發，渲染出更多資料\"></a>4. 讓條件觸發，渲染出更多資料</h3><p>到目前為止資料只會呈現 “一筆” 而已，即使滾輪往下拉資料還是不會出現，這也不是我們要的功能，必須在滾輪往下拉的同時在網頁最底部會顯示小點點的動畫跟載入 “下一筆” 資料。</p>\n<blockquote>\n<p>一筆資料有 4 個內容，就是上面設定的 <code>let limit = 4</code></p>\n</blockquote>\n<p>滾輪滾動是觸發的條件，所以要用監聽 ( <code>addEventListener</code> )，視窗到最底部時，會顯示 <code>loading</code> 效果，要判斷怎樣算是最底部就用 <code>scrollTop</code>、<code>scrollHeight</code>、<code>clientHeight</code></p>\n<p>以下參考自 MDN</p>\n<ol>\n<li><p>scrollTop : 目前是瀏覽器視窗距離元素最頂端的距離。<br><img src=\"https://i.imgur.com/bNGxeml.png\"></p>\n</li>\n<li><p>scrollHeight : 整個元素的總高度。<br><img src=\"https://i.imgur.com/tDYgWSp.png\"></p>\n</li>\n<li><p>clientHeight : 元素內部包含 padding 的高度。<br><img src=\"https://i.imgur.com/SNz8f01.png\"></p>\n</li>\n</ol>\n<p>利用解構的方式抓取三個值，再用這三個值用來判斷是否該載入資料。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'scroll'</span>, <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> { scrollTop, scrollHeight, clientHeight } = <span class=\"hljs-built_in\">document</span>.documentElement</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (scrollTop + clientHeight &gt;= scrollHeight - <span class=\"hljs-number\">5</span>) {</span><br><span class=\"line\">    showLoading()</span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>觸發後顯示 loading 效果，效果 1 秒後結束，並在 0.3 秒內載入資料。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showLoading</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  loading.classList.add(<span class=\"hljs-string\">'show'</span>) <span class=\"hljs-comment\">// 顯示小點CSS</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 移除小點時機</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">    loading.classList.remove(<span class=\"hljs-string\">'show'</span>) <span class=\"hljs-comment\">// 1秒後，移除小點CSS</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 增加頁面同時，0.3秒內打 API 抓新資料</span></span><br><span class=\"line\">    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">      page++</span><br><span class=\"line\">      showPost()</span><br><span class=\"line\">    }, <span class=\"hljs-number\">300</span>)</span><br><span class=\"line\">  }, <span class=\"hljs-number\">1000</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"5-輸入關鍵字顯示相關文章\"><a href=\"#5-輸入關鍵字顯示相關文章\" class=\"headerlink\" title=\"5. 輸入關鍵字顯示相關文章\"></a>5. 輸入關鍵字顯示相關文章</h3><p>輸入關鍵字是觸發條件，一樣用監聽 ( <code>addEventListener</code> )，不過函式實在太大了，可以善用 <code>callback function</code>。</p>\n<p>將 <code>post</code> <code>div</code> 裡所有的內容賦予到 <code>posts</code> 變數上，再用 <code>forEach</code> 讀取裡面的每一筆資料，再用 <code>indexOf</code> 判斷式，判斷輸入的值有沒有跟 posts 變數上的相符並依照書入的值顯示相關文字的文章。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter.addEventListener(<span class=\"hljs-string\">'input'</span>, filterPost)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">filterPost</span>(<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(e.target.value);</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> term = e.target.value.toUpperCase()</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> posts = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'.post'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  posts.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> title = post.querySelector(<span class=\"hljs-string\">'.postTitle'</span>).innerText.toUpperCase()</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> body = post.querySelector(<span class=\"hljs-string\">'.postBody'</span>).innerText.toUpperCase()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (title.indexOf(term) &gt; <span class=\"hljs-number\">-1</span> || body.indexOf(term) &gt; <span class=\"hljs-number\">-1</span>) {</span><br><span class=\"line\">      post.style.display = <span class=\"hljs-string\">'flex'</span></span><br><span class=\"line\">    } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">      post.style.display = <span class=\"hljs-string\">'none'</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  })</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/clientHeight\">Element.clientHeight</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollHeight\">Element.scrollHeight</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollTop\">Element.scrollTop</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\">String.prototype.toUpperCase()</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview\">20 Web Projects With Vanilla JavaScript</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"作品集","path":"tags/作品集/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><p>功能敘述：<br>當捲動到頁尾時，會自動讀取更多的文章。</p>\n<p><img src=\"https://i.imgur.com/ufC6HbH.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission26\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission26/index.html\">DEMO</a></p></body></html>","more":"<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>主要有兩個: filter bar 跟渲染資料。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- search bar --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;filterContainer&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;filter&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;filter&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Filter posts&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 渲染內容 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;postsContainer&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 渲染資料的內容使用 JavaScript 寫出來 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 小點 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loader&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;circle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;circle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;circle&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>架構完成圖<br><img src=\"https://i.imgur.com/6pZd8BM.png\"></p>\n<p>CSS 樣式可依照個人喜好來設定。</p>\n<h2 id=\"JaScript\"><a href=\"#JaScript\" class=\"headerlink\" title=\"JaScript\"></a>JaScript</h2><p>三大重點:</p>\n<ol>\n<li>打 API，拿資料。</li>\n<li>滾輪往下滑載入資料。</li>\n<li>輸入關鍵字找到文章。</li>\n</ol>\n<h3 id=\"1-將-DOM-跟-HTML-綁在一起\"><a href=\"#1-將-DOM-跟-HTML-綁在一起\" class=\"headerlink\" title=\"1. 將 DOM 跟 HTML 綁在一起\"></a>1. 將 DOM 跟 HTML 綁在一起</h3><ol>\n<li>輸入文字會需要 filter bar</li>\n<li>在網頁內顯示資料內容</li>\n<li>往下滑時會出現 loading 動畫</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> filter = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#filter&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> postContainer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#postsContainer&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> loading = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#loader&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-打-API-獲取資料\"><a href=\"#2-打-API-獲取資料\" class=\"headerlink\" title=\"2. 打 API 獲取資料\"></a>2. 打 API 獲取資料</h3><p>API <a href=\"https://jsonplaceholder.typicode.com/posts\">URL</a><br>在網址後面加入 <code>limit</code> &amp; <code>page</code>，可以指定一個頁面下可以顯示多少內容，例如<br><code>limit = 4</code> : 顯示 4 個內容<br><code>page = 1</code> : 頁數</p>\n<p>打 API 方法有三種: AJAX、Axios、Fetch。<br>原作使用 <code>fetch</code> 是現在比較新穎的技術但還是要注意瀏覽器有沒有支援到。<br>使用 <code>fetch</code> 打 API ，response 回來的資料要轉 <code>json</code> 格式才可以使用。<br>轉完後再把資料 <code>return</code> 出來給其他函式使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> limit = <span class=\"number\">4</span> <span class=\"comment\">// 限制一頁顯示多少個</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> page = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> fetch(</span><br><span class=\"line\">    <span class=\"string\">`https://jsonplaceholder.typicode.com/posts?_limit=<span class=\"subst\">$&#123;limit&#125;</span>&amp;_page=<span class=\"subst\">$&#123;page&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> res.json()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-拿到資料後，將資料渲染出來\"><a href=\"#3-拿到資料後，將資料渲染出來\" class=\"headerlink\" title=\"3. 拿到資料後，將資料渲染出來\"></a>3. 拿到資料後，將資料渲染出來</h3><p>上面模板 <code>postsContainer</code> 內的資料有提到要用 javascript 呈現，現在要將拿到的資料利用 ES6 字串模板的方式呈現出來。</p>\n<p>先將拿到的資料賦予到 <code>posts</code> 變數裡面，再將這些資料用 <code>forEach()</code> 的方式放到字串模板裡面，到這資料還不會呈現出來，必須再把這些資料放到 <code>postContainer</code> 大 “容器” 裡面，這樣資料就會依照模板的架構跟樣式來呈現。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showPost</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> posts = <span class=\"keyword\">await</span> getPost()</span><br><span class=\"line\">  <span class=\"comment\">// console.log(posts);</span></span><br><span class=\"line\">  posts.forEach(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> postEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;div&#x27;</span>) <span class=\"comment\">//新增 div 標籤</span></span><br><span class=\"line\">    postEl.classList.add(<span class=\"string\">&#x27;post&#x27;</span>) <span class=\"comment\">// div 標籤名為 post</span></span><br><span class=\"line\">    postEl.innerHTML = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div class=&quot;number&quot;&gt;<span class=\"subst\">$&#123;post.id&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div class=&quot;postInfo&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h2 class=&quot;postTitle&quot;&gt;<span class=\"subst\">$&#123;post.title&#125;</span>&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p class=&quot;postBody&quot;&gt;<span class=\"subst\">$&#123;post.body&#125;</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 將這些 div 輸入到 postContainer 裡面</span></span><br><span class=\"line\">    postContainer.appendChild(postEl)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">showPost() <span class=\"comment\">// 執行</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-讓條件觸發，渲染出更多資料\"><a href=\"#4-讓條件觸發，渲染出更多資料\" class=\"headerlink\" title=\"4. 讓條件觸發，渲染出更多資料\"></a>4. 讓條件觸發，渲染出更多資料</h3><p>到目前為止資料只會呈現 “一筆” 而已，即使滾輪往下拉資料還是不會出現，這也不是我們要的功能，必須在滾輪往下拉的同時在網頁最底部會顯示小點點的動畫跟載入 “下一筆” 資料。</p>\n<blockquote>\n<p>一筆資料有 4 個內容，就是上面設定的 <code>let limit = 4</code></p>\n</blockquote>\n<p>滾輪滾動是觸發的條件，所以要用監聽 ( <code>addEventListener</code> )，視窗到最底部時，會顯示 <code>loading</code> 效果，要判斷怎樣算是最底部就用 <code>scrollTop</code>、<code>scrollHeight</code>、<code>clientHeight</code></p>\n<p>以下參考自 MDN</p>\n<ol>\n<li><p>scrollTop : 目前是瀏覽器視窗距離元素最頂端的距離。<br><img src=\"https://i.imgur.com/bNGxeml.png\"></p>\n</li>\n<li><p>scrollHeight : 整個元素的總高度。<br><img src=\"https://i.imgur.com/tDYgWSp.png\"></p>\n</li>\n<li><p>clientHeight : 元素內部包含 padding 的高度。<br><img src=\"https://i.imgur.com/SNz8f01.png\"></p>\n</li>\n</ol>\n<p>利用解構的方式抓取三個值，再用這三個值用來判斷是否該載入資料。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; scrollTop, scrollHeight, clientHeight &#125; = <span class=\"built_in\">document</span>.documentElement</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (scrollTop + clientHeight &gt;= scrollHeight - <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    showLoading()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>觸發後顯示 loading 效果，效果 1 秒後結束，並在 0.3 秒內載入資料。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showLoading</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  loading.classList.add(<span class=\"string\">&#x27;show&#x27;</span>) <span class=\"comment\">// 顯示小點CSS</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 移除小點時機</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    loading.classList.remove(<span class=\"string\">&#x27;show&#x27;</span>) <span class=\"comment\">// 1秒後，移除小點CSS</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 增加頁面同時，0.3秒內打 API 抓新資料</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      page++</span><br><span class=\"line\">      showPost()</span><br><span class=\"line\">    &#125;, <span class=\"number\">300</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-輸入關鍵字顯示相關文章\"><a href=\"#5-輸入關鍵字顯示相關文章\" class=\"headerlink\" title=\"5. 輸入關鍵字顯示相關文章\"></a>5. 輸入關鍵字顯示相關文章</h3><p>輸入關鍵字是觸發條件，一樣用監聽 ( <code>addEventListener</code> )，不過函式實在太大了，可以善用 <code>callback function</code>。</p>\n<p>將 <code>post</code> <code>div</code> 裡所有的內容賦予到 <code>posts</code> 變數上，再用 <code>forEach</code> 讀取裡面的每一筆資料，再用 <code>indexOf</code> 判斷式，判斷輸入的值有沒有跟 posts 變數上的相符並依照書入的值顯示相關文字的文章。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>, filterPost)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterPost</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(e.target.value);</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> term = e.target.value.toUpperCase()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> posts = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.post&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  posts.forEach(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> title = post.querySelector(<span class=\"string\">&#x27;.postTitle&#x27;</span>).innerText.toUpperCase()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = post.querySelector(<span class=\"string\">&#x27;.postBody&#x27;</span>).innerText.toUpperCase()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (title.indexOf(term) &gt; <span class=\"number\">-1</span> || body.indexOf(term) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      post.style.display = <span class=\"string\">&#x27;flex&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      post.style.display = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/clientHeight\">Element.clientHeight</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollHeight\">Element.scrollHeight</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollTop\">Element.scrollTop</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\">String.prototype.toUpperCase()</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview\">20 Web Projects With Vanilla JavaScript</a></p>"},{"title":"JavaScript - 陣列的進階方法","date":"2021-01-18T16:00:00.000Z","_content":"\n## 前言\n\n這幾天在練習寫作品集的時候發現幾個 JavaScrip 蠻常用的陣列語法，所以決定來寫一篇關於這些語法的文章。\n\n<!-- more -->\n\n## Array.prototype.map()\n\n`map(item, index, arry)` : 透過函式處理陣列中每個元素，最後會回傳出一個新的陣列，如果沒有回傳就是 `undefine。`\n\n函式內要傳入三個參數 :\n\n- 第一個參數是要帶入的<font color=#FF0000>每個元素 ( 必填 )</font>。\n- 第二個參數是帶入<font color=#FF0000>值的索引值 ( 選填 )</font>。\n- 第三個參數是帶入的<font color=#FF0000>陣列 ( 選填 )</font>。\n\n### map 進階寫法\n\n```javascript\nlet people = ['ken', 'Bob', 'Marry']\n\nlet result = people.map(function (man) {\n  return 'userName : ' + man\n})\n\nconsole.log(result)\n```\n\n![](https://i.imgur.com/TBgNFBW.png)\n\n但如果把第 4 行註解掉，就會出現下圖，因為沒有回傳任何值。\n![](https://i.imgur.com/q7HrNjw.png)\n\n### Data structure 寫法\n\n```javascript\nlet people = ['ken', 'Bob', 'Marry']\n\nfunction mapA(people) {\n  let result = []\n  for (let i = 0; i < people.length; i++) {\n    // console.log(people[i]) //確認 people[i] 有抓到\n    let str = 'userName : ' + people[i]\n    // console.log(str) //確認 str 有被賦值\n    result.push(str)\n  }\n  return result\n}\n```\n\n輸入 `mapA(people)` 如下圖，結果是一樣的\n![](https://i.imgur.com/CYBcbxX.png)\n\n如果剛接觸 JavaScript 的話還是建議用資料結構相關的寫法，訓練基本功。\n\n[DEMO](https://codepen.io/gleofgja/pen/JjRxZXr)\n\n## Array.prototype.forEach()\n\n`forEach(item, index, arry)` : 會將陣列中每個元素套用到指定的函式裡進行運算。\n\n函式內要傳入三個參數 :\n\n- 第一個參數表示<font color=#FF0000>每個元素的值 ( 必填 )</font>。\n- 第二個參數為該<font color=#FF0000>元素的索引值 ( 選填 )</font>。\n- 第三個參數則表示<font color=#FF0000>原本的陣列 ( 選填 )</font>。\n\n### map & forEach 進階寫法的差異\n\n**`forEach` 跟 `map` 的差別在於 `forEach` 不會回傳出新的值，`map` 會回傳並產生新的陣列**。\n\n```javascript\nlet people = ['ken', 'Bob', 'Marry']\n\n//forEach\nlet forEachResult = people.forEach(function (man) {\n  return 'userName : ' + man\n})\n\n//map\nlet mapResult = people.map(function (man) {\n  return 'userName : ' + man\n})\n```\n\n在 `console.log` 輸入 `forEachResult` 會得到 `undefined` ，在 `mapResult` 會得到 return 的回傳值\n顯示結過如下\n![](https://i.imgur.com/naX3yTS.png)\n\n### forEach & Data structure 兩種寫法\n\n```javascript\n// forEach\nlet forEachResult = people.forEach(function (man) {\n  console.log('userName : ' + man)\n})\n\n// Data structure\nfor (let i = 0; i < people.length; i++) {\n  // console.log(people[i]) //確認 people[i] 有抓到\n  let str = 'userName : ' + people[i]\n  // console.log(str) //確認 str 有被賦值\n  console.log(str)\n}\n```\n\n用 `console.log` 查看，如下圖\n![](https://i.imgur.com/CinKSDr.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/mdrvZwJ?editors=0011)\n\n## Array.prototype.filter()\n\n`filter()` : 將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件，就回傳並產生新的陣列。\n\n### filter 進階寫法\n\n給一個新的陣列，塞選出大於 5 的數，如下\n\n```javascript\nlet a = [1, 2, 3, 4, 5, 6, 7, 8]\n\nlet result = a.filter(function (e) {\n  return e > 5\n})\n```\n\n在 `console.log` 輸入 `result` ，顯示下圖\n![](https://i.imgur.com/Gx8nF0M.png)\n\n---\n\n或是限制區間，要記得括號，不然 `return` 會認不出來\n\n```javascript\nlet result = a.filter(function (e) {\n  return e > 2 && e < 6\n})\n```\n\n會顯示下圖\n![](https://i.imgur.com/xbOszxf.png)\n\n[DEMO ](https://codepen.io/gleofgja/pen/BaLMgvR?editors=0011)\n\n## Array.prototype.find()\n\n`find()` : 將陣列中的「每一個」元素帶入指定的函式內做判斷，只會傳<font color=#FF0000>第一個</font>符合判斷條件的元素，如果沒有元素符合則會回傳 undefined。\n\n- `filter` 是回傳<font color=#FF0000>所有</font>符合條件的元素，但 `find` 只會傳<font color=#FF0000>第一個</font>符合判斷條件的元素\n\n```javascript\nlet a = [1, 2, 3, 3, 3, 3]\n\n// find\nlet resultFind = a.find(function (e) {\n  return e > 2\n})\n\n// filter\nlet resultFilter = a.filter(function (e) {\n  return e > 2\n})\n```\n\n分別在 `console.log` 輸入兩個參數，顯示如下圖\n![](https://i.imgur.com/WwPkaYN.png)\n\n可以看到，輸入 :\n`resultFind` 只會回傳符合條件的**第一個**，\n`resultFilter` 會回傳**所有**符合條件的值同時產生新的陣列。\n\n[DEMO](https://codepen.io/gleofgja/pen/MWjLNWz?editors=0011)\n\n---\n\n## 參考資料\n\n[JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html#array_filter)\n[JS 語言基礎 06 陣列的進階方法](https://codeshiba.teachable.com/courses/1230968/lectures/29642888)\n","source":"_posts/2020/JS進階.md","raw":"---\ntitle: JavaScript - 陣列的進階方法\ndate: 2021/01/19\ntags:\n  - JavaScript\n  - map\n  - filter\n  - forEach\n  - find\ncategories:\n  - JavaScript\n---\n\n## 前言\n\n這幾天在練習寫作品集的時候發現幾個 JavaScrip 蠻常用的陣列語法，所以決定來寫一篇關於這些語法的文章。\n\n<!-- more -->\n\n## Array.prototype.map()\n\n`map(item, index, arry)` : 透過函式處理陣列中每個元素，最後會回傳出一個新的陣列，如果沒有回傳就是 `undefine。`\n\n函式內要傳入三個參數 :\n\n- 第一個參數是要帶入的<font color=#FF0000>每個元素 ( 必填 )</font>。\n- 第二個參數是帶入<font color=#FF0000>值的索引值 ( 選填 )</font>。\n- 第三個參數是帶入的<font color=#FF0000>陣列 ( 選填 )</font>。\n\n### map 進階寫法\n\n```javascript\nlet people = ['ken', 'Bob', 'Marry']\n\nlet result = people.map(function (man) {\n  return 'userName : ' + man\n})\n\nconsole.log(result)\n```\n\n![](https://i.imgur.com/TBgNFBW.png)\n\n但如果把第 4 行註解掉，就會出現下圖，因為沒有回傳任何值。\n![](https://i.imgur.com/q7HrNjw.png)\n\n### Data structure 寫法\n\n```javascript\nlet people = ['ken', 'Bob', 'Marry']\n\nfunction mapA(people) {\n  let result = []\n  for (let i = 0; i < people.length; i++) {\n    // console.log(people[i]) //確認 people[i] 有抓到\n    let str = 'userName : ' + people[i]\n    // console.log(str) //確認 str 有被賦值\n    result.push(str)\n  }\n  return result\n}\n```\n\n輸入 `mapA(people)` 如下圖，結果是一樣的\n![](https://i.imgur.com/CYBcbxX.png)\n\n如果剛接觸 JavaScript 的話還是建議用資料結構相關的寫法，訓練基本功。\n\n[DEMO](https://codepen.io/gleofgja/pen/JjRxZXr)\n\n## Array.prototype.forEach()\n\n`forEach(item, index, arry)` : 會將陣列中每個元素套用到指定的函式裡進行運算。\n\n函式內要傳入三個參數 :\n\n- 第一個參數表示<font color=#FF0000>每個元素的值 ( 必填 )</font>。\n- 第二個參數為該<font color=#FF0000>元素的索引值 ( 選填 )</font>。\n- 第三個參數則表示<font color=#FF0000>原本的陣列 ( 選填 )</font>。\n\n### map & forEach 進階寫法的差異\n\n**`forEach` 跟 `map` 的差別在於 `forEach` 不會回傳出新的值，`map` 會回傳並產生新的陣列**。\n\n```javascript\nlet people = ['ken', 'Bob', 'Marry']\n\n//forEach\nlet forEachResult = people.forEach(function (man) {\n  return 'userName : ' + man\n})\n\n//map\nlet mapResult = people.map(function (man) {\n  return 'userName : ' + man\n})\n```\n\n在 `console.log` 輸入 `forEachResult` 會得到 `undefined` ，在 `mapResult` 會得到 return 的回傳值\n顯示結過如下\n![](https://i.imgur.com/naX3yTS.png)\n\n### forEach & Data structure 兩種寫法\n\n```javascript\n// forEach\nlet forEachResult = people.forEach(function (man) {\n  console.log('userName : ' + man)\n})\n\n// Data structure\nfor (let i = 0; i < people.length; i++) {\n  // console.log(people[i]) //確認 people[i] 有抓到\n  let str = 'userName : ' + people[i]\n  // console.log(str) //確認 str 有被賦值\n  console.log(str)\n}\n```\n\n用 `console.log` 查看，如下圖\n![](https://i.imgur.com/CinKSDr.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/mdrvZwJ?editors=0011)\n\n## Array.prototype.filter()\n\n`filter()` : 將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件，就回傳並產生新的陣列。\n\n### filter 進階寫法\n\n給一個新的陣列，塞選出大於 5 的數，如下\n\n```javascript\nlet a = [1, 2, 3, 4, 5, 6, 7, 8]\n\nlet result = a.filter(function (e) {\n  return e > 5\n})\n```\n\n在 `console.log` 輸入 `result` ，顯示下圖\n![](https://i.imgur.com/Gx8nF0M.png)\n\n---\n\n或是限制區間，要記得括號，不然 `return` 會認不出來\n\n```javascript\nlet result = a.filter(function (e) {\n  return e > 2 && e < 6\n})\n```\n\n會顯示下圖\n![](https://i.imgur.com/xbOszxf.png)\n\n[DEMO ](https://codepen.io/gleofgja/pen/BaLMgvR?editors=0011)\n\n## Array.prototype.find()\n\n`find()` : 將陣列中的「每一個」元素帶入指定的函式內做判斷，只會傳<font color=#FF0000>第一個</font>符合判斷條件的元素，如果沒有元素符合則會回傳 undefined。\n\n- `filter` 是回傳<font color=#FF0000>所有</font>符合條件的元素，但 `find` 只會傳<font color=#FF0000>第一個</font>符合判斷條件的元素\n\n```javascript\nlet a = [1, 2, 3, 3, 3, 3]\n\n// find\nlet resultFind = a.find(function (e) {\n  return e > 2\n})\n\n// filter\nlet resultFilter = a.filter(function (e) {\n  return e > 2\n})\n```\n\n分別在 `console.log` 輸入兩個參數，顯示如下圖\n![](https://i.imgur.com/WwPkaYN.png)\n\n可以看到，輸入 :\n`resultFind` 只會回傳符合條件的**第一個**，\n`resultFilter` 會回傳**所有**符合條件的值同時產生新的陣列。\n\n[DEMO](https://codepen.io/gleofgja/pen/MWjLNWz?editors=0011)\n\n---\n\n## 參考資料\n\n[JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html#array_filter)\n[JS 語言基礎 06 陣列的進階方法](https://codeshiba.teachable.com/courses/1230968/lectures/29642888)\n","slug":"JS進階","published":1,"updated":"2021-03-26T16:13:10.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lp50001g0tr9hrm91b9","content":"<html><head></head><body><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>這幾天在練習寫作品集的時候發現幾個 JavaScrip 蠻常用的陣列語法，所以決定來寫一篇關於這些語法的文章。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h2><p><code>map(item, index, arry)</code> : 透過函式處理陣列中每個元素，最後會回傳出一個新的陣列，如果沒有回傳就是 <code>undefine。</code></p>\n<p>函式內要傳入三個參數 :</p>\n<ul>\n<li>第一個參數是要帶入的<font color=\"#FF0000\">每個元素 ( 必填 )</font>。</li>\n<li>第二個參數是帶入<font color=\"#FF0000\">值的索引值 ( 選填 )</font>。</li>\n<li>第三個參數是帶入的<font color=\"#FF0000\">陣列 ( 選填 )</font>。</li>\n</ul>\n<h3 id=\"map-進階寫法\"><a href=\"#map-進階寫法\" class=\"headerlink\" title=\"map 進階寫法\"></a>map 進階寫法</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> people = [<span class=\"hljs-string\">'ken'</span>, <span class=\"hljs-string\">'Bob'</span>, <span class=\"hljs-string\">'Marry'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> result = people.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">man</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'userName : '</span> + man</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(result)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/TBgNFBW.png\"></p>\n<p>但如果把第 4 行註解掉，就會出現下圖，因為沒有回傳任何值。<br><img src=\"https://i.imgur.com/q7HrNjw.png\"></p>\n<h3 id=\"Data-structure-寫法\"><a href=\"#Data-structure-寫法\" class=\"headerlink\" title=\"Data structure 寫法\"></a>Data structure 寫法</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> people = [<span class=\"hljs-string\">'ken'</span>, <span class=\"hljs-string\">'Bob'</span>, <span class=\"hljs-string\">'Marry'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mapA</span>(<span class=\"hljs-params\">people</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; people.length; i++) {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// console.log(people[i]) //確認 people[i] 有抓到</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">'userName : '</span> + people[i]</span><br><span class=\"line\">    <span class=\"hljs-comment\">// console.log(str) //確認 str 有被賦值</span></span><br><span class=\"line\">    result.push(str)</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> result</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>輸入 <code>mapA(people)</code> 如下圖，結果是一樣的<br><img src=\"https://i.imgur.com/CYBcbxX.png\"></p>\n<p>如果剛接觸 JavaScript 的話還是建議用資料結構相關的寫法，訓練基本功。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/JjRxZXr\">DEMO</a></p>\n<h2 id=\"Array-prototype-forEach\"><a href=\"#Array-prototype-forEach\" class=\"headerlink\" title=\"Array.prototype.forEach()\"></a>Array.prototype.forEach()</h2><p><code>forEach(item, index, arry)</code> : 會將陣列中每個元素套用到指定的函式裡進行運算。</p>\n<p>函式內要傳入三個參數 :</p>\n<ul>\n<li>第一個參數表示<font color=\"#FF0000\">每個元素的值 ( 必填 )</font>。</li>\n<li>第二個參數為該<font color=\"#FF0000\">元素的索引值 ( 選填 )</font>。</li>\n<li>第三個參數則表示<font color=\"#FF0000\">原本的陣列 ( 選填 )</font>。</li>\n</ul>\n<h3 id=\"map-amp-forEach-進階寫法的差異\"><a href=\"#map-amp-forEach-進階寫法的差異\" class=\"headerlink\" title=\"map &amp; forEach 進階寫法的差異\"></a>map &amp; forEach 進階寫法的差異</h3><p><strong><code>forEach</code> 跟 <code>map</code> 的差別在於 <code>forEach</code> 不會回傳出新的值，<code>map</code> 會回傳並產生新的陣列</strong>。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> people = [<span class=\"hljs-string\">'ken'</span>, <span class=\"hljs-string\">'Bob'</span>, <span class=\"hljs-string\">'Marry'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">//forEach</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> forEachResult = people.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">man</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'userName : '</span> + man</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">//map</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> mapResult = people.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">man</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'userName : '</span> + man</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 <code>console.log</code> 輸入 <code>forEachResult</code> 會得到 <code>undefined</code> ，在 <code>mapResult</code> 會得到 return 的回傳值<br>顯示結過如下<br><img src=\"https://i.imgur.com/naX3yTS.png\"></p>\n<h3 id=\"forEach-amp-Data-structure-兩種寫法\"><a href=\"#forEach-amp-Data-structure-兩種寫法\" class=\"headerlink\" title=\"forEach &amp; Data structure 兩種寫法\"></a>forEach &amp; Data structure 兩種寫法</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// forEach</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> forEachResult = people.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">man</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'userName : '</span> + man)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// Data structure</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; people.length; i++) {</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(people[i]) //確認 people[i] 有抓到</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">'userName : '</span> + people[i]</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(str) //確認 str 有被賦值</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(str)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用 <code>console.log</code> 查看，如下圖<br><img src=\"https://i.imgur.com/CinKSDr.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/mdrvZwJ?editors=0011\">DEMO</a></p>\n<h2 id=\"Array-prototype-filter\"><a href=\"#Array-prototype-filter\" class=\"headerlink\" title=\"Array.prototype.filter()\"></a>Array.prototype.filter()</h2><p><code>filter()</code> : 將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件，就回傳並產生新的陣列。</p>\n<h3 id=\"filter-進階寫法\"><a href=\"#filter-進階寫法\" class=\"headerlink\" title=\"filter 進階寫法\"></a>filter 進階寫法</h3><p>給一個新的陣列，塞選出大於 5 的數，如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> result = a.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> e &gt; <span class=\"hljs-number\">5</span></span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 <code>console.log</code> 輸入 <code>result</code> ，顯示下圖<br><img src=\"https://i.imgur.com/Gx8nF0M.png\"></p>\n<hr>\n<p>或是限制區間，要記得括號，不然 <code>return</code> 會認不出來</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> result = a.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> e &gt; <span class=\"hljs-number\">2</span> &amp;&amp; e &lt; <span class=\"hljs-number\">6</span></span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>會顯示下圖<br><img src=\"https://i.imgur.com/xbOszxf.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/BaLMgvR?editors=0011\">DEMO </a></p>\n<h2 id=\"Array-prototype-find\"><a href=\"#Array-prototype-find\" class=\"headerlink\" title=\"Array.prototype.find()\"></a>Array.prototype.find()</h2><p><code>find()</code> : 將陣列中的「每一個」元素帶入指定的函式內做判斷，只會傳<font color=\"#FF0000\">第一個</font>符合判斷條件的元素，如果沒有元素符合則會回傳 undefined。</p>\n<ul>\n<li><code>filter</code> 是回傳<font color=\"#FF0000\">所有</font>符合條件的元素，但 <code>find</code> 只會傳<font color=\"#FF0000\">第一個</font>符合判斷條件的元素</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// find</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> resultFind = a.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> e &gt; <span class=\"hljs-number\">2</span></span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// filter</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> resultFilter = a.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> e &gt; <span class=\"hljs-number\">2</span></span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>分別在 <code>console.log</code> 輸入兩個參數，顯示如下圖<br><img src=\"https://i.imgur.com/WwPkaYN.png\"></p>\n<p>可以看到，輸入 :<br><code>resultFind</code> 只會回傳符合條件的<strong>第一個</strong>，<br><code>resultFilter</code> 會回傳<strong>所有</strong>符合條件的值同時產生新的陣列。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWjLNWz?editors=0011\">DEMO</a></p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.oxxostudio.tw/articles/201908/js-array.html#array_filter\">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href=\"https://codeshiba.teachable.com/courses/1230968/lectures/29642888\">JS 語言基礎 06 陣列的進階方法</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"}],"_tags":[{"name":"map","path":"tags/map/"},{"name":"filter","path":"tags/filter/"},{"name":"forEach","path":"tags/forEach/"},{"name":"find","path":"tags/find/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>這幾天在練習寫作品集的時候發現幾個 JavaScrip 蠻常用的陣列語法，所以決定來寫一篇關於這些語法的文章。</p></body></html>","more":"<h2 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h2><p><code>map(item, index, arry)</code> : 透過函式處理陣列中每個元素，最後會回傳出一個新的陣列，如果沒有回傳就是 <code>undefine。</code></p>\n<p>函式內要傳入三個參數 :</p>\n<ul>\n<li>第一個參數是要帶入的<font color=#FF0000>每個元素 ( 必填 )</font>。</li>\n<li>第二個參數是帶入<font color=#FF0000>值的索引值 ( 選填 )</font>。</li>\n<li>第三個參數是帶入的<font color=#FF0000>陣列 ( 選填 )</font>。</li>\n</ul>\n<h3 id=\"map-進階寫法\"><a href=\"#map-進階寫法\" class=\"headerlink\" title=\"map 進階寫法\"></a>map 進階寫法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> people = [<span class=\"string\">&#x27;ken&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Marry&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = people.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">man</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;userName : &#x27;</span> + man</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/TBgNFBW.png\"></p>\n<p>但如果把第 4 行註解掉，就會出現下圖，因為沒有回傳任何值。<br><img src=\"https://i.imgur.com/q7HrNjw.png\"></p>\n<h3 id=\"Data-structure-寫法\"><a href=\"#Data-structure-寫法\" class=\"headerlink\" title=\"Data structure 寫法\"></a>Data structure 寫法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> people = [<span class=\"string\">&#x27;ken&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Marry&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapA</span>(<span class=\"params\">people</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(people[i]) //確認 people[i] 有抓到</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;userName : &#x27;</span> + people[i]</span><br><span class=\"line\">    <span class=\"comment\">// console.log(str) //確認 str 有被賦值</span></span><br><span class=\"line\">    result.push(str)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>輸入 <code>mapA(people)</code> 如下圖，結果是一樣的<br><img src=\"https://i.imgur.com/CYBcbxX.png\"></p>\n<p>如果剛接觸 JavaScript 的話還是建議用資料結構相關的寫法，訓練基本功。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/JjRxZXr\">DEMO</a></p>\n<h2 id=\"Array-prototype-forEach\"><a href=\"#Array-prototype-forEach\" class=\"headerlink\" title=\"Array.prototype.forEach()\"></a>Array.prototype.forEach()</h2><p><code>forEach(item, index, arry)</code> : 會將陣列中每個元素套用到指定的函式裡進行運算。</p>\n<p>函式內要傳入三個參數 :</p>\n<ul>\n<li>第一個參數表示<font color=#FF0000>每個元素的值 ( 必填 )</font>。</li>\n<li>第二個參數為該<font color=#FF0000>元素的索引值 ( 選填 )</font>。</li>\n<li>第三個參數則表示<font color=#FF0000>原本的陣列 ( 選填 )</font>。</li>\n</ul>\n<h3 id=\"map-amp-forEach-進階寫法的差異\"><a href=\"#map-amp-forEach-進階寫法的差異\" class=\"headerlink\" title=\"map &amp; forEach 進階寫法的差異\"></a>map &amp; forEach 進階寫法的差異</h3><p><strong><code>forEach</code> 跟 <code>map</code> 的差別在於 <code>forEach</code> 不會回傳出新的值，<code>map</code> 會回傳並產生新的陣列</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> people = [<span class=\"string\">&#x27;ken&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Marry&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//forEach</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forEachResult = people.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">man</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;userName : &#x27;</span> + man</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//map</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mapResult = people.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">man</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;userName : &#x27;</span> + man</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>console.log</code> 輸入 <code>forEachResult</code> 會得到 <code>undefined</code> ，在 <code>mapResult</code> 會得到 return 的回傳值<br>顯示結過如下<br><img src=\"https://i.imgur.com/naX3yTS.png\"></p>\n<h3 id=\"forEach-amp-Data-structure-兩種寫法\"><a href=\"#forEach-amp-Data-structure-兩種寫法\" class=\"headerlink\" title=\"forEach &amp; Data structure 兩種寫法\"></a>forEach &amp; Data structure 兩種寫法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// forEach</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forEachResult = people.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">man</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;userName : &#x27;</span> + man)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Data structure</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; people.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(people[i]) //確認 people[i] 有抓到</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;userName : &#x27;</span> + people[i]</span><br><span class=\"line\">  <span class=\"comment\">// console.log(str) //確認 str 有被賦值</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用 <code>console.log</code> 查看，如下圖<br><img src=\"https://i.imgur.com/CinKSDr.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/mdrvZwJ?editors=0011\">DEMO</a></p>\n<h2 id=\"Array-prototype-filter\"><a href=\"#Array-prototype-filter\" class=\"headerlink\" title=\"Array.prototype.filter()\"></a>Array.prototype.filter()</h2><p><code>filter()</code> : 將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件，就回傳並產生新的陣列。</p>\n<h3 id=\"filter-進階寫法\"><a href=\"#filter-進階寫法\" class=\"headerlink\" title=\"filter 進階寫法\"></a>filter 進階寫法</h3><p>給一個新的陣列，塞選出大於 5 的數，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = a.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e &gt; <span class=\"number\">5</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>console.log</code> 輸入 <code>result</code> ，顯示下圖<br><img src=\"https://i.imgur.com/Gx8nF0M.png\"></p>\n<hr>\n<p>或是限制區間，要記得括號，不然 <code>return</code> 會認不出來</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = a.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e &gt; <span class=\"number\">2</span> &amp;&amp; e &lt; <span class=\"number\">6</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>會顯示下圖<br><img src=\"https://i.imgur.com/xbOszxf.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/BaLMgvR?editors=0011\">DEMO </a></p>\n<h2 id=\"Array-prototype-find\"><a href=\"#Array-prototype-find\" class=\"headerlink\" title=\"Array.prototype.find()\"></a>Array.prototype.find()</h2><p><code>find()</code> : 將陣列中的「每一個」元素帶入指定的函式內做判斷，只會傳<font color=#FF0000>第一個</font>符合判斷條件的元素，如果沒有元素符合則會回傳 undefined。</p>\n<ul>\n<li><code>filter</code> 是回傳<font color=#FF0000>所有</font>符合條件的元素，但 <code>find</code> 只會傳<font color=#FF0000>第一個</font>符合判斷條件的元素</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// find</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> resultFind = a.find(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// filter</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> resultFilter = a.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>分別在 <code>console.log</code> 輸入兩個參數，顯示如下圖<br><img src=\"https://i.imgur.com/WwPkaYN.png\"></p>\n<p>可以看到，輸入 :<br><code>resultFind</code> 只會回傳符合條件的<strong>第一個</strong>，<br><code>resultFilter</code> 會回傳<strong>所有</strong>符合條件的值同時產生新的陣列。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWjLNWz?editors=0011\">DEMO</a></p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.oxxostudio.tw/articles/201908/js-array.html#array_filter\">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href=\"https://codeshiba.teachable.com/courses/1230968/lectures/29642888\">JS 語言基礎 06 陣列的進階方法</a></p>"},{"title":"JavaScript - Cookie、LocalStorage、SessionStorage 的差異跟使用","date":"2021-01-17T16:00:00.000Z","_content":"\n## 前言\n\n利用 Javascript 將資料存到瀏覽器裡面，但是因為 `http request` 的關係，瀏覽器並不會知道上一個跟目前的使用者是誰，這時候就需要把使用者的資料帶到後端 sever 上。\n\n例如我在 A 電腦開啟購物網頁選購商品並存取選購的商品資料但是在 B 電腦開啟同樣的網頁但是卻沒有剛才在 A 電腦選購的資料，這是因為資料是存在自己本地的瀏覽器裡面而不是存在後端的 sever 上，如果是存在後台的 sever 上，那不管我使用哪一台點腦，都可以開啟我在 A 電腦上選購的資料。\n\n接下來就要介紹瀏覽器是如何存取資料的。\n\n<!-- more -->\n\n## Cookie\n\n### 介紹\n\nCookie 本身非常小，只有 4k 所以載入速度很快，瀏覽器也會記錄使用者的資料，最多可以記錄 300 多個 Cookie，但一個網站最多只能記錄 20 個左右的 Cookie 。那 Cookie 是透過 `Set-Cookie header response` 給客戶端的瀏覽器，每當我們開啟瀏覽器發出 request 時， sever 端都會自動把該網站 (domain) 的 Cookie 自動載入。\n\n### 用途\n\n通常都會被使用在登入頁面的狀態、購物網站的選購資訊或是追蹤客戶的廣告上。\n\n### 特點\n\n1. 大小只有 4Kb 左右\n2. 紀錄使用者的個資\n3. 每當瀏覽器發出 request 都會自動載入該使用的資料\n4. 將資料存在客戶端\n5. 只能在該網站 (domain) 內開啟\n6. 可以設定關閉瀏覽器後失效的時間\n\n### Set-Cookie header\n\n如果要讓無狀態的 http 知道客戶目前的狀態，就要用 `Set-Cookie` 把使用紀錄存到 Cookie 裡面，這樣下次在別的瀏覽器上向同個網站 (domain) 的 sever 發出 request 的時候，`Request Headers` 就可以透過 sever 查看 Cookie 的內容同時確認目前客戶的狀態。\n\nSet-Cookie 寫法如下:\n\n```javascript\nSet-Cookie: key = value\n```\n\n瀏覽器會依照 `Set-Cookie` 設定的內容建立 `key` 跟 `value`。之後當瀏覽器發出 request 的時候，就會自動載入 `key` 跟 `value`。\n\n### Cookie 屬性\n\n除了 `Set-Cookie` 外，還有其他要知道的屬性。\n\n- `domain` : Cookie 一定要在同個網站 (domain)，下輸入使用者資料，不可能拿 A 網站的 Cookie ，用在 B 網站上。\n- `path` : 只能讀取到指定路徑下的 Cookie，如果要讓整個網站都能讀取到就寫 `path = /` 。\n- `Max-Age` : 設定有效期限，<font color=#FF0000>單位為秒</font>，設定的數字是正值時才有效，負值時為本次 session 有效，寫 0 就是刪除 Cookie。\n- `Expires` : 一樣是設定有效時間，但在 HTTP 1.1 之後已經被 `max-age` 取代。\n- `secure` : 當這個屬性被設為 true 時， Cookie 只能在安全的協議 (https) 中傳送。\n\n### Create a Cookie\n\n在 JavaScript 裡面，一次只能建立一個 Cookie ，語法如下:\n\n```javascript\ndocument.cookie = newCookie\n// newCookie 指的就是 key = value\n```\n\n當一個 cookie 沒有設定失效時間，就是 session cookie ，該 cookie 會在使用者關閉瀏覽器後被自動刪除。\n\n```javascript\n// 設定兩個 cookie 叫 one, two\n// 在瀏覽器關閉後會自動被刪除\ndocument.cookie = 'one=cookieOne'\ndocument.cookie = 'two=cookieTwo'\n\n// 設定一個 age cookie 裡面的值是 22，儲存一分鐘\ndocument.cookie = 'age=22; max-age=60; path=/'\n```\n\n### Read a Cookie\n\n> `document.cookie` 用來讀取 cookie，但讀取出來是一個很長的字串，字串裡面是所有曾經儲存的 cookie，格式是 key=value，用分號 ; 分隔不同的 cookie。來自 [JavaScript Cookie](https://www.fooish.com/javascript/cookie.html)\n\n### Change a Cookie\n\n直接建立新的同名 cookie 覆蓋掉即可。\n\n### Delete a Cookie\n\n設定一個過期的時間即可。\n\n---\n\n## localStorage\n\n### 介紹\n\n1. LocalStorage 是 HTML5 提供給網頁的儲存庫，一樣只能在同個網站 (domain) 上使用，但是他不會跟 Cookie 一樣從 sever 端提取資料，資料只會存在客戶的 local 端，即使把瀏覽器關閉資料還是會存在除非使用了清除的 API，不然資料是不會消失的。\n\n   > 舉個例子 : 我們在逛博客來書店的時候，只要點擊某本書，最下面有個最近瀏覽紀錄就會顯是我剛才選的書籍資訊，即使關掉網頁，剛才所點選的書籍資料也還是會存在。\n\n2. 那 localStorage 要注意的地方是他只接受字串 (string) 型別，所以在寫入的時候 key 跟 value 要記得轉換!!\n\n### 特點\n\n1. 大小 5Mb 左右\n2. 沒有過期時間，除非手動刪除，就算刷新頁面資料還是在\n3. Storage 只會存在客戶端的瀏覽器上\n4. 使用 key、value 的方式給值或取值\n\n### 搭配使用的 API\n\n```javascript\nJSON.parse()\nJSON.string()\n\nsetItem(key, value)\ngetItem(key)\n\nremoveItem(key)\nclear()\n```\n\n### setItem、getItem、clear API 的應用\n\n當我們要資料存到 localStorage 裡面就要用` setItem` 設定 `key` 跟 `value` 值，設定好後就可以用 `getItem` 去抓。\n\n```javascript\n// 型別是字串\nlet str = 'ken'\n// localStorage.setItem('key', value)\n// 設定 setItem\nlocalStorage.setItem('userName', str)\n\n// 取值 getItem\nlocalStorage.getItem(str)\n\nconsole.log(localStorage.getItem('userName'))\n```\n\n![](https://i.imgur.com/vDh5rtD.png)\n\n如過查看發現 localStorage 有其他資訊請先打開 clear() 清掉，再執行一次。(要記得關掉 clear\n\n[DEMO](https://codepen.io/gleofgja/pen/dypaWYm?editors=1011)\n\n接下來加入輸入框，在點擊 `button` 按鈕的時候會跳出輸入框裡面的值，在把值輸入到 localStorage 裡面。\n\n```html\n<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" class=\"name\" />\n  <input type=\"button\" value=\"點擊\" class=\"btn\" />\n</form>\n```\n\n```javascript\nlet btn = document.querySelector('.btn')\n\nfunction saveName() {\n  let str = document.querySelector('.name').value\n  localStorage.setItem('userName', str)\n}\n\nbtn.addEventListener('click', saveName)\n```\n\n到目前為止我還沒輸入任何東西，如下圖\n![](https://i.imgur.com/A1TQ70E.png)\n\n但是當我在輸入框輸入 `ken` ，輸入框的資料就會進入到 localStorage，如下圖\n![](https://i.imgur.com/45Pn0vT.png)\n\n目前只是將資料<font color=#FF0000>輸入</font>，現在要將資料<font color=#FF0000>取出</font>，那要取出就要用 `getItem()` 的 API 。\n\n在 html 多加一行\n\n```html\n<input type=\"button\" value=\"取出\" class=\"btnCall\" />\n```\n\n在 JS 加入 `getItem function` (第 11 行)\n\n```javascript\n// localStorage.clear()\nlet btn = document.querySelector('.btn')\nlet call = document.querySelector('.btnCall')\n\n//setItem\nfunction saveName() {\n  let str = document.querySelector('.name').value\n  localStorage.setItem('userName', str)\n}\n\n//getItem\nfunction callName() {\n  let getStr = localStorage.getItem('userName')\n  alert(getStr)\n}\n\nbtn.addEventListener('click', saveName) //setItem\ncall.addEventListener('click', callName) //getItem\n```\n\n輸入，尚未點擊\n![](https://i.imgur.com/QzZlk4G.png)\n\n點擊後\n![](https://i.imgur.com/e8OBtqs.png)\n\n點取出，跳出 `alert` 視窗\n![](https://i.imgur.com/DG4bIDy.png)\n\n<font color=#FF0000>注意!!</font> 目前都是<font color=#FF0000>字串型別</font>。\n分別在 `saveName`、`callName` 裡面加入 `console.log` 查看，如下圖\n![](https://i.imgur.com/OEqCbVy.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/wvzNdrv?editors=1111)\n\n### JSON.parse、JSON.string API 的應用\n\n`JSON.parse()` 的做用是將 localStorage 的 `key` 跟 `value` 值轉成物件型別，轉換型別後會變成物件或是陣列，這樣在抓取資料的時候就會比較方便，以下來示範為麼要使用 `JSON.parse()`\n\n1. 我先給一個陣列\n2. 在用 `setItem` 設定 `key` & `value` 值\n3. 用 `getItem` 抓取設定好的 `key` 值\n4. 用 `console.log` 查看\n\n```javascript\n// 給個陣列\nlet arrCount = [{ userName: 'ken' }, { age: '22' }, { gender: 'male' }]\n\n// 用 setItem 的把 key 、 value 值設定好\nlocalStorage.setItem('arrCountItem', arrCount)\n\n// 把設定好的值用 getItem 抓取，在賦直到 getArrCount 變數裡面\nlet getArrCount = localStorage.getItem('arrCountItem')\n\nconsole.log(getArrCount)\n\nconsole.log(getArrCount[0].userName)\n```\n\n顯示的結果如下圖\n![](https://i.imgur.com/YMIF3Eh.png)\n\n![](https://i.imgur.com/a7QAo5o.png)\n\n可以看到用 `setItem()` 設定的 `value` 值 localStorage 完全看不懂 ，要讓 localStorage 看得懂 `value` 值就必須是<font color=#FF0000>字串型別</font>!!!\n\n用 `console.log` 看，也確定有抓到但卻顯示未定義，用 `typeof` 看一下型別，如下圖\n![](https://i.imgur.com/NjVZfgH.png)\n\n透過上面這張圖就可以知道用 `getItem()` 抓到的是字串 (string) 型別並非是陣列，因為不管是陣列還是物件只要經過 localStorage 取出來的值都會變成字串 (string) 型別。然後第 16 行又用陣列的方式取值，所以會顯示 undefine 是正常的。\n\n- <font color=#FF0000>懶人包 :\n  進入 localStorage 之前必須要轉成字串型別 (JSON.string)，\n  取值的時候要轉成物件型別 (JSON.parse)</font>。\n\n以下示範正確方法:\n\n1. 將陣列轉成字串型別\n2. 確認抓到的是字串不是物件型別\n3. 用 `setItem` 把 `key` & `value` 值設定到 localStorage 裡面\n4. 再用 `getItem` 把 `key` 轉成物件並賦值到 getArrCount 變數裡面\n5. 再將 getArrCount 轉成物件型別\n\n```javascript\nlet arrCount = [{ userName: 'ken' }, { age: '22' }, { gender: 'male' }]\n\n// 將陣列轉成字串型別\nlet arrCountString = JSON.stringify(arrCount)\n// 確認抓到的是字串不是物件型別\nconsole.log(arrCountString)\n\n// 用 setItem 把 key & value 值設定到 localStorage 裡面\nlocalStorage.setItem('arrCountItem', arrCountString)\n\n// 抓取 localStorage 的值，再用 getItem 把 key 轉成物件並賦值到 getArrCount 變數裡面\nlet getArrCount = localStorage.getItem('arrCountItem')\n\n// 再將 getArrCount 轉成物件型別\nlet arrCountArry = JSON.parse(getArrCount)\n\nconsole.log(arrCountArry)\nconsole.log(arrCountArry[0].userName)\nconsole.log(typeof arrCountArry)\n```\n\n這樣 localStorage 就可以正常<font color=#FF0000>賦值</font>，而我們也可以從 localStorage <font color=#FF0000>取值</font>，顯示如下圖\n\n![](https://i.imgur.com/2MxjQrg.png)\n\n![](https://i.imgur.com/6CF4aju.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/LYRqyaX?editors=1011)\n\n## SessionStorage\n\n### 介紹\n\n跟 localStorage 一樣，差別在於只要將瀏覽器關掉資料就會被清除，也不會跟 sever 拿資料，資料是存在客戶本地端。\n\n### 特點\n\n1. 資料只會存在目前單一分頁裡，開新的分頁後資料是不會傳到另一個分頁裡的\n2. 當瀏覽器關掉後，資料就會被清除\n\n---\n\n## Cookie、LocalStorage、SessionStorage 縮圖:\n\n![](https://i.imgur.com/W1wxk7Y.png)\n\n[圖片來源: [JavaScript] Cookie、LocalStorage、SessionStorage 差異](https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f)\n\n---\n\n## 參考資料\n\n[JavaScript Cookie](https://www.fooish.com/javascript/cookie.html)\n[Day20 localStorage、sessionStorage](https://ithelp.ithome.com.tw/articles/10203525)\n[Day19 要來塊餅乾嗎? Cookie & Session](https://ithelp.ithome.com.tw/articles/10203123)\n[[JavaScript] Cookie、LocalStorage、SessionStorage 差異](https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f)\n[Day20-網頁儲存！Web storage](https://ithelp.ithome.com.tw/articles/10207933)\n[[第七週] 瀏覽器資料儲存 - Cookie、LocalStorage、SessionStorage](https://yakimhsu.com/project/project_w7_storage.html)\n[27. [WEB] Cookie & Session 是什麼？](https://ithelp.ithome.com.tw/articles/10227602)\n[[教學] 什麼是 Cookie？如何用 JS 讀取/修改 document.cookie?](https://shubo.io/cookies/)\n[[JavaScript] Cookie、LocalStorage、SessionStorage 三種差異](https://medium.com/@jscinin/javascript-cookie-localstorage-sessionstorage-%E4%B8%89%E7%A8%AE%E5%B7%AE%E7%95%B0-fe7f38260439)\n[JavaScript 入門篇 - 學徒的試煉](https://courses.hexschool.com/courses/670042/lectures/11952493)\n","source":"_posts/2020/JavaScript - Cookie、LocalStorage、Sessi.md","raw":"---\ntitle: JavaScript - Cookie、LocalStorage、SessionStorage 的差異跟使用\ndate: 2021/01/18\ntags:\n  - JavaScript\ncategories:\n  - Cookie\n  - LocalStorage\n  - SessionStorage\n---\n\n## 前言\n\n利用 Javascript 將資料存到瀏覽器裡面，但是因為 `http request` 的關係，瀏覽器並不會知道上一個跟目前的使用者是誰，這時候就需要把使用者的資料帶到後端 sever 上。\n\n例如我在 A 電腦開啟購物網頁選購商品並存取選購的商品資料但是在 B 電腦開啟同樣的網頁但是卻沒有剛才在 A 電腦選購的資料，這是因為資料是存在自己本地的瀏覽器裡面而不是存在後端的 sever 上，如果是存在後台的 sever 上，那不管我使用哪一台點腦，都可以開啟我在 A 電腦上選購的資料。\n\n接下來就要介紹瀏覽器是如何存取資料的。\n\n<!-- more -->\n\n## Cookie\n\n### 介紹\n\nCookie 本身非常小，只有 4k 所以載入速度很快，瀏覽器也會記錄使用者的資料，最多可以記錄 300 多個 Cookie，但一個網站最多只能記錄 20 個左右的 Cookie 。那 Cookie 是透過 `Set-Cookie header response` 給客戶端的瀏覽器，每當我們開啟瀏覽器發出 request 時， sever 端都會自動把該網站 (domain) 的 Cookie 自動載入。\n\n### 用途\n\n通常都會被使用在登入頁面的狀態、購物網站的選購資訊或是追蹤客戶的廣告上。\n\n### 特點\n\n1. 大小只有 4Kb 左右\n2. 紀錄使用者的個資\n3. 每當瀏覽器發出 request 都會自動載入該使用的資料\n4. 將資料存在客戶端\n5. 只能在該網站 (domain) 內開啟\n6. 可以設定關閉瀏覽器後失效的時間\n\n### Set-Cookie header\n\n如果要讓無狀態的 http 知道客戶目前的狀態，就要用 `Set-Cookie` 把使用紀錄存到 Cookie 裡面，這樣下次在別的瀏覽器上向同個網站 (domain) 的 sever 發出 request 的時候，`Request Headers` 就可以透過 sever 查看 Cookie 的內容同時確認目前客戶的狀態。\n\nSet-Cookie 寫法如下:\n\n```javascript\nSet-Cookie: key = value\n```\n\n瀏覽器會依照 `Set-Cookie` 設定的內容建立 `key` 跟 `value`。之後當瀏覽器發出 request 的時候，就會自動載入 `key` 跟 `value`。\n\n### Cookie 屬性\n\n除了 `Set-Cookie` 外，還有其他要知道的屬性。\n\n- `domain` : Cookie 一定要在同個網站 (domain)，下輸入使用者資料，不可能拿 A 網站的 Cookie ，用在 B 網站上。\n- `path` : 只能讀取到指定路徑下的 Cookie，如果要讓整個網站都能讀取到就寫 `path = /` 。\n- `Max-Age` : 設定有效期限，<font color=#FF0000>單位為秒</font>，設定的數字是正值時才有效，負值時為本次 session 有效，寫 0 就是刪除 Cookie。\n- `Expires` : 一樣是設定有效時間，但在 HTTP 1.1 之後已經被 `max-age` 取代。\n- `secure` : 當這個屬性被設為 true 時， Cookie 只能在安全的協議 (https) 中傳送。\n\n### Create a Cookie\n\n在 JavaScript 裡面，一次只能建立一個 Cookie ，語法如下:\n\n```javascript\ndocument.cookie = newCookie\n// newCookie 指的就是 key = value\n```\n\n當一個 cookie 沒有設定失效時間，就是 session cookie ，該 cookie 會在使用者關閉瀏覽器後被自動刪除。\n\n```javascript\n// 設定兩個 cookie 叫 one, two\n// 在瀏覽器關閉後會自動被刪除\ndocument.cookie = 'one=cookieOne'\ndocument.cookie = 'two=cookieTwo'\n\n// 設定一個 age cookie 裡面的值是 22，儲存一分鐘\ndocument.cookie = 'age=22; max-age=60; path=/'\n```\n\n### Read a Cookie\n\n> `document.cookie` 用來讀取 cookie，但讀取出來是一個很長的字串，字串裡面是所有曾經儲存的 cookie，格式是 key=value，用分號 ; 分隔不同的 cookie。來自 [JavaScript Cookie](https://www.fooish.com/javascript/cookie.html)\n\n### Change a Cookie\n\n直接建立新的同名 cookie 覆蓋掉即可。\n\n### Delete a Cookie\n\n設定一個過期的時間即可。\n\n---\n\n## localStorage\n\n### 介紹\n\n1. LocalStorage 是 HTML5 提供給網頁的儲存庫，一樣只能在同個網站 (domain) 上使用，但是他不會跟 Cookie 一樣從 sever 端提取資料，資料只會存在客戶的 local 端，即使把瀏覽器關閉資料還是會存在除非使用了清除的 API，不然資料是不會消失的。\n\n   > 舉個例子 : 我們在逛博客來書店的時候，只要點擊某本書，最下面有個最近瀏覽紀錄就會顯是我剛才選的書籍資訊，即使關掉網頁，剛才所點選的書籍資料也還是會存在。\n\n2. 那 localStorage 要注意的地方是他只接受字串 (string) 型別，所以在寫入的時候 key 跟 value 要記得轉換!!\n\n### 特點\n\n1. 大小 5Mb 左右\n2. 沒有過期時間，除非手動刪除，就算刷新頁面資料還是在\n3. Storage 只會存在客戶端的瀏覽器上\n4. 使用 key、value 的方式給值或取值\n\n### 搭配使用的 API\n\n```javascript\nJSON.parse()\nJSON.string()\n\nsetItem(key, value)\ngetItem(key)\n\nremoveItem(key)\nclear()\n```\n\n### setItem、getItem、clear API 的應用\n\n當我們要資料存到 localStorage 裡面就要用` setItem` 設定 `key` 跟 `value` 值，設定好後就可以用 `getItem` 去抓。\n\n```javascript\n// 型別是字串\nlet str = 'ken'\n// localStorage.setItem('key', value)\n// 設定 setItem\nlocalStorage.setItem('userName', str)\n\n// 取值 getItem\nlocalStorage.getItem(str)\n\nconsole.log(localStorage.getItem('userName'))\n```\n\n![](https://i.imgur.com/vDh5rtD.png)\n\n如過查看發現 localStorage 有其他資訊請先打開 clear() 清掉，再執行一次。(要記得關掉 clear\n\n[DEMO](https://codepen.io/gleofgja/pen/dypaWYm?editors=1011)\n\n接下來加入輸入框，在點擊 `button` 按鈕的時候會跳出輸入框裡面的值，在把值輸入到 localStorage 裡面。\n\n```html\n<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" class=\"name\" />\n  <input type=\"button\" value=\"點擊\" class=\"btn\" />\n</form>\n```\n\n```javascript\nlet btn = document.querySelector('.btn')\n\nfunction saveName() {\n  let str = document.querySelector('.name').value\n  localStorage.setItem('userName', str)\n}\n\nbtn.addEventListener('click', saveName)\n```\n\n到目前為止我還沒輸入任何東西，如下圖\n![](https://i.imgur.com/A1TQ70E.png)\n\n但是當我在輸入框輸入 `ken` ，輸入框的資料就會進入到 localStorage，如下圖\n![](https://i.imgur.com/45Pn0vT.png)\n\n目前只是將資料<font color=#FF0000>輸入</font>，現在要將資料<font color=#FF0000>取出</font>，那要取出就要用 `getItem()` 的 API 。\n\n在 html 多加一行\n\n```html\n<input type=\"button\" value=\"取出\" class=\"btnCall\" />\n```\n\n在 JS 加入 `getItem function` (第 11 行)\n\n```javascript\n// localStorage.clear()\nlet btn = document.querySelector('.btn')\nlet call = document.querySelector('.btnCall')\n\n//setItem\nfunction saveName() {\n  let str = document.querySelector('.name').value\n  localStorage.setItem('userName', str)\n}\n\n//getItem\nfunction callName() {\n  let getStr = localStorage.getItem('userName')\n  alert(getStr)\n}\n\nbtn.addEventListener('click', saveName) //setItem\ncall.addEventListener('click', callName) //getItem\n```\n\n輸入，尚未點擊\n![](https://i.imgur.com/QzZlk4G.png)\n\n點擊後\n![](https://i.imgur.com/e8OBtqs.png)\n\n點取出，跳出 `alert` 視窗\n![](https://i.imgur.com/DG4bIDy.png)\n\n<font color=#FF0000>注意!!</font> 目前都是<font color=#FF0000>字串型別</font>。\n分別在 `saveName`、`callName` 裡面加入 `console.log` 查看，如下圖\n![](https://i.imgur.com/OEqCbVy.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/wvzNdrv?editors=1111)\n\n### JSON.parse、JSON.string API 的應用\n\n`JSON.parse()` 的做用是將 localStorage 的 `key` 跟 `value` 值轉成物件型別，轉換型別後會變成物件或是陣列，這樣在抓取資料的時候就會比較方便，以下來示範為麼要使用 `JSON.parse()`\n\n1. 我先給一個陣列\n2. 在用 `setItem` 設定 `key` & `value` 值\n3. 用 `getItem` 抓取設定好的 `key` 值\n4. 用 `console.log` 查看\n\n```javascript\n// 給個陣列\nlet arrCount = [{ userName: 'ken' }, { age: '22' }, { gender: 'male' }]\n\n// 用 setItem 的把 key 、 value 值設定好\nlocalStorage.setItem('arrCountItem', arrCount)\n\n// 把設定好的值用 getItem 抓取，在賦直到 getArrCount 變數裡面\nlet getArrCount = localStorage.getItem('arrCountItem')\n\nconsole.log(getArrCount)\n\nconsole.log(getArrCount[0].userName)\n```\n\n顯示的結果如下圖\n![](https://i.imgur.com/YMIF3Eh.png)\n\n![](https://i.imgur.com/a7QAo5o.png)\n\n可以看到用 `setItem()` 設定的 `value` 值 localStorage 完全看不懂 ，要讓 localStorage 看得懂 `value` 值就必須是<font color=#FF0000>字串型別</font>!!!\n\n用 `console.log` 看，也確定有抓到但卻顯示未定義，用 `typeof` 看一下型別，如下圖\n![](https://i.imgur.com/NjVZfgH.png)\n\n透過上面這張圖就可以知道用 `getItem()` 抓到的是字串 (string) 型別並非是陣列，因為不管是陣列還是物件只要經過 localStorage 取出來的值都會變成字串 (string) 型別。然後第 16 行又用陣列的方式取值，所以會顯示 undefine 是正常的。\n\n- <font color=#FF0000>懶人包 :\n  進入 localStorage 之前必須要轉成字串型別 (JSON.string)，\n  取值的時候要轉成物件型別 (JSON.parse)</font>。\n\n以下示範正確方法:\n\n1. 將陣列轉成字串型別\n2. 確認抓到的是字串不是物件型別\n3. 用 `setItem` 把 `key` & `value` 值設定到 localStorage 裡面\n4. 再用 `getItem` 把 `key` 轉成物件並賦值到 getArrCount 變數裡面\n5. 再將 getArrCount 轉成物件型別\n\n```javascript\nlet arrCount = [{ userName: 'ken' }, { age: '22' }, { gender: 'male' }]\n\n// 將陣列轉成字串型別\nlet arrCountString = JSON.stringify(arrCount)\n// 確認抓到的是字串不是物件型別\nconsole.log(arrCountString)\n\n// 用 setItem 把 key & value 值設定到 localStorage 裡面\nlocalStorage.setItem('arrCountItem', arrCountString)\n\n// 抓取 localStorage 的值，再用 getItem 把 key 轉成物件並賦值到 getArrCount 變數裡面\nlet getArrCount = localStorage.getItem('arrCountItem')\n\n// 再將 getArrCount 轉成物件型別\nlet arrCountArry = JSON.parse(getArrCount)\n\nconsole.log(arrCountArry)\nconsole.log(arrCountArry[0].userName)\nconsole.log(typeof arrCountArry)\n```\n\n這樣 localStorage 就可以正常<font color=#FF0000>賦值</font>，而我們也可以從 localStorage <font color=#FF0000>取值</font>，顯示如下圖\n\n![](https://i.imgur.com/2MxjQrg.png)\n\n![](https://i.imgur.com/6CF4aju.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/LYRqyaX?editors=1011)\n\n## SessionStorage\n\n### 介紹\n\n跟 localStorage 一樣，差別在於只要將瀏覽器關掉資料就會被清除，也不會跟 sever 拿資料，資料是存在客戶本地端。\n\n### 特點\n\n1. 資料只會存在目前單一分頁裡，開新的分頁後資料是不會傳到另一個分頁裡的\n2. 當瀏覽器關掉後，資料就會被清除\n\n---\n\n## Cookie、LocalStorage、SessionStorage 縮圖:\n\n![](https://i.imgur.com/W1wxk7Y.png)\n\n[圖片來源: [JavaScript] Cookie、LocalStorage、SessionStorage 差異](https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f)\n\n---\n\n## 參考資料\n\n[JavaScript Cookie](https://www.fooish.com/javascript/cookie.html)\n[Day20 localStorage、sessionStorage](https://ithelp.ithome.com.tw/articles/10203525)\n[Day19 要來塊餅乾嗎? Cookie & Session](https://ithelp.ithome.com.tw/articles/10203123)\n[[JavaScript] Cookie、LocalStorage、SessionStorage 差異](https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f)\n[Day20-網頁儲存！Web storage](https://ithelp.ithome.com.tw/articles/10207933)\n[[第七週] 瀏覽器資料儲存 - Cookie、LocalStorage、SessionStorage](https://yakimhsu.com/project/project_w7_storage.html)\n[27. [WEB] Cookie & Session 是什麼？](https://ithelp.ithome.com.tw/articles/10227602)\n[[教學] 什麼是 Cookie？如何用 JS 讀取/修改 document.cookie?](https://shubo.io/cookies/)\n[[JavaScript] Cookie、LocalStorage、SessionStorage 三種差異](https://medium.com/@jscinin/javascript-cookie-localstorage-sessionstorage-%E4%B8%89%E7%A8%AE%E5%B7%AE%E7%95%B0-fe7f38260439)\n[JavaScript 入門篇 - 學徒的試煉](https://courses.hexschool.com/courses/670042/lectures/11952493)\n","slug":"JavaScript - Cookie、LocalStorage、Sessi","published":1,"updated":"2021-03-26T16:13:10.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lp80003g0trgxi629j0","content":"<html><head></head><body><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>利用 Javascript 將資料存到瀏覽器裡面，但是因為 <code>http request</code> 的關係，瀏覽器並不會知道上一個跟目前的使用者是誰，這時候就需要把使用者的資料帶到後端 sever 上。</p>\n<p>例如我在 A 電腦開啟購物網頁選購商品並存取選購的商品資料但是在 B 電腦開啟同樣的網頁但是卻沒有剛才在 A 電腦選購的資料，這是因為資料是存在自己本地的瀏覽器裡面而不是存在後端的 sever 上，如果是存在後台的 sever 上，那不管我使用哪一台點腦，都可以開啟我在 A 電腦上選購的資料。</p>\n<p>接下來就要介紹瀏覽器是如何存取資料的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><h3 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h3><p>Cookie 本身非常小，只有 4k 所以載入速度很快，瀏覽器也會記錄使用者的資料，最多可以記錄 300 多個 Cookie，但一個網站最多只能記錄 20 個左右的 Cookie 。那 Cookie 是透過 <code>Set-Cookie header response</code> 給客戶端的瀏覽器，每當我們開啟瀏覽器發出 request 時， sever 端都會自動把該網站 (domain) 的 Cookie 自動載入。</p>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><p>通常都會被使用在登入頁面的狀態、購物網站的選購資訊或是追蹤客戶的廣告上。</p>\n<h3 id=\"特點\"><a href=\"#特點\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ol>\n<li>大小只有 4Kb 左右</li>\n<li>紀錄使用者的個資</li>\n<li>每當瀏覽器發出 request 都會自動載入該使用的資料</li>\n<li>將資料存在客戶端</li>\n<li>只能在該網站 (domain) 內開啟</li>\n<li>可以設定關閉瀏覽器後失效的時間</li>\n</ol>\n<h3 id=\"Set-Cookie-header\"><a href=\"#Set-Cookie-header\" class=\"headerlink\" title=\"Set-Cookie header\"></a>Set-Cookie header</h3><p>如果要讓無狀態的 http 知道客戶目前的狀態，就要用 <code>Set-Cookie</code> 把使用紀錄存到 Cookie 裡面，這樣下次在別的瀏覽器上向同個網站 (domain) 的 sever 發出 request 的時候，<code>Request Headers</code> 就可以透過 sever 查看 Cookie 的內容同時確認目前客戶的狀態。</p>\n<p>Set-Cookie 寫法如下:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">Set</span>-Cookie: key = value</span><br></pre></td></tr></tbody></table></figure>\n\n<p>瀏覽器會依照 <code>Set-Cookie</code> 設定的內容建立 <code>key</code> 跟 <code>value</code>。之後當瀏覽器發出 request 的時候，就會自動載入 <code>key</code> 跟 <code>value</code>。</p>\n<h3 id=\"Cookie-屬性\"><a href=\"#Cookie-屬性\" class=\"headerlink\" title=\"Cookie 屬性\"></a>Cookie 屬性</h3><p>除了 <code>Set-Cookie</code> 外，還有其他要知道的屬性。</p>\n<ul>\n<li><code>domain</code> : Cookie 一定要在同個網站 (domain)，下輸入使用者資料，不可能拿 A 網站的 Cookie ，用在 B 網站上。</li>\n<li><code>path</code> : 只能讀取到指定路徑下的 Cookie，如果要讓整個網站都能讀取到就寫 <code>path = /</code> 。</li>\n<li><code>Max-Age</code> : 設定有效期限，<font color=\"#FF0000\">單位為秒</font>，設定的數字是正值時才有效，負值時為本次 session 有效，寫 0 就是刪除 Cookie。</li>\n<li><code>Expires</code> : 一樣是設定有效時間，但在 HTTP 1.1 之後已經被 <code>max-age</code> 取代。</li>\n<li><code>secure</code> : 當這個屬性被設為 true 時， Cookie 只能在安全的協議 (https) 中傳送。</li>\n</ul>\n<h3 id=\"Create-a-Cookie\"><a href=\"#Create-a-Cookie\" class=\"headerlink\" title=\"Create a Cookie\"></a>Create a Cookie</h3><p>在 JavaScript 裡面，一次只能建立一個 Cookie ，語法如下:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">document</span>.cookie = newCookie</span><br><span class=\"line\"><span class=\"hljs-comment\">// newCookie 指的就是 key = value</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>當一個 cookie 沒有設定失效時間，就是 session cookie ，該 cookie 會在使用者關閉瀏覽器後被自動刪除。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 設定兩個 cookie 叫 one, two</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// 在瀏覽器關閉後會自動被刪除</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">document</span>.cookie = <span class=\"hljs-string\">'one=cookieOne'</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">document</span>.cookie = <span class=\"hljs-string\">'two=cookieTwo'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 設定一個 age cookie 裡面的值是 22，儲存一分鐘</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">document</span>.cookie = <span class=\"hljs-string\">'age=22; max-age=60; path=/'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Read-a-Cookie\"><a href=\"#Read-a-Cookie\" class=\"headerlink\" title=\"Read a Cookie\"></a>Read a Cookie</h3><blockquote>\n<p><code>document.cookie</code> 用來讀取 cookie，但讀取出來是一個很長的字串，字串裡面是所有曾經儲存的 cookie，格式是 key=value，用分號 ; 分隔不同的 cookie。來自 <a href=\"https://www.fooish.com/javascript/cookie.html\">JavaScript Cookie</a></p>\n</blockquote>\n<h3 id=\"Change-a-Cookie\"><a href=\"#Change-a-Cookie\" class=\"headerlink\" title=\"Change a Cookie\"></a>Change a Cookie</h3><p>直接建立新的同名 cookie 覆蓋掉即可。</p>\n<h3 id=\"Delete-a-Cookie\"><a href=\"#Delete-a-Cookie\" class=\"headerlink\" title=\"Delete a Cookie\"></a>Delete a Cookie</h3><p>設定一個過期的時間即可。</p>\n<hr>\n<h2 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h2><h3 id=\"介紹-1\"><a href=\"#介紹-1\" class=\"headerlink\" title=\"介紹\"></a>介紹</h3><ol>\n<li><p>LocalStorage 是 HTML5 提供給網頁的儲存庫，一樣只能在同個網站 (domain) 上使用，但是他不會跟 Cookie 一樣從 sever 端提取資料，資料只會存在客戶的 local 端，即使把瀏覽器關閉資料還是會存在除非使用了清除的 API，不然資料是不會消失的。</p>\n<blockquote>\n<p>舉個例子 : 我們在逛博客來書店的時候，只要點擊某本書，最下面有個最近瀏覽紀錄就會顯是我剛才選的書籍資訊，即使關掉網頁，剛才所點選的書籍資料也還是會存在。</p>\n</blockquote>\n</li>\n<li><p>那 localStorage 要注意的地方是他只接受字串 (string) 型別，所以在寫入的時候 key 跟 value 要記得轉換!!</p>\n</li>\n</ol>\n<h3 id=\"特點-1\"><a href=\"#特點-1\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ol>\n<li>大小 5Mb 左右</li>\n<li>沒有過期時間，除非手動刪除，就算刷新頁面資料還是在</li>\n<li>Storage 只會存在客戶端的瀏覽器上</li>\n<li>使用 key、value 的方式給值或取值</li>\n</ol>\n<h3 id=\"搭配使用的-API\"><a href=\"#搭配使用的-API\" class=\"headerlink\" title=\"搭配使用的 API\"></a>搭配使用的 API</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">JSON</span>.parse()</span><br><span class=\"line\"><span class=\"hljs-built_in\">JSON</span>.string()</span><br><span class=\"line\"></span><br><span class=\"line\">setItem(key, value)</span><br><span class=\"line\">getItem(key)</span><br><span class=\"line\"></span><br><span class=\"line\">removeItem(key)</span><br><span class=\"line\">clear()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"setItem、getItem、clear-API-的應用\"><a href=\"#setItem、getItem、clear-API-的應用\" class=\"headerlink\" title=\"setItem、getItem、clear API 的應用\"></a>setItem、getItem、clear API 的應用</h3><p>當我們要資料存到 localStorage 裡面就要用<code> setItem</code> 設定 <code>key</code> 跟 <code>value</code> 值，設定好後就可以用 <code>getItem</code> 去抓。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 型別是字串</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">'ken'</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// localStorage.setItem('key', value)</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// 設定 setItem</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'userName'</span>, str)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 取值 getItem</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">localStorage</span>.getItem(str)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'userName'</span>))</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/vDh5rtD.png\"></p>\n<p>如過查看發現 localStorage 有其他資訊請先打開 clear() 清掉，再執行一次。(要記得關掉 clear</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/dypaWYm?editors=1011\">DEMO</a></p>\n<p>接下來加入輸入框，在點擊 <code>button</code> 按鈕的時候會跳出輸入框裡面的值，在把值輸入到 localStorage 裡面。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span>Name:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"name\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"點擊\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> btn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.btn'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">saveName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.name'</span>).value</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'userName'</span>, str)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"hljs-string\">'click'</span>, saveName)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>到目前為止我還沒輸入任何東西，如下圖<br><img src=\"https://i.imgur.com/A1TQ70E.png\"></p>\n<p>但是當我在輸入框輸入 <code>ken</code> ，輸入框的資料就會進入到 localStorage，如下圖<br><img src=\"https://i.imgur.com/45Pn0vT.png\"></p>\n<p>目前只是將資料<font color=\"#FF0000\">輸入</font>，現在要將資料<font color=\"#FF0000\">取出</font>，那要取出就要用 <code>getItem()</code> 的 API 。</p>\n<p>在 html 多加一行</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"取出\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btnCall\"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 JS 加入 <code>getItem function</code> (第 11 行)</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// localStorage.clear()</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> btn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.btn'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> call = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.btnCall'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">//setItem</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">saveName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.name'</span>).value</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'userName'</span>, str)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">//getItem</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callName</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> getStr = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'userName'</span>)</span><br><span class=\"line\">  alert(getStr)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"hljs-string\">'click'</span>, saveName) <span class=\"hljs-comment\">//setItem</span></span><br><span class=\"line\">call.addEventListener(<span class=\"hljs-string\">'click'</span>, callName) <span class=\"hljs-comment\">//getItem</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>輸入，尚未點擊<br><img src=\"https://i.imgur.com/QzZlk4G.png\"></p>\n<p>點擊後<br><img src=\"https://i.imgur.com/e8OBtqs.png\"></p>\n<p>點取出，跳出 <code>alert</code> 視窗<br><img src=\"https://i.imgur.com/DG4bIDy.png\"></p>\n<p><font color=\"#FF0000\">注意!!</font> 目前都是<font color=\"#FF0000\">字串型別</font>。<br>分別在 <code>saveName</code>、<code>callName</code> 裡面加入 <code>console.log</code> 查看，如下圖<br><img src=\"https://i.imgur.com/OEqCbVy.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/wvzNdrv?editors=1111\">DEMO</a></p>\n<h3 id=\"JSON-parse、JSON-string-API-的應用\"><a href=\"#JSON-parse、JSON-string-API-的應用\" class=\"headerlink\" title=\"JSON.parse、JSON.string API 的應用\"></a>JSON.parse、JSON.string API 的應用</h3><p><code>JSON.parse()</code> 的做用是將 localStorage 的 <code>key</code> 跟 <code>value</code> 值轉成物件型別，轉換型別後會變成物件或是陣列，這樣在抓取資料的時候就會比較方便，以下來示範為麼要使用 <code>JSON.parse()</code></p>\n<ol>\n<li>我先給一個陣列</li>\n<li>在用 <code>setItem</code> 設定 <code>key</code> &amp; <code>value</code> 值</li>\n<li>用 <code>getItem</code> 抓取設定好的 <code>key</code> 值</li>\n<li>用 <code>console.log</code> 查看</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 給個陣列</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> arrCount = [{ <span class=\"hljs-attr\">userName</span>: <span class=\"hljs-string\">'ken'</span> }, { <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">'22'</span> }, { <span class=\"hljs-attr\">gender</span>: <span class=\"hljs-string\">'male'</span> }]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 用 setItem 的把 key 、 value 值設定好</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'arrCountItem'</span>, arrCount)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 把設定好的值用 getItem 抓取，在賦直到 getArrCount 變數裡面</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> getArrCount = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'arrCountItem'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(getArrCount)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(getArrCount[<span class=\"hljs-number\">0</span>].userName)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示的結果如下圖<br><img src=\"https://i.imgur.com/YMIF3Eh.png\"></p>\n<p><img src=\"https://i.imgur.com/a7QAo5o.png\"></p>\n<p>可以看到用 <code>setItem()</code> 設定的 <code>value</code> 值 localStorage 完全看不懂 ，要讓 localStorage 看得懂 <code>value</code> 值就必須是<font color=\"#FF0000\">字串型別</font>!!!</p>\n<p>用 <code>console.log</code> 看，也確定有抓到但卻顯示未定義，用 <code>typeof</code> 看一下型別，如下圖<br><img src=\"https://i.imgur.com/NjVZfgH.png\"></p>\n<p>透過上面這張圖就可以知道用 <code>getItem()</code> 抓到的是字串 (string) 型別並非是陣列，因為不管是陣列還是物件只要經過 localStorage 取出來的值都會變成字串 (string) 型別。然後第 16 行又用陣列的方式取值，所以會顯示 undefine 是正常的。</p>\n<ul>\n<li><font color=\"#FF0000\">懶人包 :<br>進入 localStorage 之前必須要轉成字串型別 (JSON.string)，<br>取值的時候要轉成物件型別 (JSON.parse)</font>。</li>\n</ul>\n<p>以下示範正確方法:</p>\n<ol>\n<li>將陣列轉成字串型別</li>\n<li>確認抓到的是字串不是物件型別</li>\n<li>用 <code>setItem</code> 把 <code>key</code> &amp; <code>value</code> 值設定到 localStorage 裡面</li>\n<li>再用 <code>getItem</code> 把 <code>key</code> 轉成物件並賦值到 getArrCount 變數裡面</li>\n<li>再將 getArrCount 轉成物件型別</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> arrCount = [{ <span class=\"hljs-attr\">userName</span>: <span class=\"hljs-string\">'ken'</span> }, { <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">'22'</span> }, { <span class=\"hljs-attr\">gender</span>: <span class=\"hljs-string\">'male'</span> }]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 將陣列轉成字串型別</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> arrCountString = <span class=\"hljs-built_in\">JSON</span>.stringify(arrCount)</span><br><span class=\"line\"><span class=\"hljs-comment\">// 確認抓到的是字串不是物件型別</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arrCountString)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 用 setItem 把 key &amp; value 值設定到 localStorage 裡面</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'arrCountItem'</span>, arrCountString)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 抓取 localStorage 的值，再用 getItem 把 key 轉成物件並賦值到 getArrCount 變數裡面</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> getArrCount = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'arrCountItem'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 再將 getArrCount 轉成物件型別</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> arrCountArry = <span class=\"hljs-built_in\">JSON</span>.parse(getArrCount)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arrCountArry)</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arrCountArry[<span class=\"hljs-number\">0</span>].userName)</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> arrCountArry)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>這樣 localStorage 就可以正常<font color=\"#FF0000\">賦值</font>，而我們也可以從 localStorage <font color=\"#FF0000\">取值</font>，顯示如下圖</p>\n<p><img src=\"https://i.imgur.com/2MxjQrg.png\"></p>\n<p><img src=\"https://i.imgur.com/6CF4aju.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/LYRqyaX?editors=1011\">DEMO</a></p>\n<h2 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h2><h3 id=\"介紹-2\"><a href=\"#介紹-2\" class=\"headerlink\" title=\"介紹\"></a>介紹</h3><p>跟 localStorage 一樣，差別在於只要將瀏覽器關掉資料就會被清除，也不會跟 sever 拿資料，資料是存在客戶本地端。</p>\n<h3 id=\"特點-2\"><a href=\"#特點-2\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ol>\n<li>資料只會存在目前單一分頁裡，開新的分頁後資料是不會傳到另一個分頁裡的</li>\n<li>當瀏覽器關掉後，資料就會被清除</li>\n</ol>\n<hr>\n<h2 id=\"Cookie、LocalStorage、SessionStorage-縮圖\"><a href=\"#Cookie、LocalStorage、SessionStorage-縮圖\" class=\"headerlink\" title=\"Cookie、LocalStorage、SessionStorage 縮圖:\"></a>Cookie、LocalStorage、SessionStorage 縮圖:</h2><p><img src=\"https://i.imgur.com/W1wxk7Y.png\"></p>\n<p><a href=\"https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f\">圖片來源: [JavaScript] Cookie、LocalStorage、SessionStorage 差異</a></p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.fooish.com/javascript/cookie.html\">JavaScript Cookie</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10203525\">Day20 localStorage、sessionStorage</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10203123\">Day19 要來塊餅乾嗎? Cookie &amp; Session</a><br><a href=\"https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f\">[JavaScript] Cookie、LocalStorage、SessionStorage 差異</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10207933\">Day20-網頁儲存！Web storage</a><br><a href=\"https://yakimhsu.com/project/project_w7_storage.html\">[第七週] 瀏覽器資料儲存 - Cookie、LocalStorage、SessionStorage</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10227602\">27. [WEB] Cookie &amp; Session 是什麼？</a><br><a href=\"https://shubo.io/cookies/\">[教學] 什麼是 Cookie？如何用 JS 讀取/修改 document.cookie?</a><br><a href=\"https://medium.com/@jscinin/javascript-cookie-localstorage-sessionstorage-%E4%B8%89%E7%A8%AE%E5%B7%AE%E7%95%B0-fe7f38260439\">[JavaScript] Cookie、LocalStorage、SessionStorage 三種差異</a><br><a href=\"https://courses.hexschool.com/courses/670042/lectures/11952493\">JavaScript 入門篇 - 學徒的試煉</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Cookie","path":"categories/Cookie/"},{"name":"LocalStorage","path":"categories/Cookie/LocalStorage/"},{"name":"SessionStorage","path":"categories/Cookie/LocalStorage/SessionStorage/"}],"_tags":[{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>利用 Javascript 將資料存到瀏覽器裡面，但是因為 <code>http request</code> 的關係，瀏覽器並不會知道上一個跟目前的使用者是誰，這時候就需要把使用者的資料帶到後端 sever 上。</p>\n<p>例如我在 A 電腦開啟購物網頁選購商品並存取選購的商品資料但是在 B 電腦開啟同樣的網頁但是卻沒有剛才在 A 電腦選購的資料，這是因為資料是存在自己本地的瀏覽器裡面而不是存在後端的 sever 上，如果是存在後台的 sever 上，那不管我使用哪一台點腦，都可以開啟我在 A 電腦上選購的資料。</p>\n<p>接下來就要介紹瀏覽器是如何存取資料的。</p></body></html>","more":"<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><h3 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h3><p>Cookie 本身非常小，只有 4k 所以載入速度很快，瀏覽器也會記錄使用者的資料，最多可以記錄 300 多個 Cookie，但一個網站最多只能記錄 20 個左右的 Cookie 。那 Cookie 是透過 <code>Set-Cookie header response</code> 給客戶端的瀏覽器，每當我們開啟瀏覽器發出 request 時， sever 端都會自動把該網站 (domain) 的 Cookie 自動載入。</p>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><p>通常都會被使用在登入頁面的狀態、購物網站的選購資訊或是追蹤客戶的廣告上。</p>\n<h3 id=\"特點\"><a href=\"#特點\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ol>\n<li>大小只有 4Kb 左右</li>\n<li>紀錄使用者的個資</li>\n<li>每當瀏覽器發出 request 都會自動載入該使用的資料</li>\n<li>將資料存在客戶端</li>\n<li>只能在該網站 (domain) 內開啟</li>\n<li>可以設定關閉瀏覽器後失效的時間</li>\n</ol>\n<h3 id=\"Set-Cookie-header\"><a href=\"#Set-Cookie-header\" class=\"headerlink\" title=\"Set-Cookie header\"></a>Set-Cookie header</h3><p>如果要讓無狀態的 http 知道客戶目前的狀態，就要用 <code>Set-Cookie</code> 把使用紀錄存到 Cookie 裡面，這樣下次在別的瀏覽器上向同個網站 (domain) 的 sever 發出 request 的時候，<code>Request Headers</code> 就可以透過 sever 查看 Cookie 的內容同時確認目前客戶的狀態。</p>\n<p>Set-Cookie 寫法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set</span>-Cookie: key = value</span><br></pre></td></tr></table></figure>\n\n<p>瀏覽器會依照 <code>Set-Cookie</code> 設定的內容建立 <code>key</code> 跟 <code>value</code>。之後當瀏覽器發出 request 的時候，就會自動載入 <code>key</code> 跟 <code>value</code>。</p>\n<h3 id=\"Cookie-屬性\"><a href=\"#Cookie-屬性\" class=\"headerlink\" title=\"Cookie 屬性\"></a>Cookie 屬性</h3><p>除了 <code>Set-Cookie</code> 外，還有其他要知道的屬性。</p>\n<ul>\n<li><code>domain</code> : Cookie 一定要在同個網站 (domain)，下輸入使用者資料，不可能拿 A 網站的 Cookie ，用在 B 網站上。</li>\n<li><code>path</code> : 只能讀取到指定路徑下的 Cookie，如果要讓整個網站都能讀取到就寫 <code>path = /</code> 。</li>\n<li><code>Max-Age</code> : 設定有效期限，<font color=#FF0000>單位為秒</font>，設定的數字是正值時才有效，負值時為本次 session 有效，寫 0 就是刪除 Cookie。</li>\n<li><code>Expires</code> : 一樣是設定有效時間，但在 HTTP 1.1 之後已經被 <code>max-age</code> 取代。</li>\n<li><code>secure</code> : 當這個屬性被設為 true 時， Cookie 只能在安全的協議 (https) 中傳送。</li>\n</ul>\n<h3 id=\"Create-a-Cookie\"><a href=\"#Create-a-Cookie\" class=\"headerlink\" title=\"Create a Cookie\"></a>Create a Cookie</h3><p>在 JavaScript 裡面，一次只能建立一個 Cookie ，語法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = newCookie</span><br><span class=\"line\"><span class=\"comment\">// newCookie 指的就是 key = value</span></span><br></pre></td></tr></table></figure>\n\n<p>當一個 cookie 沒有設定失效時間，就是 session cookie ，該 cookie 會在使用者關閉瀏覽器後被自動刪除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 設定兩個 cookie 叫 one, two</span></span><br><span class=\"line\"><span class=\"comment\">// 在瀏覽器關閉後會自動被刪除</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&#x27;one=cookieOne&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&#x27;two=cookieTwo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 設定一個 age cookie 裡面的值是 22，儲存一分鐘</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&#x27;age=22; max-age=60; path=/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Read-a-Cookie\"><a href=\"#Read-a-Cookie\" class=\"headerlink\" title=\"Read a Cookie\"></a>Read a Cookie</h3><blockquote>\n<p><code>document.cookie</code> 用來讀取 cookie，但讀取出來是一個很長的字串，字串裡面是所有曾經儲存的 cookie，格式是 key=value，用分號 ; 分隔不同的 cookie。來自 <a href=\"https://www.fooish.com/javascript/cookie.html\">JavaScript Cookie</a></p>\n</blockquote>\n<h3 id=\"Change-a-Cookie\"><a href=\"#Change-a-Cookie\" class=\"headerlink\" title=\"Change a Cookie\"></a>Change a Cookie</h3><p>直接建立新的同名 cookie 覆蓋掉即可。</p>\n<h3 id=\"Delete-a-Cookie\"><a href=\"#Delete-a-Cookie\" class=\"headerlink\" title=\"Delete a Cookie\"></a>Delete a Cookie</h3><p>設定一個過期的時間即可。</p>\n<hr>\n<h2 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h2><h3 id=\"介紹-1\"><a href=\"#介紹-1\" class=\"headerlink\" title=\"介紹\"></a>介紹</h3><ol>\n<li><p>LocalStorage 是 HTML5 提供給網頁的儲存庫，一樣只能在同個網站 (domain) 上使用，但是他不會跟 Cookie 一樣從 sever 端提取資料，資料只會存在客戶的 local 端，即使把瀏覽器關閉資料還是會存在除非使用了清除的 API，不然資料是不會消失的。</p>\n<blockquote>\n<p>舉個例子 : 我們在逛博客來書店的時候，只要點擊某本書，最下面有個最近瀏覽紀錄就會顯是我剛才選的書籍資訊，即使關掉網頁，剛才所點選的書籍資料也還是會存在。</p>\n</blockquote>\n</li>\n<li><p>那 localStorage 要注意的地方是他只接受字串 (string) 型別，所以在寫入的時候 key 跟 value 要記得轉換!!</p>\n</li>\n</ol>\n<h3 id=\"特點-1\"><a href=\"#特點-1\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ol>\n<li>大小 5Mb 左右</li>\n<li>沒有過期時間，除非手動刪除，就算刷新頁面資料還是在</li>\n<li>Storage 只會存在客戶端的瀏覽器上</li>\n<li>使用 key、value 的方式給值或取值</li>\n</ol>\n<h3 id=\"搭配使用的-API\"><a href=\"#搭配使用的-API\" class=\"headerlink\" title=\"搭配使用的 API\"></a>搭配使用的 API</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.parse()</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.string()</span><br><span class=\"line\"></span><br><span class=\"line\">setItem(key, value)</span><br><span class=\"line\">getItem(key)</span><br><span class=\"line\"></span><br><span class=\"line\">removeItem(key)</span><br><span class=\"line\">clear()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"setItem、getItem、clear-API-的應用\"><a href=\"#setItem、getItem、clear-API-的應用\" class=\"headerlink\" title=\"setItem、getItem、clear API 的應用\"></a>setItem、getItem、clear API 的應用</h3><p>當我們要資料存到 localStorage 裡面就要用<code> setItem</code> 設定 <code>key</code> 跟 <code>value</code> 值，設定好後就可以用 <code>getItem</code> 去抓。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 型別是字串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;ken&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// localStorage.setItem(&#x27;key&#x27;, value)</span></span><br><span class=\"line\"><span class=\"comment\">// 設定 setItem</span></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;userName&#x27;</span>, str)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取值 getItem</span></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.getItem(str)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;userName&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/vDh5rtD.png\"></p>\n<p>如過查看發現 localStorage 有其他資訊請先打開 clear() 清掉，再執行一次。(要記得關掉 clear</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/dypaWYm?editors=1011\">DEMO</a></p>\n<p>接下來加入輸入框，在點擊 <code>button</code> 按鈕的時候會跳出輸入框裡面的值，在把值輸入到 localStorage 裡面。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;點擊&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.btn&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.name&#x27;</span>).value</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;userName&#x27;</span>, str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, saveName)</span><br></pre></td></tr></table></figure>\n\n<p>到目前為止我還沒輸入任何東西，如下圖<br><img src=\"https://i.imgur.com/A1TQ70E.png\"></p>\n<p>但是當我在輸入框輸入 <code>ken</code> ，輸入框的資料就會進入到 localStorage，如下圖<br><img src=\"https://i.imgur.com/45Pn0vT.png\"></p>\n<p>目前只是將資料<font color=#FF0000>輸入</font>，現在要將資料<font color=#FF0000>取出</font>，那要取出就要用 <code>getItem()</code> 的 API 。</p>\n<p>在 html 多加一行</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;取出&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btnCall&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 JS 加入 <code>getItem function</code> (第 11 行)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// localStorage.clear()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.btn&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> call = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.btnCall&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//setItem</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.name&#x27;</span>).value</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;userName&#x27;</span>, str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//getItem</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> getStr = <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;userName&#x27;</span>)</span><br><span class=\"line\">  alert(getStr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, saveName) <span class=\"comment\">//setItem</span></span><br><span class=\"line\">call.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, callName) <span class=\"comment\">//getItem</span></span><br></pre></td></tr></table></figure>\n\n<p>輸入，尚未點擊<br><img src=\"https://i.imgur.com/QzZlk4G.png\"></p>\n<p>點擊後<br><img src=\"https://i.imgur.com/e8OBtqs.png\"></p>\n<p>點取出，跳出 <code>alert</code> 視窗<br><img src=\"https://i.imgur.com/DG4bIDy.png\"></p>\n<p><font color=#FF0000>注意!!</font> 目前都是<font color=#FF0000>字串型別</font>。<br>分別在 <code>saveName</code>、<code>callName</code> 裡面加入 <code>console.log</code> 查看，如下圖<br><img src=\"https://i.imgur.com/OEqCbVy.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/wvzNdrv?editors=1111\">DEMO</a></p>\n<h3 id=\"JSON-parse、JSON-string-API-的應用\"><a href=\"#JSON-parse、JSON-string-API-的應用\" class=\"headerlink\" title=\"JSON.parse、JSON.string API 的應用\"></a>JSON.parse、JSON.string API 的應用</h3><p><code>JSON.parse()</code> 的做用是將 localStorage 的 <code>key</code> 跟 <code>value</code> 值轉成物件型別，轉換型別後會變成物件或是陣列，這樣在抓取資料的時候就會比較方便，以下來示範為麼要使用 <code>JSON.parse()</code></p>\n<ol>\n<li>我先給一個陣列</li>\n<li>在用 <code>setItem</code> 設定 <code>key</code> &amp; <code>value</code> 值</li>\n<li>用 <code>getItem</code> 抓取設定好的 <code>key</code> 值</li>\n<li>用 <code>console.log</code> 查看</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 給個陣列</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrCount = [&#123; <span class=\"attr\">userName</span>: <span class=\"string\">&#x27;ken&#x27;</span> &#125;, &#123; <span class=\"attr\">age</span>: <span class=\"string\">&#x27;22&#x27;</span> &#125;, &#123; <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span> &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用 setItem 的把 key 、 value 值設定好</span></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;arrCountItem&#x27;</span>, arrCount)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把設定好的值用 getItem 抓取，在賦直到 getArrCount 變數裡面</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getArrCount = <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;arrCountItem&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getArrCount)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getArrCount[<span class=\"number\">0</span>].userName)</span><br></pre></td></tr></table></figure>\n\n<p>顯示的結果如下圖<br><img src=\"https://i.imgur.com/YMIF3Eh.png\"></p>\n<p><img src=\"https://i.imgur.com/a7QAo5o.png\"></p>\n<p>可以看到用 <code>setItem()</code> 設定的 <code>value</code> 值 localStorage 完全看不懂 ，要讓 localStorage 看得懂 <code>value</code> 值就必須是<font color=#FF0000>字串型別</font>!!!</p>\n<p>用 <code>console.log</code> 看，也確定有抓到但卻顯示未定義，用 <code>typeof</code> 看一下型別，如下圖<br><img src=\"https://i.imgur.com/NjVZfgH.png\"></p>\n<p>透過上面這張圖就可以知道用 <code>getItem()</code> 抓到的是字串 (string) 型別並非是陣列，因為不管是陣列還是物件只要經過 localStorage 取出來的值都會變成字串 (string) 型別。然後第 16 行又用陣列的方式取值，所以會顯示 undefine 是正常的。</p>\n<ul>\n<li><font color=#FF0000>懶人包 :<br>進入 localStorage 之前必須要轉成字串型別 (JSON.string)，<br>取值的時候要轉成物件型別 (JSON.parse)</font>。</li>\n</ul>\n<p>以下示範正確方法:</p>\n<ol>\n<li>將陣列轉成字串型別</li>\n<li>確認抓到的是字串不是物件型別</li>\n<li>用 <code>setItem</code> 把 <code>key</code> &amp; <code>value</code> 值設定到 localStorage 裡面</li>\n<li>再用 <code>getItem</code> 把 <code>key</code> 轉成物件並賦值到 getArrCount 變數裡面</li>\n<li>再將 getArrCount 轉成物件型別</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrCount = [&#123; <span class=\"attr\">userName</span>: <span class=\"string\">&#x27;ken&#x27;</span> &#125;, &#123; <span class=\"attr\">age</span>: <span class=\"string\">&#x27;22&#x27;</span> &#125;, &#123; <span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span> &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 將陣列轉成字串型別</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrCountString = <span class=\"built_in\">JSON</span>.stringify(arrCount)</span><br><span class=\"line\"><span class=\"comment\">// 確認抓到的是字串不是物件型別</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCountString)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用 setItem 把 key &amp; value 值設定到 localStorage 裡面</span></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;arrCountItem&#x27;</span>, arrCountString)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抓取 localStorage 的值，再用 getItem 把 key 轉成物件並賦值到 getArrCount 變數裡面</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getArrCount = <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;arrCountItem&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再將 getArrCount 轉成物件型別</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrCountArry = <span class=\"built_in\">JSON</span>.parse(getArrCount)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCountArry)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrCountArry[<span class=\"number\">0</span>].userName)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> arrCountArry)</span><br></pre></td></tr></table></figure>\n\n<p>這樣 localStorage 就可以正常<font color=#FF0000>賦值</font>，而我們也可以從 localStorage <font color=#FF0000>取值</font>，顯示如下圖</p>\n<p><img src=\"https://i.imgur.com/2MxjQrg.png\"></p>\n<p><img src=\"https://i.imgur.com/6CF4aju.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/LYRqyaX?editors=1011\">DEMO</a></p>\n<h2 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h2><h3 id=\"介紹-2\"><a href=\"#介紹-2\" class=\"headerlink\" title=\"介紹\"></a>介紹</h3><p>跟 localStorage 一樣，差別在於只要將瀏覽器關掉資料就會被清除，也不會跟 sever 拿資料，資料是存在客戶本地端。</p>\n<h3 id=\"特點-2\"><a href=\"#特點-2\" class=\"headerlink\" title=\"特點\"></a>特點</h3><ol>\n<li>資料只會存在目前單一分頁裡，開新的分頁後資料是不會傳到另一個分頁裡的</li>\n<li>當瀏覽器關掉後，資料就會被清除</li>\n</ol>\n<hr>\n<h2 id=\"Cookie、LocalStorage、SessionStorage-縮圖\"><a href=\"#Cookie、LocalStorage、SessionStorage-縮圖\" class=\"headerlink\" title=\"Cookie、LocalStorage、SessionStorage 縮圖:\"></a>Cookie、LocalStorage、SessionStorage 縮圖:</h2><p><img src=\"https://i.imgur.com/W1wxk7Y.png\"></p>\n<p><a href=\"https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f\">圖片來源: [JavaScript] Cookie、LocalStorage、SessionStorage 差異</a></p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.fooish.com/javascript/cookie.html\">JavaScript Cookie</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10203525\">Day20 localStorage、sessionStorage</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10203123\">Day19 要來塊餅乾嗎? Cookie &amp; Session</a><br><a href=\"https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f\">[JavaScript] Cookie、LocalStorage、SessionStorage 差異</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10207933\">Day20-網頁儲存！Web storage</a><br><a href=\"https://yakimhsu.com/project/project_w7_storage.html\">[第七週] 瀏覽器資料儲存 - Cookie、LocalStorage、SessionStorage</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10227602\">27. [WEB] Cookie &amp; Session 是什麼？</a><br><a href=\"https://shubo.io/cookies/\">[教學] 什麼是 Cookie？如何用 JS 讀取/修改 document.cookie?</a><br><a href=\"https://medium.com/@jscinin/javascript-cookie-localstorage-sessionstorage-%E4%B8%89%E7%A8%AE%E5%B7%AE%E7%95%B0-fe7f38260439\">[JavaScript] Cookie、LocalStorage、SessionStorage 三種差異</a><br><a href=\"https://courses.hexschool.com/courses/670042/lectures/11952493\">JavaScript 入門篇 - 學徒的試煉</a></p>"},{"title":"JavaScript 實作 - 音樂播放器","date":"2021-01-21T16:00:00.000Z","_content":"\n功能描述:\n\n1. 點擊進度條可以選擇播放時段\n2. 撥放完後自動撥放下一曲\n3. 可選擇上一曲或下一曲\n\n![](https://i.imgur.com/pfv9RIb.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission25)\n[DEMO](https://pktseng.github.io/Web-Side-Project/mission25/index.html)\n\n<!-- more -->\n\n## 模板\n\n給個容器，將內容包在裡面，方便控制容器內的通用樣式跟監聽\n\n```html\n<div class=\"music-container\" id=\"music-container\"></div>\n```\n\n撥放音樂的時候顯示音樂名稱跟進度條\n\n```html\n<div class=\"music-info\">\n  <h4 id=\"title\"></h4>\n  <div class=\"progress-container\" id=\"progress-container\">\n    <div class=\"progress\" id=\"progress\"></div>\n  </div>\n</div>\n```\n\n撥放歌曲\n\n```html\n<audio src=\"music/ukulele.mp3\" id=\"audio\"></audio>\n```\n\n音樂圖片\n\n```html\n<div class=\"img-container\">\n  <img src=\"images/ukulele.jpg\" alt=\"music-cover\" id=\"cover\" />\n</div>\n```\n\n音樂撥放按鈕，按鈕使用是 [Font Awesome](https://fontawesome.com/) 顯示\n\n```html\n<div class=\"navigation\">\n  <button id=\"prev\" class=\"action-btn\">\n    //上一首\n    <i class=\"fas fa-backward\"></i>\n  </button>\n  <button id=\"play\" class=\"action-btn action-btn-big\">\n    //暫停或是撥放\n    <i class=\"fas fa-play\"></i>\n  </button>\n  <button id=\"next\" class=\"action-btn\">\n    //下一首\n    <i class=\"fas fa-forward\"></i>\n  </button>\n</div>\n```\n\n完成圖\n![](https://i.imgur.com/LxSk2FZ.png)\n\n## 樣式\n\n樣式可以依照個人喜好來設定。\n因為案例中在撥放音樂的時候，音樂圖片會像 CD 被讀取一樣一直旋轉，所以這裡介紹一下 CSS 的動畫效果 ( animation )。\n\n`@keyframes` : 動畫影格，控制 CSS 從哪移動到哪的概念。\n\n在這案例中撥放音樂的時候會圖片會旋轉，旋轉就會用 rotate 來控制旋轉角度，再用 deg 為單位。\n\n```css\n@keyframes rotate {\n  from {\n    transform: rotate(0deg); //從甚麼角度開始\n  }\n\n  to {\n    transform: rotate(360deg); //到什麼角度\n  }\n}\n```\n\nCSS 動畫還有其他屬性可以使用。\n以下圖片來自 : [完整解析 CSS 動畫 ( CSS Animation )](https://www.oxxostudio.tw/articles/201803/css-animation.html)\n![](https://i.imgur.com/eiIhcRF.png)\n\n## JavaScript\n\n### 1. 抓取 DOM 元素\n\n```javascript\nconst musicContainer = document.querySelector('#music-container')\nconst progressContainer = document.querySelector('#progress-container')\nconst progress = document.querySelector('#progress')\nconst audio = document.querySelector('#audio')\nconst cover = document.querySelector('#cover')\nconst PrevBtn = document.querySelector('#prev')\nconst playBtn = document.querySelector('#play')\nconst nextBtn = document.querySelector('#next')\nconst title = document.querySelector('#title')\n```\n\n### 2. 撥放音樂的時候要顯示的歌曲名稱跟圖片\n\n```javascript\nconst songs = ['hey', 'summer', 'ukulele']\n\nlet songsIndex = 2\n\nloadSong(songs[songsIndex])\n\nfunction loadSong(song) {\n  title.innerText = song\n  audio.src = `music/${song}.mp3`\n  cover.src = `images/${song}.jpg`\n}\n```\n\n### 3. 撥放跟暫停\n\n監聽撥放跟暫停按鈕，再把這動作寫成 `callback function`。\n在撥放音樂的時候要在 `musicContainer` DOM 上面加上 `classList play` ，才會產生動畫效果同時 `icon` 也會變更，撥放時是暫停的 `icon` ，暫停時是撥放的 `icon` 。\n\n```javascript\nfunction playSong() {\n  musicContainer.classList.add('play')\n  playBtn.querySelector('i.fas').classList.remove('fa-play')\n  playBtn.querySelector('i.fas').classList.add('fa-pause')\n\n  audio.play()\n}\n\nfunction pauseSong() {\n  musicContainer.classList.remove('play')\n  playBtn.querySelector('i.fas').classList.add('fa-play')\n  playBtn.querySelector('i.fas').classList.remove('fa-pause')\n\n  audio.pause()\n}\n\nplayBtn.addEventListener('click', () => {\n  const isPlaying = musicContainer.classList.contains('play')\n  if (isPlaying) {\n    pauseSong()\n  } else {\n    playSong()\n  }\n})\n```\n\n### 4. 切換歌曲\n\n利用陣列的數量跟索引值決定下一首，但陣列中的索引值最小是 0，如果一直按上一首歌曲，到索引值 0 的時候就會卡住了，不會從最後面的歌曲開始往回推，所以要用函式判斷，當小於歌曲陣列的索引值時，要從陣列的最後一個索引開始往回推。\n\n#### 上一首\n\n判斷式中 `songs.length - 1` 是因為陣列內長度是 3 ，但索引值是 2 ，所以\n`3 - 1` 會回到歌曲索引值的 2 也就是最後一首，這樣一直按上一首的話就可以變成無窮迴圈了\n\n#### 下一首\n\n同理，如果點擊的數字大於陣列中的索引值 ( 最後一首歌 )，那就讓陣列回索引值為 0 的第一首歌曲開始。\n\n```javascript\nfunction preSong() {\n  songsIndex--\n\n  if (songsIndex < 0) {\n    songsIndex = songs.length - 1\n  }\n\n  loadSong(songs[songsIndex])\n\n  playSong()\n}\n\nfunction nextSong() {\n  songsIndex++\n\n  if (songsIndex > songs.length - 1) {\n    songsIndex = 0\n  }\n\n  loadSong(songs[songsIndex])\n\n  playSong()\n}\n\nPrevBtn.addEventListener('click', preSong)\nnextBtn.addEventListener('click', nextSong)\n```\n\n### 5. 顯示進度讀取條\n\n撥放音樂的時候時間軸會更新同時觸發 `updateProgress` function ，function 會帶出 progress bar 讀取進度。\n\n- `timeupdate` : 在更新時間的時候會觸發\n- `e.srcElement` 是目前事件觸發的來源，用 `console.log` 查看，顯示下圖\n  ![](https://i.imgur.com/u1ixS8l.png)\n- `duration` : 時間的總長度\n- `currentTime` : 當下讀取的時間軸\n  ![](https://i.imgur.com/ulsD1u7.png)\n\n`progress` 會隨著音樂時間的長度顯示 bar 條。\n\n```javascript\nfunction updateProgress(e) {\n  const { duration, currentTime } = e.srcElement\n  const progressPercent = (currentTime / duration) * 100\n  progress.style.width = `${progressPercent}%`\n}\n\naudio.addEventListener('timeupdate', updateProgress)\n```\n\n### 6. 指定音樂撥放的時間軸\n\n有了 progress bar 就可以利用 bar 條指定時間軸。\n`clientWidth` : 是這個元素下的總寬度。\n而這裡的 `clientWidth` 是指向 ，`progress` 的總寬度，如下圖![](https://i.imgur.com/W6jadN3.png)\n\n有了總寬度還需要音樂時間軸的寬度\n用 `console.log` 看 `clientWidth`、`clickX`，如下圖\n![](https://i.imgur.com/jL6oaR9.png)\n\n當我點擊時間軸後，會跳出總長度跟該元素的長度，將這兩個元素相除的結果等於當下元素的長度，在乘上時間軸就可以把點擊當下 bar 條跟音樂時間軸同時綁定，這樣點擊時間軸會跳到該時段 bar 條也會同時顯示長度。\n\n下圖比較能理解 `offset` 跟 `clint` 語法:\n![](https://i.imgur.com/WFOOzc5.png)\n[上圖來源](https://www.pianshen.com/images/124/09a28ef42af91b0b7d5fff6c74bd3a0c.png)\n\n```javascript\nfunction setProgress(e) {\n  const width = this.clientWidth\n  const clickX = e.offsetX\n  const duration = audio.duration\n\n  audio.currentTime = (clickX / width) * duration\n}\n\nprogressContainer.addEventListener('click', setProgress)\n```\n\n---\n\n## 參考資料\n\n[CSS 動畫](https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Animations/Using_CSS_animations)\n[完整解析 CSS 動畫 ( CSS Animation )](https://www.oxxostudio.tw/articles/201803/css-animation.html)\n[Animate.css](https://animate.style/)\n[HTMLMediaElement：timeupdate](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/timeupdate_event)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview)\n","source":"_posts/2020/Music-player.md","raw":"---\ntitle: JavaScript 實作 - 音樂播放器\ndate: 2021/01/22\ntags:\n  - JavaScript\n  - 作品集\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n功能描述:\n\n1. 點擊進度條可以選擇播放時段\n2. 撥放完後自動撥放下一曲\n3. 可選擇上一曲或下一曲\n\n![](https://i.imgur.com/pfv9RIb.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission25)\n[DEMO](https://pktseng.github.io/Web-Side-Project/mission25/index.html)\n\n<!-- more -->\n\n## 模板\n\n給個容器，將內容包在裡面，方便控制容器內的通用樣式跟監聽\n\n```html\n<div class=\"music-container\" id=\"music-container\"></div>\n```\n\n撥放音樂的時候顯示音樂名稱跟進度條\n\n```html\n<div class=\"music-info\">\n  <h4 id=\"title\"></h4>\n  <div class=\"progress-container\" id=\"progress-container\">\n    <div class=\"progress\" id=\"progress\"></div>\n  </div>\n</div>\n```\n\n撥放歌曲\n\n```html\n<audio src=\"music/ukulele.mp3\" id=\"audio\"></audio>\n```\n\n音樂圖片\n\n```html\n<div class=\"img-container\">\n  <img src=\"images/ukulele.jpg\" alt=\"music-cover\" id=\"cover\" />\n</div>\n```\n\n音樂撥放按鈕，按鈕使用是 [Font Awesome](https://fontawesome.com/) 顯示\n\n```html\n<div class=\"navigation\">\n  <button id=\"prev\" class=\"action-btn\">\n    //上一首\n    <i class=\"fas fa-backward\"></i>\n  </button>\n  <button id=\"play\" class=\"action-btn action-btn-big\">\n    //暫停或是撥放\n    <i class=\"fas fa-play\"></i>\n  </button>\n  <button id=\"next\" class=\"action-btn\">\n    //下一首\n    <i class=\"fas fa-forward\"></i>\n  </button>\n</div>\n```\n\n完成圖\n![](https://i.imgur.com/LxSk2FZ.png)\n\n## 樣式\n\n樣式可以依照個人喜好來設定。\n因為案例中在撥放音樂的時候，音樂圖片會像 CD 被讀取一樣一直旋轉，所以這裡介紹一下 CSS 的動畫效果 ( animation )。\n\n`@keyframes` : 動畫影格，控制 CSS 從哪移動到哪的概念。\n\n在這案例中撥放音樂的時候會圖片會旋轉，旋轉就會用 rotate 來控制旋轉角度，再用 deg 為單位。\n\n```css\n@keyframes rotate {\n  from {\n    transform: rotate(0deg); //從甚麼角度開始\n  }\n\n  to {\n    transform: rotate(360deg); //到什麼角度\n  }\n}\n```\n\nCSS 動畫還有其他屬性可以使用。\n以下圖片來自 : [完整解析 CSS 動畫 ( CSS Animation )](https://www.oxxostudio.tw/articles/201803/css-animation.html)\n![](https://i.imgur.com/eiIhcRF.png)\n\n## JavaScript\n\n### 1. 抓取 DOM 元素\n\n```javascript\nconst musicContainer = document.querySelector('#music-container')\nconst progressContainer = document.querySelector('#progress-container')\nconst progress = document.querySelector('#progress')\nconst audio = document.querySelector('#audio')\nconst cover = document.querySelector('#cover')\nconst PrevBtn = document.querySelector('#prev')\nconst playBtn = document.querySelector('#play')\nconst nextBtn = document.querySelector('#next')\nconst title = document.querySelector('#title')\n```\n\n### 2. 撥放音樂的時候要顯示的歌曲名稱跟圖片\n\n```javascript\nconst songs = ['hey', 'summer', 'ukulele']\n\nlet songsIndex = 2\n\nloadSong(songs[songsIndex])\n\nfunction loadSong(song) {\n  title.innerText = song\n  audio.src = `music/${song}.mp3`\n  cover.src = `images/${song}.jpg`\n}\n```\n\n### 3. 撥放跟暫停\n\n監聽撥放跟暫停按鈕，再把這動作寫成 `callback function`。\n在撥放音樂的時候要在 `musicContainer` DOM 上面加上 `classList play` ，才會產生動畫效果同時 `icon` 也會變更，撥放時是暫停的 `icon` ，暫停時是撥放的 `icon` 。\n\n```javascript\nfunction playSong() {\n  musicContainer.classList.add('play')\n  playBtn.querySelector('i.fas').classList.remove('fa-play')\n  playBtn.querySelector('i.fas').classList.add('fa-pause')\n\n  audio.play()\n}\n\nfunction pauseSong() {\n  musicContainer.classList.remove('play')\n  playBtn.querySelector('i.fas').classList.add('fa-play')\n  playBtn.querySelector('i.fas').classList.remove('fa-pause')\n\n  audio.pause()\n}\n\nplayBtn.addEventListener('click', () => {\n  const isPlaying = musicContainer.classList.contains('play')\n  if (isPlaying) {\n    pauseSong()\n  } else {\n    playSong()\n  }\n})\n```\n\n### 4. 切換歌曲\n\n利用陣列的數量跟索引值決定下一首，但陣列中的索引值最小是 0，如果一直按上一首歌曲，到索引值 0 的時候就會卡住了，不會從最後面的歌曲開始往回推，所以要用函式判斷，當小於歌曲陣列的索引值時，要從陣列的最後一個索引開始往回推。\n\n#### 上一首\n\n判斷式中 `songs.length - 1` 是因為陣列內長度是 3 ，但索引值是 2 ，所以\n`3 - 1` 會回到歌曲索引值的 2 也就是最後一首，這樣一直按上一首的話就可以變成無窮迴圈了\n\n#### 下一首\n\n同理，如果點擊的數字大於陣列中的索引值 ( 最後一首歌 )，那就讓陣列回索引值為 0 的第一首歌曲開始。\n\n```javascript\nfunction preSong() {\n  songsIndex--\n\n  if (songsIndex < 0) {\n    songsIndex = songs.length - 1\n  }\n\n  loadSong(songs[songsIndex])\n\n  playSong()\n}\n\nfunction nextSong() {\n  songsIndex++\n\n  if (songsIndex > songs.length - 1) {\n    songsIndex = 0\n  }\n\n  loadSong(songs[songsIndex])\n\n  playSong()\n}\n\nPrevBtn.addEventListener('click', preSong)\nnextBtn.addEventListener('click', nextSong)\n```\n\n### 5. 顯示進度讀取條\n\n撥放音樂的時候時間軸會更新同時觸發 `updateProgress` function ，function 會帶出 progress bar 讀取進度。\n\n- `timeupdate` : 在更新時間的時候會觸發\n- `e.srcElement` 是目前事件觸發的來源，用 `console.log` 查看，顯示下圖\n  ![](https://i.imgur.com/u1ixS8l.png)\n- `duration` : 時間的總長度\n- `currentTime` : 當下讀取的時間軸\n  ![](https://i.imgur.com/ulsD1u7.png)\n\n`progress` 會隨著音樂時間的長度顯示 bar 條。\n\n```javascript\nfunction updateProgress(e) {\n  const { duration, currentTime } = e.srcElement\n  const progressPercent = (currentTime / duration) * 100\n  progress.style.width = `${progressPercent}%`\n}\n\naudio.addEventListener('timeupdate', updateProgress)\n```\n\n### 6. 指定音樂撥放的時間軸\n\n有了 progress bar 就可以利用 bar 條指定時間軸。\n`clientWidth` : 是這個元素下的總寬度。\n而這裡的 `clientWidth` 是指向 ，`progress` 的總寬度，如下圖![](https://i.imgur.com/W6jadN3.png)\n\n有了總寬度還需要音樂時間軸的寬度\n用 `console.log` 看 `clientWidth`、`clickX`，如下圖\n![](https://i.imgur.com/jL6oaR9.png)\n\n當我點擊時間軸後，會跳出總長度跟該元素的長度，將這兩個元素相除的結果等於當下元素的長度，在乘上時間軸就可以把點擊當下 bar 條跟音樂時間軸同時綁定，這樣點擊時間軸會跳到該時段 bar 條也會同時顯示長度。\n\n下圖比較能理解 `offset` 跟 `clint` 語法:\n![](https://i.imgur.com/WFOOzc5.png)\n[上圖來源](https://www.pianshen.com/images/124/09a28ef42af91b0b7d5fff6c74bd3a0c.png)\n\n```javascript\nfunction setProgress(e) {\n  const width = this.clientWidth\n  const clickX = e.offsetX\n  const duration = audio.duration\n\n  audio.currentTime = (clickX / width) * duration\n}\n\nprogressContainer.addEventListener('click', setProgress)\n```\n\n---\n\n## 參考資料\n\n[CSS 動畫](https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Animations/Using_CSS_animations)\n[完整解析 CSS 動畫 ( CSS Animation )](https://www.oxxostudio.tw/articles/201803/css-animation.html)\n[Animate.css](https://animate.style/)\n[HTMLMediaElement：timeupdate](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/timeupdate_event)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview)\n","slug":"Music-player","published":1,"updated":"2021-03-26T16:13:10.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpa0005g0tr1f050vzr","content":"<html><head></head><body><p>功能描述:</p>\n<ol>\n<li>點擊進度條可以選擇播放時段</li>\n<li>撥放完後自動撥放下一曲</li>\n<li>可選擇上一曲或下一曲</li>\n</ol>\n<p><img src=\"https://i.imgur.com/pfv9RIb.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission25\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission25/index.html\">DEMO</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>給個容器，將內容包在裡面，方便控制容器內的通用樣式跟監聽</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"music-container\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"music-container\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>撥放音樂的時候顯示音樂名稱跟進度條</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"music-info\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"progress-container\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"progress-container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"progress\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"progress\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>撥放歌曲</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"music/ukulele.mp3\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"audio\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>音樂圖片</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"img-container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"images/ukulele.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"music-cover\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cover\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>音樂撥放按鈕，按鈕使用是 <a href=\"https://fontawesome.com/\">Font Awesome</a> 顯示</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"navigation\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"prev\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"action-btn\"</span>&gt;</span></span><br><span class=\"line\">    //上一首</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fas fa-backward\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"play\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"action-btn action-btn-big\"</span>&gt;</span></span><br><span class=\"line\">    //暫停或是撥放</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fas fa-play\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"next\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"action-btn\"</span>&gt;</span></span><br><span class=\"line\">    //下一首</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fas fa-forward\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>完成圖<br><img src=\"https://i.imgur.com/LxSk2FZ.png\"></p>\n<h2 id=\"樣式\"><a href=\"#樣式\" class=\"headerlink\" title=\"樣式\"></a>樣式</h2><p>樣式可以依照個人喜好來設定。<br>因為案例中在撥放音樂的時候，音樂圖片會像 CD 被讀取一樣一直旋轉，所以這裡介紹一下 CSS 的動畫效果 ( animation )。</p>\n<p><code>@keyframes</code> : 動畫影格，控制 CSS 從哪移動到哪的概念。</p>\n<p>在這案例中撥放音樂的時候會圖片會旋轉，旋轉就會用 rotate 來控制旋轉角度，再用 deg 為單位。</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">@keyframes</span> rotate {</span><br><span class=\"line\">  <span class=\"hljs-selector-tag\">from</span> {</span><br><span class=\"line\">    transform: rotate(0deg); //從甚麼角度開始</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-selector-tag\">to</span> {</span><br><span class=\"line\">    transform: rotate(360deg); //到什麼角度</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>CSS 動畫還有其他屬性可以使用。<br>以下圖片來自 : <a href=\"https://www.oxxostudio.tw/articles/201803/css-animation.html\">完整解析 CSS 動畫 ( CSS Animation )</a><br><img src=\"https://i.imgur.com/eiIhcRF.png\"></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"1-抓取-DOM-元素\"><a href=\"#1-抓取-DOM-元素\" class=\"headerlink\" title=\"1. 抓取 DOM 元素\"></a>1. 抓取 DOM 元素</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> musicContainer = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#music-container'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> progressContainer = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#progress-container'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> progress = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#progress'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> audio = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#audio'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> cover = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#cover'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> PrevBtn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#prev'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> playBtn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#play'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> nextBtn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#next'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> title = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#title'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-撥放音樂的時候要顯示的歌曲名稱跟圖片\"><a href=\"#2-撥放音樂的時候要顯示的歌曲名稱跟圖片\" class=\"headerlink\" title=\"2. 撥放音樂的時候要顯示的歌曲名稱跟圖片\"></a>2. 撥放音樂的時候要顯示的歌曲名稱跟圖片</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> songs = [<span class=\"hljs-string\">'hey'</span>, <span class=\"hljs-string\">'summer'</span>, <span class=\"hljs-string\">'ukulele'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> songsIndex = <span class=\"hljs-number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">loadSong(songs[songsIndex])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loadSong</span>(<span class=\"hljs-params\">song</span>) </span>{</span><br><span class=\"line\">  title.innerText = song</span><br><span class=\"line\">  audio.src = <span class=\"hljs-string\">`music/<span class=\"hljs-subst\">${song}</span>.mp3`</span></span><br><span class=\"line\">  cover.src = <span class=\"hljs-string\">`images/<span class=\"hljs-subst\">${song}</span>.jpg`</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-撥放跟暫停\"><a href=\"#3-撥放跟暫停\" class=\"headerlink\" title=\"3. 撥放跟暫停\"></a>3. 撥放跟暫停</h3><p>監聽撥放跟暫停按鈕，再把這動作寫成 <code>callback function</code>。<br>在撥放音樂的時候要在 <code>musicContainer</code> DOM 上面加上 <code>classList play</code> ，才會產生動畫效果同時 <code>icon</code> 也會變更，撥放時是暫停的 <code>icon</code> ，暫停時是撥放的 <code>icon</code> 。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">playSong</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  musicContainer.classList.add(<span class=\"hljs-string\">'play'</span>)</span><br><span class=\"line\">  playBtn.querySelector(<span class=\"hljs-string\">'i.fas'</span>).classList.remove(<span class=\"hljs-string\">'fa-play'</span>)</span><br><span class=\"line\">  playBtn.querySelector(<span class=\"hljs-string\">'i.fas'</span>).classList.add(<span class=\"hljs-string\">'fa-pause'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  audio.play()</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pauseSong</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  musicContainer.classList.remove(<span class=\"hljs-string\">'play'</span>)</span><br><span class=\"line\">  playBtn.querySelector(<span class=\"hljs-string\">'i.fas'</span>).classList.add(<span class=\"hljs-string\">'fa-play'</span>)</span><br><span class=\"line\">  playBtn.querySelector(<span class=\"hljs-string\">'i.fas'</span>).classList.remove(<span class=\"hljs-string\">'fa-pause'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  audio.pause()</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">playBtn.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isPlaying = musicContainer.classList.contains(<span class=\"hljs-string\">'play'</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isPlaying) {</span><br><span class=\"line\">    pauseSong()</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    playSong()</span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-切換歌曲\"><a href=\"#4-切換歌曲\" class=\"headerlink\" title=\"4. 切換歌曲\"></a>4. 切換歌曲</h3><p>利用陣列的數量跟索引值決定下一首，但陣列中的索引值最小是 0，如果一直按上一首歌曲，到索引值 0 的時候就會卡住了，不會從最後面的歌曲開始往回推，所以要用函式判斷，當小於歌曲陣列的索引值時，要從陣列的最後一個索引開始往回推。</p>\n<h4 id=\"上一首\"><a href=\"#上一首\" class=\"headerlink\" title=\"上一首\"></a>上一首</h4><p>判斷式中 <code>songs.length - 1</code> 是因為陣列內長度是 3 ，但索引值是 2 ，所以<br><code>3 - 1</code> 會回到歌曲索引值的 2 也就是最後一首，這樣一直按上一首的話就可以變成無窮迴圈了</p>\n<h4 id=\"下一首\"><a href=\"#下一首\" class=\"headerlink\" title=\"下一首\"></a>下一首</h4><p>同理，如果點擊的數字大於陣列中的索引值 ( 最後一首歌 )，那就讓陣列回索引值為 0 的第一首歌曲開始。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preSong</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  songsIndex--</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (songsIndex &lt; <span class=\"hljs-number\">0</span>) {</span><br><span class=\"line\">    songsIndex = songs.length - <span class=\"hljs-number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  loadSong(songs[songsIndex])</span><br><span class=\"line\"></span><br><span class=\"line\">  playSong()</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nextSong</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  songsIndex++</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (songsIndex &gt; songs.length - <span class=\"hljs-number\">1</span>) {</span><br><span class=\"line\">    songsIndex = <span class=\"hljs-number\">0</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  loadSong(songs[songsIndex])</span><br><span class=\"line\"></span><br><span class=\"line\">  playSong()</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">PrevBtn.addEventListener(<span class=\"hljs-string\">'click'</span>, preSong)</span><br><span class=\"line\">nextBtn.addEventListener(<span class=\"hljs-string\">'click'</span>, nextSong)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"5-顯示進度讀取條\"><a href=\"#5-顯示進度讀取條\" class=\"headerlink\" title=\"5. 顯示進度讀取條\"></a>5. 顯示進度讀取條</h3><p>撥放音樂的時候時間軸會更新同時觸發 <code>updateProgress</code> function ，function 會帶出 progress bar 讀取進度。</p>\n<ul>\n<li><code>timeupdate</code> : 在更新時間的時候會觸發</li>\n<li><code>e.srcElement</code> 是目前事件觸發的來源，用 <code>console.log</code> 查看，顯示下圖<br><img src=\"https://i.imgur.com/u1ixS8l.png\"></li>\n<li><code>duration</code> : 時間的總長度</li>\n<li><code>currentTime</code> : 當下讀取的時間軸<br><img src=\"https://i.imgur.com/ulsD1u7.png\"></li>\n</ul>\n<p><code>progress</code> 會隨著音樂時間的長度顯示 bar 條。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateProgress</span>(<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> { duration, currentTime } = e.srcElement</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> progressPercent = (currentTime / duration) * <span class=\"hljs-number\">100</span></span><br><span class=\"line\">  progress.style.width = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${progressPercent}</span>%`</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">audio.addEventListener(<span class=\"hljs-string\">'timeupdate'</span>, updateProgress)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"6-指定音樂撥放的時間軸\"><a href=\"#6-指定音樂撥放的時間軸\" class=\"headerlink\" title=\"6. 指定音樂撥放的時間軸\"></a>6. 指定音樂撥放的時間軸</h3><p>有了 progress bar 就可以利用 bar 條指定時間軸。<br><code>clientWidth</code> : 是這個元素下的總寬度。<br>而這裡的 <code>clientWidth</code> 是指向 ，<code>progress</code> 的總寬度，如下圖<img src=\"https://i.imgur.com/W6jadN3.png\"></p>\n<p>有了總寬度還需要音樂時間軸的寬度<br>用 <code>console.log</code> 看 <code>clientWidth</code>、<code>clickX</code>，如下圖<br><img src=\"https://i.imgur.com/jL6oaR9.png\"></p>\n<p>當我點擊時間軸後，會跳出總長度跟該元素的長度，將這兩個元素相除的結果等於當下元素的長度，在乘上時間軸就可以把點擊當下 bar 條跟音樂時間軸同時綁定，這樣點擊時間軸會跳到該時段 bar 條也會同時顯示長度。</p>\n<p>下圖比較能理解 <code>offset</code> 跟 <code>clint</code> 語法:<br><img src=\"https://i.imgur.com/WFOOzc5.png\"><br><a href=\"https://www.pianshen.com/images/124/09a28ef42af91b0b7d5fff6c74bd3a0c.png\">上圖來源</a></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setProgress</span>(<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> width = <span class=\"hljs-built_in\">this</span>.clientWidth</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> clickX = e.offsetX</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> duration = audio.duration</span><br><span class=\"line\"></span><br><span class=\"line\">  audio.currentTime = (clickX / width) * duration</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">progressContainer.addEventListener(<span class=\"hljs-string\">'click'</span>, setProgress)</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">CSS 動畫</a><br><a href=\"https://www.oxxostudio.tw/articles/201803/css-animation.html\">完整解析 CSS 動畫 ( CSS Animation )</a><br><a href=\"https://animate.style/\">Animate.css</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/timeupdate_event\">HTMLMediaElement：timeupdate</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview\">20 Web Projects With Vanilla JavaScript</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"作品集","path":"tags/作品集/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><p>功能描述:</p>\n<ol>\n<li>點擊進度條可以選擇播放時段</li>\n<li>撥放完後自動撥放下一曲</li>\n<li>可選擇上一曲或下一曲</li>\n</ol>\n<p><img src=\"https://i.imgur.com/pfv9RIb.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission25\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission25/index.html\">DEMO</a></p></body></html>","more":"<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>給個容器，將內容包在裡面，方便控制容器內的通用樣式跟監聽</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;music-container&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;music-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>撥放音樂的時候顯示音樂名稱跟進度條</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;music-info&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress-container&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;progress-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;progress&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;progress&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>撥放歌曲</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;music/ukulele.mp3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;audio&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>音樂圖片</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;img-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;images/ukulele.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;music-cover&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cover&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>音樂撥放按鈕，按鈕使用是 <a href=\"https://fontawesome.com/\">Font Awesome</a> 顯示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;navigation&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;prev&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;action-btn&quot;</span>&gt;</span></span><br><span class=\"line\">    //上一首</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fas fa-backward&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;play&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;action-btn action-btn-big&quot;</span>&gt;</span></span><br><span class=\"line\">    //暫停或是撥放</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fas fa-play&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;next&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;action-btn&quot;</span>&gt;</span></span><br><span class=\"line\">    //下一首</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fas fa-forward&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>完成圖<br><img src=\"https://i.imgur.com/LxSk2FZ.png\"></p>\n<h2 id=\"樣式\"><a href=\"#樣式\" class=\"headerlink\" title=\"樣式\"></a>樣式</h2><p>樣式可以依照個人喜好來設定。<br>因為案例中在撥放音樂的時候，音樂圖片會像 CD 被讀取一樣一直旋轉，所以這裡介紹一下 CSS 的動畫效果 ( animation )。</p>\n<p><code>@keyframes</code> : 動畫影格，控制 CSS 從哪移動到哪的概念。</p>\n<p>在這案例中撥放音樂的時候會圖片會旋轉，旋轉就會用 rotate 來控制旋轉角度，再用 deg 為單位。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> rotate &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    transform: rotate(0deg); //從甚麼角度開始</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    transform: rotate(360deg); //到什麼角度</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CSS 動畫還有其他屬性可以使用。<br>以下圖片來自 : <a href=\"https://www.oxxostudio.tw/articles/201803/css-animation.html\">完整解析 CSS 動畫 ( CSS Animation )</a><br><img src=\"https://i.imgur.com/eiIhcRF.png\"></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"1-抓取-DOM-元素\"><a href=\"#1-抓取-DOM-元素\" class=\"headerlink\" title=\"1. 抓取 DOM 元素\"></a>1. 抓取 DOM 元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> musicContainer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#music-container&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> progressContainer = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#progress-container&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> progress = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#progress&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> audio = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#audio&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cover = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#cover&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> PrevBtn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#prev&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> playBtn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#play&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> nextBtn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#next&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> title = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#title&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-撥放音樂的時候要顯示的歌曲名稱跟圖片\"><a href=\"#2-撥放音樂的時候要顯示的歌曲名稱跟圖片\" class=\"headerlink\" title=\"2. 撥放音樂的時候要顯示的歌曲名稱跟圖片\"></a>2. 撥放音樂的時候要顯示的歌曲名稱跟圖片</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> songs = [<span class=\"string\">&#x27;hey&#x27;</span>, <span class=\"string\">&#x27;summer&#x27;</span>, <span class=\"string\">&#x27;ukulele&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> songsIndex = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">loadSong(songs[songsIndex])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadSong</span>(<span class=\"params\">song</span>) </span>&#123;</span><br><span class=\"line\">  title.innerText = song</span><br><span class=\"line\">  audio.src = <span class=\"string\">`music/<span class=\"subst\">$&#123;song&#125;</span>.mp3`</span></span><br><span class=\"line\">  cover.src = <span class=\"string\">`images/<span class=\"subst\">$&#123;song&#125;</span>.jpg`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-撥放跟暫停\"><a href=\"#3-撥放跟暫停\" class=\"headerlink\" title=\"3. 撥放跟暫停\"></a>3. 撥放跟暫停</h3><p>監聽撥放跟暫停按鈕，再把這動作寫成 <code>callback function</code>。<br>在撥放音樂的時候要在 <code>musicContainer</code> DOM 上面加上 <code>classList play</code> ，才會產生動畫效果同時 <code>icon</code> 也會變更，撥放時是暫停的 <code>icon</code> ，暫停時是撥放的 <code>icon</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">playSong</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  musicContainer.classList.add(<span class=\"string\">&#x27;play&#x27;</span>)</span><br><span class=\"line\">  playBtn.querySelector(<span class=\"string\">&#x27;i.fas&#x27;</span>).classList.remove(<span class=\"string\">&#x27;fa-play&#x27;</span>)</span><br><span class=\"line\">  playBtn.querySelector(<span class=\"string\">&#x27;i.fas&#x27;</span>).classList.add(<span class=\"string\">&#x27;fa-pause&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  audio.play()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pauseSong</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  musicContainer.classList.remove(<span class=\"string\">&#x27;play&#x27;</span>)</span><br><span class=\"line\">  playBtn.querySelector(<span class=\"string\">&#x27;i.fas&#x27;</span>).classList.add(<span class=\"string\">&#x27;fa-play&#x27;</span>)</span><br><span class=\"line\">  playBtn.querySelector(<span class=\"string\">&#x27;i.fas&#x27;</span>).classList.remove(<span class=\"string\">&#x27;fa-pause&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  audio.pause()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">playBtn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isPlaying = musicContainer.classList.contains(<span class=\"string\">&#x27;play&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isPlaying) &#123;</span><br><span class=\"line\">    pauseSong()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    playSong()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-切換歌曲\"><a href=\"#4-切換歌曲\" class=\"headerlink\" title=\"4. 切換歌曲\"></a>4. 切換歌曲</h3><p>利用陣列的數量跟索引值決定下一首，但陣列中的索引值最小是 0，如果一直按上一首歌曲，到索引值 0 的時候就會卡住了，不會從最後面的歌曲開始往回推，所以要用函式判斷，當小於歌曲陣列的索引值時，要從陣列的最後一個索引開始往回推。</p>\n<h4 id=\"上一首\"><a href=\"#上一首\" class=\"headerlink\" title=\"上一首\"></a>上一首</h4><p>判斷式中 <code>songs.length - 1</code> 是因為陣列內長度是 3 ，但索引值是 2 ，所以<br><code>3 - 1</code> 會回到歌曲索引值的 2 也就是最後一首，這樣一直按上一首的話就可以變成無窮迴圈了</p>\n<h4 id=\"下一首\"><a href=\"#下一首\" class=\"headerlink\" title=\"下一首\"></a>下一首</h4><p>同理，如果點擊的數字大於陣列中的索引值 ( 最後一首歌 )，那就讓陣列回索引值為 0 的第一首歌曲開始。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preSong</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  songsIndex--</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (songsIndex &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    songsIndex = songs.length - <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadSong(songs[songsIndex])</span><br><span class=\"line\"></span><br><span class=\"line\">  playSong()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextSong</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  songsIndex++</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (songsIndex &gt; songs.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    songsIndex = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadSong(songs[songsIndex])</span><br><span class=\"line\"></span><br><span class=\"line\">  playSong()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PrevBtn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, preSong)</span><br><span class=\"line\">nextBtn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, nextSong)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-顯示進度讀取條\"><a href=\"#5-顯示進度讀取條\" class=\"headerlink\" title=\"5. 顯示進度讀取條\"></a>5. 顯示進度讀取條</h3><p>撥放音樂的時候時間軸會更新同時觸發 <code>updateProgress</code> function ，function 會帶出 progress bar 讀取進度。</p>\n<ul>\n<li><code>timeupdate</code> : 在更新時間的時候會觸發</li>\n<li><code>e.srcElement</code> 是目前事件觸發的來源，用 <code>console.log</code> 查看，顯示下圖<br><img src=\"https://i.imgur.com/u1ixS8l.png\"></li>\n<li><code>duration</code> : 時間的總長度</li>\n<li><code>currentTime</code> : 當下讀取的時間軸<br><img src=\"https://i.imgur.com/ulsD1u7.png\"></li>\n</ul>\n<p><code>progress</code> 會隨著音樂時間的長度顯示 bar 條。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateProgress</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; duration, currentTime &#125; = e.srcElement</span><br><span class=\"line\">  <span class=\"keyword\">const</span> progressPercent = (currentTime / duration) * <span class=\"number\">100</span></span><br><span class=\"line\">  progress.style.width = <span class=\"string\">`<span class=\"subst\">$&#123;progressPercent&#125;</span>%`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">audio.addEventListener(<span class=\"string\">&#x27;timeupdate&#x27;</span>, updateProgress)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-指定音樂撥放的時間軸\"><a href=\"#6-指定音樂撥放的時間軸\" class=\"headerlink\" title=\"6. 指定音樂撥放的時間軸\"></a>6. 指定音樂撥放的時間軸</h3><p>有了 progress bar 就可以利用 bar 條指定時間軸。<br><code>clientWidth</code> : 是這個元素下的總寬度。<br>而這裡的 <code>clientWidth</code> 是指向 ，<code>progress</code> 的總寬度，如下圖<img src=\"https://i.imgur.com/W6jadN3.png\"></p>\n<p>有了總寬度還需要音樂時間軸的寬度<br>用 <code>console.log</code> 看 <code>clientWidth</code>、<code>clickX</code>，如下圖<br><img src=\"https://i.imgur.com/jL6oaR9.png\"></p>\n<p>當我點擊時間軸後，會跳出總長度跟該元素的長度，將這兩個元素相除的結果等於當下元素的長度，在乘上時間軸就可以把點擊當下 bar 條跟音樂時間軸同時綁定，這樣點擊時間軸會跳到該時段 bar 條也會同時顯示長度。</p>\n<p>下圖比較能理解 <code>offset</code> 跟 <code>clint</code> 語法:<br><img src=\"https://i.imgur.com/WFOOzc5.png\"><br><a href=\"https://www.pianshen.com/images/124/09a28ef42af91b0b7d5fff6c74bd3a0c.png\">上圖來源</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setProgress</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> width = <span class=\"built_in\">this</span>.clientWidth</span><br><span class=\"line\">  <span class=\"keyword\">const</span> clickX = e.offsetX</span><br><span class=\"line\">  <span class=\"keyword\">const</span> duration = audio.duration</span><br><span class=\"line\"></span><br><span class=\"line\">  audio.currentTime = (clickX / width) * duration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">progressContainer.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, setProgress)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">CSS 動畫</a><br><a href=\"https://www.oxxostudio.tw/articles/201803/css-animation.html\">完整解析 CSS 動畫 ( CSS Animation )</a><br><a href=\"https://animate.style/\">Animate.css</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/timeupdate_event\">HTMLMediaElement：timeupdate</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview\">20 Web Projects With Vanilla JavaScript</a></p>"},{"title":"jQuery - 選擇器的進階 Traversal","date":"2021-01-14T16:00:00.000Z","_content":" \n## 1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩\n遍歷示意圖:\n![](https://i.imgur.com/t0TNBN2.png)\nTraversal 這觀念就是透過 API 操作相鄰隔壁的元素，以下示範\n<!-- more -->\n```html\n<ul id=\"ul-1\">\n  <li>ul-1</li>\n  <li>ul-1</li>\n  <li>ul-1</li>\n</ul>\n\n<ul id=\"ul-2\">\n  <li>ul-2</li>\n  <li>ul-2</li>\n  <li>ul-2</li>\n</ul>\n\n<ul id=\"ul-3\">\n  <li>ul-3</li>\n  <li>ul-3</li>\n  <li>ul-3</li>\n</ul>\n```\n原圖如下:\n![](https://i.imgur.com/vvusGy1.png)\n\n接下來套用 jQuery 三步驟，讓 dom 變色\n\n```javascript\n$('document').ready(function(){\n  $('#ul-1').css('color', 'red')\n})\n```\n![](https://i.imgur.com/zX89w0H.png)\n\n確定可以變色後，接下來要使用 Traversal 的效果，而這效果的 API 是 `siblings`\n```javascript\n$('document').ready(function(){\n  $('#ul-1').siblings().css('color', 'red')\n})\n```\n會顯示下圖，自己不變動，周圍的變動\n![](https://i.imgur.com/X8ujRzt.png)\n\n也可以透過鄰居再做其他動作，如下\n```javascript\n$('document').ready(function(){\n  $('#ul-1').siblings().first().css('color', 'red')\n})\n\n```\n抓取鄰居的第一個，顯示如下\n![](https://i.imgur.com/pUKeHjY.png)\n\n\n除了這方法還可以用陣列的方式抓取，但是如果用陣列的話會變成純元素，所以外面還是要用 `$()` ，將 `$('#ul-1').siblings().[1] `包起來，由於<font color=#FF0000>在 js 陣列裡面第一個索引都是從 0 開始算</font>，所以如果寫 `[1]` 就會顯示第二個，如下圖\n```javascript\n$('document').ready(function(){\n  $($('#ul-1').siblings().[1]).css('color', 'red')\n})\n```\n![](https://i.imgur.com/9dXHwVn.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/eYdQEKg?editors=1011)\n\n\n## 2. 鍊式( Chaining )寫法\njQuery 的鍊式( Chaining )寫法。就是 API 可以依照需求一直接下去。\n\n利用上面的範例在各 `ul` 外再加上父層 `.ul-father` ，注意! 是 `className` 不是 `id`\n```html\n<div class='ul-father'>\n  <ul id=\"ul-1\">\n    <li>ul-1</li>\n    <li>ul-1</li>\n    <li>ul-1</li>\n  </ul>\n</div>\n\n<div class='ul-father'>\n  <ul id=\"ul-2\">\n    <li>ul-2</li>\n    <li>ul-2</li>\n    <li>ul-2</li>\n  </ul>\n</div>\n\n<div class='ul-father'>\n  <ul id=\"ul-3\">\n    <li>ul-3</li>\n    <li>ul-3</li>\n    <li>ul-3</li>\n  </ul>\n</div>\n```\n樣式排版一下如下圖\n![](https://i.imgur.com/efGHN12.png)\n\n假設我們要讓 `ul-3` 的第一個變紅色的話，可以先透過父層的 `.ul-father` 再找到子層的第一個元素，這會用到練式寫法下\n\n---\n找到父層中的最後一個\n```javascript\n$('document').ready(function(){\n  $('.ul-father') \n    .last() \n    .css('color', 'red')\n})\n```\n![](https://i.imgur.com/pNnB0el.png)\n![](https://i.imgur.com/iCOm7Iu.png)\n\n---\n用 `.children()` 進到子層裡面，這時已經到 `ul` 層了\n```javascript\n$('document').ready(function(){\n  $('.ul-father')\n    .last()\n    .children()\n    .css('color', 'red')\n})\n```\n![](https://i.imgur.com/gTq9yI1.png)\n![](https://i.imgur.com/GMGSUOj.png)\n\n---\n再用 `.children()` 進到 `li` 層\n```javascript\n$('document').ready(function(){\n  $('.ul-father')\n    .last()\n    .children()\n    .children()\n    .css('color', 'red')\n})\n\n```\n![](https://i.imgur.com/EgaRJqn.png)\n![](https://i.imgur.com/N3pKSgH.png)\n\n---\n再用 `.first()` 選 `li` 裡面的第一個 `元素`\n```javascript\n$('document').ready(function(){\n  $('.ul-father')\n    .last()\n    .children()\n    .children()\n    .first()\n    .css('color', 'red')\n})\n\n```\n![](https://i.imgur.com/ROhVoju.png)\n![](https://i.imgur.com/at5rcAH.png)\n\n---\n[DEMO](https://codepen.io/gleofgja/pen/yLaQzyM?editors=1011)\n以上就是鍊式寫法的示範 ~\n\n## 3. Traversing 中的 first(), last(), find()\n以下示範是為了練習，方法很多種，這裡單純練習 API 的使用。\n在 jquery 中利用 `first()` 找到指定的元素，以下示範\n```html\n<div id='ul-father-2'>\n  <div class='ul-father'>\n    <ul id=\"ul-1\">\n      <li>ul-1</li>\n      <li>ul-1</li>\n      <li>ul-1</li>\n    </ul>\n  </div>\n</div>\n\n<div class='ul-father'>\n  <ul id=\"ul-2\">\n    <li>ul-2</li>\n    <li>ul-2</li>\n    <li>ul-2</li>\n  </ul>\n</div>\n\n<div class='ul-father'>\n  <ul id=\"ul-3\">\n    <li>ul-3</li>\n    <li>ul-3</li>\n    <li>ul-3</li>\n  </ul>\n</div>\n\n```\n---\n### first()\n![](https://i.imgur.com/AqW29aA.png)\n透過用 `className` 的方式讓 `ul-1` 亮紅色，因為相同的 `className` 有三個所以會選到其他的元素，這時就可以用 `first()`，來指定我們只要選第一個就好，以下示範\n```javascript\n// 第一個顯示顏色\n$(document).ready(function(){\n  $('.ul-father').first().css('color', 'red')\n})\n```\n![](https://i.imgur.com/SAkfFZ4.png)\n\n---\n### last()\n同理，換成最後一個就是 `last()`\n```javascript\n// 最後一個個顯示紅色\n$(document).ready(function(){\n  $('.ul-father').last().css('color', 'red')\n})\n```\n![](https://i.imgur.com/fKRl7j8.png)\n\n---\n\n### find()\n在 `ul-father` 外再加一層父層，然後稍為更改一下 HTML 結構。\n```html\n<div id='ul-father-2'>\n  <div class='ul-father'>\n    <ul id=\"ul-1\">\n      <li>ul-1</li>\n      <li>ul-1</li>\n      <li>ul-1</li>\n    </ul>\n  </div>\n  <div class='ul-father'>\n    <ul id=\"ul-2\">\n      <li>ul-2</li>\n      <li>ul-2</li>\n      <li>ul-2</li>\n    </ul>\n  </div>\n  <div class='ul-father'>\n    <ul id=\"ul-3\">\n      <li>ul-3</li>\n      <li>ul-3</li>\n      <li>ul-3</li>\n    </ul>\n  </div>\n</div>\n```\n將所有 `ul-father` 移到 `ul-father-2` 裡面，如果想要改變 `ul-1` 裡面的 `li` 元素就可以用 `find()`\n```javascript\n$(document).ready(function(){\n  $('#ul-father-2').find('#ul-1').css('color', 'red')\n})\n```\n![](https://i.imgur.com/m2VkEZd.png)\n這樣就可以抓到`ul-1` 並更改樣式了~\n\n[DEMO](https://codepen.io/gleofgja/pen/mdrQLMG?editors=1011)\n\n---\n## 4. Traversal 中的 eq(), filter() 與 not()\n以下示範單純為了練習 api 而使用。\n### eq() \n`eq()` 就是等於，功能類似指定\n```html\n<div class=\"a\">A</div>\n<div class=\"a\">A</div>\n<div class=\"a\">A</div>\n\n<div class=\"b\">B</div>\n<div class=\"b\">B</div>\n<div class=\"b\">B</div>\n\n<div class=\"c\">C</div>\n<div class=\"c\">C</div>\n<div class=\"c\">C</div>\n```\n![](https://i.imgur.com/rcWztWl.png)\n\n把 B 變紅色 `$('.b').css('color', 'red')`\n![](https://i.imgur.com/YU3Zlpj.png)\n\n但如果只要第一個 B 變紅色的話就加上 `eq()`，\n完整寫法 `$('.b').eq('0').css('color', 'red')`，要注意的是 jquery 的 API 還是用陣列的芳來指定索引，在陣列中第一個索引是 0，但還是要以官方文件為主。\n![](https://i.imgur.com/2ITawWg.png)\n\n---\n### filter()\n`filter()` 就是塞選\n在 HTML 結構下方加入 `<span class='a'>this is span</span>`， className 設定為 a，如果單純寫 `$('.a').css('color', 'red')` 這樣會抓到所有 className 為 a 的元素，如下圖\n![](https://i.imgur.com/uue7VEI.png)\n\n這時候就可以用 filter()，來指定 span 標籤，`$('.a').filter('span').css('color', 'red')`\n這樣就只會更改用 span 的標籤\n![](https://i.imgur.com/Rjz8dNX.png)\n\n### not()\n概念就是除了誰以外，其他都可以，例如除了 `.a` 以外的其他都更改樣式\n`$('div').not('.a').css('color', 'red')`，這樣除了 `.a` 的以外其他就都更改到樣式了\n\n![](https://i.imgur.com/TL2eO4d.png)\n\n\n[DEMO](https://codepen.io/gleofgja/pen/MWjZYmw?editors=1011)\n\n---\n## 參考資料\n[jQuery 幼幼班](https://codeshiba.teachable.com/courses/1255270/lectures/29538918)","source":"_posts/2020/Traversal.md","raw":"---\ntitle:  jQuery - 選擇器的進階 Traversal \ndate: 2021/01/15\ntags:  jQuery\n--- \n## 1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩\n遍歷示意圖:\n![](https://i.imgur.com/t0TNBN2.png)\nTraversal 這觀念就是透過 API 操作相鄰隔壁的元素，以下示範\n<!-- more -->\n```html\n<ul id=\"ul-1\">\n  <li>ul-1</li>\n  <li>ul-1</li>\n  <li>ul-1</li>\n</ul>\n\n<ul id=\"ul-2\">\n  <li>ul-2</li>\n  <li>ul-2</li>\n  <li>ul-2</li>\n</ul>\n\n<ul id=\"ul-3\">\n  <li>ul-3</li>\n  <li>ul-3</li>\n  <li>ul-3</li>\n</ul>\n```\n原圖如下:\n![](https://i.imgur.com/vvusGy1.png)\n\n接下來套用 jQuery 三步驟，讓 dom 變色\n\n```javascript\n$('document').ready(function(){\n  $('#ul-1').css('color', 'red')\n})\n```\n![](https://i.imgur.com/zX89w0H.png)\n\n確定可以變色後，接下來要使用 Traversal 的效果，而這效果的 API 是 `siblings`\n```javascript\n$('document').ready(function(){\n  $('#ul-1').siblings().css('color', 'red')\n})\n```\n會顯示下圖，自己不變動，周圍的變動\n![](https://i.imgur.com/X8ujRzt.png)\n\n也可以透過鄰居再做其他動作，如下\n```javascript\n$('document').ready(function(){\n  $('#ul-1').siblings().first().css('color', 'red')\n})\n\n```\n抓取鄰居的第一個，顯示如下\n![](https://i.imgur.com/pUKeHjY.png)\n\n\n除了這方法還可以用陣列的方式抓取，但是如果用陣列的話會變成純元素，所以外面還是要用 `$()` ，將 `$('#ul-1').siblings().[1] `包起來，由於<font color=#FF0000>在 js 陣列裡面第一個索引都是從 0 開始算</font>，所以如果寫 `[1]` 就會顯示第二個，如下圖\n```javascript\n$('document').ready(function(){\n  $($('#ul-1').siblings().[1]).css('color', 'red')\n})\n```\n![](https://i.imgur.com/9dXHwVn.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/eYdQEKg?editors=1011)\n\n\n## 2. 鍊式( Chaining )寫法\njQuery 的鍊式( Chaining )寫法。就是 API 可以依照需求一直接下去。\n\n利用上面的範例在各 `ul` 外再加上父層 `.ul-father` ，注意! 是 `className` 不是 `id`\n```html\n<div class='ul-father'>\n  <ul id=\"ul-1\">\n    <li>ul-1</li>\n    <li>ul-1</li>\n    <li>ul-1</li>\n  </ul>\n</div>\n\n<div class='ul-father'>\n  <ul id=\"ul-2\">\n    <li>ul-2</li>\n    <li>ul-2</li>\n    <li>ul-2</li>\n  </ul>\n</div>\n\n<div class='ul-father'>\n  <ul id=\"ul-3\">\n    <li>ul-3</li>\n    <li>ul-3</li>\n    <li>ul-3</li>\n  </ul>\n</div>\n```\n樣式排版一下如下圖\n![](https://i.imgur.com/efGHN12.png)\n\n假設我們要讓 `ul-3` 的第一個變紅色的話，可以先透過父層的 `.ul-father` 再找到子層的第一個元素，這會用到練式寫法下\n\n---\n找到父層中的最後一個\n```javascript\n$('document').ready(function(){\n  $('.ul-father') \n    .last() \n    .css('color', 'red')\n})\n```\n![](https://i.imgur.com/pNnB0el.png)\n![](https://i.imgur.com/iCOm7Iu.png)\n\n---\n用 `.children()` 進到子層裡面，這時已經到 `ul` 層了\n```javascript\n$('document').ready(function(){\n  $('.ul-father')\n    .last()\n    .children()\n    .css('color', 'red')\n})\n```\n![](https://i.imgur.com/gTq9yI1.png)\n![](https://i.imgur.com/GMGSUOj.png)\n\n---\n再用 `.children()` 進到 `li` 層\n```javascript\n$('document').ready(function(){\n  $('.ul-father')\n    .last()\n    .children()\n    .children()\n    .css('color', 'red')\n})\n\n```\n![](https://i.imgur.com/EgaRJqn.png)\n![](https://i.imgur.com/N3pKSgH.png)\n\n---\n再用 `.first()` 選 `li` 裡面的第一個 `元素`\n```javascript\n$('document').ready(function(){\n  $('.ul-father')\n    .last()\n    .children()\n    .children()\n    .first()\n    .css('color', 'red')\n})\n\n```\n![](https://i.imgur.com/ROhVoju.png)\n![](https://i.imgur.com/at5rcAH.png)\n\n---\n[DEMO](https://codepen.io/gleofgja/pen/yLaQzyM?editors=1011)\n以上就是鍊式寫法的示範 ~\n\n## 3. Traversing 中的 first(), last(), find()\n以下示範是為了練習，方法很多種，這裡單純練習 API 的使用。\n在 jquery 中利用 `first()` 找到指定的元素，以下示範\n```html\n<div id='ul-father-2'>\n  <div class='ul-father'>\n    <ul id=\"ul-1\">\n      <li>ul-1</li>\n      <li>ul-1</li>\n      <li>ul-1</li>\n    </ul>\n  </div>\n</div>\n\n<div class='ul-father'>\n  <ul id=\"ul-2\">\n    <li>ul-2</li>\n    <li>ul-2</li>\n    <li>ul-2</li>\n  </ul>\n</div>\n\n<div class='ul-father'>\n  <ul id=\"ul-3\">\n    <li>ul-3</li>\n    <li>ul-3</li>\n    <li>ul-3</li>\n  </ul>\n</div>\n\n```\n---\n### first()\n![](https://i.imgur.com/AqW29aA.png)\n透過用 `className` 的方式讓 `ul-1` 亮紅色，因為相同的 `className` 有三個所以會選到其他的元素，這時就可以用 `first()`，來指定我們只要選第一個就好，以下示範\n```javascript\n// 第一個顯示顏色\n$(document).ready(function(){\n  $('.ul-father').first().css('color', 'red')\n})\n```\n![](https://i.imgur.com/SAkfFZ4.png)\n\n---\n### last()\n同理，換成最後一個就是 `last()`\n```javascript\n// 最後一個個顯示紅色\n$(document).ready(function(){\n  $('.ul-father').last().css('color', 'red')\n})\n```\n![](https://i.imgur.com/fKRl7j8.png)\n\n---\n\n### find()\n在 `ul-father` 外再加一層父層，然後稍為更改一下 HTML 結構。\n```html\n<div id='ul-father-2'>\n  <div class='ul-father'>\n    <ul id=\"ul-1\">\n      <li>ul-1</li>\n      <li>ul-1</li>\n      <li>ul-1</li>\n    </ul>\n  </div>\n  <div class='ul-father'>\n    <ul id=\"ul-2\">\n      <li>ul-2</li>\n      <li>ul-2</li>\n      <li>ul-2</li>\n    </ul>\n  </div>\n  <div class='ul-father'>\n    <ul id=\"ul-3\">\n      <li>ul-3</li>\n      <li>ul-3</li>\n      <li>ul-3</li>\n    </ul>\n  </div>\n</div>\n```\n將所有 `ul-father` 移到 `ul-father-2` 裡面，如果想要改變 `ul-1` 裡面的 `li` 元素就可以用 `find()`\n```javascript\n$(document).ready(function(){\n  $('#ul-father-2').find('#ul-1').css('color', 'red')\n})\n```\n![](https://i.imgur.com/m2VkEZd.png)\n這樣就可以抓到`ul-1` 並更改樣式了~\n\n[DEMO](https://codepen.io/gleofgja/pen/mdrQLMG?editors=1011)\n\n---\n## 4. Traversal 中的 eq(), filter() 與 not()\n以下示範單純為了練習 api 而使用。\n### eq() \n`eq()` 就是等於，功能類似指定\n```html\n<div class=\"a\">A</div>\n<div class=\"a\">A</div>\n<div class=\"a\">A</div>\n\n<div class=\"b\">B</div>\n<div class=\"b\">B</div>\n<div class=\"b\">B</div>\n\n<div class=\"c\">C</div>\n<div class=\"c\">C</div>\n<div class=\"c\">C</div>\n```\n![](https://i.imgur.com/rcWztWl.png)\n\n把 B 變紅色 `$('.b').css('color', 'red')`\n![](https://i.imgur.com/YU3Zlpj.png)\n\n但如果只要第一個 B 變紅色的話就加上 `eq()`，\n完整寫法 `$('.b').eq('0').css('color', 'red')`，要注意的是 jquery 的 API 還是用陣列的芳來指定索引，在陣列中第一個索引是 0，但還是要以官方文件為主。\n![](https://i.imgur.com/2ITawWg.png)\n\n---\n### filter()\n`filter()` 就是塞選\n在 HTML 結構下方加入 `<span class='a'>this is span</span>`， className 設定為 a，如果單純寫 `$('.a').css('color', 'red')` 這樣會抓到所有 className 為 a 的元素，如下圖\n![](https://i.imgur.com/uue7VEI.png)\n\n這時候就可以用 filter()，來指定 span 標籤，`$('.a').filter('span').css('color', 'red')`\n這樣就只會更改用 span 的標籤\n![](https://i.imgur.com/Rjz8dNX.png)\n\n### not()\n概念就是除了誰以外，其他都可以，例如除了 `.a` 以外的其他都更改樣式\n`$('div').not('.a').css('color', 'red')`，這樣除了 `.a` 的以外其他就都更改到樣式了\n\n![](https://i.imgur.com/TL2eO4d.png)\n\n\n[DEMO](https://codepen.io/gleofgja/pen/MWjZYmw?editors=1011)\n\n---\n## 參考資料\n[jQuery 幼幼班](https://codeshiba.teachable.com/courses/1255270/lectures/29538918)","slug":"Traversal","published":1,"updated":"2021-03-26T16:13:10.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpc0008g0trhvix4xmk","content":"<html><head></head><body><h2 id=\"1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩\"><a href=\"#1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩\" class=\"headerlink\" title=\"1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩\"></a>1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩</h2><p>遍歷示意圖:<br><img src=\"https://i.imgur.com/t0TNBN2.png\"><br>Traversal 這觀念就是透過 API 操作相鄰隔壁的元素，以下示範</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>原圖如下:<br><img src=\"https://i.imgur.com/vvusGy1.png\"></p>\n<p>接下來套用 jQuery 三步驟，讓 dom 變色</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'document'</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#ul-1'</span>).css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/zX89w0H.png\"></p>\n<p>確定可以變色後，接下來要使用 Traversal 的效果，而這效果的 API 是 <code>siblings</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'document'</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#ul-1'</span>).siblings().css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<p>會顯示下圖，自己不變動，周圍的變動<br><img src=\"https://i.imgur.com/X8ujRzt.png\"></p>\n<p>也可以透過鄰居再做其他動作，如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'document'</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#ul-1'</span>).siblings().first().css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>抓取鄰居的第一個，顯示如下<br><img src=\"https://i.imgur.com/pUKeHjY.png\"></p>\n<p>除了這方法還可以用陣列的方式抓取，但是如果用陣列的話會變成純元素，所以外面還是要用 <code>$()</code> ，將 <code>$('#ul-1').siblings().[1] </code>包起來，由於<font color=\"#FF0000\">在 js 陣列裡面第一個索引都是從 0 開始算</font>，所以如果寫 <code>[1]</code> 就會顯示第二個，如下圖</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'document'</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $($(<span class=\"hljs-string\">'#ul-1'</span>).siblings().[<span class=\"hljs-number\">1</span>]).css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/9dXHwVn.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/eYdQEKg?editors=1011\">DEMO</a></p>\n<h2 id=\"2-鍊式-Chaining-寫法\"><a href=\"#2-鍊式-Chaining-寫法\" class=\"headerlink\" title=\"2. 鍊式( Chaining )寫法\"></a>2. 鍊式( Chaining )寫法</h2><p>jQuery 的鍊式( Chaining )寫法。就是 API 可以依照需求一直接下去。</p>\n<p>利用上面的範例在各 <code>ul</code> 外再加上父層 <code>.ul-father</code> ，注意! 是 <code>className</code> 不是 <code>id</code></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'ul-father'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-1\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'ul-father'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-2\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'ul-father'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>樣式排版一下如下圖<br><img src=\"https://i.imgur.com/efGHN12.png\"></p>\n<p>假設我們要讓 <code>ul-3</code> 的第一個變紅色的話，可以先透過父層的 <code>.ul-father</code> 再找到子層的第一個元素，這會用到練式寫法下</p>\n<hr>\n<p>找到父層中的最後一個</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'document'</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'.ul-father'</span>) </span><br><span class=\"line\">    .last() </span><br><span class=\"line\">    .css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/pNnB0el.png\"><br><img src=\"https://i.imgur.com/iCOm7Iu.png\"></p>\n<hr>\n<p>用 <code>.children()</code> 進到子層裡面，這時已經到 <code>ul</code> 層了</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'document'</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'.ul-father'</span>)</span><br><span class=\"line\">    .last()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/gTq9yI1.png\"><br><img src=\"https://i.imgur.com/GMGSUOj.png\"></p>\n<hr>\n<p>再用 <code>.children()</code> 進到 <code>li</code> 層</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'document'</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'.ul-father'</span>)</span><br><span class=\"line\">    .last()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/EgaRJqn.png\"><br><img src=\"https://i.imgur.com/N3pKSgH.png\"></p>\n<hr>\n<p>再用 <code>.first()</code> 選 <code>li</code> 裡面的第一個 <code>元素</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'document'</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'.ul-father'</span>)</span><br><span class=\"line\">    .last()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .first()</span><br><span class=\"line\">    .css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/ROhVoju.png\"><br><img src=\"https://i.imgur.com/at5rcAH.png\"></p>\n<hr>\n<p><a href=\"https://codepen.io/gleofgja/pen/yLaQzyM?editors=1011\">DEMO</a><br>以上就是鍊式寫法的示範 ~</p>\n<h2 id=\"3-Traversing-中的-first-last-find\"><a href=\"#3-Traversing-中的-first-last-find\" class=\"headerlink\" title=\"3. Traversing 中的 first(), last(), find()\"></a>3. Traversing 中的 first(), last(), find()</h2><p>以下示範是為了練習，方法很多種，這裡單純練習 API 的使用。<br>在 jquery 中利用 <code>first()</code> 找到指定的元素，以下示範</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'ul-father-2'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'ul-father'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-1\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'ul-father'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-2\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'ul-father'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<hr>\n<h3 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first()\"></a>first()</h3><p><img src=\"https://i.imgur.com/AqW29aA.png\"><br>透過用 <code>className</code> 的方式讓 <code>ul-1</code> 亮紅色，因為相同的 <code>className</code> 有三個所以會選到其他的元素，這時就可以用 <code>first()</code>，來指定我們只要選第一個就好，以下示範</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 第一個顯示顏色</span></span><br><span class=\"line\">$(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'.ul-father'</span>).first().css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/SAkfFZ4.png\"></p>\n<hr>\n<h3 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"last()\"></a>last()</h3><p>同理，換成最後一個就是 <code>last()</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 最後一個個顯示紅色</span></span><br><span class=\"line\">$(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'.ul-father'</span>).last().css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/fKRl7j8.png\"></p>\n<hr>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h3><p>在 <code>ul-father</code> 外再加一層父層，然後稍為更改一下 HTML 結構。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'ul-father-2'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'ul-father'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-1\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'ul-father'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-2\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'ul-father'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul-3\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>ul-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>將所有 <code>ul-father</code> 移到 <code>ul-father-2</code> 裡面，如果想要改變 <code>ul-1</code> 裡面的 <code>li</code> 元素就可以用 <code>find()</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#ul-father-2'</span>).find(<span class=\"hljs-string\">'#ul-1'</span>).css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/m2VkEZd.png\"><br>這樣就可以抓到<code>ul-1</code> 並更改樣式了~</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/mdrQLMG?editors=1011\">DEMO</a></p>\n<hr>\n<h2 id=\"4-Traversal-中的-eq-filter-與-not\"><a href=\"#4-Traversal-中的-eq-filter-與-not\" class=\"headerlink\" title=\"4. Traversal 中的 eq(), filter() 與 not()\"></a>4. Traversal 中的 eq(), filter() 與 not()</h2><p>以下示範單純為了練習 api 而使用。</p>\n<h3 id=\"eq\"><a href=\"#eq\" class=\"headerlink\" title=\"eq()\"></a>eq()</h3><p><code>eq()</code> 就是等於，功能類似指定</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"a\"</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"a\"</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"a\"</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"b\"</span>&gt;</span>B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"b\"</span>&gt;</span>B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"b\"</span>&gt;</span>B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"c\"</span>&gt;</span>C<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"c\"</span>&gt;</span>C<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"c\"</span>&gt;</span>C<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/rcWztWl.png\"></p>\n<p>把 B 變紅色 <code>$('.b').css('color', 'red')</code><br><img src=\"https://i.imgur.com/YU3Zlpj.png\"></p>\n<p>但如果只要第一個 B 變紅色的話就加上 <code>eq()</code>，<br>完整寫法 <code>$('.b').eq('0').css('color', 'red')</code>，要注意的是 jquery 的 API 還是用陣列的芳來指定索引，在陣列中第一個索引是 0，但還是要以官方文件為主。<br><img src=\"https://i.imgur.com/2ITawWg.png\"></p>\n<hr>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><p><code>filter()</code> 就是塞選<br>在 HTML 結構下方加入 <code>&lt;span class='a'&gt;this is span&lt;/span&gt;</code>， className 設定為 a，如果單純寫 <code>$('.a').css('color', 'red')</code> 這樣會抓到所有 className 為 a 的元素，如下圖<br><img src=\"https://i.imgur.com/uue7VEI.png\"></p>\n<p>這時候就可以用 filter()，來指定 span 標籤，<code>$('.a').filter('span').css('color', 'red')</code><br>這樣就只會更改用 span 的標籤<br><img src=\"https://i.imgur.com/Rjz8dNX.png\"></p>\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not()\"></a>not()</h3><p>概念就是除了誰以外，其他都可以，例如除了 <code>.a</code> 以外的其他都更改樣式<br><code>$('div').not('.a').css('color', 'red')</code>，這樣除了 <code>.a</code> 的以外其他就都更改到樣式了</p>\n<p><img src=\"https://i.imgur.com/TL2eO4d.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWjZYmw?editors=1011\">DEMO</a></p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://codeshiba.teachable.com/courses/1255270/lectures/29538918\">jQuery 幼幼班</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[],"_tags":[{"name":"jQuery","path":"tags/jQuery/"}],"excerpt":"<html><head></head><body><h2 id=\"1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩\"><a href=\"#1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩\" class=\"headerlink\" title=\"1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩\"></a>1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩</h2><p>遍歷示意圖:<br><img src=\"https://i.imgur.com/t0TNBN2.png\"><br>Traversal 這觀念就是透過 API 操作相鄰隔壁的元素，以下示範</p></body></html>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-3&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>原圖如下:<br><img src=\"https://i.imgur.com/vvusGy1.png\"></p>\n<p>接下來套用 jQuery 三步驟，讓 dom 變色</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;document&#x27;</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#ul-1&#x27;</span>).css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/zX89w0H.png\"></p>\n<p>確定可以變色後，接下來要使用 Traversal 的效果，而這效果的 API 是 <code>siblings</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;document&#x27;</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#ul-1&#x27;</span>).siblings().css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>會顯示下圖，自己不變動，周圍的變動<br><img src=\"https://i.imgur.com/X8ujRzt.png\"></p>\n<p>也可以透過鄰居再做其他動作，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;document&#x27;</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#ul-1&#x27;</span>).siblings().first().css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>抓取鄰居的第一個，顯示如下<br><img src=\"https://i.imgur.com/pUKeHjY.png\"></p>\n<p>除了這方法還可以用陣列的方式抓取，但是如果用陣列的話會變成純元素，所以外面還是要用 <code>$()</code> ，將 <code>$(&#39;#ul-1&#39;).siblings().[1] </code>包起來，由於<font color=#FF0000>在 js 陣列裡面第一個索引都是從 0 開始算</font>，所以如果寫 <code>[1]</code> 就會顯示第二個，如下圖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;document&#x27;</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $($(<span class=\"string\">&#x27;#ul-1&#x27;</span>).siblings().[<span class=\"number\">1</span>]).css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/9dXHwVn.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/eYdQEKg?editors=1011\">DEMO</a></p>\n<h2 id=\"2-鍊式-Chaining-寫法\"><a href=\"#2-鍊式-Chaining-寫法\" class=\"headerlink\" title=\"2. 鍊式( Chaining )寫法\"></a>2. 鍊式( Chaining )寫法</h2><p>jQuery 的鍊式( Chaining )寫法。就是 API 可以依照需求一直接下去。</p>\n<p>利用上面的範例在各 <code>ul</code> 外再加上父層 <code>.ul-father</code> ，注意! 是 <code>className</code> 不是 <code>id</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;ul-father&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;ul-father&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;ul-father&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-3&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>樣式排版一下如下圖<br><img src=\"https://i.imgur.com/efGHN12.png\"></p>\n<p>假設我們要讓 <code>ul-3</code> 的第一個變紅色的話，可以先透過父層的 <code>.ul-father</code> 再找到子層的第一個元素，這會用到練式寫法下</p>\n<hr>\n<p>找到父層中的最後一個</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;document&#x27;</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.ul-father&#x27;</span>) </span><br><span class=\"line\">    .last() </span><br><span class=\"line\">    .css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/pNnB0el.png\"><br><img src=\"https://i.imgur.com/iCOm7Iu.png\"></p>\n<hr>\n<p>用 <code>.children()</code> 進到子層裡面，這時已經到 <code>ul</code> 層了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;document&#x27;</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.ul-father&#x27;</span>)</span><br><span class=\"line\">    .last()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/gTq9yI1.png\"><br><img src=\"https://i.imgur.com/GMGSUOj.png\"></p>\n<hr>\n<p>再用 <code>.children()</code> 進到 <code>li</code> 層</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;document&#x27;</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.ul-father&#x27;</span>)</span><br><span class=\"line\">    .last()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/EgaRJqn.png\"><br><img src=\"https://i.imgur.com/N3pKSgH.png\"></p>\n<hr>\n<p>再用 <code>.first()</code> 選 <code>li</code> 裡面的第一個 <code>元素</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;document&#x27;</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.ul-father&#x27;</span>)</span><br><span class=\"line\">    .last()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .children()</span><br><span class=\"line\">    .first()</span><br><span class=\"line\">    .css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/ROhVoju.png\"><br><img src=\"https://i.imgur.com/at5rcAH.png\"></p>\n<hr>\n<p><a href=\"https://codepen.io/gleofgja/pen/yLaQzyM?editors=1011\">DEMO</a><br>以上就是鍊式寫法的示範 ~</p>\n<h2 id=\"3-Traversing-中的-first-last-find\"><a href=\"#3-Traversing-中的-first-last-find\" class=\"headerlink\" title=\"3. Traversing 中的 first(), last(), find()\"></a>3. Traversing 中的 first(), last(), find()</h2><p>以下示範是為了練習，方法很多種，這裡單純練習 API 的使用。<br>在 jquery 中利用 <code>first()</code> 找到指定的元素，以下示範</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;ul-father-2&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;ul-father&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;ul-father&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;ul-father&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-3&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first()\"></a>first()</h3><p><img src=\"https://i.imgur.com/AqW29aA.png\"><br>透過用 <code>className</code> 的方式讓 <code>ul-1</code> 亮紅色，因為相同的 <code>className</code> 有三個所以會選到其他的元素，這時就可以用 <code>first()</code>，來指定我們只要選第一個就好，以下示範</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一個顯示顏色</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.ul-father&#x27;</span>).first().css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/SAkfFZ4.png\"></p>\n<hr>\n<h3 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"last()\"></a>last()</h3><p>同理，換成最後一個就是 <code>last()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 最後一個個顯示紅色</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;.ul-father&#x27;</span>).last().css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/fKRl7j8.png\"></p>\n<hr>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h3><p>在 <code>ul-father</code> 外再加一層父層，然後稍為更改一下 HTML 結構。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;ul-father-2&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;ul-father&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;ul-father&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-2&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;ul-father&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ul-3&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>ul-3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>將所有 <code>ul-father</code> 移到 <code>ul-father-2</code> 裡面，如果想要改變 <code>ul-1</code> 裡面的 <code>li</code> 元素就可以用 <code>find()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#ul-father-2&#x27;</span>).find(<span class=\"string\">&#x27;#ul-1&#x27;</span>).css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/m2VkEZd.png\"><br>這樣就可以抓到<code>ul-1</code> 並更改樣式了~</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/mdrQLMG?editors=1011\">DEMO</a></p>\n<hr>\n<h2 id=\"4-Traversal-中的-eq-filter-與-not\"><a href=\"#4-Traversal-中的-eq-filter-與-not\" class=\"headerlink\" title=\"4. Traversal 中的 eq(), filter() 與 not()\"></a>4. Traversal 中的 eq(), filter() 與 not()</h2><p>以下示範單純為了練習 api 而使用。</p>\n<h3 id=\"eq\"><a href=\"#eq\" class=\"headerlink\" title=\"eq()\"></a>eq()</h3><p><code>eq()</code> 就是等於，功能類似指定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;c&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;c&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;c&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/rcWztWl.png\"></p>\n<p>把 B 變紅色 <code>$(&#39;.b&#39;).css(&#39;color&#39;, &#39;red&#39;)</code><br><img src=\"https://i.imgur.com/YU3Zlpj.png\"></p>\n<p>但如果只要第一個 B 變紅色的話就加上 <code>eq()</code>，<br>完整寫法 <code>$(&#39;.b&#39;).eq(&#39;0&#39;).css(&#39;color&#39;, &#39;red&#39;)</code>，要注意的是 jquery 的 API 還是用陣列的芳來指定索引，在陣列中第一個索引是 0，但還是要以官方文件為主。<br><img src=\"https://i.imgur.com/2ITawWg.png\"></p>\n<hr>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><p><code>filter()</code> 就是塞選<br>在 HTML 結構下方加入 <code>&lt;span class=&#39;a&#39;&gt;this is span&lt;/span&gt;</code>， className 設定為 a，如果單純寫 <code>$(&#39;.a&#39;).css(&#39;color&#39;, &#39;red&#39;)</code> 這樣會抓到所有 className 為 a 的元素，如下圖<br><img src=\"https://i.imgur.com/uue7VEI.png\"></p>\n<p>這時候就可以用 filter()，來指定 span 標籤，<code>$(&#39;.a&#39;).filter(&#39;span&#39;).css(&#39;color&#39;, &#39;red&#39;)</code><br>這樣就只會更改用 span 的標籤<br><img src=\"https://i.imgur.com/Rjz8dNX.png\"></p>\n<h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not()\"></a>not()</h3><p>概念就是除了誰以外，其他都可以，例如除了 <code>.a</code> 以外的其他都更改樣式<br><code>$(&#39;div&#39;).not(&#39;.a&#39;).css(&#39;color&#39;, &#39;red&#39;)</code>，這樣除了 <code>.a</code> 的以外其他就都更改到樣式了</p>\n<p><img src=\"https://i.imgur.com/TL2eO4d.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWjZYmw?editors=1011\">DEMO</a></p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://codeshiba.teachable.com/courses/1255270/lectures/29538918\">jQuery 幼幼班</a></p>"},{"title":"用 Vue 做出頁面的 Loading 效果","date":"2020-12-12T16:00:00.000Z","description":"製作網頁局部或是全域的 Loading 效果","_content":" \n[vue-loading-overlay](https://github.com/ankurk91/vue-loading-overlay)\n首先安裝 npm: `npm install vue-loading-overlay` \n再到 main.js 載入\n<!--more-->\n\n```javascript\n// Import component\nimport Loading from 'vue-loading-overlay';\n// Import stylesheet\nimport 'vue-loading-overlay/dist/vue-loading.css';\n\n// 因為是全域每個 component 都會用，所以用 Vue.component\nVue.component('Loading', Loading)\n```\n![](https://i.imgur.com/NxbUi4i.png)\n\n---\n## 全域Loading\n接下來要在 components 裡面加入讀取的判斷式跟綁定\n先將 lading 預設好，只有在等待的時間下才會轉 ` isLoading: false,`\n\n![](https://i.imgur.com/cLak0kf.png)\n\n然後把範例拿過來用 \n\n在div 內一層加上 `<loading :active.sync=\"isLoading\"></loading>`\n\n![](https://i.imgur.com/kX4o8Kv.png)\n\n接下來要在 AJAX 的行為上面新增 ` isLoading: false,`\n在啟用 `getProducts` 的時候就會觸發 loading ( true )，在完成的時候結束( false )\n範例如下:\n```javascript\ngetProducts() {\n  const api = `${process.env.APIPATH}/api/${process.env.MYPATH}/products`\n  this.isLoading = true\n  this.$http.get(api).then((response) => {\n    this.products = response.data.products\n    this.isLoading = false\n  })\n},\n```\n\n然後再重新整理，畫面中間就會出現 Loading 的效果，\n再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果\n\n這樣全域就完成了!!\n\n---\n## 局部 Loading\n再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果\n\n要加的地方在下圖紅框處\n![](https://i.imgur.com/SKEI2vd.png)\n\n這邊偷懶一下直接用 CDN 載入 [font-awesome](https://cdnjs.com/libraries/font-awesome) 到 index.html\n\n![](https://i.imgur.com/fszYHjw.png)\n![](https://i.imgur.com/jBEiM1M.png)\n\n然後再到 [Animating Icons](https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons) 選一個自己喜歡的 loading 樣式\n這邊用 `fa-spinner fa-spin` 作範例\n因為要在上傳圖片的旁邊顯示 laoding 效果，所以我們把 `fa-spinner fa-spin` 加在 label 旁邊，\n\n![](https://i.imgur.com/t3XKdnP.png)\n\n再到 data 函式加入決定局部 loading 的變數\n\n![](https://i.imgur.com/oQk38Gg.png)\n\n再到模板那邊用 v-if 判斷做動態綁定\n\n![](https://i.imgur.com/doiggrR.png)\n\n然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷\n\n```javascript\nuploadImg() {\n    // 在拉圖片進去讀取的時候 fileUpLoading 會是 true\n  this.status.fileUpLoading =  true\n  const uploadFile = this.$refs.files.files[0]\n  const formData = new FormData()\n  formData.append('file-to-upload', uploadFile)\n  //接下來定義路徑\n  const url = `${process.env.APIPATH}/api/${process.env.MYPATH}/admin/upload`\n  this.$http\n    .post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    })\n    .then((res) => {\n      console.log(res.data)\n      // AJAX 結束後 fileUpLoading 就 false\n      this.status.fileUpLoading = false\n      if (res.data.success) {\n        // this.tempProduct.imgUrl = res.data.imageUrl\n        console.log(this.tempProduct)\n        this.$set(this.tempProduct, 'imgUrl', res.data.imageUrl)\n      }\n    })\n}\n```\n\n---\n## [資料來源: Vue 出電商網站](https://www.udemy.com/course/vue-hexschool/learn/lecture/10896746#questions)","source":"_posts/2020/Loading.md","raw":"---\ntitle: 用 Vue 做出頁面的 Loading 效果\ndate: 2020/12/13\ntags: Vue\ncategories: Vue\ndescription: 製作網頁局部或是全域的 Loading 效果\n--- \n[vue-loading-overlay](https://github.com/ankurk91/vue-loading-overlay)\n首先安裝 npm: `npm install vue-loading-overlay` \n再到 main.js 載入\n<!--more-->\n\n```javascript\n// Import component\nimport Loading from 'vue-loading-overlay';\n// Import stylesheet\nimport 'vue-loading-overlay/dist/vue-loading.css';\n\n// 因為是全域每個 component 都會用，所以用 Vue.component\nVue.component('Loading', Loading)\n```\n![](https://i.imgur.com/NxbUi4i.png)\n\n---\n## 全域Loading\n接下來要在 components 裡面加入讀取的判斷式跟綁定\n先將 lading 預設好，只有在等待的時間下才會轉 ` isLoading: false,`\n\n![](https://i.imgur.com/cLak0kf.png)\n\n然後把範例拿過來用 \n\n在div 內一層加上 `<loading :active.sync=\"isLoading\"></loading>`\n\n![](https://i.imgur.com/kX4o8Kv.png)\n\n接下來要在 AJAX 的行為上面新增 ` isLoading: false,`\n在啟用 `getProducts` 的時候就會觸發 loading ( true )，在完成的時候結束( false )\n範例如下:\n```javascript\ngetProducts() {\n  const api = `${process.env.APIPATH}/api/${process.env.MYPATH}/products`\n  this.isLoading = true\n  this.$http.get(api).then((response) => {\n    this.products = response.data.products\n    this.isLoading = false\n  })\n},\n```\n\n然後再重新整理，畫面中間就會出現 Loading 的效果，\n再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果\n\n這樣全域就完成了!!\n\n---\n## 局部 Loading\n再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果\n\n要加的地方在下圖紅框處\n![](https://i.imgur.com/SKEI2vd.png)\n\n這邊偷懶一下直接用 CDN 載入 [font-awesome](https://cdnjs.com/libraries/font-awesome) 到 index.html\n\n![](https://i.imgur.com/fszYHjw.png)\n![](https://i.imgur.com/jBEiM1M.png)\n\n然後再到 [Animating Icons](https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons) 選一個自己喜歡的 loading 樣式\n這邊用 `fa-spinner fa-spin` 作範例\n因為要在上傳圖片的旁邊顯示 laoding 效果，所以我們把 `fa-spinner fa-spin` 加在 label 旁邊，\n\n![](https://i.imgur.com/t3XKdnP.png)\n\n再到 data 函式加入決定局部 loading 的變數\n\n![](https://i.imgur.com/oQk38Gg.png)\n\n再到模板那邊用 v-if 判斷做動態綁定\n\n![](https://i.imgur.com/doiggrR.png)\n\n然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷\n\n```javascript\nuploadImg() {\n    // 在拉圖片進去讀取的時候 fileUpLoading 會是 true\n  this.status.fileUpLoading =  true\n  const uploadFile = this.$refs.files.files[0]\n  const formData = new FormData()\n  formData.append('file-to-upload', uploadFile)\n  //接下來定義路徑\n  const url = `${process.env.APIPATH}/api/${process.env.MYPATH}/admin/upload`\n  this.$http\n    .post(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    })\n    .then((res) => {\n      console.log(res.data)\n      // AJAX 結束後 fileUpLoading 就 false\n      this.status.fileUpLoading = false\n      if (res.data.success) {\n        // this.tempProduct.imgUrl = res.data.imageUrl\n        console.log(this.tempProduct)\n        this.$set(this.tempProduct, 'imgUrl', res.data.imageUrl)\n      }\n    })\n}\n```\n\n---\n## [資料來源: Vue 出電商網站](https://www.udemy.com/course/vue-hexschool/learn/lecture/10896746#questions)","slug":"Loading","published":1,"updated":"2021-03-26T16:13:10.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpd000bg0traqocbqly","content":"<html><head></head><body><p><a href=\"https://github.com/ankurk91/vue-loading-overlay\">vue-loading-overlay</a><br>首先安裝 npm: <code>npm install vue-loading-overlay</code><br>再到 main.js 載入</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// Import component</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Loading <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-loading-overlay'</span>;</span><br><span class=\"line\"><span class=\"hljs-comment\">// Import stylesheet</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'vue-loading-overlay/dist/vue-loading.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 因為是全域每個 component 都會用，所以用 Vue.component</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'Loading'</span>, Loading)</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/NxbUi4i.png\"></p>\n<hr>\n<h2 id=\"全域Loading\"><a href=\"#全域Loading\" class=\"headerlink\" title=\"全域Loading\"></a>全域Loading</h2><p>接下來要在 components 裡面加入讀取的判斷式跟綁定<br>先將 lading 預設好，只有在等待的時間下才會轉 <code> isLoading: false,</code></p>\n<p><img src=\"https://i.imgur.com/cLak0kf.png\"></p>\n<p>然後把範例拿過來用 </p>\n<p>在div 內一層加上 <code>&lt;loading :active.sync=\"isLoading\"&gt;&lt;/loading&gt;</code></p>\n<p><img src=\"https://i.imgur.com/kX4o8Kv.png\"></p>\n<p>接下來要在 AJAX 的行為上面新增 <code> isLoading: false,</code><br>在啟用 <code>getProducts</code> 的時候就會觸發 loading ( true )，在完成的時候結束( false )<br>範例如下:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getProducts() {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> api = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.APIPATH}</span>/api/<span class=\"hljs-subst\">${process.env.MYPATH}</span>/products`</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.isLoading = <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.$http.get(api).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.products = response.data.products</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.isLoading = <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  })</span><br><span class=\"line\">},</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然後再重新整理，畫面中間就會出現 Loading 的效果，<br>再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果</p>\n<p>這樣全域就完成了!!</p>\n<hr>\n<h2 id=\"局部-Loading\"><a href=\"#局部-Loading\" class=\"headerlink\" title=\"局部 Loading\"></a>局部 Loading</h2><p>再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果</p>\n<p>要加的地方在下圖紅框處<br><img src=\"https://i.imgur.com/SKEI2vd.png\"></p>\n<p>這邊偷懶一下直接用 CDN 載入 <a href=\"https://cdnjs.com/libraries/font-awesome\">font-awesome</a> 到 index.html</p>\n<p><img src=\"https://i.imgur.com/fszYHjw.png\"><br><img src=\"https://i.imgur.com/jBEiM1M.png\"></p>\n<p>然後再到 <a href=\"https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons\">Animating Icons</a> 選一個自己喜歡的 loading 樣式<br>這邊用 <code>fa-spinner fa-spin</code> 作範例<br>因為要在上傳圖片的旁邊顯示 laoding 效果，所以我們把 <code>fa-spinner fa-spin</code> 加在 label 旁邊，</p>\n<p><img src=\"https://i.imgur.com/t3XKdnP.png\"></p>\n<p>再到 data 函式加入決定局部 loading 的變數</p>\n<p><img src=\"https://i.imgur.com/oQk38Gg.png\"></p>\n<p>再到模板那邊用 v-if 判斷做動態綁定</p>\n<p><img src=\"https://i.imgur.com/doiggrR.png\"></p>\n<p>然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadImg() {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 在拉圖片進去讀取的時候 fileUpLoading 會是 true</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.status.fileUpLoading =  <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> uploadFile = <span class=\"hljs-built_in\">this</span>.$refs.files.files[<span class=\"hljs-number\">0</span>]</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData()</span><br><span class=\"line\">  formData.append(<span class=\"hljs-string\">'file-to-upload'</span>, uploadFile)</span><br><span class=\"line\">  <span class=\"hljs-comment\">//接下來定義路徑</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.APIPATH}</span>/api/<span class=\"hljs-subst\">${process.env.MYPATH}</span>/admin/upload`</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.$http</span><br><span class=\"line\">    .post(url, formData, {</span><br><span class=\"line\">      headers: {</span><br><span class=\"line\">        <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'multipart/form-data'</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    })</span><br><span class=\"line\">    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(res.data)</span><br><span class=\"line\">      <span class=\"hljs-comment\">// AJAX 結束後 fileUpLoading 就 false</span></span><br><span class=\"line\">      <span class=\"hljs-built_in\">this</span>.status.fileUpLoading = <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (res.data.success) {</span><br><span class=\"line\">        <span class=\"hljs-comment\">// this.tempProduct.imgUrl = res.data.imageUrl</span></span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.tempProduct)</span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.$set(<span class=\"hljs-built_in\">this</span>.tempProduct, <span class=\"hljs-string\">'imgUrl'</span>, res.data.imageUrl)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    })</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"資料來源-Vue-出電商網站\"><a href=\"#資料來源-Vue-出電商網站\" class=\"headerlink\" title=\"資料來源: Vue 出電商網站\"></a><a href=\"https://www.udemy.com/course/vue-hexschool/learn/lecture/10896746#questions\">資料來源: Vue 出電商網站</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"Vue","path":"tags/Vue/"}],"excerpt":"<html><head></head><body><p><a href=\"https://github.com/ankurk91/vue-loading-overlay\">vue-loading-overlay</a><br>首先安裝 npm: <code>npm install vue-loading-overlay</code><br>再到 main.js 載入</p></body></html>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Import component</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Loading <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-loading-overlay&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Import stylesheet</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;vue-loading-overlay/dist/vue-loading.css&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因為是全域每個 component 都會用，所以用 Vue.component</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;Loading&#x27;</span>, Loading)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/NxbUi4i.png\"></p>\n<hr>\n<h2 id=\"全域Loading\"><a href=\"#全域Loading\" class=\"headerlink\" title=\"全域Loading\"></a>全域Loading</h2><p>接下來要在 components 裡面加入讀取的判斷式跟綁定<br>先將 lading 預設好，只有在等待的時間下才會轉 <code> isLoading: false,</code></p>\n<p><img src=\"https://i.imgur.com/cLak0kf.png\"></p>\n<p>然後把範例拿過來用 </p>\n<p>在div 內一層加上 <code>&lt;loading :active.sync=&quot;isLoading&quot;&gt;&lt;/loading&gt;</code></p>\n<p><img src=\"https://i.imgur.com/kX4o8Kv.png\"></p>\n<p>接下來要在 AJAX 的行為上面新增 <code> isLoading: false,</code><br>在啟用 <code>getProducts</code> 的時候就會觸發 loading ( true )，在完成的時候結束( false )<br>範例如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getProducts() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> api = <span class=\"string\">`<span class=\"subst\">$&#123;process.env.APIPATH&#125;</span>/api/<span class=\"subst\">$&#123;process.env.MYPATH&#125;</span>/products`</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.isLoading = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.$http.get(api).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.products = response.data.products</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.isLoading = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>然後再重新整理，畫面中間就會出現 Loading 的效果，<br>再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果</p>\n<p>這樣全域就完成了!!</p>\n<hr>\n<h2 id=\"局部-Loading\"><a href=\"#局部-Loading\" class=\"headerlink\" title=\"局部 Loading\"></a>局部 Loading</h2><p>再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果</p>\n<p>要加的地方在下圖紅框處<br><img src=\"https://i.imgur.com/SKEI2vd.png\"></p>\n<p>這邊偷懶一下直接用 CDN 載入 <a href=\"https://cdnjs.com/libraries/font-awesome\">font-awesome</a> 到 index.html</p>\n<p><img src=\"https://i.imgur.com/fszYHjw.png\"><br><img src=\"https://i.imgur.com/jBEiM1M.png\"></p>\n<p>然後再到 <a href=\"https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons\">Animating Icons</a> 選一個自己喜歡的 loading 樣式<br>這邊用 <code>fa-spinner fa-spin</code> 作範例<br>因為要在上傳圖片的旁邊顯示 laoding 效果，所以我們把 <code>fa-spinner fa-spin</code> 加在 label 旁邊，</p>\n<p><img src=\"https://i.imgur.com/t3XKdnP.png\"></p>\n<p>再到 data 函式加入決定局部 loading 的變數</p>\n<p><img src=\"https://i.imgur.com/oQk38Gg.png\"></p>\n<p>再到模板那邊用 v-if 判斷做動態綁定</p>\n<p><img src=\"https://i.imgur.com/doiggrR.png\"></p>\n<p>然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadImg() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在拉圖片進去讀取的時候 fileUpLoading 會是 true</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.status.fileUpLoading =  <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> uploadFile = <span class=\"built_in\">this</span>.$refs.files.files[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> FormData()</span><br><span class=\"line\">  formData.append(<span class=\"string\">&#x27;file-to-upload&#x27;</span>, uploadFile)</span><br><span class=\"line\">  <span class=\"comment\">//接下來定義路徑</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;process.env.APIPATH&#125;</span>/api/<span class=\"subst\">$&#123;process.env.MYPATH&#125;</span>/admin/upload`</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.$http</span><br><span class=\"line\">    .post(url, formData, &#123;</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;multipart/form-data&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res.data)</span><br><span class=\"line\">      <span class=\"comment\">// AJAX 結束後 fileUpLoading 就 false</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.status.fileUpLoading = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.data.success) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// this.tempProduct.imgUrl = res.data.imageUrl</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.tempProduct)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$set(<span class=\"built_in\">this</span>.tempProduct, <span class=\"string\">&#x27;imgUrl&#x27;</span>, res.data.imageUrl)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"資料來源-Vue-出電商網站\"><a href=\"#資料來源-Vue-出電商網站\" class=\"headerlink\" title=\"資料來源: Vue 出電商網站\"></a><a href=\"https://www.udemy.com/course/vue-hexschool/learn/lecture/10896746#questions\">資料來源: Vue 出電商網站</a></h2>"},{"title":"Vue - 組件化 ( 一 )","date":"2021-02-27T16:00:00.000Z","_content":"\n## 簡介\n\n面對複雜問題的處裡的方式就是將問題分割，而將東西分割的方式在 Vue 裡面我們稱為組件化。\n\n大概 10 年前吧，原本一個網頁是由一個 HTML、CSS、JavaScript 所組成的，但這樣在改動某個地方的時候會非常麻煩也會擔心會不會影響到網頁其他地方。後來出現了用 JavaScript 寫成的前端框架，將網頁內部切分成很多區塊，讓這些區塊內都有獨立的 HTML、CSS、JavaScript，這樣當某個區塊改動時就不必擔心會影響到網頁內的其他區塊，也因為每個區塊都是獨立的所以重複利用，這也讓開發者大大的提升了開發效率。\n\n[下圖來自官網](https://cn.vuejs.org/v2/guide/components.html)\n![](https://i.imgur.com/KxbAXYc.png)\n\n組件化的思想就是盡可能的把頁面拆分成很多個小區塊，變成可重複利用的組件。\n\n<!--more-->\n\n## 組件化開發\n\n### 1.組件化的基本使用\n\n在之前[基本模板語法](https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/#%E4%B8%80%E3%80%81%E6%8F%92%E5%80%BC%E8%AA%9E%E6%B3%95)提到用 mustache 語法可以顯示 `data` 物件內的 `value 值`，但如果有非常多重複的內容，這樣做不只可讀性差，也不好維護。用以下程式碼來示範。\n\n```html\n<div id=\"app\">\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message1: 'title',\n    message2: 'hello world',\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/Ut7qry9.png)\n\n這樣寫確實會顯示 4 個內容，但一樣的內容要寫 4 次才會呈現，而且有很冗長，這時就可以用組件的方式撰寫，可讀性也比較高。\n\n以下示範如何組件化。\n\n**分成三大步驟:**\n\n1. 創造組件構造器 : `Vue.extend()`\n2. 註冊組件 : `Vue.component()`\n3. 使用組件 : `Vue 實例的使用範圍`\n\n首先把重複性高的拉出來，如下圖，紅框處的重複性特別高，所以要獨立出來變成組件。\n![](https://i.imgur.com/HH2YDec.png)\n\n#### 1. 創造組件\n\n在 `Vue.extend` 組件裡面，它有個屬性是 `template` ，就是模板，在模板裡面的所有內容都是獨立且可重複利用的，把上圖紅框處放到模板裡面。再把 `Vue.extend()` 賦予到 `vm` 變數裡面，用變數是為了方便待會在註冊 ( component ) 的時候呼叫。\n\n```javascript\n// 1. 創造組件\nconst vm = Vue.extend({\n  template: `\n  <div>\n    <h2>我是模板的:title</h2>\n    <p>我是模板的:hello world</p>\n  </div>\n  `,\n})\n```\n\n#### 2. 註冊組件\n\n創造完要註冊，它需要兩個參數，第一個參數是 `模板的標籤名稱` 可以自訂義，第二個是 `創造組件的變數` 就是指上面的 `vm` ，寫法也非常簡單，如下\n\n```javascript\n// 2.註冊組件\nVue.component('模板的標籤名稱', 創造組件的變數)\nVue.component('my-cpn', vm)\n```\n\n完整寫法:\n\n```html\n<div id=\"app\">\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <!--   <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p> -->\n\n  <my-cpn></my-cpn>\n  <my-cpn></my-cpn>\n  <my-cpn></my-cpn>\n  <my-cpn></my-cpn>\n</div>\n```\n\n```javascript\n// 1. 創造組件\nconst vm = Vue.extend({\n  template: `\n  <div>\n    <h2>我是模板的:title</h2>\n    <p>我是模板的:hello world</p>\n  </div>\n  `,\n})\n\n// 2.註冊組件\nVue.component('my-cpn', vm)\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message1: 'title',\n    message2: 'hello world',\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/ZPBsCjR.png)\n\n會發現在 `html` 上只要寫 `my-cpn` 標籤就可以顯示相同的內容，這就是組件化，之後如果想改動 `html` 的內容只要針對組件內的內容做改動就好，這樣不只增加可讀性同時也方便管理。\n\n但要特別注意的是模板標籤必須寫在 `id='app'` 標籤裡面，寫在外面是不會被使用到的。\n\n[DEMO](https://codepen.io/gleofgja/pen/OJbQYwp?editors=1011)\n\n> `Vue.extend()` 在 Vue2.X 版以後就沒看到了，會示範也是因為這是必要的基礎觀念，之後的開發上就不會使用 `Vue.extend()` 而是使用語法糖的方式撰寫。\n\n### 2. 全域組件跟區域組件\n\n以上所寫的都是全域組件，全域就是可以在多個 Vue 實例裡面使用。\n之前所寫的 Vue 實例只有一個，那可不可有兩個?\n答案是 : 可以的! 但真實開發只會有一個，以下是為了釐清觀念所示範的。\n\n再新增一個 Vue 實例 ( `id='app2'` )\n\n```html\n<div id=\"app\">\n  <my-cpn></my-cpn>\n</div>\n\n<div id=\"app2\">\n  <my-cpn></my-cpn>\n</div>\n```\n\n```javascript\n// 1. 創造組件\nconst vm = Vue.extend({\n  template: `\n  <div>\n    <h2>我是模板的:title</h2>\n    <p>我是模板的:hello world</p>\n  </div>\n  `,\n})\n\n// 2.註冊組件\nVue.component('my-cpn', vm)\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n})\n\n// 新增一個實例 app2\nconst app2 = new Vue({\n  el: '#app2',\n})\n```\n\n一樣可以使用，如下圖\n![](https://i.imgur.com/K2bd97U.png)\n\n用開發模式看，會看到 `app2` 也有用到全域組件\n![](https://i.imgur.com/9XXcTf0.png)\n\n那要怎麼做才會變成區域組件?\n方法很簡單，就是把 `Vue.component('my-cpn', vm)` 移到 Vue 實例裡面 ( 記得 component 要加 s )。\nVue 實例裡面新增 `components` 一個屬性，再給 `components` 屬性一個物件，裡面放 `key` 跟 `value` 值。\n\nkey 值指的是`自訂義模板的標籤名`， value 就是`組件的變數名稱`。\n\n要特別注意的是 key 值的寫法，跟 HTML 模板標籤的寫法。\nkey 值的寫法分兩種:\n\n1. 單字以減號-分離 ( Kebab Case ) <font color=#FF0000>必須加引號</font>。\n2. 駝峰式命名法 ( Camel Case )，<font color=#FF0000>加不加引號都可以</font>。\n\n<font color=#FF0000>HTML 模板的組件標籤必須是 Kebab Case 寫法</font>。\n\n```javascript\nconst app = new Vue({\n  el:'#app',\n  components:{\n    // Kebab Case\n    'my-cpn': vm\n\n    // Camel Case\n    myCpn: vm\n    'myCpn': vm\n  }\n})\n```\n\n以下示範區域組件\n\n```html\n<div id=\"app\">\n  <my-cpn></my-cpn>\n</div>\n\n<div id=\"app2\">\n  <my-cpn></my-cpn>\n</div>\n```\n\n```javascript\n// 1. 創造組件\nconst vm = Vue.extend({\n  template: `\n  <div>\n    <h2>我是模板的:title</h2>\n    <p>我是模板的:hello world</p>\n  </div>\n  `,\n})\n\n// 2.註冊組件\n// Vue.component('my-cpn', vm)\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  components: {\n    // 'my-cpn': vm\n    // 'myCpn': vm\n    myCpn: vm,\n  },\n})\n\nconst app2 = new Vue({\n  el: '#app2',\n})\n```\n\n用開發者工具看，`app` 有在實例裡面註冊，所以可以使用，但 `app2` 不能，因為沒有在 `app2` 裡面註冊，所以不會解析 `my-cpn` 標籤。\n![](https://i.imgur.com/Gf58VOC.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/mdOxOMJ?editors=1011)\n\n以上就是區域組件的示範，在實戰開發上也是區域組件使用的最多，也只會有一個 Vue 實例。\n\n### 3. 父子組件\n\n顧名思義就是組件裡面再放一層組件。\n\n以下範例是創造一個 `vm2` 組件，再把 `vm1` 放到 `vm2` 裡面註冊，再到 Vue 實例裡面註冊 `vm2`。\n\n```html\n<div id=\"app\">\n  <my-cpn2></my-cpn2>\n</div>\n```\n\n```javascript\n// 1. 創造組件 vm1\nconst vm1 = Vue.extend({\n  template: `\n  <div>\n    <h2>One</h2>\n    <p>One</p>\n  </div>\n  `,\n})\n\n// 創造組件 vm2\nconst vm2 = Vue.extend({\n  template: `\n  <div>\n    <h2>Two</h2>\n    <p>Two Content</p>\n    <my-cpn1></my-cpn1>\n  </div>\n  `,\n  // 註冊組件 vm1\n  components: {\n    'my-cpn1': vm1,\n  },\n})\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  // 2.註冊組件\n  components: {\n    'my-cpn2': vm2,\n  },\n})\n```\n\n結果為下圖\n![](https://i.imgur.com/88UmUB0.png)\n\n用開發者工具查看\n![](https://i.imgur.com/cd4p83b.png)\n\n由上面案例可知 `vm2` 為父組件，`vm1` 為子組件。\n\n當 HTML 再解析 `my-cpn2` 標籤的內容時，他會到 `vm2` 裡面解析模板的內容，而解析 `vm2` 模板的內容時又發現 `my-cpn1` 標籤，這時他會看看有沒有註冊 `my-cpn1` 的標籤，如果有找到它就會對應到 `vm1` 模板的內的內容，如果 `vm1` 裡面沒找到的話，它就會去全域組件找，如果全域還找不到就會報錯。\n\n編譯好之後的模板如下\n\n```javascript\n// 創造組件 vm2\nconst vm2 = Vue.extend({\n  template: `\n  <div>\n    <h2>Two</h2>\n    <p>Two Content</p>\n\n    <div>\n      <h2>One</h2>\n      <p>One</p>\n     </div>\n  </div>\n  `,\n  components: {\n    'my-cpn1': vm1,\n  },\n})\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  // 2.註冊組件\n  components: {\n    'my-cpn2': vm2,\n  },\n})\n```\n\n換個角度來說 Vue 實例也是一個父組件，只差沒寫 `template` 屬性。\n\n[DEMO](https://codepen.io/gleofgja/pen/bGBvWOr?editors=1011)\n\n### 4. 註冊組件的語法糖\n\n> 以上當我們再創造組件的時候所使用的 `Vue.extend()` 在 Vue 2.X 以後已經很少用了幾乎是不會再出現。\n\n一開始先用 `extend` 創造，再用 `component` 註冊。\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n</div>\n```\n\n```javascript\n// 1. 創造組件\nconst vm1 = Vue.extend({\n  template: `\n  <div>\n    <h2>One</h2>\n    <p>One</p>\n  </div>\n  `,\n})\n\n// 2.註冊組件\nVue.component('my-cpn1', vm1)\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n})\n```\n\n但我們可以把上面 `Vue.extend` 裡面的內容移到 `Vue.component` 裡面，如下\n\n```javascript\n// 把 vm1 改成 extend 創造的物件\nVue.component('my-cpn1', {\n  template: `\n  <div>\n    <h2>One</h2>\n    <p>One</p>\n  </div>\n  `,\n})\n```\n\n同理，可以在把 `Vue.component` 的內容移到 Vue 實例裡面，但 `component` 要記得加 `s` ，所以又可以再改寫一次，如下\n\n```javascript\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  components: {\n    'my-cpn1': {\n      template: `\n      <div>\n        <h2>One</h2>\n        <p>One</p>\n      </div>\n      `,\n    },\n  },\n})\n```\n\n![](https://i.imgur.com/rPU0m4Q.png)\n\n這就是組件化的語法糖的最終版。\n\n要特別注意的是除了<font color=#FF0000> `component` 要加 `s` ， 逗號也要改成冒號。</font>\n\n[DEMO](https://codepen.io/gleofgja/pen/oNYqwYx?editors=1011)\n\n### 5. 組件模板的分離寫法\n\n在上一點註冊組件的語法糖中，最終寫法是將模板的資料寫到 Vue 實例裡面，但模板其實是可以寫到 HTML 裡面的，以下要講解的是比較簡單的分離寫法。\n\n#### script 標籤，屬性為 `type='text/x-template'`\n\n在 HTML 裡面創造 `script` 標籤，加上 `type='text/x-template'` 跟 一個 `id` ，id 是為了在註冊裡面綁定用的，寫法如下。\n\n但要特別注意的是，在 <font color=#FF0000>模板裡面要記得加上 `div` 標籤。</font>\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n</div>\n\n<!-- 在這裡創造一個模板 -->\n<script type=\"text/x-template\" id=\"vm1\">\n  <div>\n    <h2>title</h2>\n    <p>content</p>\n  </div>\n</script>\n```\n\n```javascript\n// 註冊 vm1 組件\nVue.component('my-cpn1', {\n  template: '#vm1',\n})\n\n// 使用組件\nconst app = new Vue({\n  el: '#app',\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/LK9DGQH.png)\n\n#### template 標籤\n\n`template` 寫法會更好記，因為只需要寫 `template` 加上 `id` 就好。\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n</div>\n\n<!-- template 寫法 -->\n<template id=\"vm1\">\n  <div>\n    <h2>title</h2>\n    <p>content</p>\n  </div>\n</template>\n```\n\nVue 實例跟上面一樣。\n\n```javascript\n// 註冊組件\nVue.component('my-cpn1', {\n  template: '#vm1',\n})\n\n// 使用組件\nconst app = new Vue({\n  el: '#app',\n})\n```\n\n顯示效果跟上面一樣。\n![](https://i.imgur.com/VORlZ7y.png)\n\n以上就是模板的分離寫法。\n\n[DEMO](https://codepen.io/gleofgja/pen/yLVKXRd?editors=1011)\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=57)\n","source":"_posts/2020/Vue 組件一.md","raw":"---\ntitle: Vue - 組件化 ( 一 )\ndate: 2021/02/28\ntags:\n  - Vue\n  - components\ncategories:\n  - Vue\n---\n\n## 簡介\n\n面對複雜問題的處裡的方式就是將問題分割，而將東西分割的方式在 Vue 裡面我們稱為組件化。\n\n大概 10 年前吧，原本一個網頁是由一個 HTML、CSS、JavaScript 所組成的，但這樣在改動某個地方的時候會非常麻煩也會擔心會不會影響到網頁其他地方。後來出現了用 JavaScript 寫成的前端框架，將網頁內部切分成很多區塊，讓這些區塊內都有獨立的 HTML、CSS、JavaScript，這樣當某個區塊改動時就不必擔心會影響到網頁內的其他區塊，也因為每個區塊都是獨立的所以重複利用，這也讓開發者大大的提升了開發效率。\n\n[下圖來自官網](https://cn.vuejs.org/v2/guide/components.html)\n![](https://i.imgur.com/KxbAXYc.png)\n\n組件化的思想就是盡可能的把頁面拆分成很多個小區塊，變成可重複利用的組件。\n\n<!--more-->\n\n## 組件化開發\n\n### 1.組件化的基本使用\n\n在之前[基本模板語法](https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/#%E4%B8%80%E3%80%81%E6%8F%92%E5%80%BC%E8%AA%9E%E6%B3%95)提到用 mustache 語法可以顯示 `data` 物件內的 `value 值`，但如果有非常多重複的內容，這樣做不只可讀性差，也不好維護。用以下程式碼來示範。\n\n```html\n<div id=\"app\">\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message1: 'title',\n    message2: 'hello world',\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/Ut7qry9.png)\n\n這樣寫確實會顯示 4 個內容，但一樣的內容要寫 4 次才會呈現，而且有很冗長，這時就可以用組件的方式撰寫，可讀性也比較高。\n\n以下示範如何組件化。\n\n**分成三大步驟:**\n\n1. 創造組件構造器 : `Vue.extend()`\n2. 註冊組件 : `Vue.component()`\n3. 使用組件 : `Vue 實例的使用範圍`\n\n首先把重複性高的拉出來，如下圖，紅框處的重複性特別高，所以要獨立出來變成組件。\n![](https://i.imgur.com/HH2YDec.png)\n\n#### 1. 創造組件\n\n在 `Vue.extend` 組件裡面，它有個屬性是 `template` ，就是模板，在模板裡面的所有內容都是獨立且可重複利用的，把上圖紅框處放到模板裡面。再把 `Vue.extend()` 賦予到 `vm` 變數裡面，用變數是為了方便待會在註冊 ( component ) 的時候呼叫。\n\n```javascript\n// 1. 創造組件\nconst vm = Vue.extend({\n  template: `\n  <div>\n    <h2>我是模板的:title</h2>\n    <p>我是模板的:hello world</p>\n  </div>\n  `,\n})\n```\n\n#### 2. 註冊組件\n\n創造完要註冊，它需要兩個參數，第一個參數是 `模板的標籤名稱` 可以自訂義，第二個是 `創造組件的變數` 就是指上面的 `vm` ，寫法也非常簡單，如下\n\n```javascript\n// 2.註冊組件\nVue.component('模板的標籤名稱', 創造組件的變數)\nVue.component('my-cpn', vm)\n```\n\n完整寫法:\n\n```html\n<div id=\"app\">\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <!--   <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p>\n\n  <h2>{{message1}}</h2>\n  <p>{{message2}}</p> -->\n\n  <my-cpn></my-cpn>\n  <my-cpn></my-cpn>\n  <my-cpn></my-cpn>\n  <my-cpn></my-cpn>\n</div>\n```\n\n```javascript\n// 1. 創造組件\nconst vm = Vue.extend({\n  template: `\n  <div>\n    <h2>我是模板的:title</h2>\n    <p>我是模板的:hello world</p>\n  </div>\n  `,\n})\n\n// 2.註冊組件\nVue.component('my-cpn', vm)\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message1: 'title',\n    message2: 'hello world',\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/ZPBsCjR.png)\n\n會發現在 `html` 上只要寫 `my-cpn` 標籤就可以顯示相同的內容，這就是組件化，之後如果想改動 `html` 的內容只要針對組件內的內容做改動就好，這樣不只增加可讀性同時也方便管理。\n\n但要特別注意的是模板標籤必須寫在 `id='app'` 標籤裡面，寫在外面是不會被使用到的。\n\n[DEMO](https://codepen.io/gleofgja/pen/OJbQYwp?editors=1011)\n\n> `Vue.extend()` 在 Vue2.X 版以後就沒看到了，會示範也是因為這是必要的基礎觀念，之後的開發上就不會使用 `Vue.extend()` 而是使用語法糖的方式撰寫。\n\n### 2. 全域組件跟區域組件\n\n以上所寫的都是全域組件，全域就是可以在多個 Vue 實例裡面使用。\n之前所寫的 Vue 實例只有一個，那可不可有兩個?\n答案是 : 可以的! 但真實開發只會有一個，以下是為了釐清觀念所示範的。\n\n再新增一個 Vue 實例 ( `id='app2'` )\n\n```html\n<div id=\"app\">\n  <my-cpn></my-cpn>\n</div>\n\n<div id=\"app2\">\n  <my-cpn></my-cpn>\n</div>\n```\n\n```javascript\n// 1. 創造組件\nconst vm = Vue.extend({\n  template: `\n  <div>\n    <h2>我是模板的:title</h2>\n    <p>我是模板的:hello world</p>\n  </div>\n  `,\n})\n\n// 2.註冊組件\nVue.component('my-cpn', vm)\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n})\n\n// 新增一個實例 app2\nconst app2 = new Vue({\n  el: '#app2',\n})\n```\n\n一樣可以使用，如下圖\n![](https://i.imgur.com/K2bd97U.png)\n\n用開發模式看，會看到 `app2` 也有用到全域組件\n![](https://i.imgur.com/9XXcTf0.png)\n\n那要怎麼做才會變成區域組件?\n方法很簡單，就是把 `Vue.component('my-cpn', vm)` 移到 Vue 實例裡面 ( 記得 component 要加 s )。\nVue 實例裡面新增 `components` 一個屬性，再給 `components` 屬性一個物件，裡面放 `key` 跟 `value` 值。\n\nkey 值指的是`自訂義模板的標籤名`， value 就是`組件的變數名稱`。\n\n要特別注意的是 key 值的寫法，跟 HTML 模板標籤的寫法。\nkey 值的寫法分兩種:\n\n1. 單字以減號-分離 ( Kebab Case ) <font color=#FF0000>必須加引號</font>。\n2. 駝峰式命名法 ( Camel Case )，<font color=#FF0000>加不加引號都可以</font>。\n\n<font color=#FF0000>HTML 模板的組件標籤必須是 Kebab Case 寫法</font>。\n\n```javascript\nconst app = new Vue({\n  el:'#app',\n  components:{\n    // Kebab Case\n    'my-cpn': vm\n\n    // Camel Case\n    myCpn: vm\n    'myCpn': vm\n  }\n})\n```\n\n以下示範區域組件\n\n```html\n<div id=\"app\">\n  <my-cpn></my-cpn>\n</div>\n\n<div id=\"app2\">\n  <my-cpn></my-cpn>\n</div>\n```\n\n```javascript\n// 1. 創造組件\nconst vm = Vue.extend({\n  template: `\n  <div>\n    <h2>我是模板的:title</h2>\n    <p>我是模板的:hello world</p>\n  </div>\n  `,\n})\n\n// 2.註冊組件\n// Vue.component('my-cpn', vm)\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  components: {\n    // 'my-cpn': vm\n    // 'myCpn': vm\n    myCpn: vm,\n  },\n})\n\nconst app2 = new Vue({\n  el: '#app2',\n})\n```\n\n用開發者工具看，`app` 有在實例裡面註冊，所以可以使用，但 `app2` 不能，因為沒有在 `app2` 裡面註冊，所以不會解析 `my-cpn` 標籤。\n![](https://i.imgur.com/Gf58VOC.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/mdOxOMJ?editors=1011)\n\n以上就是區域組件的示範，在實戰開發上也是區域組件使用的最多，也只會有一個 Vue 實例。\n\n### 3. 父子組件\n\n顧名思義就是組件裡面再放一層組件。\n\n以下範例是創造一個 `vm2` 組件，再把 `vm1` 放到 `vm2` 裡面註冊，再到 Vue 實例裡面註冊 `vm2`。\n\n```html\n<div id=\"app\">\n  <my-cpn2></my-cpn2>\n</div>\n```\n\n```javascript\n// 1. 創造組件 vm1\nconst vm1 = Vue.extend({\n  template: `\n  <div>\n    <h2>One</h2>\n    <p>One</p>\n  </div>\n  `,\n})\n\n// 創造組件 vm2\nconst vm2 = Vue.extend({\n  template: `\n  <div>\n    <h2>Two</h2>\n    <p>Two Content</p>\n    <my-cpn1></my-cpn1>\n  </div>\n  `,\n  // 註冊組件 vm1\n  components: {\n    'my-cpn1': vm1,\n  },\n})\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  // 2.註冊組件\n  components: {\n    'my-cpn2': vm2,\n  },\n})\n```\n\n結果為下圖\n![](https://i.imgur.com/88UmUB0.png)\n\n用開發者工具查看\n![](https://i.imgur.com/cd4p83b.png)\n\n由上面案例可知 `vm2` 為父組件，`vm1` 為子組件。\n\n當 HTML 再解析 `my-cpn2` 標籤的內容時，他會到 `vm2` 裡面解析模板的內容，而解析 `vm2` 模板的內容時又發現 `my-cpn1` 標籤，這時他會看看有沒有註冊 `my-cpn1` 的標籤，如果有找到它就會對應到 `vm1` 模板的內的內容，如果 `vm1` 裡面沒找到的話，它就會去全域組件找，如果全域還找不到就會報錯。\n\n編譯好之後的模板如下\n\n```javascript\n// 創造組件 vm2\nconst vm2 = Vue.extend({\n  template: `\n  <div>\n    <h2>Two</h2>\n    <p>Two Content</p>\n\n    <div>\n      <h2>One</h2>\n      <p>One</p>\n     </div>\n  </div>\n  `,\n  components: {\n    'my-cpn1': vm1,\n  },\n})\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  // 2.註冊組件\n  components: {\n    'my-cpn2': vm2,\n  },\n})\n```\n\n換個角度來說 Vue 實例也是一個父組件，只差沒寫 `template` 屬性。\n\n[DEMO](https://codepen.io/gleofgja/pen/bGBvWOr?editors=1011)\n\n### 4. 註冊組件的語法糖\n\n> 以上當我們再創造組件的時候所使用的 `Vue.extend()` 在 Vue 2.X 以後已經很少用了幾乎是不會再出現。\n\n一開始先用 `extend` 創造，再用 `component` 註冊。\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n</div>\n```\n\n```javascript\n// 1. 創造組件\nconst vm1 = Vue.extend({\n  template: `\n  <div>\n    <h2>One</h2>\n    <p>One</p>\n  </div>\n  `,\n})\n\n// 2.註冊組件\nVue.component('my-cpn1', vm1)\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n})\n```\n\n但我們可以把上面 `Vue.extend` 裡面的內容移到 `Vue.component` 裡面，如下\n\n```javascript\n// 把 vm1 改成 extend 創造的物件\nVue.component('my-cpn1', {\n  template: `\n  <div>\n    <h2>One</h2>\n    <p>One</p>\n  </div>\n  `,\n})\n```\n\n同理，可以在把 `Vue.component` 的內容移到 Vue 實例裡面，但 `component` 要記得加 `s` ，所以又可以再改寫一次，如下\n\n```javascript\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n  components: {\n    'my-cpn1': {\n      template: `\n      <div>\n        <h2>One</h2>\n        <p>One</p>\n      </div>\n      `,\n    },\n  },\n})\n```\n\n![](https://i.imgur.com/rPU0m4Q.png)\n\n這就是組件化的語法糖的最終版。\n\n要特別注意的是除了<font color=#FF0000> `component` 要加 `s` ， 逗號也要改成冒號。</font>\n\n[DEMO](https://codepen.io/gleofgja/pen/oNYqwYx?editors=1011)\n\n### 5. 組件模板的分離寫法\n\n在上一點註冊組件的語法糖中，最終寫法是將模板的資料寫到 Vue 實例裡面，但模板其實是可以寫到 HTML 裡面的，以下要講解的是比較簡單的分離寫法。\n\n#### script 標籤，屬性為 `type='text/x-template'`\n\n在 HTML 裡面創造 `script` 標籤，加上 `type='text/x-template'` 跟 一個 `id` ，id 是為了在註冊裡面綁定用的，寫法如下。\n\n但要特別注意的是，在 <font color=#FF0000>模板裡面要記得加上 `div` 標籤。</font>\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n</div>\n\n<!-- 在這裡創造一個模板 -->\n<script type=\"text/x-template\" id=\"vm1\">\n  <div>\n    <h2>title</h2>\n    <p>content</p>\n  </div>\n</script>\n```\n\n```javascript\n// 註冊 vm1 組件\nVue.component('my-cpn1', {\n  template: '#vm1',\n})\n\n// 使用組件\nconst app = new Vue({\n  el: '#app',\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/LK9DGQH.png)\n\n#### template 標籤\n\n`template` 寫法會更好記，因為只需要寫 `template` 加上 `id` 就好。\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n</div>\n\n<!-- template 寫法 -->\n<template id=\"vm1\">\n  <div>\n    <h2>title</h2>\n    <p>content</p>\n  </div>\n</template>\n```\n\nVue 實例跟上面一樣。\n\n```javascript\n// 註冊組件\nVue.component('my-cpn1', {\n  template: '#vm1',\n})\n\n// 使用組件\nconst app = new Vue({\n  el: '#app',\n})\n```\n\n顯示效果跟上面一樣。\n![](https://i.imgur.com/VORlZ7y.png)\n\n以上就是模板的分離寫法。\n\n[DEMO](https://codepen.io/gleofgja/pen/yLVKXRd?editors=1011)\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=57)\n","slug":"Vue 組件一","published":1,"updated":"2021-03-26T16:13:11.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpf000eg0tr997jhr02","content":"<html><head></head><body><h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>面對複雜問題的處裡的方式就是將問題分割，而將東西分割的方式在 Vue 裡面我們稱為組件化。</p>\n<p>大概 10 年前吧，原本一個網頁是由一個 HTML、CSS、JavaScript 所組成的，但這樣在改動某個地方的時候會非常麻煩也會擔心會不會影響到網頁其他地方。後來出現了用 JavaScript 寫成的前端框架，將網頁內部切分成很多區塊，讓這些區塊內都有獨立的 HTML、CSS、JavaScript，這樣當某個區塊改動時就不必擔心會影響到網頁內的其他區塊，也因為每個區塊都是獨立的所以重複利用，這也讓開發者大大的提升了開發效率。</p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/components.html\">下圖來自官網</a><br><img src=\"https://i.imgur.com/KxbAXYc.png\"></p>\n<p>組件化的思想就是盡可能的把頁面拆分成很多個小區塊，變成可重複利用的組件。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"組件化開發\"><a href=\"#組件化開發\" class=\"headerlink\" title=\"組件化開發\"></a>組件化開發</h2><h3 id=\"1-組件化的基本使用\"><a href=\"#1-組件化的基本使用\" class=\"headerlink\" title=\"1.組件化的基本使用\"></a>1.組件化的基本使用</h3><p>在之前<a href=\"https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/#%E4%B8%80%E3%80%81%E6%8F%92%E5%80%BC%E8%AA%9E%E6%B3%95\">基本模板語法</a>提到用 mustache 語法可以顯示 <code>data</code> 物件內的 <code>value 值</code>，但如果有非常多重複的內容，這樣做不只可讀性差，也不好維護。用以下程式碼來示範。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message1}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{message2}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message1}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{message2}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message1}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{message2}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message1}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{message2}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message1: <span class=\"hljs-string\">'title'</span>,</span><br><span class=\"line\">    message2: <span class=\"hljs-string\">'hello world'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/Ut7qry9.png\"></p>\n<p>這樣寫確實會顯示 4 個內容，但一樣的內容要寫 4 次才會呈現，而且有很冗長，這時就可以用組件的方式撰寫，可讀性也比較高。</p>\n<p>以下示範如何組件化。</p>\n<p><strong>分成三大步驟:</strong></p>\n<ol>\n<li>創造組件構造器 : <code>Vue.extend()</code></li>\n<li>註冊組件 : <code>Vue.component()</code></li>\n<li>使用組件 : <code>Vue 實例的使用範圍</code></li>\n</ol>\n<p>首先把重複性高的拉出來，如下圖，紅框處的重複性特別高，所以要獨立出來變成組件。<br><img src=\"https://i.imgur.com/HH2YDec.png\"></p>\n<h4 id=\"1-創造組件\"><a href=\"#1-創造組件\" class=\"headerlink\" title=\"1. 創造組件\"></a>1. 創造組件</h4><p>在 <code>Vue.extend</code> 組件裡面，它有個屬性是 <code>template</code> ，就是模板，在模板裡面的所有內容都是獨立且可重複利用的，把上圖紅框處放到模板裡面。再把 <code>Vue.extend()</code> 賦予到 <code>vm</code> 變數裡面，用變數是為了方便待會在註冊 ( component ) 的時候呼叫。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vm = Vue.extend({</span><br><span class=\"line\">  template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span>,</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-註冊組件\"><a href=\"#2-註冊組件\" class=\"headerlink\" title=\"2. 註冊組件\"></a>2. 註冊組件</h4><p>創造完要註冊，它需要兩個參數，第一個參數是 <code>模板的標籤名稱</code> 可以自訂義，第二個是 <code>創造組件的變數</code> 就是指上面的 <code>vm</code> ，寫法也非常簡單，如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 2.註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'模板的標籤名稱'</span>, 創造組件的變數)</span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn'</span>, vm)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>完整寫法:</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message1}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{message2}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   &lt;h2&gt;{{message1}}&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  &lt;p&gt;{{message2}}&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\"></span></span><br><span class=\"line\"><span class=\"hljs-comment\">  &lt;h2&gt;{{message1}}&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  &lt;p&gt;{{message2}}&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\"></span></span><br><span class=\"line\"><span class=\"hljs-comment\">  &lt;h2&gt;{{message1}}&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  &lt;p&gt;{{message2}}&lt;/p&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vm = Vue.extend({</span><br><span class=\"line\">  template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 2.註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn'</span>, vm)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message1: <span class=\"hljs-string\">'title'</span>,</span><br><span class=\"line\">    message2: <span class=\"hljs-string\">'hello world'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/ZPBsCjR.png\"></p>\n<p>會發現在 <code>html</code> 上只要寫 <code>my-cpn</code> 標籤就可以顯示相同的內容，這就是組件化，之後如果想改動 <code>html</code> 的內容只要針對組件內的內容做改動就好，這樣不只增加可讀性同時也方便管理。</p>\n<p>但要特別注意的是模板標籤必須寫在 <code>id='app'</code> 標籤裡面，寫在外面是不會被使用到的。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/OJbQYwp?editors=1011\">DEMO</a></p>\n<blockquote>\n<p><code>Vue.extend()</code> 在 Vue2.X 版以後就沒看到了，會示範也是因為這是必要的基礎觀念，之後的開發上就不會使用 <code>Vue.extend()</code> 而是使用語法糖的方式撰寫。</p>\n</blockquote>\n<h3 id=\"2-全域組件跟區域組件\"><a href=\"#2-全域組件跟區域組件\" class=\"headerlink\" title=\"2. 全域組件跟區域組件\"></a>2. 全域組件跟區域組件</h3><p>以上所寫的都是全域組件，全域就是可以在多個 Vue 實例裡面使用。<br>之前所寫的 Vue 實例只有一個，那可不可有兩個?<br>答案是 : 可以的! 但真實開發只會有一個，以下是為了釐清觀念所示範的。</p>\n<p>再新增一個 Vue 實例 ( <code>id='app2'</code> )</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vm = Vue.extend({</span><br><span class=\"line\">  template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 2.註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn'</span>, vm)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 新增一個實例 app2</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app2 = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app2'</span>,</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>一樣可以使用，如下圖<br><img src=\"https://i.imgur.com/K2bd97U.png\"></p>\n<p>用開發模式看，會看到 <code>app2</code> 也有用到全域組件<br><img src=\"https://i.imgur.com/9XXcTf0.png\"></p>\n<p>那要怎麼做才會變成區域組件?<br>方法很簡單，就是把 <code>Vue.component('my-cpn', vm)</code> 移到 Vue 實例裡面 ( 記得 component 要加 s )。<br>Vue 實例裡面新增 <code>components</code> 一個屬性，再給 <code>components</code> 屬性一個物件，裡面放 <code>key</code> 跟 <code>value</code> 值。</p>\n<p>key 值指的是<code>自訂義模板的標籤名</code>， value 就是<code>組件的變數名稱</code>。</p>\n<p>要特別注意的是 key 值的寫法，跟 HTML 模板標籤的寫法。<br>key 值的寫法分兩種:</p>\n<ol>\n<li>單字以減號-分離 ( Kebab Case ) <font color=\"#FF0000\">必須加引號</font>。</li>\n<li>駝峰式命名法 ( Camel Case )，<font color=\"#FF0000\">加不加引號都可以</font>。</li>\n</ol>\n<p><font color=\"#FF0000\">HTML 模板的組件標籤必須是 Kebab Case 寫法</font>。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el:<span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  components:{</span><br><span class=\"line\">    <span class=\"hljs-comment\">// Kebab Case</span></span><br><span class=\"line\">    <span class=\"hljs-string\">'my-cpn'</span>: vm</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// Camel Case</span></span><br><span class=\"line\">    myCpn: vm</span><br><span class=\"line\">    <span class=\"hljs-string\">'myCpn'</span>: vm</span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>以下示範區域組件</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vm = Vue.extend({</span><br><span class=\"line\">  template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 2.註冊組件</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// Vue.component('my-cpn', vm)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 'my-cpn': vm</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 'myCpn': vm</span></span><br><span class=\"line\">    myCpn: vm,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app2 = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app2'</span>,</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用開發者工具看，<code>app</code> 有在實例裡面註冊，所以可以使用，但 <code>app2</code> 不能，因為沒有在 <code>app2</code> 裡面註冊，所以不會解析 <code>my-cpn</code> 標籤。<br><img src=\"https://i.imgur.com/Gf58VOC.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/mdOxOMJ?editors=1011\">DEMO</a></p>\n<p>以上就是區域組件的示範，在實戰開發上也是區域組件使用的最多，也只會有一個 Vue 實例。</p>\n<h3 id=\"3-父子組件\"><a href=\"#3-父子組件\" class=\"headerlink\" title=\"3. 父子組件\"></a>3. 父子組件</h3><p>顧名思義就是組件裡面再放一層組件。</p>\n<p>以下範例是創造一個 <code>vm2</code> 組件，再把 <code>vm1</code> 放到 <code>vm2</code> 裡面註冊，再到 Vue 實例裡面註冊 <code>vm2</code>。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 1. 創造組件 vm1</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vm1 = Vue.extend({</span><br><span class=\"line\">  template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 創造組件 vm2</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vm2 = Vue.extend({</span><br><span class=\"line\">  template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h2&gt;Two&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;Two Content&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;my-cpn1&gt;&lt;/my-cpn1&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span>,</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 註冊組件 vm1</span></span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    <span class=\"hljs-string\">'my-cpn1'</span>: vm1,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 2.註冊組件</span></span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    <span class=\"hljs-string\">'my-cpn2'</span>: vm2,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>結果為下圖<br><img src=\"https://i.imgur.com/88UmUB0.png\"></p>\n<p>用開發者工具查看<br><img src=\"https://i.imgur.com/cd4p83b.png\"></p>\n<p>由上面案例可知 <code>vm2</code> 為父組件，<code>vm1</code> 為子組件。</p>\n<p>當 HTML 再解析 <code>my-cpn2</code> 標籤的內容時，他會到 <code>vm2</code> 裡面解析模板的內容，而解析 <code>vm2</code> 模板的內容時又發現 <code>my-cpn1</code> 標籤，這時他會看看有沒有註冊 <code>my-cpn1</code> 的標籤，如果有找到它就會對應到 <code>vm1</code> 模板的內的內容，如果 <code>vm1</code> 裡面沒找到的話，它就會去全域組件找，如果全域還找不到就會報錯。</p>\n<p>編譯好之後的模板如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 創造組件 vm2</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vm2 = Vue.extend({</span><br><span class=\"line\">  template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h2&gt;Two&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;Two Content&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\"></span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">     &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span>,</span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    <span class=\"hljs-string\">'my-cpn1'</span>: vm1,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 2.註冊組件</span></span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    <span class=\"hljs-string\">'my-cpn2'</span>: vm2,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>換個角度來說 Vue 實例也是一個父組件，只差沒寫 <code>template</code> 屬性。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/bGBvWOr?editors=1011\">DEMO</a></p>\n<h3 id=\"4-註冊組件的語法糖\"><a href=\"#4-註冊組件的語法糖\" class=\"headerlink\" title=\"4. 註冊組件的語法糖\"></a>4. 註冊組件的語法糖</h3><blockquote>\n<p>以上當我們再創造組件的時候所使用的 <code>Vue.extend()</code> 在 Vue 2.X 以後已經很少用了幾乎是不會再出現。</p>\n</blockquote>\n<p>一開始先用 <code>extend</code> 創造，再用 <code>component</code> 註冊。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vm1 = Vue.extend({</span><br><span class=\"line\">  template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 2.註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn1'</span>, vm1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>但我們可以把上面 <code>Vue.extend</code> 裡面的內容移到 <code>Vue.component</code> 裡面，如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 把 vm1 改成 extend 創造的物件</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn1'</span>, {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span>,</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>同理，可以在把 <code>Vue.component</code> 的內容移到 Vue 實例裡面，但 <code>component</code> 要記得加 <code>s</code> ，所以又可以再改寫一次，如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    <span class=\"hljs-string\">'my-cpn1'</span>: {</span><br><span class=\"line\">      template: <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">        &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">        &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      `</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/rPU0m4Q.png\"></p>\n<p>這就是組件化的語法糖的最終版。</p>\n<p>要特別注意的是除了<font color=\"#FF0000\"> <code>component</code> 要加 <code>s</code> ， 逗號也要改成冒號。</font></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/oNYqwYx?editors=1011\">DEMO</a></p>\n<h3 id=\"5-組件模板的分離寫法\"><a href=\"#5-組件模板的分離寫法\" class=\"headerlink\" title=\"5. 組件模板的分離寫法\"></a>5. 組件模板的分離寫法</h3><p>在上一點註冊組件的語法糖中，最終寫法是將模板的資料寫到 Vue 實例裡面，但模板其實是可以寫到 HTML 裡面的，以下要講解的是比較簡單的分離寫法。</p>\n<h4 id=\"script-標籤，屬性為-type-39-text-x-template-39\"><a href=\"#script-標籤，屬性為-type-39-text-x-template-39\" class=\"headerlink\" title=\"script 標籤，屬性為 type='text/x-template'\"></a>script 標籤，屬性為 <code>type='text/x-template'</code></h4><p>在 HTML 裡面創造 <code>script</code> 標籤，加上 <code>type='text/x-template'</code> 跟 一個 <code>id</code> ，id 是為了在註冊裡面綁定用的，寫法如下。</p>\n<p>但要特別注意的是，在 <font color=\"#FF0000\">模板裡面要記得加上 <code>div</code> 標籤。</font></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- 在這裡創造一個模板 --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/x-template\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"vm1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-handlebars\"><span class=\"hljs-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"hljs-handlebars\"><span class=\"hljs-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"hljs-handlebars\"><span class=\"hljs-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"hljs-handlebars\"><span class=\"hljs-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 註冊 vm1 組件</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn1'</span>, {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'#vm1'</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/LK9DGQH.png\"></p>\n<h4 id=\"template-標籤\"><a href=\"#template-標籤\" class=\"headerlink\" title=\"template 標籤\"></a>template 標籤</h4><p><code>template</code> 寫法會更好記，因為只需要寫 <code>template</code> 加上 <code>id</code> 就好。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- template 寫法 --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"vm1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>Vue 實例跟上面一樣。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn1'</span>, {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'#vm1'</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示效果跟上面一樣。<br><img src=\"https://i.imgur.com/VORlZ7y.png\"></p>\n<p>以上就是模板的分離寫法。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/yLVKXRd?editors=1011\">DEMO</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=57\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"Vue","path":"tags/Vue/"},{"name":"components","path":"tags/components/"}],"excerpt":"<html><head></head><body><h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>面對複雜問題的處裡的方式就是將問題分割，而將東西分割的方式在 Vue 裡面我們稱為組件化。</p>\n<p>大概 10 年前吧，原本一個網頁是由一個 HTML、CSS、JavaScript 所組成的，但這樣在改動某個地方的時候會非常麻煩也會擔心會不會影響到網頁其他地方。後來出現了用 JavaScript 寫成的前端框架，將網頁內部切分成很多區塊，讓這些區塊內都有獨立的 HTML、CSS、JavaScript，這樣當某個區塊改動時就不必擔心會影響到網頁內的其他區塊，也因為每個區塊都是獨立的所以重複利用，這也讓開發者大大的提升了開發效率。</p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/components.html\">下圖來自官網</a><br><img src=\"https://i.imgur.com/KxbAXYc.png\"></p>\n<p>組件化的思想就是盡可能的把頁面拆分成很多個小區塊，變成可重複利用的組件。</p></body></html>","more":"<h2 id=\"組件化開發\"><a href=\"#組件化開發\" class=\"headerlink\" title=\"組件化開發\"></a>組件化開發</h2><h3 id=\"1-組件化的基本使用\"><a href=\"#1-組件化的基本使用\" class=\"headerlink\" title=\"1.組件化的基本使用\"></a>1.組件化的基本使用</h3><p>在之前<a href=\"https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/#%E4%B8%80%E3%80%81%E6%8F%92%E5%80%BC%E8%AA%9E%E6%B3%95\">基本模板語法</a>提到用 mustache 語法可以顯示 <code>data</code> 物件內的 <code>value 值</code>，但如果有非常多重複的內容，這樣做不只可讀性差，也不好維護。用以下程式碼來示範。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;message2&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;message2&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;message2&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;message2&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message1: <span class=\"string\">&#x27;title&#x27;</span>,</span><br><span class=\"line\">    message2: <span class=\"string\">&#x27;hello world&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/Ut7qry9.png\"></p>\n<p>這樣寫確實會顯示 4 個內容，但一樣的內容要寫 4 次才會呈現，而且有很冗長，這時就可以用組件的方式撰寫，可讀性也比較高。</p>\n<p>以下示範如何組件化。</p>\n<p><strong>分成三大步驟:</strong></p>\n<ol>\n<li>創造組件構造器 : <code>Vue.extend()</code></li>\n<li>註冊組件 : <code>Vue.component()</code></li>\n<li>使用組件 : <code>Vue 實例的使用範圍</code></li>\n</ol>\n<p>首先把重複性高的拉出來，如下圖，紅框處的重複性特別高，所以要獨立出來變成組件。<br><img src=\"https://i.imgur.com/HH2YDec.png\"></p>\n<h4 id=\"1-創造組件\"><a href=\"#1-創造組件\" class=\"headerlink\" title=\"1. 創造組件\"></a>1. 創造組件</h4><p>在 <code>Vue.extend</code> 組件裡面，它有個屬性是 <code>template</code> ，就是模板，在模板裡面的所有內容都是獨立且可重複利用的，把上圖紅框處放到模板裡面。再把 <code>Vue.extend()</code> 賦予到 <code>vm</code> 變數裡面，用變數是為了方便待會在註冊 ( component ) 的時候呼叫。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-註冊組件\"><a href=\"#2-註冊組件\" class=\"headerlink\" title=\"2. 註冊組件\"></a>2. 註冊組件</h4><p>創造完要註冊，它需要兩個參數，第一個參數是 <code>模板的標籤名稱</code> 可以自訂義，第二個是 <code>創造組件的變數</code> 就是指上面的 <code>vm</code> ，寫法也非常簡單，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;模板的標籤名稱&#x27;</span>, 創造組件的變數)</span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn&#x27;</span>, vm)</span><br></pre></td></tr></table></figure>\n\n<p>完整寫法:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;message2&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   &lt;h2&gt;&#123;&#123;message1&#125;&#125;&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;p&gt;&#123;&#123;message2&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  &lt;h2&gt;&#123;&#123;message1&#125;&#125;&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;p&gt;&#123;&#123;message2&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  &lt;h2&gt;&#123;&#123;message1&#125;&#125;&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;p&gt;&#123;&#123;message2&#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn&#x27;</span>, vm)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message1: <span class=\"string\">&#x27;title&#x27;</span>,</span><br><span class=\"line\">    message2: <span class=\"string\">&#x27;hello world&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/ZPBsCjR.png\"></p>\n<p>會發現在 <code>html</code> 上只要寫 <code>my-cpn</code> 標籤就可以顯示相同的內容，這就是組件化，之後如果想改動 <code>html</code> 的內容只要針對組件內的內容做改動就好，這樣不只增加可讀性同時也方便管理。</p>\n<p>但要特別注意的是模板標籤必須寫在 <code>id=&#39;app&#39;</code> 標籤裡面，寫在外面是不會被使用到的。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/OJbQYwp?editors=1011\">DEMO</a></p>\n<blockquote>\n<p><code>Vue.extend()</code> 在 Vue2.X 版以後就沒看到了，會示範也是因為這是必要的基礎觀念，之後的開發上就不會使用 <code>Vue.extend()</code> 而是使用語法糖的方式撰寫。</p>\n</blockquote>\n<h3 id=\"2-全域組件跟區域組件\"><a href=\"#2-全域組件跟區域組件\" class=\"headerlink\" title=\"2. 全域組件跟區域組件\"></a>2. 全域組件跟區域組件</h3><p>以上所寫的都是全域組件，全域就是可以在多個 Vue 實例裡面使用。<br>之前所寫的 Vue 實例只有一個，那可不可有兩個?<br>答案是 : 可以的! 但真實開發只會有一個，以下是為了釐清觀念所示範的。</p>\n<p>再新增一個 Vue 實例 ( <code>id=&#39;app2&#39;</code> )</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn&#x27;</span>, vm)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新增一個實例 app2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app2&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>一樣可以使用，如下圖<br><img src=\"https://i.imgur.com/K2bd97U.png\"></p>\n<p>用開發模式看，會看到 <code>app2</code> 也有用到全域組件<br><img src=\"https://i.imgur.com/9XXcTf0.png\"></p>\n<p>那要怎麼做才會變成區域組件?<br>方法很簡單，就是把 <code>Vue.component(&#39;my-cpn&#39;, vm)</code> 移到 Vue 實例裡面 ( 記得 component 要加 s )。<br>Vue 實例裡面新增 <code>components</code> 一個屬性，再給 <code>components</code> 屬性一個物件，裡面放 <code>key</code> 跟 <code>value</code> 值。</p>\n<p>key 值指的是<code>自訂義模板的標籤名</code>， value 就是<code>組件的變數名稱</code>。</p>\n<p>要特別注意的是 key 值的寫法，跟 HTML 模板標籤的寫法。<br>key 值的寫法分兩種:</p>\n<ol>\n<li>單字以減號-分離 ( Kebab Case ) <font color=#FF0000>必須加引號</font>。</li>\n<li>駝峰式命名法 ( Camel Case )，<font color=#FF0000>加不加引號都可以</font>。</li>\n</ol>\n<p><font color=#FF0000>HTML 模板的組件標籤必須是 Kebab Case 寫法</font>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Kebab Case</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;my-cpn&#x27;</span>: vm</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Camel Case</span></span><br><span class=\"line\">    myCpn: vm</span><br><span class=\"line\">    <span class=\"string\">&#x27;myCpn&#x27;</span>: vm</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>以下示範區域組件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.註冊組件</span></span><br><span class=\"line\"><span class=\"comment\">// Vue.component(&#x27;my-cpn&#x27;, vm)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &#x27;my-cpn&#x27;: vm</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;myCpn&#x27;: vm</span></span><br><span class=\"line\">    myCpn: vm,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app2&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>用開發者工具看，<code>app</code> 有在實例裡面註冊，所以可以使用，但 <code>app2</code> 不能，因為沒有在 <code>app2</code> 裡面註冊，所以不會解析 <code>my-cpn</code> 標籤。<br><img src=\"https://i.imgur.com/Gf58VOC.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/mdOxOMJ?editors=1011\">DEMO</a></p>\n<p>以上就是區域組件的示範，在實戰開發上也是區域組件使用的最多，也只會有一個 Vue 實例。</p>\n<h3 id=\"3-父子組件\"><a href=\"#3-父子組件\" class=\"headerlink\" title=\"3. 父子組件\"></a>3. 父子組件</h3><p>顧名思義就是組件裡面再放一層組件。</p>\n<p>以下範例是創造一個 <code>vm2</code> 組件，再把 <code>vm1</code> 放到 <code>vm2</code> 裡面註冊，再到 Vue 實例裡面註冊 <code>vm2</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn2</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 創造組件 vm1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm1 = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 創造組件 vm2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm2 = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2&gt;Two&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;Two Content&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;my-cpn1&gt;&lt;/my-cpn1&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 註冊組件 vm1</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;my-cpn1&#x27;</span>: vm1,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 2.註冊組件</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;my-cpn2&#x27;</span>: vm2,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>結果為下圖<br><img src=\"https://i.imgur.com/88UmUB0.png\"></p>\n<p>用開發者工具查看<br><img src=\"https://i.imgur.com/cd4p83b.png\"></p>\n<p>由上面案例可知 <code>vm2</code> 為父組件，<code>vm1</code> 為子組件。</p>\n<p>當 HTML 再解析 <code>my-cpn2</code> 標籤的內容時，他會到 <code>vm2</code> 裡面解析模板的內容，而解析 <code>vm2</code> 模板的內容時又發現 <code>my-cpn1</code> 標籤，這時他會看看有沒有註冊 <code>my-cpn1</code> 的標籤，如果有找到它就會對應到 <code>vm1</code> 模板的內的內容，如果 <code>vm1</code> 裡面沒找到的話，它就會去全域組件找，如果全域還找不到就會報錯。</p>\n<p>編譯好之後的模板如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 創造組件 vm2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm2 = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2&gt;Two&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;Two Content&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">     &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;my-cpn1&#x27;</span>: vm1,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 2.註冊組件</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;my-cpn2&#x27;</span>: vm2,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>換個角度來說 Vue 實例也是一個父組件，只差沒寫 <code>template</code> 屬性。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/bGBvWOr?editors=1011\">DEMO</a></p>\n<h3 id=\"4-註冊組件的語法糖\"><a href=\"#4-註冊組件的語法糖\" class=\"headerlink\" title=\"4. 註冊組件的語法糖\"></a>4. 註冊組件的語法糖</h3><blockquote>\n<p>以上當我們再創造組件的時候所使用的 <code>Vue.extend()</code> 在 Vue 2.X 以後已經很少用了幾乎是不會再出現。</p>\n</blockquote>\n<p>一開始先用 <code>extend</code> 創造，再用 <code>component</code> 註冊。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 創造組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm1 = Vue.extend(&#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn1&#x27;</span>, vm1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>但我們可以把上面 <code>Vue.extend</code> 裡面的內容移到 <code>Vue.component</code> 裡面，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把 vm1 改成 extend 創造的物件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn1&#x27;</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>同理，可以在把 <code>Vue.component</code> 的內容移到 Vue 實例裡面，但 <code>component</code> 要記得加 <code>s</code> ，所以又可以再改寫一次，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;my-cpn1&#x27;</span>: &#123;</span><br><span class=\"line\">      template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;One&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      `</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/rPU0m4Q.png\"></p>\n<p>這就是組件化的語法糖的最終版。</p>\n<p>要特別注意的是除了<font color=#FF0000> <code>component</code> 要加 <code>s</code> ， 逗號也要改成冒號。</font></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/oNYqwYx?editors=1011\">DEMO</a></p>\n<h3 id=\"5-組件模板的分離寫法\"><a href=\"#5-組件模板的分離寫法\" class=\"headerlink\" title=\"5. 組件模板的分離寫法\"></a>5. 組件模板的分離寫法</h3><p>在上一點註冊組件的語法糖中，最終寫法是將模板的資料寫到 Vue 實例裡面，但模板其實是可以寫到 HTML 裡面的，以下要講解的是比較簡單的分離寫法。</p>\n<h4 id=\"script-標籤，屬性為-type-39-text-x-template-39\"><a href=\"#script-標籤，屬性為-type-39-text-x-template-39\" class=\"headerlink\" title=\"script 標籤，屬性為 type=&#39;text/x-template&#39;\"></a>script 標籤，屬性為 <code>type=&#39;text/x-template&#39;</code></h4><p>在 HTML 裡面創造 <code>script</code> 標籤，加上 <code>type=&#39;text/x-template&#39;</code> 跟 一個 <code>id</code> ，id 是為了在註冊裡面綁定用的，寫法如下。</p>\n<p>但要特別注意的是，在 <font color=#FF0000>模板裡面要記得加上 <code>div</code> 標籤。</font></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在這裡創造一個模板 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/x-template&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vm1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 註冊 vm1 組件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn1&#x27;</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;#vm1&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/LK9DGQH.png\"></p>\n<h4 id=\"template-標籤\"><a href=\"#template-標籤\" class=\"headerlink\" title=\"template 標籤\"></a>template 標籤</h4><p><code>template</code> 寫法會更好記，因為只需要寫 <code>template</code> 加上 <code>id</code> 就好。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- template 寫法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vm1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Vue 實例跟上面一樣。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn1&#x27;</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;#vm1&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示效果跟上面一樣。<br><img src=\"https://i.imgur.com/VORlZ7y.png\"></p>\n<p>以上就是模板的分離寫法。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/yLVKXRd?editors=1011\">DEMO</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=57\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>"},{"title":"Vue - data 必須是函數","date":"2021-02-27T16:00:00.000Z","_content":"\n## 介紹\n\n在上一篇 Vue 組件化 ( 一 ) 介紹了組件話的觀念跟應用，但沒提到組件化的資料必須要用動態綁定來確保資料的獨立，所以這篇就來介紹一下組件化的 data 。\n\n<!--more-->\n\n## Data 必須是函式\n\n因為每個組件都會有自己的模板，每個模板都會有自己的樣式或是邏輯，為了讓組件之間的資料不互相影響，必須將資料以函式的方式撰寫。\n上一篇文章中提到的組件化，在模板內我都是直接寫值，並沒有用 mustache 語法來做動態綁定，因為當時還沒將 data 變成函數資料有可能不會呈現，但是在子組件下的 data 若是以函數的形式呈現，就不用擔心這問題，也可以確保每個組件的資料是獨立的。\n\n拿之前寫的組件範例示範\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n</div>\n\n<!-- template 寫法 -->\n<template id=\"vm1\">\n  <div>\n    <h2>title</h2>\n    //資料寫死\n    <p>content</p>\n    //資料寫死\n  </div>\n</template>\n```\n\n```javascript\n// 註冊組件\nVue.component('my-cpn1', {\n  template: '#vm1',\n})\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n})\n```\n\n在 `template` 模板裡面的資料，是寫死狀態，那改用 mustache 語法的話，會怎麼樣?\n\n只改動 template 模板內容\n\n```html\n<template id=\"vm1\">\n  <div>\n    <h2>{{title}}</h2>\n    <p>content</p>\n  </div>\n</template>\n```\n\n在 Vue 實例裡面新增 data 物件\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    title: '我是標題',\n  },\n})\n```\n\n用開發者工具看會報錯，也提示 `title` 沒有被定義\n![](https://i.imgur.com/jeS56di.png)\n\n這是因為組件內部是不能讀取 Vue 實例裡面的資料。\n而子組件裡面有屬於自己的 HTML 模板，也應該有屬於自己的資料。\n\n所以把上面組件內的 `data` 改成用函數的方式回傳，寫法也很簡單，`template` 內容一樣，只要在子組件裡面新增 `data` 函數的屬性並 `return` 物件內的值就好。\n\n```javascript\nVue.component('my-cpn1', {\n  template: '#vm1',\n  data() {\n    return {\n      title: '我是組件內的標題',\n    }\n  },\n})\n```\n\n結果為下圖\n![](https://i.imgur.com/WOFiOtJ.png)\n\n同樣道理，在把上式改寫成計數器的話\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n  <my-cpn1></my-cpn1>\n  <my-cpn1></my-cpn1>\n</div>\n\n<!-- template 寫法 -->\n<template id=\"vm1\">\n  <div>\n    <h2>{{count}}</h2>\n    <button @click=\"count++\">+</button>\n  </div>\n</template>\n```\n\n```javascript\nVue.component('my-cpn1', {\n  template: '#vm1',\n  data() {\n    return {\n      count: 0,\n    }\n  },\n})\n```\n\n組件內的每筆資料也都是互相獨立的\n![](https://i.imgur.com/JDevASi.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/YzpaRMx?editors=1011)\n\n總結:\n在 Vue 實例裡面，data 是物件。\n在子組件裡面 data 必須以函數的方式回傳物件。\n\n## 參考資料\n\n[子元件的 data 必須是函數](https://book.vue.tw/CH2/2-1-components.html)\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=59)\n","source":"_posts/2020/Vue-data.md","raw":"---\ntitle: Vue - data 必須是函數\ndate: 2021/02/28\ntags:\n  - data 函數\n\ncategories:\n  - Vue\n---\n\n## 介紹\n\n在上一篇 Vue 組件化 ( 一 ) 介紹了組件話的觀念跟應用，但沒提到組件化的資料必須要用動態綁定來確保資料的獨立，所以這篇就來介紹一下組件化的 data 。\n\n<!--more-->\n\n## Data 必須是函式\n\n因為每個組件都會有自己的模板，每個模板都會有自己的樣式或是邏輯，為了讓組件之間的資料不互相影響，必須將資料以函式的方式撰寫。\n上一篇文章中提到的組件化，在模板內我都是直接寫值，並沒有用 mustache 語法來做動態綁定，因為當時還沒將 data 變成函數資料有可能不會呈現，但是在子組件下的 data 若是以函數的形式呈現，就不用擔心這問題，也可以確保每個組件的資料是獨立的。\n\n拿之前寫的組件範例示範\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n</div>\n\n<!-- template 寫法 -->\n<template id=\"vm1\">\n  <div>\n    <h2>title</h2>\n    //資料寫死\n    <p>content</p>\n    //資料寫死\n  </div>\n</template>\n```\n\n```javascript\n// 註冊組件\nVue.component('my-cpn1', {\n  template: '#vm1',\n})\n\n// 3.使用組件\nconst app = new Vue({\n  el: '#app',\n})\n```\n\n在 `template` 模板裡面的資料，是寫死狀態，那改用 mustache 語法的話，會怎麼樣?\n\n只改動 template 模板內容\n\n```html\n<template id=\"vm1\">\n  <div>\n    <h2>{{title}}</h2>\n    <p>content</p>\n  </div>\n</template>\n```\n\n在 Vue 實例裡面新增 data 物件\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    title: '我是標題',\n  },\n})\n```\n\n用開發者工具看會報錯，也提示 `title` 沒有被定義\n![](https://i.imgur.com/jeS56di.png)\n\n這是因為組件內部是不能讀取 Vue 實例裡面的資料。\n而子組件裡面有屬於自己的 HTML 模板，也應該有屬於自己的資料。\n\n所以把上面組件內的 `data` 改成用函數的方式回傳，寫法也很簡單，`template` 內容一樣，只要在子組件裡面新增 `data` 函數的屬性並 `return` 物件內的值就好。\n\n```javascript\nVue.component('my-cpn1', {\n  template: '#vm1',\n  data() {\n    return {\n      title: '我是組件內的標題',\n    }\n  },\n})\n```\n\n結果為下圖\n![](https://i.imgur.com/WOFiOtJ.png)\n\n同樣道理，在把上式改寫成計數器的話\n\n```html\n<div id=\"app\">\n  <my-cpn1></my-cpn1>\n  <my-cpn1></my-cpn1>\n  <my-cpn1></my-cpn1>\n</div>\n\n<!-- template 寫法 -->\n<template id=\"vm1\">\n  <div>\n    <h2>{{count}}</h2>\n    <button @click=\"count++\">+</button>\n  </div>\n</template>\n```\n\n```javascript\nVue.component('my-cpn1', {\n  template: '#vm1',\n  data() {\n    return {\n      count: 0,\n    }\n  },\n})\n```\n\n組件內的每筆資料也都是互相獨立的\n![](https://i.imgur.com/JDevASi.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/YzpaRMx?editors=1011)\n\n總結:\n在 Vue 實例裡面，data 是物件。\n在子組件裡面 data 必須以函數的方式回傳物件。\n\n## 參考資料\n\n[子元件的 data 必須是函數](https://book.vue.tw/CH2/2-1-components.html)\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=59)\n","slug":"Vue-data","published":1,"updated":"2021-03-26T16:13:11.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpg000hg0tr4l2v5wwy","content":"<html><head></head><body><h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><p>在上一篇 Vue 組件化 ( 一 ) 介紹了組件話的觀念跟應用，但沒提到組件化的資料必須要用動態綁定來確保資料的獨立，所以這篇就來介紹一下組件化的 data 。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Data-必須是函式\"><a href=\"#Data-必須是函式\" class=\"headerlink\" title=\"Data 必須是函式\"></a>Data 必須是函式</h2><p>因為每個組件都會有自己的模板，每個模板都會有自己的樣式或是邏輯，為了讓組件之間的資料不互相影響，必須將資料以函式的方式撰寫。<br>上一篇文章中提到的組件化，在模板內我都是直接寫值，並沒有用 mustache 語法來做動態綁定，因為當時還沒將 data 變成函數資料有可能不會呈現，但是在子組件下的 data 若是以函數的形式呈現，就不用擔心這問題，也可以確保每個組件的資料是獨立的。</p>\n<p>拿之前寫的組件範例示範</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- template 寫法 --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"vm1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">    //資料寫死</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">    //資料寫死</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn1'</span>, {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'#vm1'</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 <code>template</code> 模板裡面的資料，是寫死狀態，那改用 mustache 語法的話，會怎麼樣?</p>\n<p>只改動 template 模板內容</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"vm1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{title}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 Vue 實例裡面新增 data 物件</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    title: <span class=\"hljs-string\">'我是標題'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用開發者工具看會報錯，也提示 <code>title</code> 沒有被定義<br><img src=\"https://i.imgur.com/jeS56di.png\"></p>\n<p>這是因為組件內部是不能讀取 Vue 實例裡面的資料。<br>而子組件裡面有屬於自己的 HTML 模板，也應該有屬於自己的資料。</p>\n<p>所以把上面組件內的 <code>data</code> 改成用函數的方式回傳，寫法也很簡單，<code>template</code> 內容一樣，只要在子組件裡面新增 <code>data</code> 函數的屬性並 <code>return</code> 物件內的值就好。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn1'</span>, {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'#vm1'</span>,</span><br><span class=\"line\">  data() {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">      title: <span class=\"hljs-string\">'我是組件內的標題'</span>,</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>結果為下圖<br><img src=\"https://i.imgur.com/WOFiOtJ.png\"></p>\n<p>同樣道理，在把上式改寫成計數器的話</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-cpn1</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- template 寫法 --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"vm1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{count}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"count++\"</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"hljs-string\">'my-cpn1'</span>, {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'#vm1'</span>,</span><br><span class=\"line\">  data() {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">      count: <span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>組件內的每筆資料也都是互相獨立的<br><img src=\"https://i.imgur.com/JDevASi.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/YzpaRMx?editors=1011\">DEMO</a></p>\n<p>總結:<br>在 Vue 實例裡面，data 是物件。<br>在子組件裡面 data 必須以函數的方式回傳物件。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://book.vue.tw/CH2/2-1-components.html\">子元件的 data 必須是函數</a><br><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=59\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"data 函數","path":"tags/data-函數/"}],"excerpt":"<html><head></head><body><h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><p>在上一篇 Vue 組件化 ( 一 ) 介紹了組件話的觀念跟應用，但沒提到組件化的資料必須要用動態綁定來確保資料的獨立，所以這篇就來介紹一下組件化的 data 。</p></body></html>","more":"<h2 id=\"Data-必須是函式\"><a href=\"#Data-必須是函式\" class=\"headerlink\" title=\"Data 必須是函式\"></a>Data 必須是函式</h2><p>因為每個組件都會有自己的模板，每個模板都會有自己的樣式或是邏輯，為了讓組件之間的資料不互相影響，必須將資料以函式的方式撰寫。<br>上一篇文章中提到的組件化，在模板內我都是直接寫值，並沒有用 mustache 語法來做動態綁定，因為當時還沒將 data 變成函數資料有可能不會呈現，但是在子組件下的 data 若是以函數的形式呈現，就不用擔心這問題，也可以確保每個組件的資料是獨立的。</p>\n<p>拿之前寫的組件範例示範</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- template 寫法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vm1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    //資料寫死</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    //資料寫死</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 註冊組件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn1&#x27;</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;#vm1&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.使用組件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>template</code> 模板裡面的資料，是寫死狀態，那改用 mustache 語法的話，會怎麼樣?</p>\n<p>只改動 template 模板內容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vm1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 Vue 實例裡面新增 data 物件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    title: <span class=\"string\">&#x27;我是標題&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>用開發者工具看會報錯，也提示 <code>title</code> 沒有被定義<br><img src=\"https://i.imgur.com/jeS56di.png\"></p>\n<p>這是因為組件內部是不能讀取 Vue 實例裡面的資料。<br>而子組件裡面有屬於自己的 HTML 模板，也應該有屬於自己的資料。</p>\n<p>所以把上面組件內的 <code>data</code> 改成用函數的方式回傳，寫法也很簡單，<code>template</code> 內容一樣，只要在子組件裡面新增 <code>data</code> 函數的屬性並 <code>return</code> 物件內的值就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn1&#x27;</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;#vm1&#x27;</span>,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;我是組件內的標題&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>結果為下圖<br><img src=\"https://i.imgur.com/WOFiOtJ.png\"></p>\n<p>同樣道理，在把上式改寫成計數器的話</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-cpn1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-cpn1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- template 寫法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vm1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;count++&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-cpn1&#x27;</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;#vm1&#x27;</span>,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>組件內的每筆資料也都是互相獨立的<br><img src=\"https://i.imgur.com/JDevASi.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/YzpaRMx?editors=1011\">DEMO</a></p>\n<p>總結:<br>在 Vue 實例裡面，data 是物件。<br>在子組件裡面 data 必須以函數的方式回傳物件。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://book.vue.tw/CH2/2-1-components.html\">子元件的 data 必須是函數</a><br><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=59\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>"},{"title":"Vue - 基本語法( 三 )","date":"2021-02-23T16:00:00.000Z","_content":"\n用 `v-if`、`v-show` 的條件判斷決定選染的內容。\n\n<!--more-->\n\n## 條件判斷\n\n這指令可以根據表達式的值來判斷是否在 DOM 中渲染或是銷毀元素/組件。\n\n寫法也很簡單，就跟 JavaScript 的 if 判斷式一樣。\n\n### 1. v-if\n\n在 DOM 標籤中加入 v-if 判斷式來決定要不要顯示，該標籤內的內容。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"true\">{{message}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/6iHmYbE.png)\n`v-if` 後面都是接一個布林值。\n為了可以動態顯示將寫法改寫一下，將 `true` 改成一個變數。這樣就可以透過發發者工具來控制要不要顯示。\n\n```html\n<div id=\"app\">\n  <!--   <h2 v-if='true'>{{message}}</h2> -->\n  <h2 v-if=\"isShow\">{{message}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    isShow: true,\n  },\n})\n```\n\n改成 `false` 交看不到內容\n![](https://i.imgur.com/aYS5P2G.png)\n\n改成 `true` 後又會顯示出來。\n![](https://i.imgur.com/1zsgsy1.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/ZEBamEY?editors=1011)\n\n### 2. v-if & v-else\n\n`v-if` 很好理解，在 `true` 的狀況下就會顯示，在 `false` 的狀況下會顯示 `v-else` 內的內容。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"isShow\">{{message}}</h2>\n  <h2 v-else>{{elseMessage}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    elseMessage: '我是 v-else',\n    isShow: true,\n  },\n})\n```\n\n原本是 `v-if` 判斷為 `true` 的狀況下顯示 `Hello World`\n![](https://i.imgur.com/ROUJyD8.png)\n\n那如過改成 `false` 就會顯示 `v-else` 的內容，如下圖\n![](https://i.imgur.com/YTOXJk7.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/jOVaQWj?editors=1011)\n\n### 3. v-if 、 v-else-if & v-else\n\n這寫法也很簡單，我們用分數來決定顯示的內容。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"score >= 90\">大於90分以上，頂標</h2>\n  <h2 v-else-if=\"score >= 60 && score <= 89\">介於60分以上，89分以下，均標</h2>\n  <h2 v-else=\"score <= 59 \">低於59分以下，低標</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    score: 90,\n  },\n})\n```\n\n因為 `score` 預設是 90 ，所以會顯示頂標\n![](https://i.imgur.com/ocoFVTp.png)\n\n如果我把分數改成 80，顯示下圖\n![](https://i.imgur.com/P0oXUA1.png)\n\n再把分數改成 50，顯示下圖\n最後一次寫的是`app.score = 50` 所以會被覆蓋掉上面 80 分的\n![](https://i.imgur.com/L2WiuZr.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/VwmrVbX?editors=1011)\n\n### 4. computed 寫法\n\n除了以上寫法還可以靈活使用上一篇文章提到的計算屬性 `computed`，如果只是 `v-if`、`v-else` 的話沒什麼關係，但如果有很多計算的話比較推薦使用 `computed` 寫法同時可以增強閱讀性。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"score >= 90\">大於90分以上，頂標</h2>\n  <h2 v-else-if=\"score >= 60 && score <= 89\">介於60分以上，89分以下，均標</h2>\n  <h2 v-else=\"score <= 59 \">低於59分以下，低標</h2>\n\n  <h2>computed : {{finalScore}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    score: 90,\n  },\n  computed: {\n    finalScore() {\n      let showMessage = ''\n      if (this.score >= 90) {\n        showMessage = '大於90分以上，頂標'\n      } else if (this.score >= 60 && this.score <= 89) {\n        showMessage = '介於60分以上，89分以下，均標'\n      } else {\n        showMessage = '低於59分以下，低標'\n      }\n      return showMessage\n    },\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/psRgJbO.png)\n\n將分數改成 80 ，顯示下圖\n![](https://i.imgur.com/1eJ0hNv.png)\n\n再改成 50，顯示下圖\n( 最後一次寫是 `app.score = 50` 所以會覆蓋掉 80 分 )\n![](https://i.imgur.com/Y2E6gHZ.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/gOLXQXZ?editors=1011)\n\n### 5. 條件渲染的實作\n\n在輸入使用者資料的時候可以切換使用者類型\n\n利用 `v-if` 、`v-else` 來判斷我要顯示的內容，在切換的時候再用 `click` 判斷 `v-if` 接收到的值是 `true` 還是 `false`。\n\n```html\n<div id=\"app\">\n  <span v-if=\"isUser\">\n    <label for=\"username\">使用者姓名: </label>\n    <input type=\"text\" id=\"username\" placeholder=\"username\" />\n  </span>\n  <span v-else>\n    <label for=\"useremail\">使用者信箱: </label>\n    <input type=\"mail\" id=\"email\" placeholder=\"user-email\" />\n  </span>\n  <button @click=\"isUser = !isUser\">切換類型</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    isUser: true,\n  },\n})\n```\n\n透過點擊按鈕可以切換輸入框\n![](https://i.imgur.com/1z96aHx.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/XWNzywe?editors=1011)\n\n### 6. v-show\n\n`v-show` 的用法也相當簡單，跟 `v-if` 的用法一樣，但是差別只在於 <font color=#FF0000>DOM</font> 的顯示。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"show\">{{vIfShow}}</h2>\n\n  <h2 v-show=\"show\">{{vShow}}</h2>\n\n  <button @click=\"show = !show\">切換類型</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    vIfShow: 'v-if 顯示',\n    vShow: 'v-show 顯示',\n    show: true,\n  },\n})\n```\n\n![](https://i.imgur.com/8zJjbPk.png)\n\n用開發者工具看到對應的 DOM，兩者在 `true` 的狀態下都會顯示\n![](https://i.imgur.com/Y0iDEsR.png)\n\n兩者在 false 的狀態下，顯示下圖\n![](https://i.imgur.com/Bj3fkFK.png)\n\n( 標註一下上上比較清楚 )\n![](https://i.imgur.com/6gMM3ZG.png)\n\n[DMEO](https://codepen.io/gleofgja/pen/JjbOwoZ?editors=1010)\n\n結論:\n兩個判斷皆為<font color=#FF0000> `false` </font>時\n\n1. `v-if` <font color=#FF0000>對應的 DOM 會消失</font>。\n2. `v-show` 的 <font color=#FF0000>DOM 不會消失</font>，它只是用了 css 效果的 `display: none`。\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=36)\n","source":"_posts/2020/Vue基本語法( 三 ).md","raw":"---\ntitle: Vue - 基本語法( 三 )\ndate: 2021/02/24\ntags:\n  - Vue\n  - v-if\n  - v-show\n\ncategories:\n  - Vue\n---\n\n用 `v-if`、`v-show` 的條件判斷決定選染的內容。\n\n<!--more-->\n\n## 條件判斷\n\n這指令可以根據表達式的值來判斷是否在 DOM 中渲染或是銷毀元素/組件。\n\n寫法也很簡單，就跟 JavaScript 的 if 判斷式一樣。\n\n### 1. v-if\n\n在 DOM 標籤中加入 v-if 判斷式來決定要不要顯示，該標籤內的內容。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"true\">{{message}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/6iHmYbE.png)\n`v-if` 後面都是接一個布林值。\n為了可以動態顯示將寫法改寫一下，將 `true` 改成一個變數。這樣就可以透過發發者工具來控制要不要顯示。\n\n```html\n<div id=\"app\">\n  <!--   <h2 v-if='true'>{{message}}</h2> -->\n  <h2 v-if=\"isShow\">{{message}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    isShow: true,\n  },\n})\n```\n\n改成 `false` 交看不到內容\n![](https://i.imgur.com/aYS5P2G.png)\n\n改成 `true` 後又會顯示出來。\n![](https://i.imgur.com/1zsgsy1.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/ZEBamEY?editors=1011)\n\n### 2. v-if & v-else\n\n`v-if` 很好理解，在 `true` 的狀況下就會顯示，在 `false` 的狀況下會顯示 `v-else` 內的內容。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"isShow\">{{message}}</h2>\n  <h2 v-else>{{elseMessage}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    elseMessage: '我是 v-else',\n    isShow: true,\n  },\n})\n```\n\n原本是 `v-if` 判斷為 `true` 的狀況下顯示 `Hello World`\n![](https://i.imgur.com/ROUJyD8.png)\n\n那如過改成 `false` 就會顯示 `v-else` 的內容，如下圖\n![](https://i.imgur.com/YTOXJk7.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/jOVaQWj?editors=1011)\n\n### 3. v-if 、 v-else-if & v-else\n\n這寫法也很簡單，我們用分數來決定顯示的內容。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"score >= 90\">大於90分以上，頂標</h2>\n  <h2 v-else-if=\"score >= 60 && score <= 89\">介於60分以上，89分以下，均標</h2>\n  <h2 v-else=\"score <= 59 \">低於59分以下，低標</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    score: 90,\n  },\n})\n```\n\n因為 `score` 預設是 90 ，所以會顯示頂標\n![](https://i.imgur.com/ocoFVTp.png)\n\n如果我把分數改成 80，顯示下圖\n![](https://i.imgur.com/P0oXUA1.png)\n\n再把分數改成 50，顯示下圖\n最後一次寫的是`app.score = 50` 所以會被覆蓋掉上面 80 分的\n![](https://i.imgur.com/L2WiuZr.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/VwmrVbX?editors=1011)\n\n### 4. computed 寫法\n\n除了以上寫法還可以靈活使用上一篇文章提到的計算屬性 `computed`，如果只是 `v-if`、`v-else` 的話沒什麼關係，但如果有很多計算的話比較推薦使用 `computed` 寫法同時可以增強閱讀性。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"score >= 90\">大於90分以上，頂標</h2>\n  <h2 v-else-if=\"score >= 60 && score <= 89\">介於60分以上，89分以下，均標</h2>\n  <h2 v-else=\"score <= 59 \">低於59分以下，低標</h2>\n\n  <h2>computed : {{finalScore}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    score: 90,\n  },\n  computed: {\n    finalScore() {\n      let showMessage = ''\n      if (this.score >= 90) {\n        showMessage = '大於90分以上，頂標'\n      } else if (this.score >= 60 && this.score <= 89) {\n        showMessage = '介於60分以上，89分以下，均標'\n      } else {\n        showMessage = '低於59分以下，低標'\n      }\n      return showMessage\n    },\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/psRgJbO.png)\n\n將分數改成 80 ，顯示下圖\n![](https://i.imgur.com/1eJ0hNv.png)\n\n再改成 50，顯示下圖\n( 最後一次寫是 `app.score = 50` 所以會覆蓋掉 80 分 )\n![](https://i.imgur.com/Y2E6gHZ.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/gOLXQXZ?editors=1011)\n\n### 5. 條件渲染的實作\n\n在輸入使用者資料的時候可以切換使用者類型\n\n利用 `v-if` 、`v-else` 來判斷我要顯示的內容，在切換的時候再用 `click` 判斷 `v-if` 接收到的值是 `true` 還是 `false`。\n\n```html\n<div id=\"app\">\n  <span v-if=\"isUser\">\n    <label for=\"username\">使用者姓名: </label>\n    <input type=\"text\" id=\"username\" placeholder=\"username\" />\n  </span>\n  <span v-else>\n    <label for=\"useremail\">使用者信箱: </label>\n    <input type=\"mail\" id=\"email\" placeholder=\"user-email\" />\n  </span>\n  <button @click=\"isUser = !isUser\">切換類型</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    isUser: true,\n  },\n})\n```\n\n透過點擊按鈕可以切換輸入框\n![](https://i.imgur.com/1z96aHx.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/XWNzywe?editors=1011)\n\n### 6. v-show\n\n`v-show` 的用法也相當簡單，跟 `v-if` 的用法一樣，但是差別只在於 <font color=#FF0000>DOM</font> 的顯示。\n\n```html\n<div id=\"app\">\n  <h2 v-if=\"show\">{{vIfShow}}</h2>\n\n  <h2 v-show=\"show\">{{vShow}}</h2>\n\n  <button @click=\"show = !show\">切換類型</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    vIfShow: 'v-if 顯示',\n    vShow: 'v-show 顯示',\n    show: true,\n  },\n})\n```\n\n![](https://i.imgur.com/8zJjbPk.png)\n\n用開發者工具看到對應的 DOM，兩者在 `true` 的狀態下都會顯示\n![](https://i.imgur.com/Y0iDEsR.png)\n\n兩者在 false 的狀態下，顯示下圖\n![](https://i.imgur.com/Bj3fkFK.png)\n\n( 標註一下上上比較清楚 )\n![](https://i.imgur.com/6gMM3ZG.png)\n\n[DMEO](https://codepen.io/gleofgja/pen/JjbOwoZ?editors=1010)\n\n結論:\n兩個判斷皆為<font color=#FF0000> `false` </font>時\n\n1. `v-if` <font color=#FF0000>對應的 DOM 會消失</font>。\n2. `v-show` 的 <font color=#FF0000>DOM 不會消失</font>，它只是用了 css 效果的 `display: none`。\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=36)\n","slug":"Vue基本語法( 三 )","published":1,"updated":"2021-03-26T16:13:11.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lph000kg0tr921f9yzq","content":"<html><head></head><body><p>用 <code>v-if</code>、<code>v-show</code> 的條件判斷決定選染的內容。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"條件判斷\"><a href=\"#條件判斷\" class=\"headerlink\" title=\"條件判斷\"></a>條件判斷</h2><p>這指令可以根據表達式的值來判斷是否在 DOM 中渲染或是銷毀元素/組件。</p>\n<p>寫法也很簡單，就跟 JavaScript 的 if 判斷式一樣。</p>\n<h3 id=\"1-v-if\"><a href=\"#1-v-if\" class=\"headerlink\" title=\"1. v-if\"></a>1. v-if</h3><p>在 DOM 標籤中加入 v-if 判斷式來決定要不要顯示，該標籤內的內容。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/6iHmYbE.png\"><br><code>v-if</code> 後面都是接一個布林值。<br>為了可以動態顯示將寫法改寫一下，將 <code>true</code> 改成一個變數。這樣就可以透過發發者工具來控制要不要顯示。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   &lt;h2 v-if='true'&gt;{{message}}&lt;/h2&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"isShow\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">    isShow: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>改成 <code>false</code> 交看不到內容<br><img src=\"https://i.imgur.com/aYS5P2G.png\"></p>\n<p>改成 <code>true</code> 後又會顯示出來。<br><img src=\"https://i.imgur.com/1zsgsy1.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEBamEY?editors=1011\">DEMO</a></p>\n<h3 id=\"2-v-if-amp-v-else\"><a href=\"#2-v-if-amp-v-else\" class=\"headerlink\" title=\"2. v-if &amp; v-else\"></a>2. v-if &amp; v-else</h3><p><code>v-if</code> 很好理解，在 <code>true</code> 的狀況下就會顯示，在 <code>false</code> 的狀況下會顯示 <code>v-else</code> 內的內容。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"isShow\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>{{elseMessage}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">    elseMessage: <span class=\"hljs-string\">'我是 v-else'</span>,</span><br><span class=\"line\">    isShow: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>原本是 <code>v-if</code> 判斷為 <code>true</code> 的狀況下顯示 <code>Hello World</code><br><img src=\"https://i.imgur.com/ROUJyD8.png\"></p>\n<p>那如過改成 <code>false</code> 就會顯示 <code>v-else</code> 的內容，如下圖<br><img src=\"https://i.imgur.com/YTOXJk7.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/jOVaQWj?editors=1011\">DEMO</a></p>\n<h3 id=\"3-v-if-、-v-else-if-amp-v-else\"><a href=\"#3-v-if-、-v-else-if-amp-v-else\" class=\"headerlink\" title=\"3. v-if 、 v-else-if &amp; v-else\"></a>3. v-if 、 v-else-if &amp; v-else</h3><p>這寫法也很簡單，我們用分數來決定顯示的內容。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"score &gt;= 90\"</span>&gt;</span>大於90分以上，頂標<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-else-if</span>=<span class=\"hljs-string\">\"score &gt;= 60 &amp;&amp; score &lt;= 89\"</span>&gt;</span>介於60分以上，89分以下，均標<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-else</span>=<span class=\"hljs-string\">\"score &lt;= 59 \"</span>&gt;</span>低於59分以下，低標<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    score: <span class=\"hljs-number\">90</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>因為 <code>score</code> 預設是 90 ，所以會顯示頂標<br><img src=\"https://i.imgur.com/ocoFVTp.png\"></p>\n<p>如果我把分數改成 80，顯示下圖<br><img src=\"https://i.imgur.com/P0oXUA1.png\"></p>\n<p>再把分數改成 50，顯示下圖<br>最後一次寫的是<code>app.score = 50</code> 所以會被覆蓋掉上面 80 分的<br><img src=\"https://i.imgur.com/L2WiuZr.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/VwmrVbX?editors=1011\">DEMO</a></p>\n<h3 id=\"4-computed-寫法\"><a href=\"#4-computed-寫法\" class=\"headerlink\" title=\"4. computed 寫法\"></a>4. computed 寫法</h3><p>除了以上寫法還可以靈活使用上一篇文章提到的計算屬性 <code>computed</code>，如果只是 <code>v-if</code>、<code>v-else</code> 的話沒什麼關係，但如果有很多計算的話比較推薦使用 <code>computed</code> 寫法同時可以增強閱讀性。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"score &gt;= 90\"</span>&gt;</span>大於90分以上，頂標<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-else-if</span>=<span class=\"hljs-string\">\"score &gt;= 60 &amp;&amp; score &lt;= 89\"</span>&gt;</span>介於60分以上，89分以下，均標<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-else</span>=<span class=\"hljs-string\">\"score &lt;= 59 \"</span>&gt;</span>低於59分以下，低標<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>computed : {{finalScore}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    score: <span class=\"hljs-number\">90</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    finalScore() {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">let</span> showMessage = <span class=\"hljs-string\">''</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.score &gt;= <span class=\"hljs-number\">90</span>) {</span><br><span class=\"line\">        showMessage = <span class=\"hljs-string\">'大於90分以上，頂標'</span></span><br><span class=\"line\">      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.score &gt;= <span class=\"hljs-number\">60</span> &amp;&amp; <span class=\"hljs-built_in\">this</span>.score &lt;= <span class=\"hljs-number\">89</span>) {</span><br><span class=\"line\">        showMessage = <span class=\"hljs-string\">'介於60分以上，89分以下，均標'</span></span><br><span class=\"line\">      } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">        showMessage = <span class=\"hljs-string\">'低於59分以下，低標'</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> showMessage</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/psRgJbO.png\"></p>\n<p>將分數改成 80 ，顯示下圖<br><img src=\"https://i.imgur.com/1eJ0hNv.png\"></p>\n<p>再改成 50，顯示下圖<br>( 最後一次寫是 <code>app.score = 50</code> 所以會覆蓋掉 80 分 )<br><img src=\"https://i.imgur.com/Y2E6gHZ.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/gOLXQXZ?editors=1011\">DEMO</a></p>\n<h3 id=\"5-條件渲染的實作\"><a href=\"#5-條件渲染的實作\" class=\"headerlink\" title=\"5. 條件渲染的實作\"></a>5. 條件渲染的實作</h3><p>在輸入使用者資料的時候可以切換使用者類型</p>\n<p>利用 <code>v-if</code> 、<code>v-else</code> 來判斷我要顯示的內容，在切換的時候再用 <code>click</code> 判斷 <code>v-if</code> 接收到的值是 <code>true</code> 還是 <code>false</code>。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"isUser\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"username\"</span>&gt;</span>使用者姓名: <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-else</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"useremail\"</span>&gt;</span>使用者信箱: <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"mail\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"user-email\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"isUser = !isUser\"</span>&gt;</span>切換類型<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    isUser: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>透過點擊按鈕可以切換輸入框<br><img src=\"https://i.imgur.com/1z96aHx.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/XWNzywe?editors=1011\">DEMO</a></p>\n<h3 id=\"6-v-show\"><a href=\"#6-v-show\" class=\"headerlink\" title=\"6. v-show\"></a>6. v-show</h3><p><code>v-show</code> 的用法也相當簡單，跟 <code>v-if</code> 的用法一樣，但是差別只在於 <font color=\"#FF0000\">DOM</font> 的顯示。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>{{vIfShow}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>{{vShow}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"show = !show\"</span>&gt;</span>切換類型<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    vIfShow: <span class=\"hljs-string\">'v-if 顯示'</span>,</span><br><span class=\"line\">    vShow: <span class=\"hljs-string\">'v-show 顯示'</span>,</span><br><span class=\"line\">    show: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/8zJjbPk.png\"></p>\n<p>用開發者工具看到對應的 DOM，兩者在 <code>true</code> 的狀態下都會顯示<br><img src=\"https://i.imgur.com/Y0iDEsR.png\"></p>\n<p>兩者在 false 的狀態下，顯示下圖<br><img src=\"https://i.imgur.com/Bj3fkFK.png\"></p>\n<p>( 標註一下上上比較清楚 )<br><img src=\"https://i.imgur.com/6gMM3ZG.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/JjbOwoZ?editors=1010\">DMEO</a></p>\n<p>結論:<br>兩個判斷皆為<font color=\"#FF0000\"> <code>false</code> </font>時</p>\n<ol>\n<li><code>v-if</code> <font color=\"#FF0000\">對應的 DOM 會消失</font>。</li>\n<li><code>v-show</code> 的 <font color=\"#FF0000\">DOM 不會消失</font>，它只是用了 css 效果的 <code>display: none</code>。</li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=36\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"v-if","path":"tags/v-if/"},{"name":"Vue","path":"tags/Vue/"},{"name":"v-show","path":"tags/v-show/"}],"excerpt":"<html><head></head><body><p>用 <code>v-if</code>、<code>v-show</code> 的條件判斷決定選染的內容。</p></body></html>","more":"<h2 id=\"條件判斷\"><a href=\"#條件判斷\" class=\"headerlink\" title=\"條件判斷\"></a>條件判斷</h2><p>這指令可以根據表達式的值來判斷是否在 DOM 中渲染或是銷毀元素/組件。</p>\n<p>寫法也很簡單，就跟 JavaScript 的 if 判斷式一樣。</p>\n<h3 id=\"1-v-if\"><a href=\"#1-v-if\" class=\"headerlink\" title=\"1. v-if\"></a>1. v-if</h3><p>在 DOM 標籤中加入 v-if 判斷式來決定要不要顯示，該標籤內的內容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/6iHmYbE.png\"><br><code>v-if</code> 後面都是接一個布林值。<br>為了可以動態顯示將寫法改寫一下，將 <code>true</code> 改成一個變數。這樣就可以透過發發者工具來控制要不要顯示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   &lt;h2 v-if=&#x27;true&#x27;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">    isShow: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>改成 <code>false</code> 交看不到內容<br><img src=\"https://i.imgur.com/aYS5P2G.png\"></p>\n<p>改成 <code>true</code> 後又會顯示出來。<br><img src=\"https://i.imgur.com/1zsgsy1.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEBamEY?editors=1011\">DEMO</a></p>\n<h3 id=\"2-v-if-amp-v-else\"><a href=\"#2-v-if-amp-v-else\" class=\"headerlink\" title=\"2. v-if &amp; v-else\"></a>2. v-if &amp; v-else</h3><p><code>v-if</code> 很好理解，在 <code>true</code> 的狀況下就會顯示，在 <code>false</code> 的狀況下會顯示 <code>v-else</code> 內的內容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-else</span>&gt;</span>&#123;&#123;elseMessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">    elseMessage: <span class=\"string\">&#x27;我是 v-else&#x27;</span>,</span><br><span class=\"line\">    isShow: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>原本是 <code>v-if</code> 判斷為 <code>true</code> 的狀況下顯示 <code>Hello World</code><br><img src=\"https://i.imgur.com/ROUJyD8.png\"></p>\n<p>那如過改成 <code>false</code> 就會顯示 <code>v-else</code> 的內容，如下圖<br><img src=\"https://i.imgur.com/YTOXJk7.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/jOVaQWj?editors=1011\">DEMO</a></p>\n<h3 id=\"3-v-if-、-v-else-if-amp-v-else\"><a href=\"#3-v-if-、-v-else-if-amp-v-else\" class=\"headerlink\" title=\"3. v-if 、 v-else-if &amp; v-else\"></a>3. v-if 、 v-else-if &amp; v-else</h3><p>這寫法也很簡單，我們用分數來決定顯示的內容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;score &gt;= 90&quot;</span>&gt;</span>大於90分以上，頂標<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;score &gt;= 60 &amp;&amp; score &lt;= 89&quot;</span>&gt;</span>介於60分以上，89分以下，均標<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-else</span>=<span class=\"string\">&quot;score &lt;= 59 &quot;</span>&gt;</span>低於59分以下，低標<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    score: <span class=\"number\">90</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>因為 <code>score</code> 預設是 90 ，所以會顯示頂標<br><img src=\"https://i.imgur.com/ocoFVTp.png\"></p>\n<p>如果我把分數改成 80，顯示下圖<br><img src=\"https://i.imgur.com/P0oXUA1.png\"></p>\n<p>再把分數改成 50，顯示下圖<br>最後一次寫的是<code>app.score = 50</code> 所以會被覆蓋掉上面 80 分的<br><img src=\"https://i.imgur.com/L2WiuZr.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/VwmrVbX?editors=1011\">DEMO</a></p>\n<h3 id=\"4-computed-寫法\"><a href=\"#4-computed-寫法\" class=\"headerlink\" title=\"4. computed 寫法\"></a>4. computed 寫法</h3><p>除了以上寫法還可以靈活使用上一篇文章提到的計算屬性 <code>computed</code>，如果只是 <code>v-if</code>、<code>v-else</code> 的話沒什麼關係，但如果有很多計算的話比較推薦使用 <code>computed</code> 寫法同時可以增強閱讀性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;score &gt;= 90&quot;</span>&gt;</span>大於90分以上，頂標<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;score &gt;= 60 &amp;&amp; score &lt;= 89&quot;</span>&gt;</span>介於60分以上，89分以下，均標<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-else</span>=<span class=\"string\">&quot;score &lt;= 59 &quot;</span>&gt;</span>低於59分以下，低標<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>computed : &#123;&#123;finalScore&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    score: <span class=\"number\">90</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    finalScore() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> showMessage = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.score &gt;= <span class=\"number\">90</span>) &#123;</span><br><span class=\"line\">        showMessage = <span class=\"string\">&#x27;大於90分以上，頂標&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.score &gt;= <span class=\"number\">60</span> &amp;&amp; <span class=\"built_in\">this</span>.score &lt;= <span class=\"number\">89</span>) &#123;</span><br><span class=\"line\">        showMessage = <span class=\"string\">&#x27;介於60分以上，89分以下，均標&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        showMessage = <span class=\"string\">&#x27;低於59分以下，低標&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> showMessage</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/psRgJbO.png\"></p>\n<p>將分數改成 80 ，顯示下圖<br><img src=\"https://i.imgur.com/1eJ0hNv.png\"></p>\n<p>再改成 50，顯示下圖<br>( 最後一次寫是 <code>app.score = 50</code> 所以會覆蓋掉 80 分 )<br><img src=\"https://i.imgur.com/Y2E6gHZ.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/gOLXQXZ?editors=1011\">DEMO</a></p>\n<h3 id=\"5-條件渲染的實作\"><a href=\"#5-條件渲染的實作\" class=\"headerlink\" title=\"5. 條件渲染的實作\"></a>5. 條件渲染的實作</h3><p>在輸入使用者資料的時候可以切換使用者類型</p>\n<p>利用 <code>v-if</code> 、<code>v-else</code> 來判斷我要顯示的內容，在切換的時候再用 <code>click</code> 判斷 <code>v-if</code> 接收到的值是 <code>true</code> 還是 <code>false</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isUser&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span>使用者姓名: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;username&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;useremail&quot;</span>&gt;</span>使用者信箱: <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;mail&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;user-email&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;isUser = !isUser&quot;</span>&gt;</span>切換類型<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isUser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>透過點擊按鈕可以切換輸入框<br><img src=\"https://i.imgur.com/1z96aHx.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/XWNzywe?editors=1011\">DEMO</a></p>\n<h3 id=\"6-v-show\"><a href=\"#6-v-show\" class=\"headerlink\" title=\"6. v-show\"></a>6. v-show</h3><p><code>v-show</code> 的用法也相當簡單，跟 <code>v-if</code> 的用法一樣，但是差別只在於 <font color=#FF0000>DOM</font> 的顯示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;show&quot;</span>&gt;</span>&#123;&#123;vIfShow&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;show&quot;</span>&gt;</span>&#123;&#123;vShow&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;show = !show&quot;</span>&gt;</span>切換類型<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    vIfShow: <span class=\"string\">&#x27;v-if 顯示&#x27;</span>,</span><br><span class=\"line\">    vShow: <span class=\"string\">&#x27;v-show 顯示&#x27;</span>,</span><br><span class=\"line\">    show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/8zJjbPk.png\"></p>\n<p>用開發者工具看到對應的 DOM，兩者在 <code>true</code> 的狀態下都會顯示<br><img src=\"https://i.imgur.com/Y0iDEsR.png\"></p>\n<p>兩者在 false 的狀態下，顯示下圖<br><img src=\"https://i.imgur.com/Bj3fkFK.png\"></p>\n<p>( 標註一下上上比較清楚 )<br><img src=\"https://i.imgur.com/6gMM3ZG.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/JjbOwoZ?editors=1010\">DMEO</a></p>\n<p>結論:<br>兩個判斷皆為<font color=#FF0000> <code>false</code> </font>時</p>\n<ol>\n<li><code>v-if</code> <font color=#FF0000>對應的 DOM 會消失</font>。</li>\n<li><code>v-show</code> 的 <font color=#FF0000>DOM 不會消失</font>，它只是用了 css 效果的 <code>display: none</code>。</li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=36\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>"},{"title":"Vue - 基本語法( 二 )","date":"2021-02-22T16:00:00.000Z","_content":"\n在模板中可以直接使用插值語法顯示 data 中的資料，但是在某些狀況下有些資料還是要經過計算再顯示，或是多個資料結合或是重複顯示，這時候就會使用到 computed 計算屬性。\n\n還有 v-on 監聽事件的修飾符跟實際應用。\n\n<!--more-->\n\n## 計算屬性 ( computed )\n\n### 1. 計算屬性的基本使用\n\n之前有提到過 mustache 語法，可以簡單的顯示資料，如果一個資料沒什麼大礙，但有很多資料的話呢? 以下示範。\n\n`firstName` 跟 `LastName` 如果中間想有空格，會有兩種寫法，如下。\n\n```html\n<div id=\"app\">\n  <h2>{{firstName +' '+ LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    firstName: 'Lebron',\n    LastName: 'Jamse',\n  },\n})\n```\n\n會顯示下圖\n![](https://i.imgur.com/eW0GGIz.png)\n\n那如果今天要顯示 5~10 個呢? 如下\n\n```html\n<div id=\"app\">\n  <h2>{{firstName +' '+ LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n</div>\n```\n\n這樣的話太長了，如果綁定的 key 值變更的話上面就要改 5 次，如果只需要改一次的話就會比較輕鬆，這時候有兩種方法可以使用 : methods 、 computed。\n\n#### ( 一 ) methods 寫法\n\n```html\n<div id=\"app\">\n  <h2>{{firstName +' '+ LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>methods 寫法 : {{getFullName()}}</h2>\n</div>\n```\n\n上面第 4 行比第 2、3 行簡潔多了。\n把重複的動作寫成函式，再呼叫實例裡面的函式。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    firstName: 'Lebron',\n    LastName: 'Jamse',\n  },\n  methods: {\n    getFullName() {\n      return this.firstName + ' ' + this.LastName\n    },\n  },\n})\n```\n\n這樣就算 data 裡面的 key 值變更，也只要更改 methods 裡面的的 key 值，而且只改一次就全部完成。\n\n顯示如下\n![](https://i.imgur.com/fPvACnw.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/BaQwOqZ?editors=1011)\n\n不過一般 mustache 語法裡面只通常只放變數，放函式感覺很奇怪，這時候就可以用 computed 。\n\n#### ( 二 ) computed\n\n當資料裡面產生<font color=#FF0000>變化</font>的時候才會執行。\n\n```html\n<div id=\"app\">\n  <h2>{{firstName +' '+ LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n\n  <!--   methods 有小括號，是函式 -->\n  <h2>methods 寫法 : {{getFullName()}}</h2>\n\n  <!--   computed 沒有小括號，是變數 -->\n  <h2>computed 寫法 : {{fullName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    firstName: 'Lebron',\n    LastName: 'Jamse',\n  },\n  computed: {\n    fullName() {\n      return this.firstName + ' ' + this.LastName\n    },\n  },\n  methods: {\n    getFullName() {\n      return this.firstName + ' ' + this.LastName\n    },\n  },\n})\n```\n\n顯示如下。\n![](https://i.imgur.com/eitEos0.png)\n\n`methods` 寫法會在 mustache 裡面加上小括號，那是一個函式，\n`computed` 寫法只會在 mustache 裡面放變數，不會有小括號。\n\n[DEMO](https://codepen.io/gleofgja/pen/mdOqbLp?editors=1010)\n\n### 2. 計算屬性的複雜操作\n\n計算陣列內的總價格\n\n```html\n<div id=\"app\">\n  <h2>Total Price : {{totalPrice}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    books: [\n      { id: 1, name: 'html、css 書籍', price: 110 },\n      { id: 2, name: 'JavaScript 書籍', price: 220 },\n      { id: 3, name: 'Vue 書籍', price: 330 },\n      { id: 4, name: 'React 書籍', price: 440 },\n    ],\n  },\n  computed: {\n    totalPrice() {\n      let total = 0\n      // for( let i=0; i< this.books.length; i++){\n      //   total+= this.books[i].price\n      // }\n      // return total\n\n      // for in 寫法\n      // for( let i in this.books){\n      //   total+= this.books[i].price\n      // }\n      // return total\n\n      // for of 寫法\n      for (let book of this.books) {\n        total += book.price\n      }\n      return total\n    },\n  },\n})\n```\n\n![](https://i.imgur.com/xR6WUEd.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/qBqVWLr?editors=1010)\n\n### 3. 計算屬性的 setter & getter\n\n```html\n<div id=\"app\">\n  <h2>{{firstName + ' ' + lastName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n})\n```\n\n![](https://i.imgur.com/mqO38pT.png)\n\n由於用 mustache 語法寫的話太複雜了，加上如果要重複利用的話有太冗長，所以都會使用 computed 計算屬性。\n\n```html\n<div id=\"app\">\n  <h2>{{firstName + ' ' + LastName}}</h2>\n\n  <h2>對應 computed 寫法: {{fullName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    fullName() {\n      return this.firstName + ' ' + this.lastName\n    },\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/voadrLG.png)\n\n就跟上面所寫的一樣，不過接下來要加上 get & set 屬性，這才是 computed 屬性的完整寫法。\n\n如果沒有 set 方法的話都是默認 get 方法的值，也就是<font color=#FF0000>只讀屬性</font>。\n例如我只在 get 方法裡面返回 hello 字串。\n\n```javascript\n// html 模板一樣\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    // fullName(){\n    //   return this.firstName+ ' '+ this.LastName\n    // }\n    fullName: {\n      set() {},\n      get() {\n        return 'hello'\n      },\n    },\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/CXbFJLV.png)\n\n一般情況下我們只會用到 get 方法，不會使用到 set 方法，因為不希望別人隨便設定一些奇怪的值，寫法如下。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    fullName: {\n      get() {\n        // return 'hello'\n        return this.firstName + ' ' + this.lastName\n      },\n    },\n  },\n})\n```\n\n![](https://i.imgur.com/QbBmqZq.png)\n\n也因為一般情況下都會使用到 get 方法，所以上面的寫法會簡化成最一開始的寫法。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    fullName() {\n      return this.firstName + ' ' + this.lastName\n    },\n    // fullName:{\n    // set(){\n\n    // },\n    // get(){\n    // return 'hello'\n    // return this.firstName+ ' '+ this.lastName\n    // }\n    // }\n  },\n})\n```\n\n![](https://i.imgur.com/AHOs9WN.png)\n\n所以當我們在使用 computed 屬性時， mustache 語法裡面就不需要家小括號，因為在使用 computed 屬性時他會去調用 `computed` 裡面的 `get`。\n\n那如果真想要在 computed 裡面加上 set 的話也可以。\n在 set 方法裡面必須傳入參數。\n\n```html\n<div id=\"app\">\n  <h2>{{fullName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    // fullName(){\n    //   return this.firstName+ ' '+ this.LastName\n    // }\n    fullName: {\n      set(newValue) {\n        const names = newValue.split(' ')\n        this.firstName = names[0]\n        this.lastName = names[1]\n      },\n      get() {\n        // return 'hello'\n        return this.firstName + ' ' + this.lastName\n      },\n    },\n  },\n})\n```\n\n在還沒 set 之前顯示下圖\n![](https://i.imgur.com/tCcyaJ6.png)\n\n還沒更改前是 Lebron Jamse ，用開發者工具使用更改 `fullName` 之後如下圖\n![](https://i.imgur.com/h2NFSD7.png)\n\n會改變的原因是更改了 `data` 裡面的 `firstName` & `lastName` 這兩個更改就代表 `get` 方法裡面的 `this.firstName+ ' '+ this.lastName` 也會跟著更改，那`this.firstName+ ' '+ this.lastName` 更改就代表 `fullName` 被更改了。\n\n總結一下，90%情況下 set 方法是不會寫的所以會省略掉，那省略掉後就會有更簡潔的寫法，如下。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    fullName() {\n      return this.firstName + ' ' + this.LastName\n    },\n  },\n})\n```\n\n[DEMO](https://codepen.io/gleofgja/pen/WNoXbpj?editors=1011)\n\n## 監聽事件\n\n### 1. v-on\n\n監聽是前端在開發時常常用到的屬性，主要是監聽事件的發生，例如:滑鼠點擊、拖曳、鍵盤點擊...等等。\n\n那在 Vue 當中監聽事件的語法為 `v-on` ，語法糖為 `@`。\n\n以下示範用監聽滑鼠點擊來做一個簡單的計數器\n\n```html\n<div id=\"app\">\n  <h2>{{count}}</h2>\n  <button @click=\"add\">+</button>\n  <button @click=\"minus\">-</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    count: 0,\n  },\n  methods: {\n    add() {\n      this.count++\n    },\n    minus() {\n      this.count--\n    },\n  },\n})\n```\n\n利用間聽 click 事件來判斷當前要做的事。\n當我們點擊 + 號按鈕的時候用 v- on 監聽同時綁定 add 事件，那 add 事件會綁定到 methods 裡面的函式，同理 - 號按鈕也一樣。\n![](https://i.imgur.com/USHnefS.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/OJbOVKa?editors=1011)\n\n以上皆為 v-on 最基本的使用。接下來要示範傳參數的問題。\n\n### 2. v-on 參數問題\n\n在 methods 觸發 click 事件的時候，要注意傳參數的問題。\n\n1. 如果不需要另外傳參數的話，那方法後面的小括號就甭加。\n2. 如果需要傳入參數，同時又需要 event 這時就可以用 `$event` 傳到事件裡面。\n\n#### ( 一 )事件不傳參數\n\n以下示範在沒傳參數的情況下小括號加與不加的差別。\n\n```html\n<div id=\"app\">\n  <button @click=\"btn1()\">按鈕1</button>\n  <button @click=\"btn2\">按鈕2</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {},\n  methods: {\n    btn1() {\n      console.log('我是按鈕1，有小括號')\n    },\n    btn2() {\n      console.log('我是按鈕2，沒有小括號')\n    },\n  },\n})\n```\n\n如下圖，結果是一樣的，所以在沒傳入參數的話一般都會省略小括號。\n![](https://i.imgur.com/rK9e5za.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/yLVPYWb?editors=1011)\n\n#### ( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。\n\n把按鈕 2 的參數拿掉，用 methods 傳入參數的話怎麼樣?\n\n```html\n<div id=\"app\">\n  <button @click=\"btn1(123)\">按鈕1</button>\n  <button @click=\"btn2\">按鈕2</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {},\n  methods: {\n    btn1(abc) {\n      console.log('我是按鈕1，有小括號', abc)\n    },\n    btn2(abc) {\n      console.log('我是按鈕2，沒有小括號', abc)\n    },\n  },\n})\n```\n\n如下圖，用開發者工具看 log\n![](https://i.imgur.com/nuTivWl.png)\n\n點擊 按鈕 1 會正常出現，但是 按鈕 2 要用瀏覽器的開發者工具查看\n![](https://i.imgur.com/49MfVdV.png)\n\n會回傳 MouseEvent ，就是回傳瀏覽器的 event ，因為 Vue 會把默認瀏覽器產生的 event 事件當作參數傳到函式裡面。\n\n所以按鈕 2 的參數要寫 `event` 不是 `abc` 。\n\n[DEMO](https://codepen.io/gleofgja/pen/dyOZYxa?editors=1011)\n\n#### ( 三 ) 定義函式時，需要傳入參數跟 event\n\n```html\n<div id=\"app\">\n  <button @click=\"btn1(123, event)\">按鈕1</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {},\n  methods: {\n    btn1(abc, event) {\n      console.log('我是按鈕1，有小括號', abc, event)\n    },\n  },\n})\n```\n\n![](https://i.imgur.com/SLBqBB9.png)\n\n不過傳入的第一個參數是數字型別，如果改成 abc 的話就會報錯，如下圖\n![](https://i.imgur.com/7w7itVd.png)\n\n因為改成 abc 後第一個參數就是<font color=#FF0000>變數</font>了，所以他會去 `data` 裡面找 value 值\n\n```html\n<div id=\"app\">\n  <!--   <button @click='btn1(123, $event)'>按鈕1</button> -->\n  <button @click=\"btn1(abc, $event)\">按鈕1</button>\n</div>\n```\n\n在 `data` 裡面添加 `abc` 的 `value` 值。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    abc: '第一個參數變成變數了',\n  },\n  methods: {\n    btn1(abc, event) {\n      console.log('我是按鈕1，傳入兩個參數', abc, event)\n    },\n  },\n})\n```\n\n這樣就可以正常顯示了。\n同理第一個參數改成字串，那他就會顯示字串!\n![](https://i.imgur.com/LsK9vBj.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/bGBYErg?editors=1011)\n\n### 3. v-on 修飾符\n\n在 JavaScript 裡面，都會監聽一些事件，例如 submit\n但是我們都會用 event.preventDefault() 來阻擋事件冒泡，同理 v-on 也可以。\n寫法也較為簡單:\n\n1. `event.stopPropagation()` 會寫成 `.stop`\n2. `event.preventDefault()` 會寫成 `.prevent`\n3. 只觸發一次 `.once`\n4. 只監聽特定按鍵，如:` @keyup.enter` 、 `@keyup.按鍵碼`\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=14)\n[[筆記][JavaScript]所謂的「停止事件」到底是怎麼一回事？](https://ithelp.ithome.com.tw/articles/10198999)\n","source":"_posts/2020/Vue基本語法2.md","raw":"---\ntitle: Vue - 基本語法( 二 )\ndate: 2021/02/23\ntags:\n  - Vue\n  - computed\n  - v-on\n\ncategories:\n  - Vue\n  - computed\n  - v-on\n---\n\n在模板中可以直接使用插值語法顯示 data 中的資料，但是在某些狀況下有些資料還是要經過計算再顯示，或是多個資料結合或是重複顯示，這時候就會使用到 computed 計算屬性。\n\n還有 v-on 監聽事件的修飾符跟實際應用。\n\n<!--more-->\n\n## 計算屬性 ( computed )\n\n### 1. 計算屬性的基本使用\n\n之前有提到過 mustache 語法，可以簡單的顯示資料，如果一個資料沒什麼大礙，但有很多資料的話呢? 以下示範。\n\n`firstName` 跟 `LastName` 如果中間想有空格，會有兩種寫法，如下。\n\n```html\n<div id=\"app\">\n  <h2>{{firstName +' '+ LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    firstName: 'Lebron',\n    LastName: 'Jamse',\n  },\n})\n```\n\n會顯示下圖\n![](https://i.imgur.com/eW0GGIz.png)\n\n那如果今天要顯示 5~10 個呢? 如下\n\n```html\n<div id=\"app\">\n  <h2>{{firstName +' '+ LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n</div>\n```\n\n這樣的話太長了，如果綁定的 key 值變更的話上面就要改 5 次，如果只需要改一次的話就會比較輕鬆，這時候有兩種方法可以使用 : methods 、 computed。\n\n#### ( 一 ) methods 寫法\n\n```html\n<div id=\"app\">\n  <h2>{{firstName +' '+ LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n  <h2>methods 寫法 : {{getFullName()}}</h2>\n</div>\n```\n\n上面第 4 行比第 2、3 行簡潔多了。\n把重複的動作寫成函式，再呼叫實例裡面的函式。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    firstName: 'Lebron',\n    LastName: 'Jamse',\n  },\n  methods: {\n    getFullName() {\n      return this.firstName + ' ' + this.LastName\n    },\n  },\n})\n```\n\n這樣就算 data 裡面的 key 值變更，也只要更改 methods 裡面的的 key 值，而且只改一次就全部完成。\n\n顯示如下\n![](https://i.imgur.com/fPvACnw.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/BaQwOqZ?editors=1011)\n\n不過一般 mustache 語法裡面只通常只放變數，放函式感覺很奇怪，這時候就可以用 computed 。\n\n#### ( 二 ) computed\n\n當資料裡面產生<font color=#FF0000>變化</font>的時候才會執行。\n\n```html\n<div id=\"app\">\n  <h2>{{firstName +' '+ LastName}}</h2>\n  <h2>{{firstName}} {{LastName}}</h2>\n\n  <!--   methods 有小括號，是函式 -->\n  <h2>methods 寫法 : {{getFullName()}}</h2>\n\n  <!--   computed 沒有小括號，是變數 -->\n  <h2>computed 寫法 : {{fullName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    firstName: 'Lebron',\n    LastName: 'Jamse',\n  },\n  computed: {\n    fullName() {\n      return this.firstName + ' ' + this.LastName\n    },\n  },\n  methods: {\n    getFullName() {\n      return this.firstName + ' ' + this.LastName\n    },\n  },\n})\n```\n\n顯示如下。\n![](https://i.imgur.com/eitEos0.png)\n\n`methods` 寫法會在 mustache 裡面加上小括號，那是一個函式，\n`computed` 寫法只會在 mustache 裡面放變數，不會有小括號。\n\n[DEMO](https://codepen.io/gleofgja/pen/mdOqbLp?editors=1010)\n\n### 2. 計算屬性的複雜操作\n\n計算陣列內的總價格\n\n```html\n<div id=\"app\">\n  <h2>Total Price : {{totalPrice}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    books: [\n      { id: 1, name: 'html、css 書籍', price: 110 },\n      { id: 2, name: 'JavaScript 書籍', price: 220 },\n      { id: 3, name: 'Vue 書籍', price: 330 },\n      { id: 4, name: 'React 書籍', price: 440 },\n    ],\n  },\n  computed: {\n    totalPrice() {\n      let total = 0\n      // for( let i=0; i< this.books.length; i++){\n      //   total+= this.books[i].price\n      // }\n      // return total\n\n      // for in 寫法\n      // for( let i in this.books){\n      //   total+= this.books[i].price\n      // }\n      // return total\n\n      // for of 寫法\n      for (let book of this.books) {\n        total += book.price\n      }\n      return total\n    },\n  },\n})\n```\n\n![](https://i.imgur.com/xR6WUEd.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/qBqVWLr?editors=1010)\n\n### 3. 計算屬性的 setter & getter\n\n```html\n<div id=\"app\">\n  <h2>{{firstName + ' ' + lastName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n})\n```\n\n![](https://i.imgur.com/mqO38pT.png)\n\n由於用 mustache 語法寫的話太複雜了，加上如果要重複利用的話有太冗長，所以都會使用 computed 計算屬性。\n\n```html\n<div id=\"app\">\n  <h2>{{firstName + ' ' + LastName}}</h2>\n\n  <h2>對應 computed 寫法: {{fullName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    fullName() {\n      return this.firstName + ' ' + this.lastName\n    },\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/voadrLG.png)\n\n就跟上面所寫的一樣，不過接下來要加上 get & set 屬性，這才是 computed 屬性的完整寫法。\n\n如果沒有 set 方法的話都是默認 get 方法的值，也就是<font color=#FF0000>只讀屬性</font>。\n例如我只在 get 方法裡面返回 hello 字串。\n\n```javascript\n// html 模板一樣\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    // fullName(){\n    //   return this.firstName+ ' '+ this.LastName\n    // }\n    fullName: {\n      set() {},\n      get() {\n        return 'hello'\n      },\n    },\n  },\n})\n```\n\n顯示下圖\n![](https://i.imgur.com/CXbFJLV.png)\n\n一般情況下我們只會用到 get 方法，不會使用到 set 方法，因為不希望別人隨便設定一些奇怪的值，寫法如下。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    fullName: {\n      get() {\n        // return 'hello'\n        return this.firstName + ' ' + this.lastName\n      },\n    },\n  },\n})\n```\n\n![](https://i.imgur.com/QbBmqZq.png)\n\n也因為一般情況下都會使用到 get 方法，所以上面的寫法會簡化成最一開始的寫法。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    fullName() {\n      return this.firstName + ' ' + this.lastName\n    },\n    // fullName:{\n    // set(){\n\n    // },\n    // get(){\n    // return 'hello'\n    // return this.firstName+ ' '+ this.lastName\n    // }\n    // }\n  },\n})\n```\n\n![](https://i.imgur.com/AHOs9WN.png)\n\n所以當我們在使用 computed 屬性時， mustache 語法裡面就不需要家小括號，因為在使用 computed 屬性時他會去調用 `computed` 裡面的 `get`。\n\n那如果真想要在 computed 裡面加上 set 的話也可以。\n在 set 方法裡面必須傳入參數。\n\n```html\n<div id=\"app\">\n  <h2>{{fullName}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    // fullName(){\n    //   return this.firstName+ ' '+ this.LastName\n    // }\n    fullName: {\n      set(newValue) {\n        const names = newValue.split(' ')\n        this.firstName = names[0]\n        this.lastName = names[1]\n      },\n      get() {\n        // return 'hello'\n        return this.firstName + ' ' + this.lastName\n      },\n    },\n  },\n})\n```\n\n在還沒 set 之前顯示下圖\n![](https://i.imgur.com/tCcyaJ6.png)\n\n還沒更改前是 Lebron Jamse ，用開發者工具使用更改 `fullName` 之後如下圖\n![](https://i.imgur.com/h2NFSD7.png)\n\n會改變的原因是更改了 `data` 裡面的 `firstName` & `lastName` 這兩個更改就代表 `get` 方法裡面的 `this.firstName+ ' '+ this.lastName` 也會跟著更改，那`this.firstName+ ' '+ this.lastName` 更改就代表 `fullName` 被更改了。\n\n總結一下，90%情況下 set 方法是不會寫的所以會省略掉，那省略掉後就會有更簡潔的寫法，如下。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    firstName: 'Lebron',\n    lastName: 'Jamse',\n  },\n  computed: {\n    fullName() {\n      return this.firstName + ' ' + this.LastName\n    },\n  },\n})\n```\n\n[DEMO](https://codepen.io/gleofgja/pen/WNoXbpj?editors=1011)\n\n## 監聽事件\n\n### 1. v-on\n\n監聽是前端在開發時常常用到的屬性，主要是監聽事件的發生，例如:滑鼠點擊、拖曳、鍵盤點擊...等等。\n\n那在 Vue 當中監聽事件的語法為 `v-on` ，語法糖為 `@`。\n\n以下示範用監聽滑鼠點擊來做一個簡單的計數器\n\n```html\n<div id=\"app\">\n  <h2>{{count}}</h2>\n  <button @click=\"add\">+</button>\n  <button @click=\"minus\">-</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    count: 0,\n  },\n  methods: {\n    add() {\n      this.count++\n    },\n    minus() {\n      this.count--\n    },\n  },\n})\n```\n\n利用間聽 click 事件來判斷當前要做的事。\n當我們點擊 + 號按鈕的時候用 v- on 監聽同時綁定 add 事件，那 add 事件會綁定到 methods 裡面的函式，同理 - 號按鈕也一樣。\n![](https://i.imgur.com/USHnefS.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/OJbOVKa?editors=1011)\n\n以上皆為 v-on 最基本的使用。接下來要示範傳參數的問題。\n\n### 2. v-on 參數問題\n\n在 methods 觸發 click 事件的時候，要注意傳參數的問題。\n\n1. 如果不需要另外傳參數的話，那方法後面的小括號就甭加。\n2. 如果需要傳入參數，同時又需要 event 這時就可以用 `$event` 傳到事件裡面。\n\n#### ( 一 )事件不傳參數\n\n以下示範在沒傳參數的情況下小括號加與不加的差別。\n\n```html\n<div id=\"app\">\n  <button @click=\"btn1()\">按鈕1</button>\n  <button @click=\"btn2\">按鈕2</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {},\n  methods: {\n    btn1() {\n      console.log('我是按鈕1，有小括號')\n    },\n    btn2() {\n      console.log('我是按鈕2，沒有小括號')\n    },\n  },\n})\n```\n\n如下圖，結果是一樣的，所以在沒傳入參數的話一般都會省略小括號。\n![](https://i.imgur.com/rK9e5za.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/yLVPYWb?editors=1011)\n\n#### ( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。\n\n把按鈕 2 的參數拿掉，用 methods 傳入參數的話怎麼樣?\n\n```html\n<div id=\"app\">\n  <button @click=\"btn1(123)\">按鈕1</button>\n  <button @click=\"btn2\">按鈕2</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {},\n  methods: {\n    btn1(abc) {\n      console.log('我是按鈕1，有小括號', abc)\n    },\n    btn2(abc) {\n      console.log('我是按鈕2，沒有小括號', abc)\n    },\n  },\n})\n```\n\n如下圖，用開發者工具看 log\n![](https://i.imgur.com/nuTivWl.png)\n\n點擊 按鈕 1 會正常出現，但是 按鈕 2 要用瀏覽器的開發者工具查看\n![](https://i.imgur.com/49MfVdV.png)\n\n會回傳 MouseEvent ，就是回傳瀏覽器的 event ，因為 Vue 會把默認瀏覽器產生的 event 事件當作參數傳到函式裡面。\n\n所以按鈕 2 的參數要寫 `event` 不是 `abc` 。\n\n[DEMO](https://codepen.io/gleofgja/pen/dyOZYxa?editors=1011)\n\n#### ( 三 ) 定義函式時，需要傳入參數跟 event\n\n```html\n<div id=\"app\">\n  <button @click=\"btn1(123, event)\">按鈕1</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {},\n  methods: {\n    btn1(abc, event) {\n      console.log('我是按鈕1，有小括號', abc, event)\n    },\n  },\n})\n```\n\n![](https://i.imgur.com/SLBqBB9.png)\n\n不過傳入的第一個參數是數字型別，如果改成 abc 的話就會報錯，如下圖\n![](https://i.imgur.com/7w7itVd.png)\n\n因為改成 abc 後第一個參數就是<font color=#FF0000>變數</font>了，所以他會去 `data` 裡面找 value 值\n\n```html\n<div id=\"app\">\n  <!--   <button @click='btn1(123, $event)'>按鈕1</button> -->\n  <button @click=\"btn1(abc, $event)\">按鈕1</button>\n</div>\n```\n\n在 `data` 裡面添加 `abc` 的 `value` 值。\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    abc: '第一個參數變成變數了',\n  },\n  methods: {\n    btn1(abc, event) {\n      console.log('我是按鈕1，傳入兩個參數', abc, event)\n    },\n  },\n})\n```\n\n這樣就可以正常顯示了。\n同理第一個參數改成字串，那他就會顯示字串!\n![](https://i.imgur.com/LsK9vBj.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/bGBYErg?editors=1011)\n\n### 3. v-on 修飾符\n\n在 JavaScript 裡面，都會監聽一些事件，例如 submit\n但是我們都會用 event.preventDefault() 來阻擋事件冒泡，同理 v-on 也可以。\n寫法也較為簡單:\n\n1. `event.stopPropagation()` 會寫成 `.stop`\n2. `event.preventDefault()` 會寫成 `.prevent`\n3. 只觸發一次 `.once`\n4. 只監聽特定按鍵，如:` @keyup.enter` 、 `@keyup.按鍵碼`\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=14)\n[[筆記][JavaScript]所謂的「停止事件」到底是怎麼一回事？](https://ithelp.ithome.com.tw/articles/10198999)\n","slug":"Vue基本語法2","published":1,"updated":"2021-03-26T16:13:11.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpj000ng0tr6nz3g9mc","content":"<html><head></head><body><p>在模板中可以直接使用插值語法顯示 data 中的資料，但是在某些狀況下有些資料還是要經過計算再顯示，或是多個資料結合或是重複顯示，這時候就會使用到 computed 計算屬性。</p>\n<p>還有 v-on 監聽事件的修飾符跟實際應用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"計算屬性-computed\"><a href=\"#計算屬性-computed\" class=\"headerlink\" title=\"計算屬性 ( computed )\"></a>計算屬性 ( computed )</h2><h3 id=\"1-計算屬性的基本使用\"><a href=\"#1-計算屬性的基本使用\" class=\"headerlink\" title=\"1. 計算屬性的基本使用\"></a>1. 計算屬性的基本使用</h3><p>之前有提到過 mustache 語法，可以簡單的顯示資料，如果一個資料沒什麼大礙，但有很多資料的話呢? 以下示範。</p>\n<p><code>firstName</code> 跟 <code>LastName</code> 如果中間想有空格，會有兩種寫法，如下。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    LastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>會顯示下圖<br><img src=\"https://i.imgur.com/eW0GGIz.png\"></p>\n<p>那如果今天要顯示 5~10 個呢? 如下</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>這樣的話太長了，如果綁定的 key 值變更的話上面就要改 5 次，如果只需要改一次的話就會比較輕鬆，這時候有兩種方法可以使用 : methods 、 computed。</p>\n<h4 id=\"一-methods-寫法\"><a href=\"#一-methods-寫法\" class=\"headerlink\" title=\"( 一 ) methods 寫法\"></a>( 一 ) methods 寫法</h4><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>methods 寫法 : {{getFullName()}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面第 4 行比第 2、3 行簡潔多了。<br>把重複的動作寫成函式，再呼叫實例裡面的函式。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    LastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  methods: {</span><br><span class=\"line\">    getFullName() {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-built_in\">this</span>.LastName</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>這樣就算 data 裡面的 key 值變更，也只要更改 methods 裡面的的 key 值，而且只改一次就全部完成。</p>\n<p>顯示如下<br><img src=\"https://i.imgur.com/fPvACnw.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/BaQwOqZ?editors=1011\">DEMO</a></p>\n<p>不過一般 mustache 語法裡面只通常只放變數，放函式感覺很奇怪，這時候就可以用 computed 。</p>\n<h4 id=\"二-computed\"><a href=\"#二-computed\" class=\"headerlink\" title=\"( 二 ) computed\"></a>( 二 ) computed</h4><p>當資料裡面產生<font color=\"#FF0000\">變化</font>的時候才會執行。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   methods 有小括號，是函式 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>methods 寫法 : {{getFullName()}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   computed 沒有小括號，是變數 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>computed 寫法 : {{fullName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    LastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    fullName() {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-built_in\">this</span>.LastName</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">  methods: {</span><br><span class=\"line\">    getFullName() {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-built_in\">this</span>.LastName</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示如下。<br><img src=\"https://i.imgur.com/eitEos0.png\"></p>\n<p><code>methods</code> 寫法會在 mustache 裡面加上小括號，那是一個函式，<br><code>computed</code> 寫法只會在 mustache 裡面放變數，不會有小括號。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/mdOqbLp?editors=1010\">DEMO</a></p>\n<h3 id=\"2-計算屬性的複雜操作\"><a href=\"#2-計算屬性的複雜操作\" class=\"headerlink\" title=\"2. 計算屬性的複雜操作\"></a>2. 計算屬性的複雜操作</h3><p>計算陣列內的總價格</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Total Price : {{totalPrice}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    books: [</span><br><span class=\"line\">      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'html、css 書籍'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">110</span> },</span><br><span class=\"line\">      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'JavaScript 書籍'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">220</span> },</span><br><span class=\"line\">      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Vue 書籍'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">330</span> },</span><br><span class=\"line\">      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'React 書籍'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">440</span> },</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    totalPrice() {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// for( let i=0; i&lt; this.books.length; i++){</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">//   total+= this.books[i].price</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// }</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// return total</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-comment\">// for in 寫法</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// for( let i in this.books){</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">//   total+= this.books[i].price</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// }</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// return total</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-comment\">// for of 寫法</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> book <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">this</span>.books) {</span><br><span class=\"line\">        total += book.price</span><br><span class=\"line\">      }</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> total</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/xR6WUEd.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/qBqVWLr?editors=1010\">DEMO</a></p>\n<h3 id=\"3-計算屬性的-setter-amp-getter\"><a href=\"#3-計算屬性的-setter-amp-getter\" class=\"headerlink\" title=\"3. 計算屬性的 setter &amp; getter\"></a>3. 計算屬性的 setter &amp; getter</h3><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName + ' ' + lastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    lastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/mqO38pT.png\"></p>\n<p>由於用 mustache 語法寫的話太複雜了，加上如果要重複利用的話有太冗長，所以都會使用 computed 計算屬性。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName + ' ' + LastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>對應 computed 寫法: {{fullName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    lastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    fullName() {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-built_in\">this</span>.lastName</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/voadrLG.png\"></p>\n<p>就跟上面所寫的一樣，不過接下來要加上 get &amp; set 屬性，這才是 computed 屬性的完整寫法。</p>\n<p>如果沒有 set 方法的話都是默認 get 方法的值，也就是<font color=\"#FF0000\">只讀屬性</font>。<br>例如我只在 get 方法裡面返回 hello 字串。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// html 模板一樣</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    lastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// fullName(){</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">//   return this.firstName+ ' '+ this.LastName</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// }</span></span><br><span class=\"line\">    fullName: {</span><br><span class=\"line\">      set() {},</span><br><span class=\"line\">      get() {</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/CXbFJLV.png\"></p>\n<p>一般情況下我們只會用到 get 方法，不會使用到 set 方法，因為不希望別人隨便設定一些奇怪的值，寫法如下。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    lastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    fullName: {</span><br><span class=\"line\">      get() {</span><br><span class=\"line\">        <span class=\"hljs-comment\">// return 'hello'</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-built_in\">this</span>.lastName</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/QbBmqZq.png\"></p>\n<p>也因為一般情況下都會使用到 get 方法，所以上面的寫法會簡化成最一開始的寫法。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    lastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    fullName() {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-built_in\">this</span>.lastName</span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-comment\">// fullName:{</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// set(){</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// },</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// get(){</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// return 'hello'</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// return this.firstName+ ' '+ this.lastName</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// }</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// }</span></span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/AHOs9WN.png\"></p>\n<p>所以當我們在使用 computed 屬性時， mustache 語法裡面就不需要家小括號，因為在使用 computed 屬性時他會去調用 <code>computed</code> 裡面的 <code>get</code>。</p>\n<p>那如果真想要在 computed 裡面加上 set 的話也可以。<br>在 set 方法裡面必須傳入參數。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{fullName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    lastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// fullName(){</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">//   return this.firstName+ ' '+ this.LastName</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// }</span></span><br><span class=\"line\">    fullName: {</span><br><span class=\"line\">      set(newValue) {</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> names = newValue.split(<span class=\"hljs-string\">' '</span>)</span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.firstName = names[<span class=\"hljs-number\">0</span>]</span><br><span class=\"line\">        <span class=\"hljs-built_in\">this</span>.lastName = names[<span class=\"hljs-number\">1</span>]</span><br><span class=\"line\">      },</span><br><span class=\"line\">      get() {</span><br><span class=\"line\">        <span class=\"hljs-comment\">// return 'hello'</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-built_in\">this</span>.lastName</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在還沒 set 之前顯示下圖<br><img src=\"https://i.imgur.com/tCcyaJ6.png\"></p>\n<p>還沒更改前是 Lebron Jamse ，用開發者工具使用更改 <code>fullName</code> 之後如下圖<br><img src=\"https://i.imgur.com/h2NFSD7.png\"></p>\n<p>會改變的原因是更改了 <code>data</code> 裡面的 <code>firstName</code> &amp; <code>lastName</code> 這兩個更改就代表 <code>get</code> 方法裡面的 <code>this.firstName+ ' '+ this.lastName</code> 也會跟著更改，那<code>this.firstName+ ' '+ this.lastName</code> 更改就代表 <code>fullName</code> 被更改了。</p>\n<p>總結一下，90%情況下 set 方法是不會寫的所以會省略掉，那省略掉後就會有更簡潔的寫法，如下。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Lebron'</span>,</span><br><span class=\"line\">    lastName: <span class=\"hljs-string\">'Jamse'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  computed: {</span><br><span class=\"line\">    fullName() {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstName + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-built_in\">this</span>.LastName</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/WNoXbpj?editors=1011\">DEMO</a></p>\n<h2 id=\"監聽事件\"><a href=\"#監聽事件\" class=\"headerlink\" title=\"監聽事件\"></a>監聽事件</h2><h3 id=\"1-v-on\"><a href=\"#1-v-on\" class=\"headerlink\" title=\"1. v-on\"></a>1. v-on</h3><p>監聽是前端在開發時常常用到的屬性，主要是監聽事件的發生，例如:滑鼠點擊、拖曳、鍵盤點擊…等等。</p>\n<p>那在 Vue 當中監聽事件的語法為 <code>v-on</code> ，語法糖為 <code>@</code>。</p>\n<p>以下示範用監聽滑鼠點擊來做一個簡單的計數器</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{count}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"add\"</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"minus\"</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    count: <span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  methods: {</span><br><span class=\"line\">    add() {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">this</span>.count++</span><br><span class=\"line\">    },</span><br><span class=\"line\">    minus() {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">this</span>.count--</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>利用間聽 click 事件來判斷當前要做的事。<br>當我們點擊 + 號按鈕的時候用 v- on 監聽同時綁定 add 事件，那 add 事件會綁定到 methods 裡面的函式，同理 - 號按鈕也一樣。<br><img src=\"https://i.imgur.com/USHnefS.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/OJbOVKa?editors=1011\">DEMO</a></p>\n<p>以上皆為 v-on 最基本的使用。接下來要示範傳參數的問題。</p>\n<h3 id=\"2-v-on-參數問題\"><a href=\"#2-v-on-參數問題\" class=\"headerlink\" title=\"2. v-on 參數問題\"></a>2. v-on 參數問題</h3><p>在 methods 觸發 click 事件的時候，要注意傳參數的問題。</p>\n<ol>\n<li>如果不需要另外傳參數的話，那方法後面的小括號就甭加。</li>\n<li>如果需要傳入參數，同時又需要 event 這時就可以用 <code>$event</code> 傳到事件裡面。</li>\n</ol>\n<h4 id=\"一-事件不傳參數\"><a href=\"#一-事件不傳參數\" class=\"headerlink\" title=\"( 一 )事件不傳參數\"></a>( 一 )事件不傳參數</h4><p>以下示範在沒傳參數的情況下小括號加與不加的差別。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btn1()\"</span>&gt;</span>按鈕1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btn2\"</span>&gt;</span>按鈕2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {},</span><br><span class=\"line\">  methods: {</span><br><span class=\"line\">    btn1() {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是按鈕1，有小括號'</span>)</span><br><span class=\"line\">    },</span><br><span class=\"line\">    btn2() {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是按鈕2，沒有小括號'</span>)</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如下圖，結果是一樣的，所以在沒傳入參數的話一般都會省略小括號。<br><img src=\"https://i.imgur.com/rK9e5za.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/yLVPYWb?editors=1011\">DEMO</a></p>\n<h4 id=\"二-定義事件，模板省略的小括號，但是-methods-本身需要傳入一個參數。\"><a href=\"#二-定義事件，模板省略的小括號，但是-methods-本身需要傳入一個參數。\" class=\"headerlink\" title=\"( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。\"></a>( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。</h4><p>把按鈕 2 的參數拿掉，用 methods 傳入參數的話怎麼樣?</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btn1(123)\"</span>&gt;</span>按鈕1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btn2\"</span>&gt;</span>按鈕2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {},</span><br><span class=\"line\">  methods: {</span><br><span class=\"line\">    btn1(abc) {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是按鈕1，有小括號'</span>, abc)</span><br><span class=\"line\">    },</span><br><span class=\"line\">    btn2(abc) {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是按鈕2，沒有小括號'</span>, abc)</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如下圖，用開發者工具看 log<br><img src=\"https://i.imgur.com/nuTivWl.png\"></p>\n<p>點擊 按鈕 1 會正常出現，但是 按鈕 2 要用瀏覽器的開發者工具查看<br><img src=\"https://i.imgur.com/49MfVdV.png\"></p>\n<p>會回傳 MouseEvent ，就是回傳瀏覽器的 event ，因為 Vue 會把默認瀏覽器產生的 event 事件當作參數傳到函式裡面。</p>\n<p>所以按鈕 2 的參數要寫 <code>event</code> 不是 <code>abc</code> 。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/dyOZYxa?editors=1011\">DEMO</a></p>\n<h4 id=\"三-定義函式時，需要傳入參數跟-event\"><a href=\"#三-定義函式時，需要傳入參數跟-event\" class=\"headerlink\" title=\"( 三 ) 定義函式時，需要傳入參數跟 event\"></a>( 三 ) 定義函式時，需要傳入參數跟 event</h4><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btn1(123, event)\"</span>&gt;</span>按鈕1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {},</span><br><span class=\"line\">  methods: {</span><br><span class=\"line\">    btn1(abc, event) {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是按鈕1，有小括號'</span>, abc, event)</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/SLBqBB9.png\"></p>\n<p>不過傳入的第一個參數是數字型別，如果改成 abc 的話就會報錯，如下圖<br><img src=\"https://i.imgur.com/7w7itVd.png\"></p>\n<p>因為改成 abc 後第一個參數就是<font color=\"#FF0000\">變數</font>了，所以他會去 <code>data</code> 裡面找 value 值</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   &lt;button @click='btn1(123, $event)'&gt;按鈕1&lt;/button&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btn1(abc, $event)\"</span>&gt;</span>按鈕1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 <code>data</code> 裡面添加 <code>abc</code> 的 <code>value</code> 值。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    abc: <span class=\"hljs-string\">'第一個參數變成變數了'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  methods: {</span><br><span class=\"line\">    btn1(abc, event) {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是按鈕1，傳入兩個參數'</span>, abc, event)</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>這樣就可以正常顯示了。<br>同理第一個參數改成字串，那他就會顯示字串!<br><img src=\"https://i.imgur.com/LsK9vBj.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/bGBYErg?editors=1011\">DEMO</a></p>\n<h3 id=\"3-v-on-修飾符\"><a href=\"#3-v-on-修飾符\" class=\"headerlink\" title=\"3. v-on 修飾符\"></a>3. v-on 修飾符</h3><p>在 JavaScript 裡面，都會監聽一些事件，例如 submit<br>但是我們都會用 event.preventDefault() 來阻擋事件冒泡，同理 v-on 也可以。<br>寫法也較為簡單:</p>\n<ol>\n<li><code>event.stopPropagation()</code> 會寫成 <code>.stop</code></li>\n<li><code>event.preventDefault()</code> 會寫成 <code>.prevent</code></li>\n<li>只觸發一次 <code>.once</code></li>\n<li>只監聽特定按鍵，如:<code> @keyup.enter</code> 、 <code>@keyup.按鍵碼</code></li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=14\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10198999\">[筆記][JavaScript]所謂的「停止事件」到底是怎麼一回事？</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"},{"name":"computed","path":"categories/Vue/computed/"},{"name":"v-on","path":"categories/Vue/computed/v-on/"}],"_tags":[{"name":"v-on","path":"tags/v-on/"},{"name":"Vue","path":"tags/Vue/"},{"name":"computed","path":"tags/computed/"}],"excerpt":"<html><head></head><body><p>在模板中可以直接使用插值語法顯示 data 中的資料，但是在某些狀況下有些資料還是要經過計算再顯示，或是多個資料結合或是重複顯示，這時候就會使用到 computed 計算屬性。</p>\n<p>還有 v-on 監聽事件的修飾符跟實際應用。</p></body></html>","more":"<h2 id=\"計算屬性-computed\"><a href=\"#計算屬性-computed\" class=\"headerlink\" title=\"計算屬性 ( computed )\"></a>計算屬性 ( computed )</h2><h3 id=\"1-計算屬性的基本使用\"><a href=\"#1-計算屬性的基本使用\" class=\"headerlink\" title=\"1. 計算屬性的基本使用\"></a>1. 計算屬性的基本使用</h3><p>之前有提到過 mustache 語法，可以簡單的顯示資料，如果一個資料沒什麼大礙，但有很多資料的話呢? 以下示範。</p>\n<p><code>firstName</code> 跟 <code>LastName</code> 如果中間想有空格，會有兩種寫法，如下。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName +&#x27; &#x27;+ LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    LastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>會顯示下圖<br><img src=\"https://i.imgur.com/eW0GGIz.png\"></p>\n<p>那如果今天要顯示 5~10 個呢? 如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName +&#x27; &#x27;+ LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣的話太長了，如果綁定的 key 值變更的話上面就要改 5 次，如果只需要改一次的話就會比較輕鬆，這時候有兩種方法可以使用 : methods 、 computed。</p>\n<h4 id=\"一-methods-寫法\"><a href=\"#一-methods-寫法\" class=\"headerlink\" title=\"( 一 ) methods 寫法\"></a>( 一 ) methods 寫法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName +&#x27; &#x27;+ LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>methods 寫法 : &#123;&#123;getFullName()&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面第 4 行比第 2、3 行簡潔多了。<br>把重複的動作寫成函式，再呼叫實例裡面的函式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    LastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getFullName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.LastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這樣就算 data 裡面的 key 值變更，也只要更改 methods 裡面的的 key 值，而且只改一次就全部完成。</p>\n<p>顯示如下<br><img src=\"https://i.imgur.com/fPvACnw.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/BaQwOqZ?editors=1011\">DEMO</a></p>\n<p>不過一般 mustache 語法裡面只通常只放變數，放函式感覺很奇怪，這時候就可以用 computed 。</p>\n<h4 id=\"二-computed\"><a href=\"#二-computed\" class=\"headerlink\" title=\"( 二 ) computed\"></a>( 二 ) computed</h4><p>當資料裡面產生<font color=#FF0000>變化</font>的時候才會執行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName +&#x27; &#x27;+ LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   methods 有小括號，是函式 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>methods 寫法 : &#123;&#123;getFullName()&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   computed 沒有小括號，是變數 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>computed 寫法 : &#123;&#123;fullName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    LastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    fullName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.LastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getFullName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.LastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下。<br><img src=\"https://i.imgur.com/eitEos0.png\"></p>\n<p><code>methods</code> 寫法會在 mustache 裡面加上小括號，那是一個函式，<br><code>computed</code> 寫法只會在 mustache 裡面放變數，不會有小括號。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/mdOqbLp?editors=1010\">DEMO</a></p>\n<h3 id=\"2-計算屬性的複雜操作\"><a href=\"#2-計算屬性的複雜操作\" class=\"headerlink\" title=\"2. 計算屬性的複雜操作\"></a>2. 計算屬性的複雜操作</h3><p>計算陣列內的總價格</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Total Price : &#123;&#123;totalPrice&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    books: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;html、css 書籍&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">110</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;JavaScript 書籍&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">220</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Vue 書籍&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">330</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;React 書籍&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"number\">440</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    totalPrice() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> total = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"comment\">// for( let i=0; i&lt; this.books.length; i++)&#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   total+= this.books[i].price</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      <span class=\"comment\">// return total</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// for in 寫法</span></span><br><span class=\"line\">      <span class=\"comment\">// for( let i in this.books)&#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   total+= this.books[i].price</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      <span class=\"comment\">// return total</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// for of 寫法</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> book <span class=\"keyword\">of</span> <span class=\"built_in\">this</span>.books) &#123;</span><br><span class=\"line\">        total += book.price</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> total</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/xR6WUEd.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/qBqVWLr?editors=1010\">DEMO</a></p>\n<h3 id=\"3-計算屬性的-setter-amp-getter\"><a href=\"#3-計算屬性的-setter-amp-getter\" class=\"headerlink\" title=\"3. 計算屬性的 setter &amp; getter\"></a>3. 計算屬性的 setter &amp; getter</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName + &#x27; &#x27; + lastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/mqO38pT.png\"></p>\n<p>由於用 mustache 語法寫的話太複雜了，加上如果要重複利用的話有太冗長，所以都會使用 computed 計算屬性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName + &#x27; &#x27; + LastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>對應 computed 寫法: &#123;&#123;fullName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    fullName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/voadrLG.png\"></p>\n<p>就跟上面所寫的一樣，不過接下來要加上 get &amp; set 屬性，這才是 computed 屬性的完整寫法。</p>\n<p>如果沒有 set 方法的話都是默認 get 方法的值，也就是<font color=#FF0000>只讀屬性</font>。<br>例如我只在 get 方法裡面返回 hello 字串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html 模板一樣</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fullName()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   return this.firstName+ &#x27; &#x27;+ this.LastName</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    fullName: &#123;</span><br><span class=\"line\">      set() &#123;&#125;,</span><br><span class=\"line\">      get() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/CXbFJLV.png\"></p>\n<p>一般情況下我們只會用到 get 方法，不會使用到 set 方法，因為不希望別人隨便設定一些奇怪的值，寫法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    fullName: &#123;</span><br><span class=\"line\">      get() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// return &#x27;hello&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/QbBmqZq.png\"></p>\n<p>也因為一般情況下都會使用到 get 方法，所以上面的寫法會簡化成最一開始的寫法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    fullName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// fullName:&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// set()&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    <span class=\"comment\">// get()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// return &#x27;hello&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// return this.firstName+ &#x27; &#x27;+ this.lastName</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/AHOs9WN.png\"></p>\n<p>所以當我們在使用 computed 屬性時， mustache 語法裡面就不需要家小括號，因為在使用 computed 屬性時他會去調用 <code>computed</code> 裡面的 <code>get</code>。</p>\n<p>那如果真想要在 computed 裡面加上 set 的話也可以。<br>在 set 方法裡面必須傳入參數。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fullName()&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   return this.firstName+ &#x27; &#x27;+ this.LastName</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    fullName: &#123;</span><br><span class=\"line\">      set(newValue) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> names = newValue.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lastName = names[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      get() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// return &#x27;hello&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.lastName</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在還沒 set 之前顯示下圖<br><img src=\"https://i.imgur.com/tCcyaJ6.png\"></p>\n<p>還沒更改前是 Lebron Jamse ，用開發者工具使用更改 <code>fullName</code> 之後如下圖<br><img src=\"https://i.imgur.com/h2NFSD7.png\"></p>\n<p>會改變的原因是更改了 <code>data</code> 裡面的 <code>firstName</code> &amp; <code>lastName</code> 這兩個更改就代表 <code>get</code> 方法裡面的 <code>this.firstName+ &#39; &#39;+ this.lastName</code> 也會跟著更改，那<code>this.firstName+ &#39; &#39;+ this.lastName</code> 更改就代表 <code>fullName</code> 被更改了。</p>\n<p>總結一下，90%情況下 set 方法是不會寫的所以會省略掉，那省略掉後就會有更簡潔的寫法，如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Lebron&#x27;</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">&#x27;Jamse&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    fullName() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.LastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/WNoXbpj?editors=1011\">DEMO</a></p>\n<h2 id=\"監聽事件\"><a href=\"#監聽事件\" class=\"headerlink\" title=\"監聽事件\"></a>監聽事件</h2><h3 id=\"1-v-on\"><a href=\"#1-v-on\" class=\"headerlink\" title=\"1. v-on\"></a>1. v-on</h3><p>監聽是前端在開發時常常用到的屬性，主要是監聽事件的發生，例如:滑鼠點擊、拖曳、鍵盤點擊…等等。</p>\n<p>那在 Vue 當中監聽事件的語法為 <code>v-on</code> ，語法糖為 <code>@</code>。</p>\n<p>以下示範用監聽滑鼠點擊來做一個簡單的計數器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;add&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;minus&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minus() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.count--</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>利用間聽 click 事件來判斷當前要做的事。<br>當我們點擊 + 號按鈕的時候用 v- on 監聽同時綁定 add 事件，那 add 事件會綁定到 methods 裡面的函式，同理 - 號按鈕也一樣。<br><img src=\"https://i.imgur.com/USHnefS.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/OJbOVKa?editors=1011\">DEMO</a></p>\n<p>以上皆為 v-on 最基本的使用。接下來要示範傳參數的問題。</p>\n<h3 id=\"2-v-on-參數問題\"><a href=\"#2-v-on-參數問題\" class=\"headerlink\" title=\"2. v-on 參數問題\"></a>2. v-on 參數問題</h3><p>在 methods 觸發 click 事件的時候，要注意傳參數的問題。</p>\n<ol>\n<li>如果不需要另外傳參數的話，那方法後面的小括號就甭加。</li>\n<li>如果需要傳入參數，同時又需要 event 這時就可以用 <code>$event</code> 傳到事件裡面。</li>\n</ol>\n<h4 id=\"一-事件不傳參數\"><a href=\"#一-事件不傳參數\" class=\"headerlink\" title=\"( 一 )事件不傳參數\"></a>( 一 )事件不傳參數</h4><p>以下示範在沒傳參數的情況下小括號加與不加的差別。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn1()&quot;</span>&gt;</span>按鈕1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn2&quot;</span>&gt;</span>按鈕2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    btn1() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是按鈕1，有小括號&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    btn2() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是按鈕2，沒有小括號&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如下圖，結果是一樣的，所以在沒傳入參數的話一般都會省略小括號。<br><img src=\"https://i.imgur.com/rK9e5za.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/yLVPYWb?editors=1011\">DEMO</a></p>\n<h4 id=\"二-定義事件，模板省略的小括號，但是-methods-本身需要傳入一個參數。\"><a href=\"#二-定義事件，模板省略的小括號，但是-methods-本身需要傳入一個參數。\" class=\"headerlink\" title=\"( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。\"></a>( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。</h4><p>把按鈕 2 的參數拿掉，用 methods 傳入參數的話怎麼樣?</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn1(123)&quot;</span>&gt;</span>按鈕1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn2&quot;</span>&gt;</span>按鈕2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    btn1(abc) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是按鈕1，有小括號&#x27;</span>, abc)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    btn2(abc) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是按鈕2，沒有小括號&#x27;</span>, abc)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如下圖，用開發者工具看 log<br><img src=\"https://i.imgur.com/nuTivWl.png\"></p>\n<p>點擊 按鈕 1 會正常出現，但是 按鈕 2 要用瀏覽器的開發者工具查看<br><img src=\"https://i.imgur.com/49MfVdV.png\"></p>\n<p>會回傳 MouseEvent ，就是回傳瀏覽器的 event ，因為 Vue 會把默認瀏覽器產生的 event 事件當作參數傳到函式裡面。</p>\n<p>所以按鈕 2 的參數要寫 <code>event</code> 不是 <code>abc</code> 。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/dyOZYxa?editors=1011\">DEMO</a></p>\n<h4 id=\"三-定義函式時，需要傳入參數跟-event\"><a href=\"#三-定義函式時，需要傳入參數跟-event\" class=\"headerlink\" title=\"( 三 ) 定義函式時，需要傳入參數跟 event\"></a>( 三 ) 定義函式時，需要傳入參數跟 event</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn1(123, event)&quot;</span>&gt;</span>按鈕1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    btn1(abc, event) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是按鈕1，有小括號&#x27;</span>, abc, event)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/SLBqBB9.png\"></p>\n<p>不過傳入的第一個參數是數字型別，如果改成 abc 的話就會報錯，如下圖<br><img src=\"https://i.imgur.com/7w7itVd.png\"></p>\n<p>因為改成 abc 後第一個參數就是<font color=#FF0000>變數</font>了，所以他會去 <code>data</code> 裡面找 value 值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   &lt;button @click=&#x27;btn1(123, $event)&#x27;&gt;按鈕1&lt;/button&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn1(abc, $event)&quot;</span>&gt;</span>按鈕1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>data</code> 裡面添加 <code>abc</code> 的 <code>value</code> 值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    abc: <span class=\"string\">&#x27;第一個參數變成變數了&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    btn1(abc, event) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是按鈕1，傳入兩個參數&#x27;</span>, abc, event)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這樣就可以正常顯示了。<br>同理第一個參數改成字串，那他就會顯示字串!<br><img src=\"https://i.imgur.com/LsK9vBj.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/bGBYErg?editors=1011\">DEMO</a></p>\n<h3 id=\"3-v-on-修飾符\"><a href=\"#3-v-on-修飾符\" class=\"headerlink\" title=\"3. v-on 修飾符\"></a>3. v-on 修飾符</h3><p>在 JavaScript 裡面，都會監聽一些事件，例如 submit<br>但是我們都會用 event.preventDefault() 來阻擋事件冒泡，同理 v-on 也可以。<br>寫法也較為簡單:</p>\n<ol>\n<li><code>event.stopPropagation()</code> 會寫成 <code>.stop</code></li>\n<li><code>event.preventDefault()</code> 會寫成 <code>.prevent</code></li>\n<li>只觸發一次 <code>.once</code></li>\n<li>只監聽特定按鍵，如:<code> @keyup.enter</code> 、 <code>@keyup.按鍵碼</code></li>\n</ol>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=14\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10198999\">[筆記][JavaScript]所謂的「停止事件」到底是怎麼一回事？</a></p>"},{"title":"Vue - 組件的使用","date":"2020-09-05T16:00:00.000Z","description":"Vue 組件是預先定義好的模組，把這些模組獨立出來並重複使用，這樣在開發上就可以只專注在一小區塊","_content":"\nVue 組件是預先定義好的模組，包含 html 的視覺元素、綁定的資料跟偵聽器..等等，類似 Vue 實例，組件的好處是可以重複使用，在開發上可以只專注在一小區塊，維護也很方便\n\n`Vue.component` 前面會先傳入參數的名稱，後面的參數是 `option` ，`option` 是用模板 `template` 定義視覺元素，也直接在模板裡面去定義內容，舉例 : 在模板裡面定義 html 的內容 ( hello world ) ，然後在 html 裡面定義 `#app` 並在裡面放入 `my-component` 標籤，而 `my-component` 並非是 html 標籤，是我在 `Vue.component` 定義好的。\n\n`Vue.component` 有個特別的規範，就是前面的參數要全小寫並加上「 - 」分開，請養成習慣!，同時 `Vue.component` 的宣告必須在 `new Vue` 之前\n\n```html\n<div id=\"app\">\n  <my-component></my-component>\n</div>\n\n<!-- 此為 Global 的 component  -->\n<script>\n  Vue.component('my-component', {\n    template: '<div>hello world</div>',\n  })\n\n  new Vue({\n    el: '#app',\n  })\n</script>\n```\n\n此範例是全域都可以使用的\n[codePen](https://codepen.io/gleofgja/pen/mdPEaEo?editors=1010)\n\n---\n\n除了全域( Global )宣告以外還有 local 的宣告，它只會存在 Vue 實例裡面\n\n```html\n<div id=\"app\">\n  <my-component></my-component>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    components: {\n      'my-component': {\n        template: '<div>hello world</div>',\n      },\n    },\n  })\n</script>\n```\n\n在 `new Vue` 裡面給一個屬性 `components` ，屬性的 `key` 是字串 key `my-component` 也是組件名稱\n[codePen](https://codepen.io/gleofgja/pen/xxVEmOL?editors=1010)\n\n---\n\n但是 local 有缺點，就是如果我宣告兩個 div ，但只會顯示一個\n\n```html\n<div id=\"app\">\n  <my-component></my-component>\n</div>\n<div id=\"app2\">\n  <my-component></my-component>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    components: {\n      'my-component': {\n        template: '<div>hello world</div>',\n      },\n    },\n  })\n\n  new Vue({\n    el: '#app2',\n  })\n</script>\n```\n\n它只會顯示一個 div\n![](https://i.imgur.com/WhYn9TS.png)\n\n那用 Global 宣告就不會有這問題\n\n```html\n<div id=\"app\">\n  <my-component></my-component>\n</div>\n<div id=\"app2\">\n  <my-component></my-component>\n</div>\n\n<script>\n  Vue.component('my-component', {\n    template: '<div>hello world</div>',\n  })\n\n  new Vue({\n    el: '#app',\n  })\n\n  new Vue({\n    el: '#app2',\n  })\n</script>\n```\n\n這樣就會有兩個實例\n[codePen](https://codepen.io/gleofgja/pen/NWNReXP?editors=1010)\n\n![](https://i.imgur.com/AT9IjlF.png)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","source":"_posts/2020/Vue組件的使用.md","raw":"---\ntitle: Vue - 組件的使用\ndate: 2020/09/06\ntags: component\ncategories: Vue\ndescription: Vue 組件是預先定義好的模組，把這些模組獨立出來並重複使用，這樣在開發上就可以只專注在一小區塊\n---\n\nVue 組件是預先定義好的模組，包含 html 的視覺元素、綁定的資料跟偵聽器..等等，類似 Vue 實例，組件的好處是可以重複使用，在開發上可以只專注在一小區塊，維護也很方便\n\n`Vue.component` 前面會先傳入參數的名稱，後面的參數是 `option` ，`option` 是用模板 `template` 定義視覺元素，也直接在模板裡面去定義內容，舉例 : 在模板裡面定義 html 的內容 ( hello world ) ，然後在 html 裡面定義 `#app` 並在裡面放入 `my-component` 標籤，而 `my-component` 並非是 html 標籤，是我在 `Vue.component` 定義好的。\n\n`Vue.component` 有個特別的規範，就是前面的參數要全小寫並加上「 - 」分開，請養成習慣!，同時 `Vue.component` 的宣告必須在 `new Vue` 之前\n\n```html\n<div id=\"app\">\n  <my-component></my-component>\n</div>\n\n<!-- 此為 Global 的 component  -->\n<script>\n  Vue.component('my-component', {\n    template: '<div>hello world</div>',\n  })\n\n  new Vue({\n    el: '#app',\n  })\n</script>\n```\n\n此範例是全域都可以使用的\n[codePen](https://codepen.io/gleofgja/pen/mdPEaEo?editors=1010)\n\n---\n\n除了全域( Global )宣告以外還有 local 的宣告，它只會存在 Vue 實例裡面\n\n```html\n<div id=\"app\">\n  <my-component></my-component>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    components: {\n      'my-component': {\n        template: '<div>hello world</div>',\n      },\n    },\n  })\n</script>\n```\n\n在 `new Vue` 裡面給一個屬性 `components` ，屬性的 `key` 是字串 key `my-component` 也是組件名稱\n[codePen](https://codepen.io/gleofgja/pen/xxVEmOL?editors=1010)\n\n---\n\n但是 local 有缺點，就是如果我宣告兩個 div ，但只會顯示一個\n\n```html\n<div id=\"app\">\n  <my-component></my-component>\n</div>\n<div id=\"app2\">\n  <my-component></my-component>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    components: {\n      'my-component': {\n        template: '<div>hello world</div>',\n      },\n    },\n  })\n\n  new Vue({\n    el: '#app2',\n  })\n</script>\n```\n\n它只會顯示一個 div\n![](https://i.imgur.com/WhYn9TS.png)\n\n那用 Global 宣告就不會有這問題\n\n```html\n<div id=\"app\">\n  <my-component></my-component>\n</div>\n<div id=\"app2\">\n  <my-component></my-component>\n</div>\n\n<script>\n  Vue.component('my-component', {\n    template: '<div>hello world</div>',\n  })\n\n  new Vue({\n    el: '#app',\n  })\n\n  new Vue({\n    el: '#app2',\n  })\n</script>\n```\n\n這樣就會有兩個實例\n[codePen](https://codepen.io/gleofgja/pen/NWNReXP?editors=1010)\n\n![](https://i.imgur.com/AT9IjlF.png)\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","slug":"Vue組件的使用","published":1,"updated":"2021-03-26T16:13:11.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpl000qg0trbbwdhtlq","content":"<html><head></head><body><p>Vue 組件是預先定義好的模組，包含 html 的視覺元素、綁定的資料跟偵聽器..等等，類似 Vue 實例，組件的好處是可以重複使用，在開發上可以只專注在一小區塊，維護也很方便</p>\n<p><code>Vue.component</code> 前面會先傳入參數的名稱，後面的參數是 <code>option</code> ，<code>option</code> 是用模板 <code>template</code> 定義視覺元素，也直接在模板裡面去定義內容，舉例 : 在模板裡面定義 html 的內容 ( hello world ) ，然後在 html 裡面定義 <code>#app</code> 並在裡面放入 <code>my-component</code> 標籤，而 <code>my-component</code> 並非是 html 標籤，是我在 <code>Vue.component</code> 定義好的。</p>\n<p><code>Vue.component</code> 有個特別的規範，就是前面的參數要全小寫並加上「 - 」分開，請養成習慣!，同時 <code>Vue.component</code> 的宣告必須在 <code>new Vue</code> 之前</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- 此為 Global 的 component  --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  Vue.component(<span class=\"hljs-string\">'my-component'</span>, {</span></span><br><span class=\"line\"><span class=\"hljs-handlebars\"><span class=\"hljs-xml\">    template: '<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>',</span></span></span><br><span class=\"line\">  })</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>此範例是全域都可以使用的<br><a href=\"https://codepen.io/gleofgja/pen/mdPEaEo?editors=1010\">codePen</a></p>\n<hr>\n<p>除了全域( Global )宣告以外還有 local 的宣告，它只會存在 Vue 實例裡面</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    components: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      <span class=\"hljs-string\">'my-component'</span>: {</span></span><br><span class=\"line\"><span class=\"hljs-handlebars\"><span class=\"hljs-xml\">        template: '<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>',</span></span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 <code>new Vue</code> 裡面給一個屬性 <code>components</code> ，屬性的 <code>key</code> 是字串 key <code>my-component</code> 也是組件名稱<br><a href=\"https://codepen.io/gleofgja/pen/xxVEmOL?editors=1010\">codePen</a></p>\n<hr>\n<p>但是 local 有缺點，就是如果我宣告兩個 div ，但只會顯示一個</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    components: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      <span class=\"hljs-string\">'my-component'</span>: {</span></span><br><span class=\"line\"><span class=\"hljs-handlebars\"><span class=\"hljs-xml\">        template: '<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>',</span></span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app2'</span>,</span></span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>它只會顯示一個 div<br><img src=\"https://i.imgur.com/WhYn9TS.png\"></p>\n<p>那用 Global 宣告就不會有這問題</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  Vue.component(<span class=\"hljs-string\">'my-component'</span>, {</span></span><br><span class=\"line\"><span class=\"hljs-handlebars\"><span class=\"hljs-xml\">    template: '<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>',</span></span></span><br><span class=\"line\">  })</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">  })</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app2'</span>,</span></span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>這樣就會有兩個實例<br><a href=\"https://codepen.io/gleofgja/pen/NWNReXP?editors=1010\">codePen</a></p>\n<p><img src=\"https://i.imgur.com/AT9IjlF.png\"></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"component","path":"tags/component/"}],"excerpt":"","more":"<p>Vue 組件是預先定義好的模組，包含 html 的視覺元素、綁定的資料跟偵聽器..等等，類似 Vue 實例，組件的好處是可以重複使用，在開發上可以只專注在一小區塊，維護也很方便</p>\n<p><code>Vue.component</code> 前面會先傳入參數的名稱，後面的參數是 <code>option</code> ，<code>option</code> 是用模板 <code>template</code> 定義視覺元素，也直接在模板裡面去定義內容，舉例 : 在模板裡面定義 html 的內容 ( hello world ) ，然後在 html 裡面定義 <code>#app</code> 並在裡面放入 <code>my-component</code> 標籤，而 <code>my-component</code> 並非是 html 標籤，是我在 <code>Vue.component</code> 定義好的。</p>\n<p><code>Vue.component</code> 有個特別的規範，就是前面的參數要全小寫並加上「 - 」分開，請養成習慣!，同時 <code>Vue.component</code> 的宣告必須在 <code>new Vue</code> 之前</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 此為 Global 的 component  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#x27;,</span></span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此範例是全域都可以使用的<br><a href=\"https://codepen.io/gleofgja/pen/mdPEaEo?editors=1010\">codePen</a></p>\n<hr>\n<p>除了全域( Global )宣告以外還有 local 的宣告，它只會存在 Vue 實例裡面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">&#x27;my-component&#x27;</span>: &#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">        template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#x27;,</span></span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>new Vue</code> 裡面給一個屬性 <code>components</code> ，屬性的 <code>key</code> 是字串 key <code>my-component</code> 也是組件名稱<br><a href=\"https://codepen.io/gleofgja/pen/xxVEmOL?editors=1010\">codePen</a></p>\n<hr>\n<p>但是 local 有缺點，就是如果我宣告兩個 div ，但只會顯示一個</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">&#x27;my-component&#x27;</span>: &#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">        template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#x27;,</span></span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app2&#x27;</span>,</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>它只會顯示一個 div<br><img src=\"https://i.imgur.com/WhYn9TS.png\"></p>\n<p>那用 Global 宣告就不會有這問題</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app2&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#x27;,</span></span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app2&#x27;</span>,</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣就會有兩個實例<br><a href=\"https://codepen.io/gleofgja/pen/NWNReXP?editors=1010\">codePen</a></p>\n<p><img src=\"https://i.imgur.com/AT9IjlF.png\"></p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2>"},{"title":"在 Windows 上安裝 WSL1","date":"2020-12-16T16:00:00.000Z","description":"在 window 作業系統下執行 linux 指令","_content":" \n\n為了在 window 作業系統上執行 linux ，所以會需要安裝 WSL\nWSL 又有分1 跟 2，1 的話較為簡單，以下只示範 WSL1\n<!-- more -->\n---\n## 安裝 WSL1\n依照官網的**手動安裝步驟**\n用系統管理員身分開啟 PowerShell 並輸入:\n`dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart`\n\n如下圖\n![](https://i.imgur.com/FgEeIdc.jpg)\n\n然後再依照說明跳到**步驟6**，到 Microsoft Store 搜尋 Ubuntu ，這邊選用 18.04 LTS 的版本\n![](https://i.imgur.com/VTHHBhF.jpg)\n\n或是點選下面附上的連結也可以\n![](https://i.imgur.com/aPlBSSk.png)\n安裝好後再開啟 **Ubuntu 18.04 LTS**\n\n如果開啟後看到以下訊息也不要慌張~\n這代表我還未安裝 Windows 子系統\n```\nInstalling, this may take a few minutes...\nWslRegisterDistribution failed with error: 0x8007019e\nThe Windows Subsystem for Linux optional component is not enabled. Please enable it and try again.\nSee https://aka.ms/wslinstall for details.\nPress any key to continue...\n```\n![](https://i.imgur.com/2H0A0Ww.png)\n\n解決方法:\n用系統管理員開啟 PowerShell ，並輸入以下指令\n`Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux`\n![](https://i.imgur.com/wVsWMYa.png)\n\n<font color=#FF0000>這邊請不要急著按!!! 請先把該存檔的資料存檔在按 Y ，因為電腦會直接重新開機</font>\n\n重開後會顯示要輸入使用者名字跟密碼\n<font color=#FF0000>注意! 請不要輸入特殊字元，不然會叫你重新輸入</font>\n輸入密碼時會有第二次確認，而且螢幕不會顯示出來，所以請慢慢輸入~\n完成後會顯示下圖:\n![](https://i.imgur.com/YMn39pB.png)\n\n---\n## WSL2\nWSL2 官網有特別說明，若要更新至 WSL 2，必須是 **Windows 10**，除此之外組建編號必須是 <font color=#FF0000>18362.1049+</font> 或 <font color=#FF0000>18363.1049+</font>這兩種版本\n\n\n\n![](https://i.imgur.com/4GsUaf3.png)\n確認 window 10 的版本號，確認方法是:**按住 Windows + R 然後在對話方塊，接著輸入「winver」**\n就會出現下圖\n![](https://i.imgur.com/mKs4ll2.png)\n\n因我的組建編號不符，故不更新\n\n---\n## 參考資料\n[Windows 10 上適用於 Linux 的 Windows 子系統安裝指南](https://docs.microsoft.com/zh-tw/windows/wsl/install-win10)\n[win10自带Bash安装的坑（Error Code: 0x8007019e，0x8000000D）](https://zhuanlan.zhihu.com/p/47541491)\n[撰寫 Hexo 文章 - Markdown 語法大全](https://ed521.github.io/2019/08/hexo-markdown/)\n","source":"_posts/2020/WSL.md","raw":"---\ntitle: 在 Windows 上安裝 WSL1\ndate: 2020/12/17\ntags:  WSL1\ncategories: WSL1\ndescription: 在 window 作業系統下執行 linux 指令\n--- \n\n為了在 window 作業系統上執行 linux ，所以會需要安裝 WSL\nWSL 又有分1 跟 2，1 的話較為簡單，以下只示範 WSL1\n<!-- more -->\n---\n## 安裝 WSL1\n依照官網的**手動安裝步驟**\n用系統管理員身分開啟 PowerShell 並輸入:\n`dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart`\n\n如下圖\n![](https://i.imgur.com/FgEeIdc.jpg)\n\n然後再依照說明跳到**步驟6**，到 Microsoft Store 搜尋 Ubuntu ，這邊選用 18.04 LTS 的版本\n![](https://i.imgur.com/VTHHBhF.jpg)\n\n或是點選下面附上的連結也可以\n![](https://i.imgur.com/aPlBSSk.png)\n安裝好後再開啟 **Ubuntu 18.04 LTS**\n\n如果開啟後看到以下訊息也不要慌張~\n這代表我還未安裝 Windows 子系統\n```\nInstalling, this may take a few minutes...\nWslRegisterDistribution failed with error: 0x8007019e\nThe Windows Subsystem for Linux optional component is not enabled. Please enable it and try again.\nSee https://aka.ms/wslinstall for details.\nPress any key to continue...\n```\n![](https://i.imgur.com/2H0A0Ww.png)\n\n解決方法:\n用系統管理員開啟 PowerShell ，並輸入以下指令\n`Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux`\n![](https://i.imgur.com/wVsWMYa.png)\n\n<font color=#FF0000>這邊請不要急著按!!! 請先把該存檔的資料存檔在按 Y ，因為電腦會直接重新開機</font>\n\n重開後會顯示要輸入使用者名字跟密碼\n<font color=#FF0000>注意! 請不要輸入特殊字元，不然會叫你重新輸入</font>\n輸入密碼時會有第二次確認，而且螢幕不會顯示出來，所以請慢慢輸入~\n完成後會顯示下圖:\n![](https://i.imgur.com/YMn39pB.png)\n\n---\n## WSL2\nWSL2 官網有特別說明，若要更新至 WSL 2，必須是 **Windows 10**，除此之外組建編號必須是 <font color=#FF0000>18362.1049+</font> 或 <font color=#FF0000>18363.1049+</font>這兩種版本\n\n\n\n![](https://i.imgur.com/4GsUaf3.png)\n確認 window 10 的版本號，確認方法是:**按住 Windows + R 然後在對話方塊，接著輸入「winver」**\n就會出現下圖\n![](https://i.imgur.com/mKs4ll2.png)\n\n因我的組建編號不符，故不更新\n\n---\n## 參考資料\n[Windows 10 上適用於 Linux 的 Windows 子系統安裝指南](https://docs.microsoft.com/zh-tw/windows/wsl/install-win10)\n[win10自带Bash安装的坑（Error Code: 0x8007019e，0x8000000D）](https://zhuanlan.zhihu.com/p/47541491)\n[撰寫 Hexo 文章 - Markdown 語法大全](https://ed521.github.io/2019/08/hexo-markdown/)\n","slug":"WSL","published":1,"updated":"2021-03-26T16:13:11.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpm000tg0trcctvhba5","content":"<html><head></head><body><p>為了在 window 作業系統上執行 linux ，所以會需要安裝 WSL<br>WSL 又有分1 跟 2，1 的話較為簡單，以下只示範 WSL1</p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"安裝-WSL1\"><a href=\"#安裝-WSL1\" class=\"headerlink\" title=\"安裝 WSL1\"></a>安裝 WSL1</h2><p>依照官網的<strong>手動安裝步驟</strong><br>用系統管理員身分開啟 PowerShell 並輸入:<br><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code></p>\n<p>如下圖<br><img src=\"https://i.imgur.com/FgEeIdc.jpg\"></p>\n<p>然後再依照說明跳到<strong>步驟6</strong>，到 Microsoft Store 搜尋 Ubuntu ，這邊選用 18.04 LTS 的版本<br><img src=\"https://i.imgur.com/VTHHBhF.jpg\"></p>\n<p>或是點選下面附上的連結也可以<br><img src=\"https://i.imgur.com/aPlBSSk.png\"><br>安裝好後再開啟 <strong>Ubuntu 18.04 LTS</strong></p>\n<p>如果開啟後看到以下訊息也不要慌張~<br>這代表我還未安裝 Windows 子系統</p>\n<figure class=\"highlight plain hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installing, this may take a few minutes...</span><br><span class=\"line\">WslRegisterDistribution failed with error: 0x8007019e</span><br><span class=\"line\">The Windows Subsystem for Linux optional component is not enabled. Please enable it and try again.</span><br><span class=\"line\">See https://aka.ms/wslinstall for details.</span><br><span class=\"line\">Press any key to continue...</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/2H0A0Ww.png\"></p>\n<p>解決方法:<br>用系統管理員開啟 PowerShell ，並輸入以下指令<br><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code><br><img src=\"https://i.imgur.com/wVsWMYa.png\"></p>\n<p><font color=\"#FF0000\">這邊請不要急著按!!! 請先把該存檔的資料存檔在按 Y ，因為電腦會直接重新開機</font></p>\n<p>重開後會顯示要輸入使用者名字跟密碼<br><font color=\"#FF0000\">注意! 請不要輸入特殊字元，不然會叫你重新輸入</font><br>輸入密碼時會有第二次確認，而且螢幕不會顯示出來，所以請慢慢輸入~<br>完成後會顯示下圖:<br><img src=\"https://i.imgur.com/YMn39pB.png\"></p>\n<hr>\n<h2 id=\"WSL2\"><a href=\"#WSL2\" class=\"headerlink\" title=\"WSL2\"></a>WSL2</h2><p>WSL2 官網有特別說明，若要更新至 WSL 2，必須是 <strong>Windows 10</strong>，除此之外組建編號必須是 <font color=\"#FF0000\">18362.1049+</font> 或 <font color=\"#FF0000\">18363.1049+</font>這兩種版本</p>\n<p><img src=\"https://i.imgur.com/4GsUaf3.png\"><br>確認 window 10 的版本號，確認方法是:<strong>按住 Windows + R 然後在對話方塊，接著輸入「winver」</strong><br>就會出現下圖<br><img src=\"https://i.imgur.com/mKs4ll2.png\"></p>\n<p>因我的組建編號不符，故不更新</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://docs.microsoft.com/zh-tw/windows/wsl/install-win10\">Windows 10 上適用於 Linux 的 Windows 子系統安裝指南</a><br><a href=\"https://zhuanlan.zhihu.com/p/47541491\">win10自带Bash安装的坑（Error Code: 0x8007019e，0x8000000D）</a><br><a href=\"https://ed521.github.io/2019/08/hexo-markdown/\">撰寫 Hexo 文章 - Markdown 語法大全</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"WSL1","path":"categories/WSL1/"}],"_tags":[{"name":"WSL1","path":"tags/WSL1/"}],"excerpt":"<html><head></head><body><p>為了在 window 作業系統上執行 linux ，所以會需要安裝 WSL<br>WSL 又有分1 跟 2，1 的話較為簡單，以下只示範 WSL1</p></body></html>","more":"<hr>\n<h2 id=\"安裝-WSL1\"><a href=\"#安裝-WSL1\" class=\"headerlink\" title=\"安裝 WSL1\"></a>安裝 WSL1</h2><p>依照官網的<strong>手動安裝步驟</strong><br>用系統管理員身分開啟 PowerShell 並輸入:<br><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code></p>\n<p>如下圖<br><img src=\"https://i.imgur.com/FgEeIdc.jpg\"></p>\n<p>然後再依照說明跳到<strong>步驟6</strong>，到 Microsoft Store 搜尋 Ubuntu ，這邊選用 18.04 LTS 的版本<br><img src=\"https://i.imgur.com/VTHHBhF.jpg\"></p>\n<p>或是點選下面附上的連結也可以<br><img src=\"https://i.imgur.com/aPlBSSk.png\"><br>安裝好後再開啟 <strong>Ubuntu 18.04 LTS</strong></p>\n<p>如果開啟後看到以下訊息也不要慌張~<br>這代表我還未安裝 Windows 子系統</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Installing, this may take a few minutes...</span><br><span class=\"line\">WslRegisterDistribution failed with error: 0x8007019e</span><br><span class=\"line\">The Windows Subsystem for Linux optional component is not enabled. Please enable it and try again.</span><br><span class=\"line\">See https:&#x2F;&#x2F;aka.ms&#x2F;wslinstall for details.</span><br><span class=\"line\">Press any key to continue...</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/2H0A0Ww.png\"></p>\n<p>解決方法:<br>用系統管理員開啟 PowerShell ，並輸入以下指令<br><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code><br><img src=\"https://i.imgur.com/wVsWMYa.png\"></p>\n<p><font color=#FF0000>這邊請不要急著按!!! 請先把該存檔的資料存檔在按 Y ，因為電腦會直接重新開機</font></p>\n<p>重開後會顯示要輸入使用者名字跟密碼<br><font color=#FF0000>注意! 請不要輸入特殊字元，不然會叫你重新輸入</font><br>輸入密碼時會有第二次確認，而且螢幕不會顯示出來，所以請慢慢輸入~<br>完成後會顯示下圖:<br><img src=\"https://i.imgur.com/YMn39pB.png\"></p>\n<hr>\n<h2 id=\"WSL2\"><a href=\"#WSL2\" class=\"headerlink\" title=\"WSL2\"></a>WSL2</h2><p>WSL2 官網有特別說明，若要更新至 WSL 2，必須是 <strong>Windows 10</strong>，除此之外組建編號必須是 <font color=#FF0000>18362.1049+</font> 或 <font color=#FF0000>18363.1049+</font>這兩種版本</p>\n<p><img src=\"https://i.imgur.com/4GsUaf3.png\"><br>確認 window 10 的版本號，確認方法是:<strong>按住 Windows + R 然後在對話方塊，接著輸入「winver」</strong><br>就會出現下圖<br><img src=\"https://i.imgur.com/mKs4ll2.png\"></p>\n<p>因我的組建編號不符，故不更新</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://docs.microsoft.com/zh-tw/windows/wsl/install-win10\">Windows 10 上適用於 Linux 的 Windows 子系統安裝指南</a><br><a href=\"https://zhuanlan.zhihu.com/p/47541491\">win10自带Bash安装的坑（Error Code: 0x8007019e，0x8000000D）</a><br><a href=\"https://ed521.github.io/2019/08/hexo-markdown/\">撰寫 Hexo 文章 - Markdown 語法大全</a></p>"},{"title":"OWASP ZAP 網頁測試","date":"2020-12-14T16:00:00.000Z","description":"如何使用 ZAP 網頁滲透工具，測試網站的漏洞","_content":"\n## ZAP 網頁滲透工具\n\nZAP 測試分兩種方法: GUI 介面測試跟 Docker 測試\n到官網下載 [Cross Platform Package](https://www.zaproxy.org/download/) 測試程式(此版本為 2.9.0)\n\n<!-- more -->\n\n### GUI 介面測試\n\n開啟 GUI 前要先安裝 [jdk-8u271-windows-x64](https://www.oracle.com/tw/java/technologies/javase/javase-jdk8-downloads.html)，否則無法開啟，\n\n安裝好後將 Cross Platform Package 資料夾內 ZAP_2.9.0 檔開啟\n![](https://i.imgur.com/stovEwL.png)\n![](https://i.imgur.com/Al98tGQ.png)\n\n第一次開啟會問是否要將 session 存起來\n![](https://i.imgur.com/a8c3i5z.png)\n[圖片來源: EPH 的程式日記](https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/)\n\n開啟後要先設定 report 的儲存位置，\n這裡示範在桌面創建資料(report)夾並將檔名命名為 test\n![](https://i.imgur.com/Zeryray.png)\n\n設定 ok 後，按下 Save\n\n接下來左上角可以設定測試模式(這邊選用標準模式示範)，右邊視窗選擇掃描模式(這邊用自動掃描)\n![](https://i.imgur.com/jRxM6uQ.png)\n\n選擇自動掃描後，在將要測試的網址寫入\n![](https://i.imgur.com/X8axeQO.png)\n\n按下 Attack ，下面區塊就開始掃描了\n![](https://i.imgur.com/QRQpLS1.png)\n\n測試完成，左邊旗子的顏色就是威脅的等級，以下測出我們有一個中威脅跟三個低威脅\n(威脅等級分成高中低還有訊息，高威脅的旗子會是紅色的，中威脅的旗子是橘色，低威脅的旗子是黃色)\n![](https://i.imgur.com/Uv0BPEg.png)\n\n點開其中一個威脅，右邊視窗會跳出(由上而下)威脅等級、問題描述、解法跟可以參考的資料\n![](https://i.imgur.com/MkQC55j.png)\n\n然後再依照這些提示訊息加以修正\n\n以上是使用 GUI 介面測試的示範\n\n---\n\n## Docker ZAP 測試\n\n此測法較為詳細，[ZAP Docker Documentation](https://www.zaproxy.org/docs/docker/)\n掃描方法分成兩種\n\n### 開啟虛擬機\n\n[BIOS 開啟方法](https://ofeyhong.pixnet.net/blog/post/221133558)\n因為要使用 docker 就要到 BIOS 開啟虛擬機，回到桌面開啟工作管理員/效能，確認虛擬機是否有開啟，如下圖\n![](https://i.imgur.com/xcDrs8C.png)\n\n---\n\n### 安裝環境\n\n[Docker 官網](https://www.docker.com/get-started)下載 docker\n![](https://i.imgur.com/zOgNtC2.png)\n\n安裝\n![](https://i.imgur.com/Savy4T5.png)\n\n安裝好 docker 後，會要求重新開機\n\n接下來要用 cmd 測試，指令可參考 [ZAP Docker User Guide](https://www.zaproxy.org/docs/docker/about/)\n有穩定版跟每周更新版，這邊示範穩定版\n開啟 cmd 安裝 docker zap: `docker pull owasp/zap2docker-stable`\n\n等大概 5~10 分鐘，安裝好後如下圖\n![](https://i.imgur.com/yr8ncmq.png)\n\n這樣就可以開始測試了\n\n---\n\n### Baseline Scan\n\n[ZAP Docker Documentation](https://www.zaproxy.org/docs/docker/)\n\n如果只是單純測試的話可以參考官方給的範例:\n`docker run -t owasp/zap2docker-stable zap-baseline.py -t https://www.example.com`\n\n由於專案關係要將測試結果做成 report 並存到指定位置，所以將指令改寫成如下:\n`docker run -v C:\\Users\\ken.tseng\\Desktop\\zap:/zap/wrk/ -t owasp/zap2docker-stable zap-baseline.py -t https://xxxxxx.com/ -w report_md`\n\n將指令輸入並打開 docker ，確認是否有在 run\n![](https://i.imgur.com/TRDOX7S.png)\n前面測試大概會花 5~10 分鐘左右，只要 docker 顯示 RUNNING 就代表有在 Run\n\n以下為測結果\n\n```\nPASS: Cookie No HttpOnly Flag [10010]\nPASS: Cookie Without Secure Flag [10011]\nPASS: Cross-Domain JavaScript Source File Inclusion [10017]\nPASS: Content-Type Header Missing [10019]\nPASS: X-Frame-Options Header [10020]\nPASS: Information Disclosure - Debug Error Messages [10023]\nPASS: Information Disclosure - Sensitive Information in URL [10024]\nPASS: Information Disclosure - Sensitive Information in HTTP Referrer Header [10025]\nPASS: HTTP Parameter Override [10026]\nPASS: Information Disclosure - Suspicious Comments [10027]\nPASS: Open Redirect [10028]\nPASS: Cookie Poisoning [10029]\nPASS: User Controllable Charset [10030]\nPASS: User Controllable HTML Element Attribute (Potential XSS) [10031]\nPASS: Viewstate [10032]\nPASS: Directory Browsing [10033]\nPASS: Heartbleed OpenSSL Vulnerability (Indicative) [10034]\nPASS: X-Backend-Server Header Information Leak [10039]\nPASS: Secure Pages Include Mixed Content [10040]\nPASS: HTTP to HTTPS Insecure Transition in Form Post [10041]\nPASS: HTTPS to HTTP Insecure Transition in Form Post [10042]\nPASS: User Controllable JavaScript Event (XSS) [10043]\nPASS: Big Redirect Detected (Potential Sensitive Information Leak) [10044]\nPASS: Retrieved from Cache [10050]\nPASS: X-ChromeLogger-Data (XCOLD) Header Information Leak [10052]\nPASS: Cookie Without SameSite Attribute [10054]\nPASS: X-Debug-Token Information Leak [10056]\nPASS: Username Hash Found [10057]\nPASS: X-AspNet-Version Response Header [10061]\nPASS: PII Disclosure [10062]\nPASS: Timestamp Disclosure [10096]\nPASS: Hash Disclosure [10097]\nPASS: Cross-Domain Misconfiguration [10098]\nPASS: Weak Authentication Method [10105]\nPASS: Reverse Tabnabbing [10108]\nPASS: Modern Web Application [10109]\nPASS: Absence of Anti-CSRF Tokens [10202]\nPASS: Private IP Disclosure [2]\nPASS: Session ID in URL Rewrite [3]\nPASS: Script Passive Scan Rules [50001]\nPASS: Insecure JSF ViewState [90001]\nPASS: Charset Mismatch [90011]\nPASS: Application Error Disclosure [90022]\nPASS: Loosely Scoped Cookie [90033]\nWARN-NEW: Incomplete or No Cache-control and Pragma HTTP Header Set [10015] x 1\n        https://xxxxxx.com/ (200 OK)\nWARN-NEW: X-Content-Type-Options Header Missing [10021] x 2\n        https://xxxxxx.com/ (200 OK)\n        https://xxxxxx.com/favicon.ico (200 OK)\nWARN-NEW: Strict-Transport-Security Header Not Set [10035] x 4\n        https://xxxxxx.com/ (200 OK)\n        https://xxxxxx.com/robots.txt (404 Not Found)\n        https://xxxxxx.com/sitemap.xml (404 Not Found)\n        https://xxxxxx.com/favicon.ico (200 OK)\nWARN-NEW: Server Leaks Version Information via \"Server\" HTTP Response Header Field [10036] x 4\n        https://xxxxxx.com/ (200 OK)\n        https://xxxxxx.com/robots.txt (404 Not Found)\n        https://xxxxxx.com/sitemap.xml (404 Not Found)\n        https://xxxxxx.com/favicon.ico (200 OK)\nWARN-NEW: Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s) [10037] x 4\n        https://xxxxxx.com/ (200 OK)\n        https://xxxxxx.com/robots.txt (404 Not Found)\n        https://xxxxxx.com/sitemap.xml (404 Not Found)\n        https://xxxxxx.com/favicon.ico (200 OK)\nWARN-NEW: Content Security Policy (CSP) Header Not Set [10038] x 1\n        https://xxxxxx.com/ (200 OK)\nWARN-NEW: CSP: Wildcard Directive [10055] x 2\n        https://xxxxxx.com/robots.txt (404 Not Found)\n        https://xxxxxx.com/sitemap.xml (404 Not Found)\nFAIL-NEW: 0     FAIL-INPROG: 0  WARN-NEW: 7     WARN-INPROG: 0  INFO: 0 IGNORE: 0PASS: 44\n```\n\n測出結果有 7 項 WARN-NEW ，後面顯示有問題的項目提示，WARN-NEW 下面顯示的是有問題的 URL 有哪些，詳細的弱點描述跟解法資訊請看 report\n\n---\n\n## 參考資料\n\n[官方文件](https://www.zaproxy.org/docs/)\n[用 OWASP ZAP 做滲透測試，找尋網站可能的弱點](https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/)\n[EPH 的程式日記](https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/)\n","source":"_posts/2020/ZAP.md","raw":"---\ntitle: OWASP ZAP 網頁測試\ndate: 2020/12/15\ntags: OWASP\ncategories: ZAP\ndescription: 如何使用 ZAP 網頁滲透工具，測試網站的漏洞\n---\n\n## ZAP 網頁滲透工具\n\nZAP 測試分兩種方法: GUI 介面測試跟 Docker 測試\n到官網下載 [Cross Platform Package](https://www.zaproxy.org/download/) 測試程式(此版本為 2.9.0)\n\n<!-- more -->\n\n### GUI 介面測試\n\n開啟 GUI 前要先安裝 [jdk-8u271-windows-x64](https://www.oracle.com/tw/java/technologies/javase/javase-jdk8-downloads.html)，否則無法開啟，\n\n安裝好後將 Cross Platform Package 資料夾內 ZAP_2.9.0 檔開啟\n![](https://i.imgur.com/stovEwL.png)\n![](https://i.imgur.com/Al98tGQ.png)\n\n第一次開啟會問是否要將 session 存起來\n![](https://i.imgur.com/a8c3i5z.png)\n[圖片來源: EPH 的程式日記](https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/)\n\n開啟後要先設定 report 的儲存位置，\n這裡示範在桌面創建資料(report)夾並將檔名命名為 test\n![](https://i.imgur.com/Zeryray.png)\n\n設定 ok 後，按下 Save\n\n接下來左上角可以設定測試模式(這邊選用標準模式示範)，右邊視窗選擇掃描模式(這邊用自動掃描)\n![](https://i.imgur.com/jRxM6uQ.png)\n\n選擇自動掃描後，在將要測試的網址寫入\n![](https://i.imgur.com/X8axeQO.png)\n\n按下 Attack ，下面區塊就開始掃描了\n![](https://i.imgur.com/QRQpLS1.png)\n\n測試完成，左邊旗子的顏色就是威脅的等級，以下測出我們有一個中威脅跟三個低威脅\n(威脅等級分成高中低還有訊息，高威脅的旗子會是紅色的，中威脅的旗子是橘色，低威脅的旗子是黃色)\n![](https://i.imgur.com/Uv0BPEg.png)\n\n點開其中一個威脅，右邊視窗會跳出(由上而下)威脅等級、問題描述、解法跟可以參考的資料\n![](https://i.imgur.com/MkQC55j.png)\n\n然後再依照這些提示訊息加以修正\n\n以上是使用 GUI 介面測試的示範\n\n---\n\n## Docker ZAP 測試\n\n此測法較為詳細，[ZAP Docker Documentation](https://www.zaproxy.org/docs/docker/)\n掃描方法分成兩種\n\n### 開啟虛擬機\n\n[BIOS 開啟方法](https://ofeyhong.pixnet.net/blog/post/221133558)\n因為要使用 docker 就要到 BIOS 開啟虛擬機，回到桌面開啟工作管理員/效能，確認虛擬機是否有開啟，如下圖\n![](https://i.imgur.com/xcDrs8C.png)\n\n---\n\n### 安裝環境\n\n[Docker 官網](https://www.docker.com/get-started)下載 docker\n![](https://i.imgur.com/zOgNtC2.png)\n\n安裝\n![](https://i.imgur.com/Savy4T5.png)\n\n安裝好 docker 後，會要求重新開機\n\n接下來要用 cmd 測試，指令可參考 [ZAP Docker User Guide](https://www.zaproxy.org/docs/docker/about/)\n有穩定版跟每周更新版，這邊示範穩定版\n開啟 cmd 安裝 docker zap: `docker pull owasp/zap2docker-stable`\n\n等大概 5~10 分鐘，安裝好後如下圖\n![](https://i.imgur.com/yr8ncmq.png)\n\n這樣就可以開始測試了\n\n---\n\n### Baseline Scan\n\n[ZAP Docker Documentation](https://www.zaproxy.org/docs/docker/)\n\n如果只是單純測試的話可以參考官方給的範例:\n`docker run -t owasp/zap2docker-stable zap-baseline.py -t https://www.example.com`\n\n由於專案關係要將測試結果做成 report 並存到指定位置，所以將指令改寫成如下:\n`docker run -v C:\\Users\\ken.tseng\\Desktop\\zap:/zap/wrk/ -t owasp/zap2docker-stable zap-baseline.py -t https://xxxxxx.com/ -w report_md`\n\n將指令輸入並打開 docker ，確認是否有在 run\n![](https://i.imgur.com/TRDOX7S.png)\n前面測試大概會花 5~10 分鐘左右，只要 docker 顯示 RUNNING 就代表有在 Run\n\n以下為測結果\n\n```\nPASS: Cookie No HttpOnly Flag [10010]\nPASS: Cookie Without Secure Flag [10011]\nPASS: Cross-Domain JavaScript Source File Inclusion [10017]\nPASS: Content-Type Header Missing [10019]\nPASS: X-Frame-Options Header [10020]\nPASS: Information Disclosure - Debug Error Messages [10023]\nPASS: Information Disclosure - Sensitive Information in URL [10024]\nPASS: Information Disclosure - Sensitive Information in HTTP Referrer Header [10025]\nPASS: HTTP Parameter Override [10026]\nPASS: Information Disclosure - Suspicious Comments [10027]\nPASS: Open Redirect [10028]\nPASS: Cookie Poisoning [10029]\nPASS: User Controllable Charset [10030]\nPASS: User Controllable HTML Element Attribute (Potential XSS) [10031]\nPASS: Viewstate [10032]\nPASS: Directory Browsing [10033]\nPASS: Heartbleed OpenSSL Vulnerability (Indicative) [10034]\nPASS: X-Backend-Server Header Information Leak [10039]\nPASS: Secure Pages Include Mixed Content [10040]\nPASS: HTTP to HTTPS Insecure Transition in Form Post [10041]\nPASS: HTTPS to HTTP Insecure Transition in Form Post [10042]\nPASS: User Controllable JavaScript Event (XSS) [10043]\nPASS: Big Redirect Detected (Potential Sensitive Information Leak) [10044]\nPASS: Retrieved from Cache [10050]\nPASS: X-ChromeLogger-Data (XCOLD) Header Information Leak [10052]\nPASS: Cookie Without SameSite Attribute [10054]\nPASS: X-Debug-Token Information Leak [10056]\nPASS: Username Hash Found [10057]\nPASS: X-AspNet-Version Response Header [10061]\nPASS: PII Disclosure [10062]\nPASS: Timestamp Disclosure [10096]\nPASS: Hash Disclosure [10097]\nPASS: Cross-Domain Misconfiguration [10098]\nPASS: Weak Authentication Method [10105]\nPASS: Reverse Tabnabbing [10108]\nPASS: Modern Web Application [10109]\nPASS: Absence of Anti-CSRF Tokens [10202]\nPASS: Private IP Disclosure [2]\nPASS: Session ID in URL Rewrite [3]\nPASS: Script Passive Scan Rules [50001]\nPASS: Insecure JSF ViewState [90001]\nPASS: Charset Mismatch [90011]\nPASS: Application Error Disclosure [90022]\nPASS: Loosely Scoped Cookie [90033]\nWARN-NEW: Incomplete or No Cache-control and Pragma HTTP Header Set [10015] x 1\n        https://xxxxxx.com/ (200 OK)\nWARN-NEW: X-Content-Type-Options Header Missing [10021] x 2\n        https://xxxxxx.com/ (200 OK)\n        https://xxxxxx.com/favicon.ico (200 OK)\nWARN-NEW: Strict-Transport-Security Header Not Set [10035] x 4\n        https://xxxxxx.com/ (200 OK)\n        https://xxxxxx.com/robots.txt (404 Not Found)\n        https://xxxxxx.com/sitemap.xml (404 Not Found)\n        https://xxxxxx.com/favicon.ico (200 OK)\nWARN-NEW: Server Leaks Version Information via \"Server\" HTTP Response Header Field [10036] x 4\n        https://xxxxxx.com/ (200 OK)\n        https://xxxxxx.com/robots.txt (404 Not Found)\n        https://xxxxxx.com/sitemap.xml (404 Not Found)\n        https://xxxxxx.com/favicon.ico (200 OK)\nWARN-NEW: Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s) [10037] x 4\n        https://xxxxxx.com/ (200 OK)\n        https://xxxxxx.com/robots.txt (404 Not Found)\n        https://xxxxxx.com/sitemap.xml (404 Not Found)\n        https://xxxxxx.com/favicon.ico (200 OK)\nWARN-NEW: Content Security Policy (CSP) Header Not Set [10038] x 1\n        https://xxxxxx.com/ (200 OK)\nWARN-NEW: CSP: Wildcard Directive [10055] x 2\n        https://xxxxxx.com/robots.txt (404 Not Found)\n        https://xxxxxx.com/sitemap.xml (404 Not Found)\nFAIL-NEW: 0     FAIL-INPROG: 0  WARN-NEW: 7     WARN-INPROG: 0  INFO: 0 IGNORE: 0PASS: 44\n```\n\n測出結果有 7 項 WARN-NEW ，後面顯示有問題的項目提示，WARN-NEW 下面顯示的是有問題的 URL 有哪些，詳細的弱點描述跟解法資訊請看 report\n\n---\n\n## 參考資料\n\n[官方文件](https://www.zaproxy.org/docs/)\n[用 OWASP ZAP 做滲透測試，找尋網站可能的弱點](https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/)\n[EPH 的程式日記](https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/)\n","slug":"ZAP","published":1,"updated":"2021-03-26T16:13:11.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpr000wg0tr01jtao7x","content":"<html><head></head><body><h2 id=\"ZAP-網頁滲透工具\"><a href=\"#ZAP-網頁滲透工具\" class=\"headerlink\" title=\"ZAP 網頁滲透工具\"></a>ZAP 網頁滲透工具</h2><p>ZAP 測試分兩種方法: GUI 介面測試跟 Docker 測試<br>到官網下載 <a href=\"https://www.zaproxy.org/download/\">Cross Platform Package</a> 測試程式(此版本為 2.9.0)</p>\n<a id=\"more\"></a>\n\n<h3 id=\"GUI-介面測試\"><a href=\"#GUI-介面測試\" class=\"headerlink\" title=\"GUI 介面測試\"></a>GUI 介面測試</h3><p>開啟 GUI 前要先安裝 <a href=\"https://www.oracle.com/tw/java/technologies/javase/javase-jdk8-downloads.html\">jdk-8u271-windows-x64</a>，否則無法開啟，</p>\n<p>安裝好後將 Cross Platform Package 資料夾內 ZAP_2.9.0 檔開啟<br><img src=\"https://i.imgur.com/stovEwL.png\"><br><img src=\"https://i.imgur.com/Al98tGQ.png\"></p>\n<p>第一次開啟會問是否要將 session 存起來<br><img src=\"https://i.imgur.com/a8c3i5z.png\"><br><a href=\"https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/\">圖片來源: EPH 的程式日記</a></p>\n<p>開啟後要先設定 report 的儲存位置，<br>這裡示範在桌面創建資料(report)夾並將檔名命名為 test<br><img src=\"https://i.imgur.com/Zeryray.png\"></p>\n<p>設定 ok 後，按下 Save</p>\n<p>接下來左上角可以設定測試模式(這邊選用標準模式示範)，右邊視窗選擇掃描模式(這邊用自動掃描)<br><img src=\"https://i.imgur.com/jRxM6uQ.png\"></p>\n<p>選擇自動掃描後，在將要測試的網址寫入<br><img src=\"https://i.imgur.com/X8axeQO.png\"></p>\n<p>按下 Attack ，下面區塊就開始掃描了<br><img src=\"https://i.imgur.com/QRQpLS1.png\"></p>\n<p>測試完成，左邊旗子的顏色就是威脅的等級，以下測出我們有一個中威脅跟三個低威脅<br>(威脅等級分成高中低還有訊息，高威脅的旗子會是紅色的，中威脅的旗子是橘色，低威脅的旗子是黃色)<br><img src=\"https://i.imgur.com/Uv0BPEg.png\"></p>\n<p>點開其中一個威脅，右邊視窗會跳出(由上而下)威脅等級、問題描述、解法跟可以參考的資料<br><img src=\"https://i.imgur.com/MkQC55j.png\"></p>\n<p>然後再依照這些提示訊息加以修正</p>\n<p>以上是使用 GUI 介面測試的示範</p>\n<hr>\n<h2 id=\"Docker-ZAP-測試\"><a href=\"#Docker-ZAP-測試\" class=\"headerlink\" title=\"Docker ZAP 測試\"></a>Docker ZAP 測試</h2><p>此測法較為詳細，<a href=\"https://www.zaproxy.org/docs/docker/\">ZAP Docker Documentation</a><br>掃描方法分成兩種</p>\n<h3 id=\"開啟虛擬機\"><a href=\"#開啟虛擬機\" class=\"headerlink\" title=\"開啟虛擬機\"></a>開啟虛擬機</h3><p><a href=\"https://ofeyhong.pixnet.net/blog/post/221133558\">BIOS 開啟方法</a><br>因為要使用 docker 就要到 BIOS 開啟虛擬機，回到桌面開啟工作管理員/效能，確認虛擬機是否有開啟，如下圖<br><img src=\"https://i.imgur.com/xcDrs8C.png\"></p>\n<hr>\n<h3 id=\"安裝環境\"><a href=\"#安裝環境\" class=\"headerlink\" title=\"安裝環境\"></a>安裝環境</h3><p><a href=\"https://www.docker.com/get-started\">Docker 官網</a>下載 docker<br><img src=\"https://i.imgur.com/zOgNtC2.png\"></p>\n<p>安裝<br><img src=\"https://i.imgur.com/Savy4T5.png\"></p>\n<p>安裝好 docker 後，會要求重新開機</p>\n<p>接下來要用 cmd 測試，指令可參考 <a href=\"https://www.zaproxy.org/docs/docker/about/\">ZAP Docker User Guide</a><br>有穩定版跟每周更新版，這邊示範穩定版<br>開啟 cmd 安裝 docker zap: <code>docker pull owasp/zap2docker-stable</code></p>\n<p>等大概 5~10 分鐘，安裝好後如下圖<br><img src=\"https://i.imgur.com/yr8ncmq.png\"></p>\n<p>這樣就可以開始測試了</p>\n<hr>\n<h3 id=\"Baseline-Scan\"><a href=\"#Baseline-Scan\" class=\"headerlink\" title=\"Baseline Scan\"></a>Baseline Scan</h3><p><a href=\"https://www.zaproxy.org/docs/docker/\">ZAP Docker Documentation</a></p>\n<p>如果只是單純測試的話可以參考官方給的範例:<br><code>docker run -t owasp/zap2docker-stable zap-baseline.py -t https://www.example.com</code></p>\n<p>由於專案關係要將測試結果做成 report 並存到指定位置，所以將指令改寫成如下:<br><code>docker run -v C:\\Users\\ken.tseng\\Desktop\\zap:/zap/wrk/ -t owasp/zap2docker-stable zap-baseline.py -t https://xxxxxx.com/ -w report_md</code></p>\n<p>將指令輸入並打開 docker ，確認是否有在 run<br><img src=\"https://i.imgur.com/TRDOX7S.png\"><br>前面測試大概會花 5~10 分鐘左右，只要 docker 顯示 RUNNING 就代表有在 Run</p>\n<p>以下為測結果</p>\n<figure class=\"highlight plain hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PASS: Cookie No HttpOnly Flag [10010]</span><br><span class=\"line\">PASS: Cookie Without Secure Flag [10011]</span><br><span class=\"line\">PASS: Cross-Domain JavaScript Source File Inclusion [10017]</span><br><span class=\"line\">PASS: Content-Type Header Missing [10019]</span><br><span class=\"line\">PASS: X-Frame-Options Header [10020]</span><br><span class=\"line\">PASS: Information Disclosure - Debug Error Messages [10023]</span><br><span class=\"line\">PASS: Information Disclosure - Sensitive Information in URL [10024]</span><br><span class=\"line\">PASS: Information Disclosure - Sensitive Information in HTTP Referrer Header [10025]</span><br><span class=\"line\">PASS: HTTP Parameter Override [10026]</span><br><span class=\"line\">PASS: Information Disclosure - Suspicious Comments [10027]</span><br><span class=\"line\">PASS: Open Redirect [10028]</span><br><span class=\"line\">PASS: Cookie Poisoning [10029]</span><br><span class=\"line\">PASS: User Controllable Charset [10030]</span><br><span class=\"line\">PASS: User Controllable HTML Element Attribute (Potential XSS) [10031]</span><br><span class=\"line\">PASS: Viewstate [10032]</span><br><span class=\"line\">PASS: Directory Browsing [10033]</span><br><span class=\"line\">PASS: Heartbleed OpenSSL Vulnerability (Indicative) [10034]</span><br><span class=\"line\">PASS: X-Backend-Server Header Information Leak [10039]</span><br><span class=\"line\">PASS: Secure Pages Include Mixed Content [10040]</span><br><span class=\"line\">PASS: HTTP to HTTPS Insecure Transition in Form Post [10041]</span><br><span class=\"line\">PASS: HTTPS to HTTP Insecure Transition in Form Post [10042]</span><br><span class=\"line\">PASS: User Controllable JavaScript Event (XSS) [10043]</span><br><span class=\"line\">PASS: Big Redirect Detected (Potential Sensitive Information Leak) [10044]</span><br><span class=\"line\">PASS: Retrieved from Cache [10050]</span><br><span class=\"line\">PASS: X-ChromeLogger-Data (XCOLD) Header Information Leak [10052]</span><br><span class=\"line\">PASS: Cookie Without SameSite Attribute [10054]</span><br><span class=\"line\">PASS: X-Debug-Token Information Leak [10056]</span><br><span class=\"line\">PASS: Username Hash Found [10057]</span><br><span class=\"line\">PASS: X-AspNet-Version Response Header [10061]</span><br><span class=\"line\">PASS: PII Disclosure [10062]</span><br><span class=\"line\">PASS: Timestamp Disclosure [10096]</span><br><span class=\"line\">PASS: Hash Disclosure [10097]</span><br><span class=\"line\">PASS: Cross-Domain Misconfiguration [10098]</span><br><span class=\"line\">PASS: Weak Authentication Method [10105]</span><br><span class=\"line\">PASS: Reverse Tabnabbing [10108]</span><br><span class=\"line\">PASS: Modern Web Application [10109]</span><br><span class=\"line\">PASS: Absence of Anti-CSRF Tokens [10202]</span><br><span class=\"line\">PASS: Private IP Disclosure [2]</span><br><span class=\"line\">PASS: Session ID in URL Rewrite [3]</span><br><span class=\"line\">PASS: Script Passive Scan Rules [50001]</span><br><span class=\"line\">PASS: Insecure JSF ViewState [90001]</span><br><span class=\"line\">PASS: Charset Mismatch [90011]</span><br><span class=\"line\">PASS: Application Error Disclosure [90022]</span><br><span class=\"line\">PASS: Loosely Scoped Cookie [90033]</span><br><span class=\"line\">WARN-NEW: Incomplete or No Cache-control and Pragma HTTP Header Set [10015] x 1</span><br><span class=\"line\">        https://xxxxxx.com/ (200 OK)</span><br><span class=\"line\">WARN-NEW: X-Content-Type-Options Header Missing [10021] x 2</span><br><span class=\"line\">        https://xxxxxx.com/ (200 OK)</span><br><span class=\"line\">        https://xxxxxx.com/favicon.ico (200 OK)</span><br><span class=\"line\">WARN-NEW: Strict-Transport-Security Header Not Set [10035] x 4</span><br><span class=\"line\">        https://xxxxxx.com/ (200 OK)</span><br><span class=\"line\">        https://xxxxxx.com/robots.txt (404 Not Found)</span><br><span class=\"line\">        https://xxxxxx.com/sitemap.xml (404 Not Found)</span><br><span class=\"line\">        https://xxxxxx.com/favicon.ico (200 OK)</span><br><span class=\"line\">WARN-NEW: Server Leaks Version Information via \"Server\" HTTP Response Header Field [10036] x 4</span><br><span class=\"line\">        https://xxxxxx.com/ (200 OK)</span><br><span class=\"line\">        https://xxxxxx.com/robots.txt (404 Not Found)</span><br><span class=\"line\">        https://xxxxxx.com/sitemap.xml (404 Not Found)</span><br><span class=\"line\">        https://xxxxxx.com/favicon.ico (200 OK)</span><br><span class=\"line\">WARN-NEW: Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s) [10037] x 4</span><br><span class=\"line\">        https://xxxxxx.com/ (200 OK)</span><br><span class=\"line\">        https://xxxxxx.com/robots.txt (404 Not Found)</span><br><span class=\"line\">        https://xxxxxx.com/sitemap.xml (404 Not Found)</span><br><span class=\"line\">        https://xxxxxx.com/favicon.ico (200 OK)</span><br><span class=\"line\">WARN-NEW: Content Security Policy (CSP) Header Not Set [10038] x 1</span><br><span class=\"line\">        https://xxxxxx.com/ (200 OK)</span><br><span class=\"line\">WARN-NEW: CSP: Wildcard Directive [10055] x 2</span><br><span class=\"line\">        https://xxxxxx.com/robots.txt (404 Not Found)</span><br><span class=\"line\">        https://xxxxxx.com/sitemap.xml (404 Not Found)</span><br><span class=\"line\">FAIL-NEW: 0     FAIL-INPROG: 0  WARN-NEW: 7     WARN-INPROG: 0  INFO: 0 IGNORE: 0PASS: 44</span><br></pre></td></tr></tbody></table></figure>\n\n<p>測出結果有 7 項 WARN-NEW ，後面顯示有問題的項目提示，WARN-NEW 下面顯示的是有問題的 URL 有哪些，詳細的弱點描述跟解法資訊請看 report</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.zaproxy.org/docs/\">官方文件</a><br><a href=\"https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/\">用 OWASP ZAP 做滲透測試，找尋網站可能的弱點</a><br><a href=\"https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/\">EPH 的程式日記</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"ZAP","path":"categories/ZAP/"}],"_tags":[{"name":"OWASP","path":"tags/OWASP/"}],"excerpt":"<html><head></head><body><h2 id=\"ZAP-網頁滲透工具\"><a href=\"#ZAP-網頁滲透工具\" class=\"headerlink\" title=\"ZAP 網頁滲透工具\"></a>ZAP 網頁滲透工具</h2><p>ZAP 測試分兩種方法: GUI 介面測試跟 Docker 測試<br>到官網下載 <a href=\"https://www.zaproxy.org/download/\">Cross Platform Package</a> 測試程式(此版本為 2.9.0)</p></body></html>","more":"<h3 id=\"GUI-介面測試\"><a href=\"#GUI-介面測試\" class=\"headerlink\" title=\"GUI 介面測試\"></a>GUI 介面測試</h3><p>開啟 GUI 前要先安裝 <a href=\"https://www.oracle.com/tw/java/technologies/javase/javase-jdk8-downloads.html\">jdk-8u271-windows-x64</a>，否則無法開啟，</p>\n<p>安裝好後將 Cross Platform Package 資料夾內 ZAP_2.9.0 檔開啟<br><img src=\"https://i.imgur.com/stovEwL.png\"><br><img src=\"https://i.imgur.com/Al98tGQ.png\"></p>\n<p>第一次開啟會問是否要將 session 存起來<br><img src=\"https://i.imgur.com/a8c3i5z.png\"><br><a href=\"https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/\">圖片來源: EPH 的程式日記</a></p>\n<p>開啟後要先設定 report 的儲存位置，<br>這裡示範在桌面創建資料(report)夾並將檔名命名為 test<br><img src=\"https://i.imgur.com/Zeryray.png\"></p>\n<p>設定 ok 後，按下 Save</p>\n<p>接下來左上角可以設定測試模式(這邊選用標準模式示範)，右邊視窗選擇掃描模式(這邊用自動掃描)<br><img src=\"https://i.imgur.com/jRxM6uQ.png\"></p>\n<p>選擇自動掃描後，在將要測試的網址寫入<br><img src=\"https://i.imgur.com/X8axeQO.png\"></p>\n<p>按下 Attack ，下面區塊就開始掃描了<br><img src=\"https://i.imgur.com/QRQpLS1.png\"></p>\n<p>測試完成，左邊旗子的顏色就是威脅的等級，以下測出我們有一個中威脅跟三個低威脅<br>(威脅等級分成高中低還有訊息，高威脅的旗子會是紅色的，中威脅的旗子是橘色，低威脅的旗子是黃色)<br><img src=\"https://i.imgur.com/Uv0BPEg.png\"></p>\n<p>點開其中一個威脅，右邊視窗會跳出(由上而下)威脅等級、問題描述、解法跟可以參考的資料<br><img src=\"https://i.imgur.com/MkQC55j.png\"></p>\n<p>然後再依照這些提示訊息加以修正</p>\n<p>以上是使用 GUI 介面測試的示範</p>\n<hr>\n<h2 id=\"Docker-ZAP-測試\"><a href=\"#Docker-ZAP-測試\" class=\"headerlink\" title=\"Docker ZAP 測試\"></a>Docker ZAP 測試</h2><p>此測法較為詳細，<a href=\"https://www.zaproxy.org/docs/docker/\">ZAP Docker Documentation</a><br>掃描方法分成兩種</p>\n<h3 id=\"開啟虛擬機\"><a href=\"#開啟虛擬機\" class=\"headerlink\" title=\"開啟虛擬機\"></a>開啟虛擬機</h3><p><a href=\"https://ofeyhong.pixnet.net/blog/post/221133558\">BIOS 開啟方法</a><br>因為要使用 docker 就要到 BIOS 開啟虛擬機，回到桌面開啟工作管理員/效能，確認虛擬機是否有開啟，如下圖<br><img src=\"https://i.imgur.com/xcDrs8C.png\"></p>\n<hr>\n<h3 id=\"安裝環境\"><a href=\"#安裝環境\" class=\"headerlink\" title=\"安裝環境\"></a>安裝環境</h3><p><a href=\"https://www.docker.com/get-started\">Docker 官網</a>下載 docker<br><img src=\"https://i.imgur.com/zOgNtC2.png\"></p>\n<p>安裝<br><img src=\"https://i.imgur.com/Savy4T5.png\"></p>\n<p>安裝好 docker 後，會要求重新開機</p>\n<p>接下來要用 cmd 測試，指令可參考 <a href=\"https://www.zaproxy.org/docs/docker/about/\">ZAP Docker User Guide</a><br>有穩定版跟每周更新版，這邊示範穩定版<br>開啟 cmd 安裝 docker zap: <code>docker pull owasp/zap2docker-stable</code></p>\n<p>等大概 5~10 分鐘，安裝好後如下圖<br><img src=\"https://i.imgur.com/yr8ncmq.png\"></p>\n<p>這樣就可以開始測試了</p>\n<hr>\n<h3 id=\"Baseline-Scan\"><a href=\"#Baseline-Scan\" class=\"headerlink\" title=\"Baseline Scan\"></a>Baseline Scan</h3><p><a href=\"https://www.zaproxy.org/docs/docker/\">ZAP Docker Documentation</a></p>\n<p>如果只是單純測試的話可以參考官方給的範例:<br><code>docker run -t owasp/zap2docker-stable zap-baseline.py -t https://www.example.com</code></p>\n<p>由於專案關係要將測試結果做成 report 並存到指定位置，所以將指令改寫成如下:<br><code>docker run -v C:\\Users\\ken.tseng\\Desktop\\zap:/zap/wrk/ -t owasp/zap2docker-stable zap-baseline.py -t https://xxxxxx.com/ -w report_md</code></p>\n<p>將指令輸入並打開 docker ，確認是否有在 run<br><img src=\"https://i.imgur.com/TRDOX7S.png\"><br>前面測試大概會花 5~10 分鐘左右，只要 docker 顯示 RUNNING 就代表有在 Run</p>\n<p>以下為測結果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PASS: Cookie No HttpOnly Flag [10010]</span><br><span class=\"line\">PASS: Cookie Without Secure Flag [10011]</span><br><span class=\"line\">PASS: Cross-Domain JavaScript Source File Inclusion [10017]</span><br><span class=\"line\">PASS: Content-Type Header Missing [10019]</span><br><span class=\"line\">PASS: X-Frame-Options Header [10020]</span><br><span class=\"line\">PASS: Information Disclosure - Debug Error Messages [10023]</span><br><span class=\"line\">PASS: Information Disclosure - Sensitive Information in URL [10024]</span><br><span class=\"line\">PASS: Information Disclosure - Sensitive Information in HTTP Referrer Header [10025]</span><br><span class=\"line\">PASS: HTTP Parameter Override [10026]</span><br><span class=\"line\">PASS: Information Disclosure - Suspicious Comments [10027]</span><br><span class=\"line\">PASS: Open Redirect [10028]</span><br><span class=\"line\">PASS: Cookie Poisoning [10029]</span><br><span class=\"line\">PASS: User Controllable Charset [10030]</span><br><span class=\"line\">PASS: User Controllable HTML Element Attribute (Potential XSS) [10031]</span><br><span class=\"line\">PASS: Viewstate [10032]</span><br><span class=\"line\">PASS: Directory Browsing [10033]</span><br><span class=\"line\">PASS: Heartbleed OpenSSL Vulnerability (Indicative) [10034]</span><br><span class=\"line\">PASS: X-Backend-Server Header Information Leak [10039]</span><br><span class=\"line\">PASS: Secure Pages Include Mixed Content [10040]</span><br><span class=\"line\">PASS: HTTP to HTTPS Insecure Transition in Form Post [10041]</span><br><span class=\"line\">PASS: HTTPS to HTTP Insecure Transition in Form Post [10042]</span><br><span class=\"line\">PASS: User Controllable JavaScript Event (XSS) [10043]</span><br><span class=\"line\">PASS: Big Redirect Detected (Potential Sensitive Information Leak) [10044]</span><br><span class=\"line\">PASS: Retrieved from Cache [10050]</span><br><span class=\"line\">PASS: X-ChromeLogger-Data (XCOLD) Header Information Leak [10052]</span><br><span class=\"line\">PASS: Cookie Without SameSite Attribute [10054]</span><br><span class=\"line\">PASS: X-Debug-Token Information Leak [10056]</span><br><span class=\"line\">PASS: Username Hash Found [10057]</span><br><span class=\"line\">PASS: X-AspNet-Version Response Header [10061]</span><br><span class=\"line\">PASS: PII Disclosure [10062]</span><br><span class=\"line\">PASS: Timestamp Disclosure [10096]</span><br><span class=\"line\">PASS: Hash Disclosure [10097]</span><br><span class=\"line\">PASS: Cross-Domain Misconfiguration [10098]</span><br><span class=\"line\">PASS: Weak Authentication Method [10105]</span><br><span class=\"line\">PASS: Reverse Tabnabbing [10108]</span><br><span class=\"line\">PASS: Modern Web Application [10109]</span><br><span class=\"line\">PASS: Absence of Anti-CSRF Tokens [10202]</span><br><span class=\"line\">PASS: Private IP Disclosure [2]</span><br><span class=\"line\">PASS: Session ID in URL Rewrite [3]</span><br><span class=\"line\">PASS: Script Passive Scan Rules [50001]</span><br><span class=\"line\">PASS: Insecure JSF ViewState [90001]</span><br><span class=\"line\">PASS: Charset Mismatch [90011]</span><br><span class=\"line\">PASS: Application Error Disclosure [90022]</span><br><span class=\"line\">PASS: Loosely Scoped Cookie [90033]</span><br><span class=\"line\">WARN-NEW: Incomplete or No Cache-control and Pragma HTTP Header Set [10015] x 1</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F; (200 OK)</span><br><span class=\"line\">WARN-NEW: X-Content-Type-Options Header Missing [10021] x 2</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F; (200 OK)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;favicon.ico (200 OK)</span><br><span class=\"line\">WARN-NEW: Strict-Transport-Security Header Not Set [10035] x 4</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F; (200 OK)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;robots.txt (404 Not Found)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;sitemap.xml (404 Not Found)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;favicon.ico (200 OK)</span><br><span class=\"line\">WARN-NEW: Server Leaks Version Information via &quot;Server&quot; HTTP Response Header Field [10036] x 4</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F; (200 OK)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;robots.txt (404 Not Found)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;sitemap.xml (404 Not Found)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;favicon.ico (200 OK)</span><br><span class=\"line\">WARN-NEW: Server Leaks Information via &quot;X-Powered-By&quot; HTTP Response Header Field(s) [10037] x 4</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F; (200 OK)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;robots.txt (404 Not Found)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;sitemap.xml (404 Not Found)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;favicon.ico (200 OK)</span><br><span class=\"line\">WARN-NEW: Content Security Policy (CSP) Header Not Set [10038] x 1</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F; (200 OK)</span><br><span class=\"line\">WARN-NEW: CSP: Wildcard Directive [10055] x 2</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;robots.txt (404 Not Found)</span><br><span class=\"line\">        https:&#x2F;&#x2F;xxxxxx.com&#x2F;sitemap.xml (404 Not Found)</span><br><span class=\"line\">FAIL-NEW: 0     FAIL-INPROG: 0  WARN-NEW: 7     WARN-INPROG: 0  INFO: 0 IGNORE: 0PASS: 44</span><br></pre></td></tr></table></figure>\n\n<p>測出結果有 7 項 WARN-NEW ，後面顯示有問題的項目提示，WARN-NEW 下面顯示的是有問題的 URL 有哪些，詳細的弱點描述跟解法資訊請看 report</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.zaproxy.org/docs/\">官方文件</a><br><a href=\"https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/\">用 OWASP ZAP 做滲透測試，找尋網站可能的弱點</a><br><a href=\"https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/\">EPH 的程式日記</a></p>"},{"title":"JavaScript 實作 - 簡易版匯率轉換","date":"2021-01-07T16:00:00.000Z","_content":"\n功能敘述：\n切換匯率計算各國的匯率。\n\n![](https://i.imgur.com/noQPS8F.png)\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission23)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission23/index.html)\n\n<!--more-->\n\n---\n\n## 1. 用 JS 撰寫\n\n#### 利用選擇器抓取 DOM 元素\n\n```javascript\nconst currencyElOne = document.querySelector('#currencyOne')\nconst currencyElTwo = document.querySelector('#currencyTwo')\nconst amountElOne = document.querySelector('#amountOne')\nconst amountElTwo = document.querySelector('#amountTwo')\nconst swapEl = document.querySelector('#swap')\nconst rateEl = document.querySelector('#rate')\n```\n\n---\n\n#### 監聽抓取 dom 的操作事件，同時綁定事件的操作\n\n```javascript\n// 監聽 DOM 狀態\ncurrencyElOne.addEventListener('change', caclulate)\ncurrencyElTwo.addEventListener('change', caclulate)\namountElOne.addEventListener('input', caclulate)\namountElTwo.addEventListener('input', caclulate)\n```\n\n---\n\n#### 事件操作\n\n[API](https://www.exchangerate-api.com/)\n這邊要注意的是 Fetch API 的方式，在打完 API ，response 資料的時候，雖然資料已經是 JSON 格式，但 Fetch 必須再轉一次 JSON，變成 `json promise`，否則是抓不到後端回傳的資料的。\n[參考文章](https://www.oxxostudio.tw/articles/201908/js-fetch.html)\n\n```javascript\n// 操作 DOM 同時執行運算\nfunction caclulate() {\n  // 透過選取的 DOM 將該 DOM的值塞到新變數中\n  const currencyOne = currencyElOne.value\n  const currencyTwo = currencyElTwo.value\n\n  // 發送 request ，開始打 API\n  fetch(`https://api.exchangerate-api.com/v4/latest/${currencyOne}`)\n    // 後端傳送 response 回傳結果\n    .then((res) => res.json()) //將回傳結果轉換成 json 格式\n    .then((data) => {\n      // console.log(data)\n\n      // 用陣列的方式抓去 keyValue，再將值塞到 rate 變數中\n      const rate = data.rates[currencyTwo]\n      // console.log(rate)\n\n      //將計算後的值放到綁定的 rate dom 中，同時計算當前匯率\n      rateEl.innerHTML = `1 ${currencyOne} = ${rate} ${currencyTwo}`\n\n      // 幣值2的值 = 幣值1的值*匯率，將值四捨五入\n      amountElTwo.value = (amountElOne.value * rate).toFixed(2)\n    })\n}\n```\n\n---\n\n#### 切換匯率，將匯率互相對調\n\n這邊要注意的是，必須要先將`currencyElOne.value` 塞到 `temp` 變數中，方便待會賦值，會這樣做是有原因的\n\n以下列這段程式碼為例，分別用 `console.log` 查看值\n\n```javascript\nswapEl.addEventListener('click', function () {\n  const temp = currencyElOne.value\n\n  currencyElOne.value = currencyElTwo.value\n  console.log('currencyElOne.value', currencyElOne.value)\n\n  currencyElTwo.value = currencyElOne.value\n  console.log('currencyElTwo.value', currencyElTwo.value)\n\n  // currencyElTwo.value = temp\n  // console.log('temp', temp)\n  caclulate()\n})\n```\n\n結果如下圖\n![](https://i.imgur.com/qQYix3x.png)\n\n兩個轉換的匯率都會長一樣，而且匯率永遠都會卡 1，無法轉換，如下圖\n![](https://i.imgur.com/1AO39Zg.png)\n\n為防止這樣的情況發生，可以先將 `currencyElOne.value` 塞到 `temp` 中，再確認 `temp` 值的是否有抓到，如下圖\n![](https://i.imgur.com/f4LpfCR.png)\n\n然後再將 `temp` 賦予到`currencyElTwo.value`，這樣就可以避免匯率卡 1 的問題，最後要記得執行計算。\n\n完整函式如下\n\n```javascript\nswapEl.addEventListener('click', function () {\n  const temp = currencyElOne.value\n  currencyElOne.value = currencyElTwo.value\n  currencyElTwo.value = temp\n  caclulate()\n})\n```\n\n---\n\n## 2. 用 jQuery 撰寫\n\n#### 抓取 DOM ，同時綁定事件\n\n先將每個 DOM 事件切割成一小部分，撰寫方法也要為簡單，步驟如下:\n\n1. 抓取 DOM 元素 `$('#currencyOne')`\n2. 後面再接事件`change`，\n3. 事件裡面會包發生的動作 `caclulate()`\n4. 執行 `caclulate()`\n\n```javascript\n// 將 dom 切割成小事件\n// 監聽 currencyOne 選取值\n$('#currencyOne').change(function () {\n  caclulate()\n})\n\n// 監聽 amountOne 選取值\n$('#amountOne').change(function () {\n  caclulate()\n})\n\n// 監聽 currencyTwo 選取值\n$('#currencyTwo').change(function () {\n  caclulate()\n})\n\n// 監聽 amountTwo 選取值\n$('#amountTwo').change(function () {\n  caclulate()\n})\n\ncaclulate()\n```\n\n---\n\n#### 事件裡面會包發生的動作\n\n這邊示範用 jquery ajax 打 api\n\n```javascript\n// 變動容器內的 dom，同時計算匯率\nfunction caclulate() {\n  // 用 jquery 的方式命名變數\n  let currencyOne = $('#currencyOne').val()\n  let currencyTwo = $('#currencyTwo').val()\n  let rate = $('#rate').val()\n\n  // 用 ajax 打 api\n  $.ajax({\n    methods: 'GET',\n    url: `https://api.exchangerate-api.com/v4/latest/${currencyOne}`,\n  })\n    // 後端 respose 資料，將資料用 res 命名\n    .done(function (res) {\n      // 可用 console.log(res) 查看 response api\n      // 將後端的資料塞到 rate 裡面，[currencyTwo] 是抓取物件 keyValue\n      let rate = res.rates[currencyTwo]\n      // 用 console.log(rate) 查看是否有抓到 keyValue\n\n      // 將匯率轉換後的值塞到 amountTwo dom 裡面，並4捨5入取到第2位\n      $('#amountTwo').val(($('#amountOne').val() * rate).toFixed(2))\n\n      // 將轉換的匯率顯示在各匯率之間\n      $('#rate').text(`1 ${currencyOne} = ${currencyTwo} * ${rate}`)\n    })\n}\n```\n\n---\n\n#### 動作的匯率對調\n\n函式邏輯跟上面 js 的一樣，差別寫法上會有些微的不同\n\n```javascript\n// 按下 swap dom 會將匯率對調\n$('#swap').click(function () {\n  let temp = $('#currencyOne').val()\n  $('#currencyOne').val($('#currencyTwo').val())\n  $('#currencyTwo').val(temp)\n  caclulate()\n})\n```\n\n---\n\n## 參考資料:\n\n[JavaScript Fetch API 使用教學](https://www.oxxostudio.tw/articles/201908/js-fetch.html)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842116#questions)\n","source":"_posts/2020/changeRate.md","raw":"---\ntitle: JavaScript 實作 - 簡易版匯率轉換\ndate: 2021/01/08\ntags:\n  - JavaScript\n  - 作品集\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n功能敘述：\n切換匯率計算各國的匯率。\n\n![](https://i.imgur.com/noQPS8F.png)\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission23)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission23/index.html)\n\n<!--more-->\n\n---\n\n## 1. 用 JS 撰寫\n\n#### 利用選擇器抓取 DOM 元素\n\n```javascript\nconst currencyElOne = document.querySelector('#currencyOne')\nconst currencyElTwo = document.querySelector('#currencyTwo')\nconst amountElOne = document.querySelector('#amountOne')\nconst amountElTwo = document.querySelector('#amountTwo')\nconst swapEl = document.querySelector('#swap')\nconst rateEl = document.querySelector('#rate')\n```\n\n---\n\n#### 監聽抓取 dom 的操作事件，同時綁定事件的操作\n\n```javascript\n// 監聽 DOM 狀態\ncurrencyElOne.addEventListener('change', caclulate)\ncurrencyElTwo.addEventListener('change', caclulate)\namountElOne.addEventListener('input', caclulate)\namountElTwo.addEventListener('input', caclulate)\n```\n\n---\n\n#### 事件操作\n\n[API](https://www.exchangerate-api.com/)\n這邊要注意的是 Fetch API 的方式，在打完 API ，response 資料的時候，雖然資料已經是 JSON 格式，但 Fetch 必須再轉一次 JSON，變成 `json promise`，否則是抓不到後端回傳的資料的。\n[參考文章](https://www.oxxostudio.tw/articles/201908/js-fetch.html)\n\n```javascript\n// 操作 DOM 同時執行運算\nfunction caclulate() {\n  // 透過選取的 DOM 將該 DOM的值塞到新變數中\n  const currencyOne = currencyElOne.value\n  const currencyTwo = currencyElTwo.value\n\n  // 發送 request ，開始打 API\n  fetch(`https://api.exchangerate-api.com/v4/latest/${currencyOne}`)\n    // 後端傳送 response 回傳結果\n    .then((res) => res.json()) //將回傳結果轉換成 json 格式\n    .then((data) => {\n      // console.log(data)\n\n      // 用陣列的方式抓去 keyValue，再將值塞到 rate 變數中\n      const rate = data.rates[currencyTwo]\n      // console.log(rate)\n\n      //將計算後的值放到綁定的 rate dom 中，同時計算當前匯率\n      rateEl.innerHTML = `1 ${currencyOne} = ${rate} ${currencyTwo}`\n\n      // 幣值2的值 = 幣值1的值*匯率，將值四捨五入\n      amountElTwo.value = (amountElOne.value * rate).toFixed(2)\n    })\n}\n```\n\n---\n\n#### 切換匯率，將匯率互相對調\n\n這邊要注意的是，必須要先將`currencyElOne.value` 塞到 `temp` 變數中，方便待會賦值，會這樣做是有原因的\n\n以下列這段程式碼為例，分別用 `console.log` 查看值\n\n```javascript\nswapEl.addEventListener('click', function () {\n  const temp = currencyElOne.value\n\n  currencyElOne.value = currencyElTwo.value\n  console.log('currencyElOne.value', currencyElOne.value)\n\n  currencyElTwo.value = currencyElOne.value\n  console.log('currencyElTwo.value', currencyElTwo.value)\n\n  // currencyElTwo.value = temp\n  // console.log('temp', temp)\n  caclulate()\n})\n```\n\n結果如下圖\n![](https://i.imgur.com/qQYix3x.png)\n\n兩個轉換的匯率都會長一樣，而且匯率永遠都會卡 1，無法轉換，如下圖\n![](https://i.imgur.com/1AO39Zg.png)\n\n為防止這樣的情況發生，可以先將 `currencyElOne.value` 塞到 `temp` 中，再確認 `temp` 值的是否有抓到，如下圖\n![](https://i.imgur.com/f4LpfCR.png)\n\n然後再將 `temp` 賦予到`currencyElTwo.value`，這樣就可以避免匯率卡 1 的問題，最後要記得執行計算。\n\n完整函式如下\n\n```javascript\nswapEl.addEventListener('click', function () {\n  const temp = currencyElOne.value\n  currencyElOne.value = currencyElTwo.value\n  currencyElTwo.value = temp\n  caclulate()\n})\n```\n\n---\n\n## 2. 用 jQuery 撰寫\n\n#### 抓取 DOM ，同時綁定事件\n\n先將每個 DOM 事件切割成一小部分，撰寫方法也要為簡單，步驟如下:\n\n1. 抓取 DOM 元素 `$('#currencyOne')`\n2. 後面再接事件`change`，\n3. 事件裡面會包發生的動作 `caclulate()`\n4. 執行 `caclulate()`\n\n```javascript\n// 將 dom 切割成小事件\n// 監聽 currencyOne 選取值\n$('#currencyOne').change(function () {\n  caclulate()\n})\n\n// 監聽 amountOne 選取值\n$('#amountOne').change(function () {\n  caclulate()\n})\n\n// 監聽 currencyTwo 選取值\n$('#currencyTwo').change(function () {\n  caclulate()\n})\n\n// 監聽 amountTwo 選取值\n$('#amountTwo').change(function () {\n  caclulate()\n})\n\ncaclulate()\n```\n\n---\n\n#### 事件裡面會包發生的動作\n\n這邊示範用 jquery ajax 打 api\n\n```javascript\n// 變動容器內的 dom，同時計算匯率\nfunction caclulate() {\n  // 用 jquery 的方式命名變數\n  let currencyOne = $('#currencyOne').val()\n  let currencyTwo = $('#currencyTwo').val()\n  let rate = $('#rate').val()\n\n  // 用 ajax 打 api\n  $.ajax({\n    methods: 'GET',\n    url: `https://api.exchangerate-api.com/v4/latest/${currencyOne}`,\n  })\n    // 後端 respose 資料，將資料用 res 命名\n    .done(function (res) {\n      // 可用 console.log(res) 查看 response api\n      // 將後端的資料塞到 rate 裡面，[currencyTwo] 是抓取物件 keyValue\n      let rate = res.rates[currencyTwo]\n      // 用 console.log(rate) 查看是否有抓到 keyValue\n\n      // 將匯率轉換後的值塞到 amountTwo dom 裡面，並4捨5入取到第2位\n      $('#amountTwo').val(($('#amountOne').val() * rate).toFixed(2))\n\n      // 將轉換的匯率顯示在各匯率之間\n      $('#rate').text(`1 ${currencyOne} = ${currencyTwo} * ${rate}`)\n    })\n}\n```\n\n---\n\n#### 動作的匯率對調\n\n函式邏輯跟上面 js 的一樣，差別寫法上會有些微的不同\n\n```javascript\n// 按下 swap dom 會將匯率對調\n$('#swap').click(function () {\n  let temp = $('#currencyOne').val()\n  $('#currencyOne').val($('#currencyTwo').val())\n  $('#currencyTwo').val(temp)\n  caclulate()\n})\n```\n\n---\n\n## 參考資料:\n\n[JavaScript Fetch API 使用教學](https://www.oxxostudio.tw/articles/201908/js-fetch.html)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842116#questions)\n","slug":"changeRate","published":1,"updated":"2021-03-26T16:13:10.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lps000zg0trhh9j3dp0","content":"<html><head></head><body><p>功能敘述：<br>切換匯率計算各國的匯率。</p>\n<p><img src=\"https://i.imgur.com/noQPS8F.png\"><br><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission23\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission23/index.html\">Demo</a></p>\n<a id=\"more\"></a>\n\n<hr>\n<h2 id=\"1-用-JS-撰寫\"><a href=\"#1-用-JS-撰寫\" class=\"headerlink\" title=\"1. 用 JS 撰寫\"></a>1. 用 JS 撰寫</h2><h4 id=\"利用選擇器抓取-DOM-元素\"><a href=\"#利用選擇器抓取-DOM-元素\" class=\"headerlink\" title=\"利用選擇器抓取 DOM 元素\"></a>利用選擇器抓取 DOM 元素</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> currencyElOne = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#currencyOne'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> currencyElTwo = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#currencyTwo'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> amountElOne = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#amountOne'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> amountElTwo = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#amountTwo'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> swapEl = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#swap'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> rateEl = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#rate'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h4 id=\"監聽抓取-dom-的操作事件，同時綁定事件的操作\"><a href=\"#監聽抓取-dom-的操作事件，同時綁定事件的操作\" class=\"headerlink\" title=\"監聽抓取 dom 的操作事件，同時綁定事件的操作\"></a>監聽抓取 dom 的操作事件，同時綁定事件的操作</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 監聽 DOM 狀態</span></span><br><span class=\"line\">currencyElOne.addEventListener(<span class=\"hljs-string\">'change'</span>, caclulate)</span><br><span class=\"line\">currencyElTwo.addEventListener(<span class=\"hljs-string\">'change'</span>, caclulate)</span><br><span class=\"line\">amountElOne.addEventListener(<span class=\"hljs-string\">'input'</span>, caclulate)</span><br><span class=\"line\">amountElTwo.addEventListener(<span class=\"hljs-string\">'input'</span>, caclulate)</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h4 id=\"事件操作\"><a href=\"#事件操作\" class=\"headerlink\" title=\"事件操作\"></a>事件操作</h4><p><a href=\"https://www.exchangerate-api.com/\">API</a><br>這邊要注意的是 Fetch API 的方式，在打完 API ，response 資料的時候，雖然資料已經是 JSON 格式，但 Fetch 必須再轉一次 JSON，變成 <code>json promise</code>，否則是抓不到後端回傳的資料的。<br><a href=\"https://www.oxxostudio.tw/articles/201908/js-fetch.html\">參考文章</a></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 操作 DOM 同時執行運算</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">caclulate</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 透過選取的 DOM 將該 DOM的值塞到新變數中</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> currencyOne = currencyElOne.value</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> currencyTwo = currencyElTwo.value</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 發送 request ，開始打 API</span></span><br><span class=\"line\">  fetch(<span class=\"hljs-string\">`https://api.exchangerate-api.com/v4/latest/<span class=\"hljs-subst\">${currencyOne}</span>`</span>)</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 後端傳送 response 回傳結果</span></span><br><span class=\"line\">    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> res.json()) <span class=\"hljs-comment\">//將回傳結果轉換成 json 格式</span></span><br><span class=\"line\">    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-comment\">// console.log(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 用陣列的方式抓去 keyValue，再將值塞到 rate 變數中</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> rate = data.rates[currencyTwo]</span><br><span class=\"line\">      <span class=\"hljs-comment\">// console.log(rate)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-comment\">//將計算後的值放到綁定的 rate dom 中，同時計算當前匯率</span></span><br><span class=\"line\">      rateEl.innerHTML = <span class=\"hljs-string\">`1 <span class=\"hljs-subst\">${currencyOne}</span> = <span class=\"hljs-subst\">${rate}</span> <span class=\"hljs-subst\">${currencyTwo}</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 幣值2的值 = 幣值1的值*匯率，將值四捨五入</span></span><br><span class=\"line\">      amountElTwo.value = (amountElOne.value * rate).toFixed(<span class=\"hljs-number\">2</span>)</span><br><span class=\"line\">    })</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h4 id=\"切換匯率，將匯率互相對調\"><a href=\"#切換匯率，將匯率互相對調\" class=\"headerlink\" title=\"切換匯率，將匯率互相對調\"></a>切換匯率，將匯率互相對調</h4><p>這邊要注意的是，必須要先將<code>currencyElOne.value</code> 塞到 <code>temp</code> 變數中，方便待會賦值，會這樣做是有原因的</p>\n<p>以下列這段程式碼為例，分別用 <code>console.log</code> 查看值</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapEl.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> temp = currencyElOne.value</span><br><span class=\"line\"></span><br><span class=\"line\">  currencyElOne.value = currencyElTwo.value</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'currencyElOne.value'</span>, currencyElOne.value)</span><br><span class=\"line\"></span><br><span class=\"line\">  currencyElTwo.value = currencyElOne.value</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'currencyElTwo.value'</span>, currencyElTwo.value)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// currencyElTwo.value = temp</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log('temp', temp)</span></span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>結果如下圖<br><img src=\"https://i.imgur.com/qQYix3x.png\"></p>\n<p>兩個轉換的匯率都會長一樣，而且匯率永遠都會卡 1，無法轉換，如下圖<br><img src=\"https://i.imgur.com/1AO39Zg.png\"></p>\n<p>為防止這樣的情況發生，可以先將 <code>currencyElOne.value</code> 塞到 <code>temp</code> 中，再確認 <code>temp</code> 值的是否有抓到，如下圖<br><img src=\"https://i.imgur.com/f4LpfCR.png\"></p>\n<p>然後再將 <code>temp</code> 賦予到<code>currencyElTwo.value</code>，這樣就可以避免匯率卡 1 的問題，最後要記得執行計算。</p>\n<p>完整函式如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapEl.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> temp = currencyElOne.value</span><br><span class=\"line\">  currencyElOne.value = currencyElTwo.value</span><br><span class=\"line\">  currencyElTwo.value = temp</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"2-用-jQuery-撰寫\"><a href=\"#2-用-jQuery-撰寫\" class=\"headerlink\" title=\"2. 用 jQuery 撰寫\"></a>2. 用 jQuery 撰寫</h2><h4 id=\"抓取-DOM-，同時綁定事件\"><a href=\"#抓取-DOM-，同時綁定事件\" class=\"headerlink\" title=\"抓取 DOM ，同時綁定事件\"></a>抓取 DOM ，同時綁定事件</h4><p>先將每個 DOM 事件切割成一小部分，撰寫方法也要為簡單，步驟如下:</p>\n<ol>\n<li>抓取 DOM 元素 <code>$('#currencyOne')</code></li>\n<li>後面再接事件<code>change</code>，</li>\n<li>事件裡面會包發生的動作 <code>caclulate()</code></li>\n<li>執行 <code>caclulate()</code></li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 將 dom 切割成小事件</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// 監聽 currencyOne 選取值</span></span><br><span class=\"line\">$(<span class=\"hljs-string\">'#currencyOne'</span>).change(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 監聽 amountOne 選取值</span></span><br><span class=\"line\">$(<span class=\"hljs-string\">'#amountOne'</span>).change(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 監聽 currencyTwo 選取值</span></span><br><span class=\"line\">$(<span class=\"hljs-string\">'#currencyTwo'</span>).change(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 監聽 amountTwo 選取值</span></span><br><span class=\"line\">$(<span class=\"hljs-string\">'#amountTwo'</span>).change(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">caclulate()</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h4 id=\"事件裡面會包發生的動作\"><a href=\"#事件裡面會包發生的動作\" class=\"headerlink\" title=\"事件裡面會包發生的動作\"></a>事件裡面會包發生的動作</h4><p>這邊示範用 jquery ajax 打 api</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 變動容器內的 dom，同時計算匯率</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">caclulate</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 用 jquery 的方式命名變數</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> currencyOne = $(<span class=\"hljs-string\">'#currencyOne'</span>).val()</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> currencyTwo = $(<span class=\"hljs-string\">'#currencyTwo'</span>).val()</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> rate = $(<span class=\"hljs-string\">'#rate'</span>).val()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 用 ajax 打 api</span></span><br><span class=\"line\">  $.ajax({</span><br><span class=\"line\">    methods: <span class=\"hljs-string\">'GET'</span>,</span><br><span class=\"line\">    url: <span class=\"hljs-string\">`https://api.exchangerate-api.com/v4/latest/<span class=\"hljs-subst\">${currencyOne}</span>`</span>,</span><br><span class=\"line\">  })</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 後端 respose 資料，將資料用 res 命名</span></span><br><span class=\"line\">    .done(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 可用 console.log(res) 查看 response api</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 將後端的資料塞到 rate 裡面，[currencyTwo] 是抓取物件 keyValue</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">let</span> rate = res.rates[currencyTwo]</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 用 console.log(rate) 查看是否有抓到 keyValue</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 將匯率轉換後的值塞到 amountTwo dom 裡面，並4捨5入取到第2位</span></span><br><span class=\"line\">      $(<span class=\"hljs-string\">'#amountTwo'</span>).val(($(<span class=\"hljs-string\">'#amountOne'</span>).val() * rate).toFixed(<span class=\"hljs-number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 將轉換的匯率顯示在各匯率之間</span></span><br><span class=\"line\">      $(<span class=\"hljs-string\">'#rate'</span>).text(<span class=\"hljs-string\">`1 <span class=\"hljs-subst\">${currencyOne}</span> = <span class=\"hljs-subst\">${currencyTwo}</span> * <span class=\"hljs-subst\">${rate}</span>`</span>)</span><br><span class=\"line\">    })</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h4 id=\"動作的匯率對調\"><a href=\"#動作的匯率對調\" class=\"headerlink\" title=\"動作的匯率對調\"></a>動作的匯率對調</h4><p>函式邏輯跟上面 js 的一樣，差別寫法上會有些微的不同</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 按下 swap dom 會將匯率對調</span></span><br><span class=\"line\">$(<span class=\"hljs-string\">'#swap'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> temp = $(<span class=\"hljs-string\">'#currencyOne'</span>).val()</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#currencyOne'</span>).val($(<span class=\"hljs-string\">'#currencyTwo'</span>).val())</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#currencyTwo'</span>).val(temp)</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料:\"></a>參考資料:</h2><p><a href=\"https://www.oxxostudio.tw/articles/201908/js-fetch.html\">JavaScript Fetch API 使用教學</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842116#questions\">20 Web Projects With Vanilla JavaScript</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"作品集","path":"tags/作品集/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><p>功能敘述：<br>切換匯率計算各國的匯率。</p>\n<p><img src=\"https://i.imgur.com/noQPS8F.png\"><br><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission23\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission23/index.html\">Demo</a></p></body></html>","more":"<hr>\n<h2 id=\"1-用-JS-撰寫\"><a href=\"#1-用-JS-撰寫\" class=\"headerlink\" title=\"1. 用 JS 撰寫\"></a>1. 用 JS 撰寫</h2><h4 id=\"利用選擇器抓取-DOM-元素\"><a href=\"#利用選擇器抓取-DOM-元素\" class=\"headerlink\" title=\"利用選擇器抓取 DOM 元素\"></a>利用選擇器抓取 DOM 元素</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> currencyElOne = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#currencyOne&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> currencyElTwo = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#currencyTwo&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> amountElOne = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#amountOne&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> amountElTwo = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#amountTwo&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> swapEl = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#swap&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> rateEl = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#rate&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"監聽抓取-dom-的操作事件，同時綁定事件的操作\"><a href=\"#監聽抓取-dom-的操作事件，同時綁定事件的操作\" class=\"headerlink\" title=\"監聽抓取 dom 的操作事件，同時綁定事件的操作\"></a>監聽抓取 dom 的操作事件，同時綁定事件的操作</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 監聽 DOM 狀態</span></span><br><span class=\"line\">currencyElOne.addEventListener(<span class=\"string\">&#x27;change&#x27;</span>, caclulate)</span><br><span class=\"line\">currencyElTwo.addEventListener(<span class=\"string\">&#x27;change&#x27;</span>, caclulate)</span><br><span class=\"line\">amountElOne.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>, caclulate)</span><br><span class=\"line\">amountElTwo.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>, caclulate)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"事件操作\"><a href=\"#事件操作\" class=\"headerlink\" title=\"事件操作\"></a>事件操作</h4><p><a href=\"https://www.exchangerate-api.com/\">API</a><br>這邊要注意的是 Fetch API 的方式，在打完 API ，response 資料的時候，雖然資料已經是 JSON 格式，但 Fetch 必須再轉一次 JSON，變成 <code>json promise</code>，否則是抓不到後端回傳的資料的。<br><a href=\"https://www.oxxostudio.tw/articles/201908/js-fetch.html\">參考文章</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 操作 DOM 同時執行運算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">caclulate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 透過選取的 DOM 將該 DOM的值塞到新變數中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currencyOne = currencyElOne.value</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currencyTwo = currencyElTwo.value</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 發送 request ，開始打 API</span></span><br><span class=\"line\">  fetch(<span class=\"string\">`https://api.exchangerate-api.com/v4/latest/<span class=\"subst\">$&#123;currencyOne&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 後端傳送 response 回傳結果</span></span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json()) <span class=\"comment\">//將回傳結果轉換成 json 格式</span></span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 用陣列的方式抓去 keyValue，再將值塞到 rate 變數中</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> rate = data.rates[currencyTwo]</span><br><span class=\"line\">      <span class=\"comment\">// console.log(rate)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//將計算後的值放到綁定的 rate dom 中，同時計算當前匯率</span></span><br><span class=\"line\">      rateEl.innerHTML = <span class=\"string\">`1 <span class=\"subst\">$&#123;currencyOne&#125;</span> = <span class=\"subst\">$&#123;rate&#125;</span> <span class=\"subst\">$&#123;currencyTwo&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 幣值2的值 = 幣值1的值*匯率，將值四捨五入</span></span><br><span class=\"line\">      amountElTwo.value = (amountElOne.value * rate).toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"切換匯率，將匯率互相對調\"><a href=\"#切換匯率，將匯率互相對調\" class=\"headerlink\" title=\"切換匯率，將匯率互相對調\"></a>切換匯率，將匯率互相對調</h4><p>這邊要注意的是，必須要先將<code>currencyElOne.value</code> 塞到 <code>temp</code> 變數中，方便待會賦值，會這樣做是有原因的</p>\n<p>以下列這段程式碼為例，分別用 <code>console.log</code> 查看值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapEl.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> temp = currencyElOne.value</span><br><span class=\"line\"></span><br><span class=\"line\">  currencyElOne.value = currencyElTwo.value</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;currencyElOne.value&#x27;</span>, currencyElOne.value)</span><br><span class=\"line\"></span><br><span class=\"line\">  currencyElTwo.value = currencyElOne.value</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;currencyElTwo.value&#x27;</span>, currencyElTwo.value)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// currencyElTwo.value = temp</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(&#x27;temp&#x27;, temp)</span></span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>結果如下圖<br><img src=\"https://i.imgur.com/qQYix3x.png\"></p>\n<p>兩個轉換的匯率都會長一樣，而且匯率永遠都會卡 1，無法轉換，如下圖<br><img src=\"https://i.imgur.com/1AO39Zg.png\"></p>\n<p>為防止這樣的情況發生，可以先將 <code>currencyElOne.value</code> 塞到 <code>temp</code> 中，再確認 <code>temp</code> 值的是否有抓到，如下圖<br><img src=\"https://i.imgur.com/f4LpfCR.png\"></p>\n<p>然後再將 <code>temp</code> 賦予到<code>currencyElTwo.value</code>，這樣就可以避免匯率卡 1 的問題，最後要記得執行計算。</p>\n<p>完整函式如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapEl.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> temp = currencyElOne.value</span><br><span class=\"line\">  currencyElOne.value = currencyElTwo.value</span><br><span class=\"line\">  currencyElTwo.value = temp</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2-用-jQuery-撰寫\"><a href=\"#2-用-jQuery-撰寫\" class=\"headerlink\" title=\"2. 用 jQuery 撰寫\"></a>2. 用 jQuery 撰寫</h2><h4 id=\"抓取-DOM-，同時綁定事件\"><a href=\"#抓取-DOM-，同時綁定事件\" class=\"headerlink\" title=\"抓取 DOM ，同時綁定事件\"></a>抓取 DOM ，同時綁定事件</h4><p>先將每個 DOM 事件切割成一小部分，撰寫方法也要為簡單，步驟如下:</p>\n<ol>\n<li>抓取 DOM 元素 <code>$(&#39;#currencyOne&#39;)</code></li>\n<li>後面再接事件<code>change</code>，</li>\n<li>事件裡面會包發生的動作 <code>caclulate()</code></li>\n<li>執行 <code>caclulate()</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 將 dom 切割成小事件</span></span><br><span class=\"line\"><span class=\"comment\">// 監聽 currencyOne 選取值</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#currencyOne&#x27;</span>).change(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 amountOne 選取值</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#amountOne&#x27;</span>).change(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 currencyTwo 選取值</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#currencyTwo&#x27;</span>).change(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 amountTwo 選取值</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#amountTwo&#x27;</span>).change(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">caclulate()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"事件裡面會包發生的動作\"><a href=\"#事件裡面會包發生的動作\" class=\"headerlink\" title=\"事件裡面會包發生的動作\"></a>事件裡面會包發生的動作</h4><p>這邊示範用 jquery ajax 打 api</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 變動容器內的 dom，同時計算匯率</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">caclulate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用 jquery 的方式命名變數</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currencyOne = $(<span class=\"string\">&#x27;#currencyOne&#x27;</span>).val()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currencyTwo = $(<span class=\"string\">&#x27;#currencyTwo&#x27;</span>).val()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rate = $(<span class=\"string\">&#x27;#rate&#x27;</span>).val()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用 ajax 打 api</span></span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    methods: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">    url: <span class=\"string\">`https://api.exchangerate-api.com/v4/latest/<span class=\"subst\">$&#123;currencyOne&#125;</span>`</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 後端 respose 資料，將資料用 res 命名</span></span><br><span class=\"line\">    .done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 可用 console.log(res) 查看 response api</span></span><br><span class=\"line\">      <span class=\"comment\">// 將後端的資料塞到 rate 裡面，[currencyTwo] 是抓取物件 keyValue</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> rate = res.rates[currencyTwo]</span><br><span class=\"line\">      <span class=\"comment\">// 用 console.log(rate) 查看是否有抓到 keyValue</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 將匯率轉換後的值塞到 amountTwo dom 裡面，並4捨5入取到第2位</span></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;#amountTwo&#x27;</span>).val(($(<span class=\"string\">&#x27;#amountOne&#x27;</span>).val() * rate).toFixed(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 將轉換的匯率顯示在各匯率之間</span></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;#rate&#x27;</span>).text(<span class=\"string\">`1 <span class=\"subst\">$&#123;currencyOne&#125;</span> = <span class=\"subst\">$&#123;currencyTwo&#125;</span> * <span class=\"subst\">$&#123;rate&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"動作的匯率對調\"><a href=\"#動作的匯率對調\" class=\"headerlink\" title=\"動作的匯率對調\"></a>動作的匯率對調</h4><p>函式邏輯跟上面 js 的一樣，差別寫法上會有些微的不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按下 swap dom 會將匯率對調</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#swap&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = $(<span class=\"string\">&#x27;#currencyOne&#x27;</span>).val()</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#currencyOne&#x27;</span>).val($(<span class=\"string\">&#x27;#currencyTwo&#x27;</span>).val())</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#currencyTwo&#x27;</span>).val(temp)</span><br><span class=\"line\">  caclulate()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料:\"></a>參考資料:</h2><p><a href=\"https://www.oxxostudio.tw/articles/201908/js-fetch.html\">JavaScript Fetch API 使用教學</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842116#questions\">20 Web Projects With Vanilla JavaScript</a></p>"},{"title":"JavaScript - var 、 let 、 const 的差別","date":"2021-01-19T16:00:00.000Z","_content":"\n## 前言\n\n每當我們在命名變數的時候，都會有作用域上的困擾，或是不熟悉 var 、 let 、 const 三者之間的差別，導致環境中的變數被互相汙染，甚至影響到全域變數，為釐清這當中的觀念，決定寫一篇文章來幫助自己，方便日後回憶。\n\n<!-- more -->\n\n## var 的宣告\n\n> var = variable 的縮寫\n\n當我們用 `var` 宣告變數並賦值後，如果後面又用相同的變數同樣又被賦值，那後面的值會覆蓋掉前面的值，如下\n\n```javascript\nvar name = 'ken'\n\nvar name = 'kevin'\n\nconsole.log(name)\n```\n\n變數同樣設為 `name` ，但卻顯示後面的值。\n![](https://i.imgur.com/edspqWp.png)\n\n那如果用大括號包起來呢 ?\n( 這邊用大括號是為了待會的 let 宣告比較，所埋下的伏筆 )\n\n```javascript\nvar name = 'ken'\n\n{\n  var name = 'kevin'\n}\n\nconsole.log(name)\n```\n\n![](https://i.imgur.com/s531jyy.png)\n結果還是一樣的。\n\n再輸入 `window.name` 查看，發現全域上已經有 `name` 的值了。\n![](https://i.imgur.com/ifNVCZs.png)\n\n其實在宣告一個變數的時候，並不是故意要覆蓋掉之前的值，但有時候就這麼的剛好命名到相同的變數名稱。\n\n用 `var` 宣告就等於是全域 ( `window` ) 的宣告，這是 `var` 的一個缺點，為防止這樣的事發生，我們可以用 `function` 包起來，防止變數互相汙染。\n\n### 以下示範用 function 控制 var 的作用域\n\n#### 1. 只在立即函式裡面宣告 var\n\n在 `function` 裡面用 `var` 宣告變數後，分別在 `function` 裡面跟外面用 `console.log` 查看\n\n```javascript\n;(function () {\n  var functionName = 'kevin'\n  console.log('我是 function 裡面的 ' + functionName)\n})()\n\nconsole.log('外面的' + functionName)\n```\n\n顯示下圖\n![](https://i.imgur.com/duOiXIj.png)\n\n再用 `window.functionName` 查看，會顯示 `undefined`，就代表 `var` 會被限制在 `function` 裡面，不會汙染到外面的相同變數。\n![](https://i.imgur.com/gCTG8qA.png)\n\n#### 2. 在立即函式裡、外同時宣告 var\n\n如果不信脫離函式會汙染到全域或是其他變數的話，那在立即函式外面在用 `var` 宣告相同變數，但不同值，然後再用 `window.functionName` 查看全域變數。\n\n```javascript\n;(function () {\n  var functionName = 'kevin'\n  console.log('我是 function 裡面的 ' + functionName)\n})()\n\nvar functionName = 'ken'\nconsole.log('外面的' + functionName)\n```\n\n![](https://i.imgur.com/NNGSXL9.png)\n由上圖可知，如果 `var` 脫離了立即函式或是任何函示就會不受控制的污染其他相同變數，甚至是全域變數。\n\n[DEMO](https://codepen.io/gleofgja/pen/MWjxBVQ?editors=1011)\n\n雖然有了 `function` 可以防止 `var` 宣告的變數汙染到其他變數，但除了 `function` 以外的 `for loop` 、`if else` 判斷式也會有不受控制的問題，以下示範\n\n#### for loop\n\n用 `var` 宣告條件，在 scope 裡面跟外面都加上 `console.log`。\n\n```javascript\nfor (var i = 0; i < 5; i++) {\n  console.log('裡面的 i = ' + i)\n}\nconsole.log('我是外面的 i = ' + i)\n```\n\n外面會顯示 5 是因為最後還會跑一次 `i++`\n此時 `i = 5` ，不符合 `i < 5` 所以跳出 `for loop`\n![](https://i.imgur.com/jEoMSZ1.png)\n\n#### if else\n\n```javascript\nif (true) {\n  var name = 'ken'\n  console.log(name)\n}\nconsole.log(name)\n```\n\n![](https://i.imgur.com/J8IDSRA.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/ZEpPMgE?editors=0011)\n\n如果想一次防止變數遭受汙染或是不受控制的話，可以使用下一節要說的 let 宣告。\n\n## let 的宣告\n\n> let 沒有縮寫\n\n上一段提到，如果用 var 宣告的話會不受控制或是汙染到其他變數，不過在 ES6 語法裡面，是有方法可以解決這問題的，就是 let 宣告。\n\n**那 let 跟 var 的差別在於作用域 { }。**\n\n剛才兩個變數都是用 `var` 來做宣告，後面若再用一樣的變數，那變數的值是可以被覆蓋的，但是在 `let` 宣告下是禁止的，`let` 只能遠許一個相同名稱的變數存在，以下示範\n\n```javascript\nlet letName = 'ken'\n\n{\n  let letName = 'kevin'\n}\n\nconsole.log(letName)\n```\n\n會顯示 `Uncaught SyntaxError: Identifier 'letName' has already been declared `，用 `name` 命名的變數已經存在了，如下圖\n![](https://i.imgur.com/7819U4b.png)\n\n但是 let 是有作用域 ( scope ) 的，就是用 `{ }` 這個大括號，以下示範\n![](https://i.imgur.com/UT48xzX.png)\n\n上面介紹 var 那段，用大括號包起了並用 var 宣告相同變數的話，值還是會被後面命名的變數給覆蓋掉，但是在 let 並用 { } 將其中一個相同名稱的變數包起來，就會獨立出來，也不會跳出`Identifier 'letName' has already been declared ` 這樣的 error 訊息，\n\n在 console.log 輸入 window.letName 會顯示 undefined，由此可知全域變數也沒有受到汙染。\n![](https://i.imgur.com/55Kmjyc.png)\n\n### 以下示範 let 的作用域\n\n差別只在全域變數不會受到汙染，以下示範。\n\n#### 1. 只在立即函式裡面宣告 let\n\n效果會跟 var 一樣，因為 `var` 在 `function` 裡面是受控制的不會到到處汙染，`let` 是因為 scope `{ }` 的關係，所以也被限制住，scope 外面一樣讀取不到，所以會顯示 `undefined`。\n\n```javascript\n;(function () {\n  let letFunctionName = 'kevin'\n  console.log('我是 function 裡面的 ' + letFunctionName)\n})()\n\nconsole.log('外面的' + letFunctionName)\n```\n\n![](https://i.imgur.com/YgAdm1b.png)\n\n用 `window.letFunctionName` 查看，全域一樣沒被汙染。\n![](https://i.imgur.com/xP20HGT.png)\n\n#### 2. 在立即函式裡、外同時宣告 let\n\n效果跟 `var` 一樣。\n\n```javascript\n;(function () {\n  let letFunctionName = 'kevin'\n  console.log('我是 function 裡面的 ' + letFunctionName)\n})()\n\nlet letFunctionName = 'ken'\nconsole.log('外面的' + letFunctionName)\n```\n\n![](https://i.imgur.com/GsmnHQT.png)\n\n但是輸入 `window.letFunctionName` 會顯示 `undefined`，全域一樣沒被汙染。\n\n![](https://i.imgur.com/QCbOlqE.png)\n\n也就是說只要有 `let` 宣告加上 `{ }` 的話，就會可以完全控制變數，不需要擔心變數相同名稱，也甭擔心全域變數會受到汙染。\n\n[DEMO](https://codepen.io/gleofgja/pen/xxEBQNe?editors=0001)\n\n## const 的宣告\n\n> const = constant 的縮寫\n\n### const 一旦被賦值後就不能再更改了。\n\n錯誤示範 :\n\n```javascript\nconst constArry = 10\nconstArry = 999\nconsole.log(constArry)\n```\n\n![](https://i.imgur.com/Krz3cy5.png)\n\n### 但是有個特例\n\n雖然不能更改已經用 const 賦予的值，\n但是!! 可以更改<font color=#FF0000>物件或是陣列內的值</font>。\n\n#### 範例一\n\n更陣列內指定的值\n\n```javascript\nconst constArry = [10, 20, 30]\nconstArry[0] = 999\nconsole.log(constArry)\n```\n\n是可以的。\n![](https://i.imgur.com/DEbUzCk.png)\n\n#### 範例二\n\n陣列內整個值換掉\n\n```javascript\nconst constArry = [10, 20, 30]\nconstArry = [666 777, 888]\nconsole.log(constArry)\n```\n\n是不行的，因為更改的已經是整個變數了，不是變數內的值。\n![](https://i.imgur.com/rMHiWiB.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/vYXPvbJ?editors=1011)\n\n## 參考資料\n\n[ES6 基础教学](https://www.youtube.com/watch?v=fJEw4eApm5I&list=PLliocbKHJNwu150Kc7_eEywQBFLTJyPZs&index=2&t=1s)\n[JavaScript 核心篇](https://courses.hexschool.com/courses/670037/lectures/11952053)\n","source":"_posts/2020/cosnt、var、let.md","raw":"---\ntitle: JavaScript - var 、 let 、 const 的差別\ndate: 2021/01/20\ntags:\n  - var\n  - let\n  - const\ncategories:\n  - JavaScript\n---\n\n## 前言\n\n每當我們在命名變數的時候，都會有作用域上的困擾，或是不熟悉 var 、 let 、 const 三者之間的差別，導致環境中的變數被互相汙染，甚至影響到全域變數，為釐清這當中的觀念，決定寫一篇文章來幫助自己，方便日後回憶。\n\n<!-- more -->\n\n## var 的宣告\n\n> var = variable 的縮寫\n\n當我們用 `var` 宣告變數並賦值後，如果後面又用相同的變數同樣又被賦值，那後面的值會覆蓋掉前面的值，如下\n\n```javascript\nvar name = 'ken'\n\nvar name = 'kevin'\n\nconsole.log(name)\n```\n\n變數同樣設為 `name` ，但卻顯示後面的值。\n![](https://i.imgur.com/edspqWp.png)\n\n那如果用大括號包起來呢 ?\n( 這邊用大括號是為了待會的 let 宣告比較，所埋下的伏筆 )\n\n```javascript\nvar name = 'ken'\n\n{\n  var name = 'kevin'\n}\n\nconsole.log(name)\n```\n\n![](https://i.imgur.com/s531jyy.png)\n結果還是一樣的。\n\n再輸入 `window.name` 查看，發現全域上已經有 `name` 的值了。\n![](https://i.imgur.com/ifNVCZs.png)\n\n其實在宣告一個變數的時候，並不是故意要覆蓋掉之前的值，但有時候就這麼的剛好命名到相同的變數名稱。\n\n用 `var` 宣告就等於是全域 ( `window` ) 的宣告，這是 `var` 的一個缺點，為防止這樣的事發生，我們可以用 `function` 包起來，防止變數互相汙染。\n\n### 以下示範用 function 控制 var 的作用域\n\n#### 1. 只在立即函式裡面宣告 var\n\n在 `function` 裡面用 `var` 宣告變數後，分別在 `function` 裡面跟外面用 `console.log` 查看\n\n```javascript\n;(function () {\n  var functionName = 'kevin'\n  console.log('我是 function 裡面的 ' + functionName)\n})()\n\nconsole.log('外面的' + functionName)\n```\n\n顯示下圖\n![](https://i.imgur.com/duOiXIj.png)\n\n再用 `window.functionName` 查看，會顯示 `undefined`，就代表 `var` 會被限制在 `function` 裡面，不會汙染到外面的相同變數。\n![](https://i.imgur.com/gCTG8qA.png)\n\n#### 2. 在立即函式裡、外同時宣告 var\n\n如果不信脫離函式會汙染到全域或是其他變數的話，那在立即函式外面在用 `var` 宣告相同變數，但不同值，然後再用 `window.functionName` 查看全域變數。\n\n```javascript\n;(function () {\n  var functionName = 'kevin'\n  console.log('我是 function 裡面的 ' + functionName)\n})()\n\nvar functionName = 'ken'\nconsole.log('外面的' + functionName)\n```\n\n![](https://i.imgur.com/NNGSXL9.png)\n由上圖可知，如果 `var` 脫離了立即函式或是任何函示就會不受控制的污染其他相同變數，甚至是全域變數。\n\n[DEMO](https://codepen.io/gleofgja/pen/MWjxBVQ?editors=1011)\n\n雖然有了 `function` 可以防止 `var` 宣告的變數汙染到其他變數，但除了 `function` 以外的 `for loop` 、`if else` 判斷式也會有不受控制的問題，以下示範\n\n#### for loop\n\n用 `var` 宣告條件，在 scope 裡面跟外面都加上 `console.log`。\n\n```javascript\nfor (var i = 0; i < 5; i++) {\n  console.log('裡面的 i = ' + i)\n}\nconsole.log('我是外面的 i = ' + i)\n```\n\n外面會顯示 5 是因為最後還會跑一次 `i++`\n此時 `i = 5` ，不符合 `i < 5` 所以跳出 `for loop`\n![](https://i.imgur.com/jEoMSZ1.png)\n\n#### if else\n\n```javascript\nif (true) {\n  var name = 'ken'\n  console.log(name)\n}\nconsole.log(name)\n```\n\n![](https://i.imgur.com/J8IDSRA.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/ZEpPMgE?editors=0011)\n\n如果想一次防止變數遭受汙染或是不受控制的話，可以使用下一節要說的 let 宣告。\n\n## let 的宣告\n\n> let 沒有縮寫\n\n上一段提到，如果用 var 宣告的話會不受控制或是汙染到其他變數，不過在 ES6 語法裡面，是有方法可以解決這問題的，就是 let 宣告。\n\n**那 let 跟 var 的差別在於作用域 { }。**\n\n剛才兩個變數都是用 `var` 來做宣告，後面若再用一樣的變數，那變數的值是可以被覆蓋的，但是在 `let` 宣告下是禁止的，`let` 只能遠許一個相同名稱的變數存在，以下示範\n\n```javascript\nlet letName = 'ken'\n\n{\n  let letName = 'kevin'\n}\n\nconsole.log(letName)\n```\n\n會顯示 `Uncaught SyntaxError: Identifier 'letName' has already been declared `，用 `name` 命名的變數已經存在了，如下圖\n![](https://i.imgur.com/7819U4b.png)\n\n但是 let 是有作用域 ( scope ) 的，就是用 `{ }` 這個大括號，以下示範\n![](https://i.imgur.com/UT48xzX.png)\n\n上面介紹 var 那段，用大括號包起了並用 var 宣告相同變數的話，值還是會被後面命名的變數給覆蓋掉，但是在 let 並用 { } 將其中一個相同名稱的變數包起來，就會獨立出來，也不會跳出`Identifier 'letName' has already been declared ` 這樣的 error 訊息，\n\n在 console.log 輸入 window.letName 會顯示 undefined，由此可知全域變數也沒有受到汙染。\n![](https://i.imgur.com/55Kmjyc.png)\n\n### 以下示範 let 的作用域\n\n差別只在全域變數不會受到汙染，以下示範。\n\n#### 1. 只在立即函式裡面宣告 let\n\n效果會跟 var 一樣，因為 `var` 在 `function` 裡面是受控制的不會到到處汙染，`let` 是因為 scope `{ }` 的關係，所以也被限制住，scope 外面一樣讀取不到，所以會顯示 `undefined`。\n\n```javascript\n;(function () {\n  let letFunctionName = 'kevin'\n  console.log('我是 function 裡面的 ' + letFunctionName)\n})()\n\nconsole.log('外面的' + letFunctionName)\n```\n\n![](https://i.imgur.com/YgAdm1b.png)\n\n用 `window.letFunctionName` 查看，全域一樣沒被汙染。\n![](https://i.imgur.com/xP20HGT.png)\n\n#### 2. 在立即函式裡、外同時宣告 let\n\n效果跟 `var` 一樣。\n\n```javascript\n;(function () {\n  let letFunctionName = 'kevin'\n  console.log('我是 function 裡面的 ' + letFunctionName)\n})()\n\nlet letFunctionName = 'ken'\nconsole.log('外面的' + letFunctionName)\n```\n\n![](https://i.imgur.com/GsmnHQT.png)\n\n但是輸入 `window.letFunctionName` 會顯示 `undefined`，全域一樣沒被汙染。\n\n![](https://i.imgur.com/QCbOlqE.png)\n\n也就是說只要有 `let` 宣告加上 `{ }` 的話，就會可以完全控制變數，不需要擔心變數相同名稱，也甭擔心全域變數會受到汙染。\n\n[DEMO](https://codepen.io/gleofgja/pen/xxEBQNe?editors=0001)\n\n## const 的宣告\n\n> const = constant 的縮寫\n\n### const 一旦被賦值後就不能再更改了。\n\n錯誤示範 :\n\n```javascript\nconst constArry = 10\nconstArry = 999\nconsole.log(constArry)\n```\n\n![](https://i.imgur.com/Krz3cy5.png)\n\n### 但是有個特例\n\n雖然不能更改已經用 const 賦予的值，\n但是!! 可以更改<font color=#FF0000>物件或是陣列內的值</font>。\n\n#### 範例一\n\n更陣列內指定的值\n\n```javascript\nconst constArry = [10, 20, 30]\nconstArry[0] = 999\nconsole.log(constArry)\n```\n\n是可以的。\n![](https://i.imgur.com/DEbUzCk.png)\n\n#### 範例二\n\n陣列內整個值換掉\n\n```javascript\nconst constArry = [10, 20, 30]\nconstArry = [666 777, 888]\nconsole.log(constArry)\n```\n\n是不行的，因為更改的已經是整個變數了，不是變數內的值。\n![](https://i.imgur.com/rMHiWiB.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/vYXPvbJ?editors=1011)\n\n## 參考資料\n\n[ES6 基础教学](https://www.youtube.com/watch?v=fJEw4eApm5I&list=PLliocbKHJNwu150Kc7_eEywQBFLTJyPZs&index=2&t=1s)\n[JavaScript 核心篇](https://courses.hexschool.com/courses/670037/lectures/11952053)\n","slug":"cosnt、var、let","published":1,"updated":"2021-03-26T16:13:10.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpt0012g0tr2rpxa3iv","content":"<html><head></head><body><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每當我們在命名變數的時候，都會有作用域上的困擾，或是不熟悉 var 、 let 、 const 三者之間的差別，導致環境中的變數被互相汙染，甚至影響到全域變數，為釐清這當中的觀念，決定寫一篇文章來幫助自己，方便日後回憶。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"var-的宣告\"><a href=\"#var-的宣告\" class=\"headerlink\" title=\"var 的宣告\"></a>var 的宣告</h2><blockquote>\n<p>var = variable 的縮寫</p>\n</blockquote>\n<p>當我們用 <code>var</code> 宣告變數並賦值後，如果後面又用相同的變數同樣又被賦值，那後面的值會覆蓋掉前面的值，如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'ken'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'kevin'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(name)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>變數同樣設為 <code>name</code> ，但卻顯示後面的值。<br><img src=\"https://i.imgur.com/edspqWp.png\"></p>\n<p>那如果用大括號包起來呢 ?<br>( 這邊用大括號是為了待會的 let 宣告比較，所埋下的伏筆 )</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'ken'</span></span><br><span class=\"line\"></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'kevin'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(name)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/s531jyy.png\"><br>結果還是一樣的。</p>\n<p>再輸入 <code>window.name</code> 查看，發現全域上已經有 <code>name</code> 的值了。<br><img src=\"https://i.imgur.com/ifNVCZs.png\"></p>\n<p>其實在宣告一個變數的時候，並不是故意要覆蓋掉之前的值，但有時候就這麼的剛好命名到相同的變數名稱。</p>\n<p>用 <code>var</code> 宣告就等於是全域 ( <code>window</code> ) 的宣告，這是 <code>var</code> 的一個缺點，為防止這樣的事發生，我們可以用 <code>function</code> 包起來，防止變數互相汙染。</p>\n<h3 id=\"以下示範用-function-控制-var-的作用域\"><a href=\"#以下示範用-function-控制-var-的作用域\" class=\"headerlink\" title=\"以下示範用 function 控制 var 的作用域\"></a>以下示範用 function 控制 var 的作用域</h3><h4 id=\"1-只在立即函式裡面宣告-var\"><a href=\"#1-只在立即函式裡面宣告-var\" class=\"headerlink\" title=\"1. 只在立即函式裡面宣告 var\"></a>1. 只在立即函式裡面宣告 var</h4><p>在 <code>function</code> 裡面用 <code>var</code> 宣告變數後，分別在 <code>function</code> 裡面跟外面用 <code>console.log</code> 查看</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> functionName = <span class=\"hljs-string\">'kevin'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是 function 裡面的 '</span> + functionName)</span><br><span class=\"line\">})()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'外面的'</span> + functionName)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/duOiXIj.png\"></p>\n<p>再用 <code>window.functionName</code> 查看，會顯示 <code>undefined</code>，就代表 <code>var</code> 會被限制在 <code>function</code> 裡面，不會汙染到外面的相同變數。<br><img src=\"https://i.imgur.com/gCTG8qA.png\"></p>\n<h4 id=\"2-在立即函式裡、外同時宣告-var\"><a href=\"#2-在立即函式裡、外同時宣告-var\" class=\"headerlink\" title=\"2. 在立即函式裡、外同時宣告 var\"></a>2. 在立即函式裡、外同時宣告 var</h4><p>如果不信脫離函式會汙染到全域或是其他變數的話，那在立即函式外面在用 <code>var</code> 宣告相同變數，但不同值，然後再用 <code>window.functionName</code> 查看全域變數。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> functionName = <span class=\"hljs-string\">'kevin'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是 function 裡面的 '</span> + functionName)</span><br><span class=\"line\">})()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> functionName = <span class=\"hljs-string\">'ken'</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'外面的'</span> + functionName)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/NNGSXL9.png\"><br>由上圖可知，如果 <code>var</code> 脫離了立即函式或是任何函示就會不受控制的污染其他相同變數，甚至是全域變數。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWjxBVQ?editors=1011\">DEMO</a></p>\n<p>雖然有了 <code>function</code> 可以防止 <code>var</code> 宣告的變數汙染到其他變數，但除了 <code>function</code> 以外的 <code>for loop</code> 、<code>if else</code> 判斷式也會有不受控制的問題，以下示範</p>\n<h4 id=\"for-loop\"><a href=\"#for-loop\" class=\"headerlink\" title=\"for loop\"></a>for loop</h4><p>用 <code>var</code> 宣告條件，在 scope 裡面跟外面都加上 <code>console.log</code>。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'裡面的 i = '</span> + i)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是外面的 i = '</span> + i)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>外面會顯示 5 是因為最後還會跑一次 <code>i++</code><br>此時 <code>i = 5</code> ，不符合 <code>i &lt; 5</code> 所以跳出 <code>for loop</code><br><img src=\"https://i.imgur.com/jEoMSZ1.png\"></p>\n<h4 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'ken'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(name)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(name)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/J8IDSRA.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEpPMgE?editors=0011\">DEMO</a></p>\n<p>如果想一次防止變數遭受汙染或是不受控制的話，可以使用下一節要說的 let 宣告。</p>\n<h2 id=\"let-的宣告\"><a href=\"#let-的宣告\" class=\"headerlink\" title=\"let 的宣告\"></a>let 的宣告</h2><blockquote>\n<p>let 沒有縮寫</p>\n</blockquote>\n<p>上一段提到，如果用 var 宣告的話會不受控制或是汙染到其他變數，不過在 ES6 語法裡面，是有方法可以解決這問題的，就是 let 宣告。</p>\n<p><strong>那 let 跟 var 的差別在於作用域 { }。</strong></p>\n<p>剛才兩個變數都是用 <code>var</code> 來做宣告，後面若再用一樣的變數，那變數的值是可以被覆蓋的，但是在 <code>let</code> 宣告下是禁止的，<code>let</code> 只能遠許一個相同名稱的變數存在，以下示範</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> letName = <span class=\"hljs-string\">'ken'</span></span><br><span class=\"line\"></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> letName = <span class=\"hljs-string\">'kevin'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(letName)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>會顯示 <code>Uncaught SyntaxError: Identifier 'letName' has already been declared </code>，用 <code>name</code> 命名的變數已經存在了，如下圖<br><img src=\"https://i.imgur.com/7819U4b.png\"></p>\n<p>但是 let 是有作用域 ( scope ) 的，就是用 <code>{ }</code> 這個大括號，以下示範<br><img src=\"https://i.imgur.com/UT48xzX.png\"></p>\n<p>上面介紹 var 那段，用大括號包起了並用 var 宣告相同變數的話，值還是會被後面命名的變數給覆蓋掉，但是在 let 並用 { } 將其中一個相同名稱的變數包起來，就會獨立出來，也不會跳出<code>Identifier 'letName' has already been declared </code> 這樣的 error 訊息，</p>\n<p>在 console.log 輸入 window.letName 會顯示 undefined，由此可知全域變數也沒有受到汙染。<br><img src=\"https://i.imgur.com/55Kmjyc.png\"></p>\n<h3 id=\"以下示範-let-的作用域\"><a href=\"#以下示範-let-的作用域\" class=\"headerlink\" title=\"以下示範 let 的作用域\"></a>以下示範 let 的作用域</h3><p>差別只在全域變數不會受到汙染，以下示範。</p>\n<h4 id=\"1-只在立即函式裡面宣告-let\"><a href=\"#1-只在立即函式裡面宣告-let\" class=\"headerlink\" title=\"1. 只在立即函式裡面宣告 let\"></a>1. 只在立即函式裡面宣告 let</h4><p>效果會跟 var 一樣，因為 <code>var</code> 在 <code>function</code> 裡面是受控制的不會到到處汙染，<code>let</code> 是因為 scope <code>{ }</code> 的關係，所以也被限制住，scope 外面一樣讀取不到，所以會顯示 <code>undefined</code>。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> letFunctionName = <span class=\"hljs-string\">'kevin'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是 function 裡面的 '</span> + letFunctionName)</span><br><span class=\"line\">})()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'外面的'</span> + letFunctionName)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/YgAdm1b.png\"></p>\n<p>用 <code>window.letFunctionName</code> 查看，全域一樣沒被汙染。<br><img src=\"https://i.imgur.com/xP20HGT.png\"></p>\n<h4 id=\"2-在立即函式裡、外同時宣告-let\"><a href=\"#2-在立即函式裡、外同時宣告-let\" class=\"headerlink\" title=\"2. 在立即函式裡、外同時宣告 let\"></a>2. 在立即函式裡、外同時宣告 let</h4><p>效果跟 <code>var</code> 一樣。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> letFunctionName = <span class=\"hljs-string\">'kevin'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是 function 裡面的 '</span> + letFunctionName)</span><br><span class=\"line\">})()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> letFunctionName = <span class=\"hljs-string\">'ken'</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'外面的'</span> + letFunctionName)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/GsmnHQT.png\"></p>\n<p>但是輸入 <code>window.letFunctionName</code> 會顯示 <code>undefined</code>，全域一樣沒被汙染。</p>\n<p><img src=\"https://i.imgur.com/QCbOlqE.png\"></p>\n<p>也就是說只要有 <code>let</code> 宣告加上 <code>{ }</code> 的話，就會可以完全控制變數，不需要擔心變數相同名稱，也甭擔心全域變數會受到汙染。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/xxEBQNe?editors=0001\">DEMO</a></p>\n<h2 id=\"const-的宣告\"><a href=\"#const-的宣告\" class=\"headerlink\" title=\"const 的宣告\"></a>const 的宣告</h2><blockquote>\n<p>const = constant 的縮寫</p>\n</blockquote>\n<h3 id=\"const-一旦被賦值後就不能再更改了。\"><a href=\"#const-一旦被賦值後就不能再更改了。\" class=\"headerlink\" title=\"const 一旦被賦值後就不能再更改了。\"></a>const 一旦被賦值後就不能再更改了。</h3><p>錯誤示範 :</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> constArry = <span class=\"hljs-number\">10</span></span><br><span class=\"line\">constArry = <span class=\"hljs-number\">999</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(constArry)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/Krz3cy5.png\"></p>\n<h3 id=\"但是有個特例\"><a href=\"#但是有個特例\" class=\"headerlink\" title=\"但是有個特例\"></a>但是有個特例</h3><p>雖然不能更改已經用 const 賦予的值，<br>但是!! 可以更改<font color=\"#FF0000\">物件或是陣列內的值</font>。</p>\n<h4 id=\"範例一\"><a href=\"#範例一\" class=\"headerlink\" title=\"範例一\"></a>範例一</h4><p>更陣列內指定的值</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> constArry = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>]</span><br><span class=\"line\">constArry[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">999</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(constArry)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>是可以的。<br><img src=\"https://i.imgur.com/DEbUzCk.png\"></p>\n<h4 id=\"範例二\"><a href=\"#範例二\" class=\"headerlink\" title=\"範例二\"></a>範例二</h4><p>陣列內整個值換掉</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> constArry = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>]</span><br><span class=\"line\">constArry = [<span class=\"hljs-number\">666</span> <span class=\"hljs-number\">777</span>, <span class=\"hljs-number\">888</span>]</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(constArry)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>是不行的，因為更改的已經是整個變數了，不是變數內的值。<br><img src=\"https://i.imgur.com/rMHiWiB.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/vYXPvbJ?editors=1011\">DEMO</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.youtube.com/watch?v=fJEw4eApm5I&amp;list=PLliocbKHJNwu150Kc7_eEywQBFLTJyPZs&amp;index=2&amp;t=1s\">ES6 基础教学</a><br><a href=\"https://courses.hexschool.com/courses/670037/lectures/11952053\">JavaScript 核心篇</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"}],"_tags":[{"name":"var","path":"tags/var/"},{"name":"let","path":"tags/let/"},{"name":"const","path":"tags/const/"}],"excerpt":"<html><head></head><body><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每當我們在命名變數的時候，都會有作用域上的困擾，或是不熟悉 var 、 let 、 const 三者之間的差別，導致環境中的變數被互相汙染，甚至影響到全域變數，為釐清這當中的觀念，決定寫一篇文章來幫助自己，方便日後回憶。</p></body></html>","more":"<h2 id=\"var-的宣告\"><a href=\"#var-的宣告\" class=\"headerlink\" title=\"var 的宣告\"></a>var 的宣告</h2><blockquote>\n<p>var = variable 的縮寫</p>\n</blockquote>\n<p>當我們用 <code>var</code> 宣告變數並賦值後，如果後面又用相同的變數同樣又被賦值，那後面的值會覆蓋掉前面的值，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;ken&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;kevin&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name)</span><br></pre></td></tr></table></figure>\n\n<p>變數同樣設為 <code>name</code> ，但卻顯示後面的值。<br><img src=\"https://i.imgur.com/edspqWp.png\"></p>\n<p>那如果用大括號包起來呢 ?<br>( 這邊用大括號是為了待會的 let 宣告比較，所埋下的伏筆 )</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;ken&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;kevin&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/s531jyy.png\"><br>結果還是一樣的。</p>\n<p>再輸入 <code>window.name</code> 查看，發現全域上已經有 <code>name</code> 的值了。<br><img src=\"https://i.imgur.com/ifNVCZs.png\"></p>\n<p>其實在宣告一個變數的時候，並不是故意要覆蓋掉之前的值，但有時候就這麼的剛好命名到相同的變數名稱。</p>\n<p>用 <code>var</code> 宣告就等於是全域 ( <code>window</code> ) 的宣告，這是 <code>var</code> 的一個缺點，為防止這樣的事發生，我們可以用 <code>function</code> 包起來，防止變數互相汙染。</p>\n<h3 id=\"以下示範用-function-控制-var-的作用域\"><a href=\"#以下示範用-function-控制-var-的作用域\" class=\"headerlink\" title=\"以下示範用 function 控制 var 的作用域\"></a>以下示範用 function 控制 var 的作用域</h3><h4 id=\"1-只在立即函式裡面宣告-var\"><a href=\"#1-只在立即函式裡面宣告-var\" class=\"headerlink\" title=\"1. 只在立即函式裡面宣告 var\"></a>1. 只在立即函式裡面宣告 var</h4><p>在 <code>function</code> 裡面用 <code>var</code> 宣告變數後，分別在 <code>function</code> 裡面跟外面用 <code>console.log</code> 查看</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> functionName = <span class=\"string\">&#x27;kevin&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是 function 裡面的 &#x27;</span> + functionName)</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;外面的&#x27;</span> + functionName)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/duOiXIj.png\"></p>\n<p>再用 <code>window.functionName</code> 查看，會顯示 <code>undefined</code>，就代表 <code>var</code> 會被限制在 <code>function</code> 裡面，不會汙染到外面的相同變數。<br><img src=\"https://i.imgur.com/gCTG8qA.png\"></p>\n<h4 id=\"2-在立即函式裡、外同時宣告-var\"><a href=\"#2-在立即函式裡、外同時宣告-var\" class=\"headerlink\" title=\"2. 在立即函式裡、外同時宣告 var\"></a>2. 在立即函式裡、外同時宣告 var</h4><p>如果不信脫離函式會汙染到全域或是其他變數的話，那在立即函式外面在用 <code>var</code> 宣告相同變數，但不同值，然後再用 <code>window.functionName</code> 查看全域變數。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> functionName = <span class=\"string\">&#x27;kevin&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是 function 裡面的 &#x27;</span> + functionName)</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> functionName = <span class=\"string\">&#x27;ken&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;外面的&#x27;</span> + functionName)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/NNGSXL9.png\"><br>由上圖可知，如果 <code>var</code> 脫離了立即函式或是任何函示就會不受控制的污染其他相同變數，甚至是全域變數。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWjxBVQ?editors=1011\">DEMO</a></p>\n<p>雖然有了 <code>function</code> 可以防止 <code>var</code> 宣告的變數汙染到其他變數，但除了 <code>function</code> 以外的 <code>for loop</code> 、<code>if else</code> 判斷式也會有不受控制的問題，以下示範</p>\n<h4 id=\"for-loop\"><a href=\"#for-loop\" class=\"headerlink\" title=\"for loop\"></a>for loop</h4><p>用 <code>var</code> 宣告條件，在 scope 裡面跟外面都加上 <code>console.log</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;裡面的 i = &#x27;</span> + i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是外面的 i = &#x27;</span> + i)</span><br></pre></td></tr></table></figure>\n\n<p>外面會顯示 5 是因為最後還會跑一次 <code>i++</code><br>此時 <code>i = 5</code> ，不符合 <code>i &lt; 5</code> 所以跳出 <code>for loop</code><br><img src=\"https://i.imgur.com/jEoMSZ1.png\"></p>\n<h4 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;ken&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/J8IDSRA.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEpPMgE?editors=0011\">DEMO</a></p>\n<p>如果想一次防止變數遭受汙染或是不受控制的話，可以使用下一節要說的 let 宣告。</p>\n<h2 id=\"let-的宣告\"><a href=\"#let-的宣告\" class=\"headerlink\" title=\"let 的宣告\"></a>let 的宣告</h2><blockquote>\n<p>let 沒有縮寫</p>\n</blockquote>\n<p>上一段提到，如果用 var 宣告的話會不受控制或是汙染到其他變數，不過在 ES6 語法裡面，是有方法可以解決這問題的，就是 let 宣告。</p>\n<p><strong>那 let 跟 var 的差別在於作用域 { }。</strong></p>\n<p>剛才兩個變數都是用 <code>var</code> 來做宣告，後面若再用一樣的變數，那變數的值是可以被覆蓋的，但是在 <code>let</code> 宣告下是禁止的，<code>let</code> 只能遠許一個相同名稱的變數存在，以下示範</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> letName = <span class=\"string\">&#x27;ken&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> letName = <span class=\"string\">&#x27;kevin&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(letName)</span><br></pre></td></tr></table></figure>\n\n<p>會顯示 <code>Uncaught SyntaxError: Identifier &#39;letName&#39; has already been declared </code>，用 <code>name</code> 命名的變數已經存在了，如下圖<br><img src=\"https://i.imgur.com/7819U4b.png\"></p>\n<p>但是 let 是有作用域 ( scope ) 的，就是用 <code>&#123; &#125;</code> 這個大括號，以下示範<br><img src=\"https://i.imgur.com/UT48xzX.png\"></p>\n<p>上面介紹 var 那段，用大括號包起了並用 var 宣告相同變數的話，值還是會被後面命名的變數給覆蓋掉，但是在 let 並用 { } 將其中一個相同名稱的變數包起來，就會獨立出來，也不會跳出<code>Identifier &#39;letName&#39; has already been declared </code> 這樣的 error 訊息，</p>\n<p>在 console.log 輸入 window.letName 會顯示 undefined，由此可知全域變數也沒有受到汙染。<br><img src=\"https://i.imgur.com/55Kmjyc.png\"></p>\n<h3 id=\"以下示範-let-的作用域\"><a href=\"#以下示範-let-的作用域\" class=\"headerlink\" title=\"以下示範 let 的作用域\"></a>以下示範 let 的作用域</h3><p>差別只在全域變數不會受到汙染，以下示範。</p>\n<h4 id=\"1-只在立即函式裡面宣告-let\"><a href=\"#1-只在立即函式裡面宣告-let\" class=\"headerlink\" title=\"1. 只在立即函式裡面宣告 let\"></a>1. 只在立即函式裡面宣告 let</h4><p>效果會跟 var 一樣，因為 <code>var</code> 在 <code>function</code> 裡面是受控制的不會到到處汙染，<code>let</code> 是因為 scope <code>&#123; &#125;</code> 的關係，所以也被限制住，scope 外面一樣讀取不到，所以會顯示 <code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> letFunctionName = <span class=\"string\">&#x27;kevin&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是 function 裡面的 &#x27;</span> + letFunctionName)</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;外面的&#x27;</span> + letFunctionName)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/YgAdm1b.png\"></p>\n<p>用 <code>window.letFunctionName</code> 查看，全域一樣沒被汙染。<br><img src=\"https://i.imgur.com/xP20HGT.png\"></p>\n<h4 id=\"2-在立即函式裡、外同時宣告-let\"><a href=\"#2-在立即函式裡、外同時宣告-let\" class=\"headerlink\" title=\"2. 在立即函式裡、外同時宣告 let\"></a>2. 在立即函式裡、外同時宣告 let</h4><p>效果跟 <code>var</code> 一樣。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> letFunctionName = <span class=\"string\">&#x27;kevin&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是 function 裡面的 &#x27;</span> + letFunctionName)</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> letFunctionName = <span class=\"string\">&#x27;ken&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;外面的&#x27;</span> + letFunctionName)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/GsmnHQT.png\"></p>\n<p>但是輸入 <code>window.letFunctionName</code> 會顯示 <code>undefined</code>，全域一樣沒被汙染。</p>\n<p><img src=\"https://i.imgur.com/QCbOlqE.png\"></p>\n<p>也就是說只要有 <code>let</code> 宣告加上 <code>&#123; &#125;</code> 的話，就會可以完全控制變數，不需要擔心變數相同名稱，也甭擔心全域變數會受到汙染。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/xxEBQNe?editors=0001\">DEMO</a></p>\n<h2 id=\"const-的宣告\"><a href=\"#const-的宣告\" class=\"headerlink\" title=\"const 的宣告\"></a>const 的宣告</h2><blockquote>\n<p>const = constant 的縮寫</p>\n</blockquote>\n<h3 id=\"const-一旦被賦值後就不能再更改了。\"><a href=\"#const-一旦被賦值後就不能再更改了。\" class=\"headerlink\" title=\"const 一旦被賦值後就不能再更改了。\"></a>const 一旦被賦值後就不能再更改了。</h3><p>錯誤示範 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> constArry = <span class=\"number\">10</span></span><br><span class=\"line\">constArry = <span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constArry)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/Krz3cy5.png\"></p>\n<h3 id=\"但是有個特例\"><a href=\"#但是有個特例\" class=\"headerlink\" title=\"但是有個特例\"></a>但是有個特例</h3><p>雖然不能更改已經用 const 賦予的值，<br>但是!! 可以更改<font color=#FF0000>物件或是陣列內的值</font>。</p>\n<h4 id=\"範例一\"><a href=\"#範例一\" class=\"headerlink\" title=\"範例一\"></a>範例一</h4><p>更陣列內指定的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> constArry = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">constArry[<span class=\"number\">0</span>] = <span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constArry)</span><br></pre></td></tr></table></figure>\n\n<p>是可以的。<br><img src=\"https://i.imgur.com/DEbUzCk.png\"></p>\n<h4 id=\"範例二\"><a href=\"#範例二\" class=\"headerlink\" title=\"範例二\"></a>範例二</h4><p>陣列內整個值換掉</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> constArry = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">constArry = [<span class=\"number\">666</span> <span class=\"number\">777</span>, <span class=\"number\">888</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constArry)</span><br></pre></td></tr></table></figure>\n\n<p>是不行的，因為更改的已經是整個變數了，不是變數內的值。<br><img src=\"https://i.imgur.com/rMHiWiB.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/vYXPvbJ?editors=1011\">DEMO</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.youtube.com/watch?v=fJEw4eApm5I&list=PLliocbKHJNwu150Kc7_eEywQBFLTJyPZs&index=2&t=1s\">ES6 基础教学</a><br><a href=\"https://courses.hexschool.com/courses/670037/lectures/11952053\">JavaScript 核心篇</a></p>"},{"title":"JavaScript 實作 - 明年倒數計時","date":"2021-02-04T16:00:00.000Z","_content":"\n## 功能描述:\n\n1. 網頁載入會顯示 loading 效果。\n2. loading 完會顯示距離明年倒數時間。\n\n![](https://i.imgur.com/lv6I4AW.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission29)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission29/index.html)\n\n<!--more-->\n\n## 架構\n\n用容器把顯示內容放在裡面，方便 loading 效果結束時控制這個容器要不要顯示。\n容器放置內容\n\n1. 跨年標題。\n2. 顯示倒數時間的天、時、分、秒。\n3. Loading 效果。\n\n```html\n<div class=\"container\">\n  <h1>Happy New Year</h1>\n  <ul id=\"countdown\" class=\"countdown\">\n    <li class=\"times\">\n      <p id=\"days\">00</p>\n      <small>days</small>\n    </li>\n    <li class=\"times\">\n      <p id=\"hours\">00</p>\n      <small>hours</small>\n    </li>\n    <li class=\"times\">\n      <p id=\"minutes\">00</p>\n      <small>minutes</small>\n    </li>\n    <li class=\"times\">\n      <p id=\"seconds\">00</p>\n      <small>seconds</small>\n    </li>\n  </ul>\n</div>\n\n<img src=\"./image/spinner.gif\" id=\"loading\" />\n```\n\n架構完成圖\n![](https://i.imgur.com/TOa6NkA.png)\n\n## CSS 樣式\n\n### 偽元素 ( before & after )\n\n因為背景圖片太亮的關係導致文字顏色不是很明顯，可以透過偽元素將背景圖片的顏色刷黑一點，再用` z-index` 屬性把文字呈現在最上層，這樣不只看到背景圖片又可以清楚看到文字。\n\n偽元素必須要有 `content` 屬性，如果沒有效果會呈現不出來。\n\n```css\nbody::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n```\n\n- `z-index: 數字` : 數字越大代表越優先被排在畫面最上層。\n\n我把文字內容放在 `container` 容器裡面，只要加入 `z-index` 屬性，就可以把文字內容放在暗色調的上一層。\n\n```css\n.container {\n  z-index: 1;\n}\n```\n\n沒用偽元素\n![](https://i.imgur.com/DKSnH25.png)\n\n有用偽元素，字體顏色會比較清楚\n![](https://i.imgur.com/C4gRveP.png)\n\n## JavaScript\n\n### 1. 計算公式\n\n查看目前還剩多少時間到明年元旦，可以用以下公式\n\n```javascript\n// 剩下時間 = 現在的年份 + 1 ( 明年元旦 ) - 現在的時間 ( 現在 )\nconst totalTime = newYear - newTime\n```\n\n### 2. 現在時間\n\n用 `new Date` 抓取現在時間，有了現在時間的值再把值賦予到變數裡面，但要注意目前抓到的值是物件型別。\n![](https://i.imgur.com/1jB2jRX.png)\n\n有了完整時間後，可以用 `getFullYear` 抓取現在年份同時轉換型別。\n\n- `getFullYear` : 用來取得一個 Date 物件的<font color=#FF0000>年份</font>，時區是本地時間。\n\n沒有 `getFullYear` 抓到的值會試完整時間，型別是物件型式。\n\n```javascript\nconst times1 = new Date()\nconsole.log(times1)\nconsole.log(typeof times1)\n```\n\n![](https://i.imgur.com/TmmMHfe.png)\n\n---\n\n有 `getFullYear` 就抓取當前的年份，同時轉成數字型別，轉型別的目的是為了方便把目前時間 +1 變成明年。\n\n```javascript\nconst nowYear = new Date().getFullYear()\nconsole.log(nowYear)\nconsole.log(typeof nowYear)\n```\n\n![](https://i.imgur.com/H5hLrok.png)\n\n### 3. 明年元旦時間\n\n把剛才用 `getFullYear` 轉換的年份 +1 就是明年年份。\n\n```javascript\n// 現在的年份 + 1 ( 明年 )\nconst newYear = new Date(`January 01 ${nowYear + 1} 00:00:00`)\n```\n\n### 4. 倒數計時\n\n用 `console` 查看 `totalTime` 為<font color=#FF0000>總毫秒</font>。\n( 毫秒 / 1000 ) = 秒\n( 毫秒 / 1000 ) % 60 = 當下的<font color=#FF0000>秒數</font>。\n( 毫秒 / 1000 / 60 ) % 60 = 當下的<font color=#FF0000>分鐘數</font>。\n( 毫秒 / 1000 / 60 /60 ) % 24 = 當下的<font color=#FF0000>小時數</font>。\n( 毫秒 / 1000 / 60 /60 / 24) = 當下的<font color=#FF0000>天數</font>。\n把算出來的值綁定到 dom 上，讓呈現在畫面上。\n\n在不管是小時、分鐘、秒數都會有個位數，出現個位數前面可加 `\"0\"`，用三源判斷式。\n\n```javascript\nfunction getTime() {\n  const newTime = new Date()\n  // console.log(newTime)\n  const totalTime = newYear - newTime\n  // console.log(totalTime)\n\n  const day = Math.floor(totalTime / 1000 / 60 / 60 / 24)\n  // console.log(day)\n  const hours = Math.floor(totalTime / 1000 / 60 / 60) % 24\n  // console.log(hours)\n  const minutes = Math.floor(totalTime / 1000 / 60) % 60\n  // console.log(minutes)\n  const seconds = Math.floor(totalTime / 1000) % 60\n  // console.log(seconds)\n\n  dayEl.innerHTML = day\n  hourEl.innerHTML = hours < 10 ? '0' + hours : hours\n  minutesEL.innerHTML = minutes < 10 ? '0' + minutes : minutes\n  secondsEl.innerHTML = seconds < 10 ? '0' + seconds : seconds\n}\n// getTime() 每秒執行一次\nsetInterval(getTime, 1000)\n```\n\n### 5. loading 效果\n\n每刷新頁面就會顯示一下 loading 效果。\n\n畫面載入一秒後移除 loading 效果，同時顯示時間。\n\n```javascript\nsetTimeout(() => {\n  loading.remove()\n  countdown.style.display = 'flex'\n}, 1000)\n```\n\n## 參考資料\n\n[JavaScript Date getFullYear()](https://www.fooish.com/javascript/date/getFullYear.html)\n[CSS 偽元素 ( before 與 after )](https://www.oxxostudio.tw/articles/201706/pseudo-element-1.html)\n[重新認識 JavaScript: Day 06 運算式與運算子](https://ithelp.ithome.com.tw/articles/10191180)\n","source":"_posts/2020/countdown.md","raw":"---\ntitle: JavaScript 實作 - 明年倒數計時\ndate: 2021/02/05\ntags:\n  - JavaScrip\n  - 作品集\n  - 偽元素\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n## 功能描述:\n\n1. 網頁載入會顯示 loading 效果。\n2. loading 完會顯示距離明年倒數時間。\n\n![](https://i.imgur.com/lv6I4AW.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission29)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission29/index.html)\n\n<!--more-->\n\n## 架構\n\n用容器把顯示內容放在裡面，方便 loading 效果結束時控制這個容器要不要顯示。\n容器放置內容\n\n1. 跨年標題。\n2. 顯示倒數時間的天、時、分、秒。\n3. Loading 效果。\n\n```html\n<div class=\"container\">\n  <h1>Happy New Year</h1>\n  <ul id=\"countdown\" class=\"countdown\">\n    <li class=\"times\">\n      <p id=\"days\">00</p>\n      <small>days</small>\n    </li>\n    <li class=\"times\">\n      <p id=\"hours\">00</p>\n      <small>hours</small>\n    </li>\n    <li class=\"times\">\n      <p id=\"minutes\">00</p>\n      <small>minutes</small>\n    </li>\n    <li class=\"times\">\n      <p id=\"seconds\">00</p>\n      <small>seconds</small>\n    </li>\n  </ul>\n</div>\n\n<img src=\"./image/spinner.gif\" id=\"loading\" />\n```\n\n架構完成圖\n![](https://i.imgur.com/TOa6NkA.png)\n\n## CSS 樣式\n\n### 偽元素 ( before & after )\n\n因為背景圖片太亮的關係導致文字顏色不是很明顯，可以透過偽元素將背景圖片的顏色刷黑一點，再用` z-index` 屬性把文字呈現在最上層，這樣不只看到背景圖片又可以清楚看到文字。\n\n偽元素必須要有 `content` 屬性，如果沒有效果會呈現不出來。\n\n```css\nbody::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n```\n\n- `z-index: 數字` : 數字越大代表越優先被排在畫面最上層。\n\n我把文字內容放在 `container` 容器裡面，只要加入 `z-index` 屬性，就可以把文字內容放在暗色調的上一層。\n\n```css\n.container {\n  z-index: 1;\n}\n```\n\n沒用偽元素\n![](https://i.imgur.com/DKSnH25.png)\n\n有用偽元素，字體顏色會比較清楚\n![](https://i.imgur.com/C4gRveP.png)\n\n## JavaScript\n\n### 1. 計算公式\n\n查看目前還剩多少時間到明年元旦，可以用以下公式\n\n```javascript\n// 剩下時間 = 現在的年份 + 1 ( 明年元旦 ) - 現在的時間 ( 現在 )\nconst totalTime = newYear - newTime\n```\n\n### 2. 現在時間\n\n用 `new Date` 抓取現在時間，有了現在時間的值再把值賦予到變數裡面，但要注意目前抓到的值是物件型別。\n![](https://i.imgur.com/1jB2jRX.png)\n\n有了完整時間後，可以用 `getFullYear` 抓取現在年份同時轉換型別。\n\n- `getFullYear` : 用來取得一個 Date 物件的<font color=#FF0000>年份</font>，時區是本地時間。\n\n沒有 `getFullYear` 抓到的值會試完整時間，型別是物件型式。\n\n```javascript\nconst times1 = new Date()\nconsole.log(times1)\nconsole.log(typeof times1)\n```\n\n![](https://i.imgur.com/TmmMHfe.png)\n\n---\n\n有 `getFullYear` 就抓取當前的年份，同時轉成數字型別，轉型別的目的是為了方便把目前時間 +1 變成明年。\n\n```javascript\nconst nowYear = new Date().getFullYear()\nconsole.log(nowYear)\nconsole.log(typeof nowYear)\n```\n\n![](https://i.imgur.com/H5hLrok.png)\n\n### 3. 明年元旦時間\n\n把剛才用 `getFullYear` 轉換的年份 +1 就是明年年份。\n\n```javascript\n// 現在的年份 + 1 ( 明年 )\nconst newYear = new Date(`January 01 ${nowYear + 1} 00:00:00`)\n```\n\n### 4. 倒數計時\n\n用 `console` 查看 `totalTime` 為<font color=#FF0000>總毫秒</font>。\n( 毫秒 / 1000 ) = 秒\n( 毫秒 / 1000 ) % 60 = 當下的<font color=#FF0000>秒數</font>。\n( 毫秒 / 1000 / 60 ) % 60 = 當下的<font color=#FF0000>分鐘數</font>。\n( 毫秒 / 1000 / 60 /60 ) % 24 = 當下的<font color=#FF0000>小時數</font>。\n( 毫秒 / 1000 / 60 /60 / 24) = 當下的<font color=#FF0000>天數</font>。\n把算出來的值綁定到 dom 上，讓呈現在畫面上。\n\n在不管是小時、分鐘、秒數都會有個位數，出現個位數前面可加 `\"0\"`，用三源判斷式。\n\n```javascript\nfunction getTime() {\n  const newTime = new Date()\n  // console.log(newTime)\n  const totalTime = newYear - newTime\n  // console.log(totalTime)\n\n  const day = Math.floor(totalTime / 1000 / 60 / 60 / 24)\n  // console.log(day)\n  const hours = Math.floor(totalTime / 1000 / 60 / 60) % 24\n  // console.log(hours)\n  const minutes = Math.floor(totalTime / 1000 / 60) % 60\n  // console.log(minutes)\n  const seconds = Math.floor(totalTime / 1000) % 60\n  // console.log(seconds)\n\n  dayEl.innerHTML = day\n  hourEl.innerHTML = hours < 10 ? '0' + hours : hours\n  minutesEL.innerHTML = minutes < 10 ? '0' + minutes : minutes\n  secondsEl.innerHTML = seconds < 10 ? '0' + seconds : seconds\n}\n// getTime() 每秒執行一次\nsetInterval(getTime, 1000)\n```\n\n### 5. loading 效果\n\n每刷新頁面就會顯示一下 loading 效果。\n\n畫面載入一秒後移除 loading 效果，同時顯示時間。\n\n```javascript\nsetTimeout(() => {\n  loading.remove()\n  countdown.style.display = 'flex'\n}, 1000)\n```\n\n## 參考資料\n\n[JavaScript Date getFullYear()](https://www.fooish.com/javascript/date/getFullYear.html)\n[CSS 偽元素 ( before 與 after )](https://www.oxxostudio.tw/articles/201706/pseudo-element-1.html)\n[重新認識 JavaScript: Day 06 運算式與運算子](https://ithelp.ithome.com.tw/articles/10191180)\n","slug":"countdown","published":1,"updated":"2021-03-26T16:13:10.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpv0015g0tr84rt6qzf","content":"<html><head></head><body><h2 id=\"功能描述\"><a href=\"#功能描述\" class=\"headerlink\" title=\"功能描述:\"></a>功能描述:</h2><ol>\n<li>網頁載入會顯示 loading 效果。</li>\n<li>loading 完會顯示距離明年倒數時間。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/lv6I4AW.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission29\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission29/index.html\">Demo</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h2><p>用容器把顯示內容放在裡面，方便 loading 效果結束時控制這個容器要不要顯示。<br>容器放置內容</p>\n<ol>\n<li>跨年標題。</li>\n<li>顯示倒數時間的天、時、分、秒。</li>\n<li>Loading 效果。</li>\n</ol>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Happy New Year<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"countdown\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"countdown\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"times\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"days\"</span>&gt;</span>00<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span>&gt;</span>days<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"times\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"hours\"</span>&gt;</span>00<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span>&gt;</span>hours<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"times\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"minutes\"</span>&gt;</span>00<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span>&gt;</span>minutes<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"times\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"seconds\"</span>&gt;</span>00<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span>&gt;</span>seconds<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./image/spinner.gif\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"loading\"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>架構完成圖<br><img src=\"https://i.imgur.com/TOa6NkA.png\"></p>\n<h2 id=\"CSS-樣式\"><a href=\"#CSS-樣式\" class=\"headerlink\" title=\"CSS 樣式\"></a>CSS 樣式</h2><h3 id=\"偽元素-before-amp-after\"><a href=\"#偽元素-before-amp-after\" class=\"headerlink\" title=\"偽元素 ( before &amp; after )\"></a>偽元素 ( before &amp; after )</h3><p>因為背景圖片太亮的關係導致文字顏色不是很明顯，可以透過偽元素將背景圖片的顏色刷黑一點，再用<code> z-index</code> 屬性把文字呈現在最上層，這樣不只看到背景圖片又可以清楚看到文字。</p>\n<p>偽元素必須要有 <code>content</code> 屬性，如果沒有效果會呈現不出來。</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-tag\">body</span><span class=\"hljs-selector-pseudo\">::after</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">''</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.5</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><code>z-index: 數字</code> : 數字越大代表越優先被排在畫面最上層。</li>\n</ul>\n<p>我把文字內容放在 <code>container</code> 容器裡面，只要加入 <code>z-index</code> 屬性，就可以把文字內容放在暗色調的上一層。</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>沒用偽元素<br><img src=\"https://i.imgur.com/DKSnH25.png\"></p>\n<p>有用偽元素，字體顏色會比較清楚<br><img src=\"https://i.imgur.com/C4gRveP.png\"></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"1-計算公式\"><a href=\"#1-計算公式\" class=\"headerlink\" title=\"1. 計算公式\"></a>1. 計算公式</h3><p>查看目前還剩多少時間到明年元旦，可以用以下公式</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 剩下時間 = 現在的年份 + 1 ( 明年元旦 ) - 現在的時間 ( 現在 )</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> totalTime = newYear - newTime</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-現在時間\"><a href=\"#2-現在時間\" class=\"headerlink\" title=\"2. 現在時間\"></a>2. 現在時間</h3><p>用 <code>new Date</code> 抓取現在時間，有了現在時間的值再把值賦予到變數裡面，但要注意目前抓到的值是物件型別。<br><img src=\"https://i.imgur.com/1jB2jRX.png\"></p>\n<p>有了完整時間後，可以用 <code>getFullYear</code> 抓取現在年份同時轉換型別。</p>\n<ul>\n<li><code>getFullYear</code> : 用來取得一個 Date 物件的<font color=\"#FF0000\">年份</font>，時區是本地時間。</li>\n</ul>\n<p>沒有 <code>getFullYear</code> 抓到的值會試完整時間，型別是物件型式。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> times1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(times1)</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> times1)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/TmmMHfe.png\"></p>\n<hr>\n<p>有 <code>getFullYear</code> 就抓取當前的年份，同時轉成數字型別，轉型別的目的是為了方便把目前時間 +1 變成明年。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> nowYear = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear()</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nowYear)</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> nowYear)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/H5hLrok.png\"></p>\n<h3 id=\"3-明年元旦時間\"><a href=\"#3-明年元旦時間\" class=\"headerlink\" title=\"3. 明年元旦時間\"></a>3. 明年元旦時間</h3><p>把剛才用 <code>getFullYear</code> 轉換的年份 +1 就是明年年份。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 現在的年份 + 1 ( 明年 )</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> newYear = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">`January 01 <span class=\"hljs-subst\">${nowYear + <span class=\"hljs-number\">1</span>}</span> 00:00:00`</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-倒數計時\"><a href=\"#4-倒數計時\" class=\"headerlink\" title=\"4. 倒數計時\"></a>4. 倒數計時</h3><p>用 <code>console</code> 查看 <code>totalTime</code> 為<font color=\"#FF0000\">總毫秒</font>。<br>( 毫秒 / 1000 ) = 秒<br>( 毫秒 / 1000 ) % 60 = 當下的<font color=\"#FF0000\">秒數</font>。<br>( 毫秒 / 1000 / 60 ) % 60 = 當下的<font color=\"#FF0000\">分鐘數</font>。<br>( 毫秒 / 1000 / 60 /60 ) % 24 = 當下的<font color=\"#FF0000\">小時數</font>。<br>( 毫秒 / 1000 / 60 /60 / 24) = 當下的<font color=\"#FF0000\">天數</font>。<br>把算出來的值綁定到 dom 上，讓呈現在畫面上。</p>\n<p>在不管是小時、分鐘、秒數都會有個位數，出現個位數前面可加 <code>\"0\"</code>，用三源判斷式。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTime</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> newTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(newTime)</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> totalTime = newYear - newTime</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(totalTime)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> day = <span class=\"hljs-built_in\">Math</span>.floor(totalTime / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">24</span>)</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(day)</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> hours = <span class=\"hljs-built_in\">Math</span>.floor(totalTime / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">60</span>) % <span class=\"hljs-number\">24</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(hours)</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> minutes = <span class=\"hljs-built_in\">Math</span>.floor(totalTime / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">60</span>) % <span class=\"hljs-number\">60</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(minutes)</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> seconds = <span class=\"hljs-built_in\">Math</span>.floor(totalTime / <span class=\"hljs-number\">1000</span>) % <span class=\"hljs-number\">60</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(seconds)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  dayEl.innerHTML = day</span><br><span class=\"line\">  hourEl.innerHTML = hours &lt; <span class=\"hljs-number\">10</span> ? <span class=\"hljs-string\">'0'</span> + hours : hours</span><br><span class=\"line\">  minutesEL.innerHTML = minutes &lt; <span class=\"hljs-number\">10</span> ? <span class=\"hljs-string\">'0'</span> + minutes : minutes</span><br><span class=\"line\">  secondsEl.innerHTML = seconds &lt; <span class=\"hljs-number\">10</span> ? <span class=\"hljs-string\">'0'</span> + seconds : seconds</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-comment\">// getTime() 每秒執行一次</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">setInterval</span>(getTime, <span class=\"hljs-number\">1000</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"5-loading-效果\"><a href=\"#5-loading-效果\" class=\"headerlink\" title=\"5. loading 效果\"></a>5. loading 效果</h3><p>每刷新頁面就會顯示一下 loading 效果。</p>\n<p>畫面載入一秒後移除 loading 效果，同時顯示時間。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  loading.remove()</span><br><span class=\"line\">  countdown.style.display = <span class=\"hljs-string\">'flex'</span></span><br><span class=\"line\">}, <span class=\"hljs-number\">1000</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.fooish.com/javascript/date/getFullYear.html\">JavaScript Date getFullYear()</a><br><a href=\"https://www.oxxostudio.tw/articles/201706/pseudo-element-1.html\">CSS 偽元素 ( before 與 after )</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10191180\">重新認識 JavaScript: Day 06 運算式與運算子</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"作品集","path":"tags/作品集/"},{"name":"JavaScrip","path":"tags/JavaScrip/"},{"name":"偽元素","path":"tags/偽元素/"}],"excerpt":"<html><head></head><body><h2 id=\"功能描述\"><a href=\"#功能描述\" class=\"headerlink\" title=\"功能描述:\"></a>功能描述:</h2><ol>\n<li>網頁載入會顯示 loading 效果。</li>\n<li>loading 完會顯示距離明年倒數時間。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/lv6I4AW.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission29\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission29/index.html\">Demo</a></p></body></html>","more":"<h2 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h2><p>用容器把顯示內容放在裡面，方便 loading 效果結束時控制這個容器要不要顯示。<br>容器放置內容</p>\n<ol>\n<li>跨年標題。</li>\n<li>顯示倒數時間的天、時、分、秒。</li>\n<li>Loading 效果。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Happy New Year<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;countdown&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;countdown&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;times&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;days&quot;</span>&gt;</span>00<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>days<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;times&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;hours&quot;</span>&gt;</span>00<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>hours<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;times&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;minutes&quot;</span>&gt;</span>00<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>minutes<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;times&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;seconds&quot;</span>&gt;</span>00<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>seconds<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./image/spinner.gif&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loading&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>架構完成圖<br><img src=\"https://i.imgur.com/TOa6NkA.png\"></p>\n<h2 id=\"CSS-樣式\"><a href=\"#CSS-樣式\" class=\"headerlink\" title=\"CSS 樣式\"></a>CSS 樣式</h2><h3 id=\"偽元素-before-amp-after\"><a href=\"#偽元素-before-amp-after\" class=\"headerlink\" title=\"偽元素 ( before &amp; after )\"></a>偽元素 ( before &amp; after )</h3><p>因為背景圖片太亮的關係導致文字顏色不是很明顯，可以透過偽元素將背景圖片的顏色刷黑一點，再用<code> z-index</code> 屬性把文字呈現在最上層，這樣不只看到背景圖片又可以清楚看到文字。</p>\n<p>偽元素必須要有 <code>content</code> 屬性，如果沒有效果會呈現不出來。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>z-index: 數字</code> : 數字越大代表越優先被排在畫面最上層。</li>\n</ul>\n<p>我把文字內容放在 <code>container</code> 容器裡面，只要加入 <code>z-index</code> 屬性，就可以把文字內容放在暗色調的上一層。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>沒用偽元素<br><img src=\"https://i.imgur.com/DKSnH25.png\"></p>\n<p>有用偽元素，字體顏色會比較清楚<br><img src=\"https://i.imgur.com/C4gRveP.png\"></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"1-計算公式\"><a href=\"#1-計算公式\" class=\"headerlink\" title=\"1. 計算公式\"></a>1. 計算公式</h3><p>查看目前還剩多少時間到明年元旦，可以用以下公式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 剩下時間 = 現在的年份 + 1 ( 明年元旦 ) - 現在的時間 ( 現在 )</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> totalTime = newYear - newTime</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-現在時間\"><a href=\"#2-現在時間\" class=\"headerlink\" title=\"2. 現在時間\"></a>2. 現在時間</h3><p>用 <code>new Date</code> 抓取現在時間，有了現在時間的值再把值賦予到變數裡面，但要注意目前抓到的值是物件型別。<br><img src=\"https://i.imgur.com/1jB2jRX.png\"></p>\n<p>有了完整時間後，可以用 <code>getFullYear</code> 抓取現在年份同時轉換型別。</p>\n<ul>\n<li><code>getFullYear</code> : 用來取得一個 Date 物件的<font color=#FF0000>年份</font>，時區是本地時間。</li>\n</ul>\n<p>沒有 <code>getFullYear</code> 抓到的值會試完整時間，型別是物件型式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> times1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(times1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> times1)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/TmmMHfe.png\"></p>\n<hr>\n<p>有 <code>getFullYear</code> 就抓取當前的年份，同時轉成數字型別，轉型別的目的是為了方便把目前時間 +1 變成明年。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nowYear = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nowYear)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> nowYear)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/H5hLrok.png\"></p>\n<h3 id=\"3-明年元旦時間\"><a href=\"#3-明年元旦時間\" class=\"headerlink\" title=\"3. 明年元旦時間\"></a>3. 明年元旦時間</h3><p>把剛才用 <code>getFullYear</code> 轉換的年份 +1 就是明年年份。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 現在的年份 + 1 ( 明年 )</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newYear = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">`January 01 <span class=\"subst\">$&#123;nowYear + <span class=\"number\">1</span>&#125;</span> 00:00:00`</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-倒數計時\"><a href=\"#4-倒數計時\" class=\"headerlink\" title=\"4. 倒數計時\"></a>4. 倒數計時</h3><p>用 <code>console</code> 查看 <code>totalTime</code> 為<font color=#FF0000>總毫秒</font>。<br>( 毫秒 / 1000 ) = 秒<br>( 毫秒 / 1000 ) % 60 = 當下的<font color=#FF0000>秒數</font>。<br>( 毫秒 / 1000 / 60 ) % 60 = 當下的<font color=#FF0000>分鐘數</font>。<br>( 毫秒 / 1000 / 60 /60 ) % 24 = 當下的<font color=#FF0000>小時數</font>。<br>( 毫秒 / 1000 / 60 /60 / 24) = 當下的<font color=#FF0000>天數</font>。<br>把算出來的值綁定到 dom 上，讓呈現在畫面上。</p>\n<p>在不管是小時、分鐘、秒數都會有個位數，出現個位數前面可加 <code>&quot;0&quot;</code>，用三源判斷式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTime</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"comment\">// console.log(newTime)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> totalTime = newYear - newTime</span><br><span class=\"line\">  <span class=\"comment\">// console.log(totalTime)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> day = <span class=\"built_in\">Math</span>.floor(totalTime / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>)</span><br><span class=\"line\">  <span class=\"comment\">// console.log(day)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hours = <span class=\"built_in\">Math</span>.floor(totalTime / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span>) % <span class=\"number\">24</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(hours)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> minutes = <span class=\"built_in\">Math</span>.floor(totalTime / <span class=\"number\">1000</span> / <span class=\"number\">60</span>) % <span class=\"number\">60</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(minutes)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> seconds = <span class=\"built_in\">Math</span>.floor(totalTime / <span class=\"number\">1000</span>) % <span class=\"number\">60</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(seconds)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  dayEl.innerHTML = day</span><br><span class=\"line\">  hourEl.innerHTML = hours &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + hours : hours</span><br><span class=\"line\">  minutesEL.innerHTML = minutes &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + minutes : minutes</span><br><span class=\"line\">  secondsEl.innerHTML = seconds &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + seconds : seconds</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// getTime() 每秒執行一次</span></span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(getTime, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-loading-效果\"><a href=\"#5-loading-效果\" class=\"headerlink\" title=\"5. loading 效果\"></a>5. loading 效果</h3><p>每刷新頁面就會顯示一下 loading 效果。</p>\n<p>畫面載入一秒後移除 loading 效果，同時顯示時間。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  loading.remove()</span><br><span class=\"line\">  countdown.style.display = <span class=\"string\">&#x27;flex&#x27;</span></span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.fooish.com/javascript/date/getFullYear.html\">JavaScript Date getFullYear()</a><br><a href=\"https://www.oxxostudio.tw/articles/201706/pseudo-element-1.html\">CSS 偽元素 ( before 與 after )</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10191180\">重新認識 JavaScript: Day 06 運算式與運算子</a></p>"},{"title":"JavaScript 實作 - 拖曳效果","date":"2021-02-07T16:00:00.000Z","_content":"\n## 功能描述:\n\n1. 刷新頁面打亂排列順序。\n2. 可以拖曳方塊排列順序。\n3. 確認排列順序是否正確。\n\n![](https://i.imgur.com/1xYdtS0.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission30)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission30/index.html)\n\n<!--more-->\n\n## 架構\n\n```html\n<h1>苗栗國必去前10名景點</h1>\n<p>請利用拖曳排列出這10名的順序</p>\n<ul class=\"draggable-list\" id=\"draggable-list\"></ul>\n<button class=\"check-btn\" id=\"check-btn\">\n  Check Attractions\n  <i class=\"fas fa-paper-plane\"></i>\n</button>\n```\n\n拖曳方塊不能寫死，因為每次刷新頁面順序會打亂，打亂的順序排名用 javascript 撰寫。\n\n## CSS 樣式\n\n拖曳的時候會呈現色差\n\n```css\n.draggable-list li.over .draggable {\n  background-color: #eaeaea;\n}\n```\n\n用顏色確認目前排列順序是否正確。\n\n```css\n.draggable-list li.right .person-name {\n  color: #3ae374;\n}\n\n.draggable-list li.wrong .person-name {\n  color: #ff3838;\n}\n```\n\n按鈕縮放效果\n\n```css\n.check-btn:active {\n  transform: scale(0.98);\n}\n```\n\n點擊按鈕不要有邊框線條\n\n```css\n.check-btn:focus {\n  outline: none;\n}\n```\n\n## JavaScript\n\n### 1. 綁定 DOM ，給初始值\n\n```javascript\nconst draggableList = document.querySelector('#draggable-list')\nconst checkBtn = document.querySelector('#check-btn')\n\nconst attractions = [\n  '客家大院',\n  '後龍鎮半天寮休閒文化園區 - 好望角',\n  '天空之城',\n  '九華山 天空步道',\n  '苗栗客家圓樓',\n  '雅聞七里香玫瑰森林',\n  '龍騰斷橋(魚藤坪斷橋)',\n  '飛牛牧場',\n  '銅鑼炮仗花海公園',\n  '舊銅鑼隧道',\n]\n\nlet dragStartIndex\nconst listItems = []\n```\n\n### 2. 產生 DOM 並呈現在畫面上\n\n> 展開運算符 ( Spread Operator ) :\n> 是把一個陣列展開成個別值，這個運算符後面必定接著一個陣列。\n> 最常見的是用來組合 ( 連接 ) 陣列。\n\n> 其餘運算符 ( Rest Operator ) :\n> 是收集其餘的 ( 剩餘的 ) 這些值，轉變成一個陣列。它會用在函式定義時的傳入參數識別名定義 ( 其餘參數, Rest parameters )，以及解構賦值時\n>\n> 以上兩點引述自 : [展開運算符與其餘運算符](https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html)\n\n`setAttribute( 'data-名稱', 'value 值')` : 設定元件屬性，就是在元件上賦予名字跟值。\n不過這命名不能亂命，為了方面辨識或是避免搞混，在名稱前面會加上 `data-` 。\n以下範例用 `console` 查看\n![](https://i.imgur.com/tx1LA4c.png)\n\n不過上面值是 `number` ，如果是字串要用 `string`，以下示範\n\n```javascript\n// 加兩個屬性\nlistItem.setAttribute('data-id', 'dataId')\nlistItem.setAttribute('data-name', 'dataName')\n```\n\n![](https://i.imgur.com/DuEqPBg.png)\n\n利用**展開運算符**把陣列內的景點變成個別的值，再用 `forEach` 產生每筆資料，每筆資料用 `setAttribute` 設定索引值，再把資料加入倒 `ul` 元件底下。\n\n```javascript\ncreatListItem()\n\nfunction creatListItem() {\n  ;[...attractions].forEach((person, index) => {\n    const listItem = document.createElement('li')\n    listItem.setAttribute('data-Index', index) //這不是設定className，單純的 name 跟 value\n\n    listItem.innerHTML = `\n    <span class='number'>${index + 1}</span>\n    <div class='draggable' draggable='true'>\n      <p class='person-name'>${person}</p>\n      <i class='fas fa-grip-lines'></i>\n    </div>\n    `\n    listItems.push(listItem)\n    draggableList.appendChild(listItem)\n  })\n\n  addEventListeners()\n}\n```\n\n### 3. 資料隨機排列\n\n有了資料後，每次刷新頁面資料要隨機排列。\n要隨機排列就要有亂數，並且把亂數跟字串綁定，這樣每次刷新頁面順序就會是亂的。\n\n把陣列內的字串用 map 產生出新的陣列 :\n將字串賦予到 value 裡面，再用 `Math.random()` 產生亂數，把這些亂數賦予到 sort 裡面，但是目前排列順序還是不對，必須依照我設定的順序跟數字綁定\n\n```javascript\n;[...attractions].map((a) => ({ value: a, sort: Math.random() }))\n```\n\n![](https://i.imgur.com/asWCFfa.png)\n\n- ` sort()` : 把資料依照正確順序排列。[Codepen](https://codepen.io/gleofgja/pen/LYbNwoE?editors=0011)\n\n```javascript\n// 本來陣列內數字是亂的，經過 sort 會依照大小排列\nconst numbers = [1, 3, 9, 6, 20, 15]\nconsole.log(\n  numbers.sort(function (a, b) {\n    return a - b\n  })\n)\n\n// arrow function\nconsole.log(numbers.sort((a, b) => a - b))\n```\n\n![](https://i.imgur.com/rRpF2i2.png)\n\n看過上面的解釋後，接下來要把陣列內的字串跟正確的數字順序做綁定。\n\n```javascript\n;[...attractions].sort((a, b) => a.sort - b.sort)\n```\n\n![](https://i.imgur.com/WRDnx5f.png)\n比照上面那張圖，原本是亂掉的，現在依照陣列內的順序讓數字由小到大排列。\n\n有了順序後，數字不被看見，只要取 value 就好。\n\n```javascript\n.map((a) => a.value)\n```\n\n### 4. 拖曳效果\n\n下表參考自 : [HTML5 Drag and Drop API 筆記](https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/)\n| | Drag Source | Drag Target |解釋 |\n| -------- | -------- | -------- |-------- |\n| 1 | dragstart| |**開始**拖曳元素時觸發此事件|\n| 2 | drag | dragenter |拖曳元素時觸發此事件|\n| 3 | | dragover |當元素拖曳到**有效位置放置**則觸發此事件|\n| 4 | | dragleave |拖曳的元素**離開**有效的位置時觸發|\n| 5 | | drop |在**有效位置**上**放置**元素時觸發此事件|\n| 6 | dropend | |當拖曳**結束**時會觸發此事件|\n\n> 這段來自 : [製作可拖曳的元素（HTML5 Drag and Drop API）](https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html) > ![](https://i.imgur.com/BoqFTzM.png)\n>\n> - **Drag Source** 指的是被點擊要拖曳的物件，也就是藍色的圓，通常是一個 element。\n> - **Drop Target** 指的是拖曳的物件被放置的區域，也就是右邊的綠色區域，通常是一個 div container。\n> - **drag**：在 drag source 被拖曳時會持續被觸發。\n> - **dragover**：當拖曳的 drag source 在 drop target 上方時會持續被觸發。\n\n```javascript\nfunction addEventListeners() {\n  const draggables = document.querySelectorAll('.draggable')\n  const dragListItems = document.querySelectorAll('.draggable-list li')\n  //選到 ul 底下所有 li ( 因為 li 沒有 calssName ，所以這樣寫)\n\n  draggables.forEach((draggable) => {\n    draggable.addEventListener('dragstart', dragStart)\n  })\n\n  dragListItems.forEach((item) => {\n    item.addEventListener('dragover', dragOver)\n    item.addEventListener('drop', dragDrag)\n    item.addEventListener('dragenter', dragEnter)\n    item.addEventListener('dragleave', dragLeave)\n  })\n}\n```\n\n拖曳時更換顏色\n\n```javascript\nfunction dragEnter() {\n  // console.log('Event: ', 'dragEnter')\n  this.classList.add('over')\n}\n\nfunction dragLeave() {\n  // console.log('Event: ', 'dragLeave')\n  this.classList.remove('over')\n}\n```\n\n當我拖曳時 `dragstart` 就會開始抓取當前的索引值\n\n```javascript\nfunction dragStart() {\n  // console.log('Event: ', 'dragStart')\n  //拖曳的時候抓取索引值\n  dragStartIndex = +this.closest('li').getAttribute('data-Index')\n  //上面設定索引值，這裡抓索引值，+ 號改型別用\n  // console.log(dragStartIndex)\n  // console.log(typeof dragStartIndex)\n}\n```\n\n如果沒有 `+` 號，當我拖曳第一個，用 `console` 看會顯示下圖\n![](https://i.imgur.com/lQOGwH6.png)\n\n有 `+` 號\n![](https://i.imgur.com/ZTQX984.png)\n\n抓到索引值後把拖曳到該欄位的索引值對換。\n\n```javascript\nfunction dragDrag() {\n  // console.log('Event: ', 'dragDrag')\n  const dragEndIndex = +this.getAttribute('data-Index')\n  swapItems(dragStartIndex, dragEndIndex)\n  this.classList.remove('over')\n}\n\nfunction swapItems(from, to) {\n  const itemOne = listItems[from].querySelector('.draggable')\n  const itemTwo = listItems[to].querySelector('.draggable')\n\n  listItems[from].appendChild(itemTwo)\n  listItems[to].appendChild(itemOne)\n}\n```\n\n### 5. 確認清單順序是否正確\n\n```javascript\nfunction checkOrder() {\n  listItems.forEach((listItem, index) => {\n    const personName = listItem.querySelector('.draggable').innerText.trim()\n\n    if (personName !== attractions[index]) {\n      listItem.classList.add('wrong')\n    } else {\n      listItem.classList.remove('wrong')\n      listItem.classList.add('right')\n    }\n  })\n}\n\ncheckBtn.addEventListener('click', checkOrder)\n```\n\n## 參考資料\n\n[展開運算符與其餘運算符](https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html)\n[HTML5 Drag and Drop API 筆記](https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/)\n[製作可拖曳的元素（HTML5 Drag and Drop API）](https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview)\n","source":"_posts/2020/dragdrop.md","raw":"---\ntitle: JavaScript 實作 - 拖曳效果\ndate: 2021/02/08\ntags:\n  - JavaScript\n  - 作品集\n  - dragDrop\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n## 功能描述:\n\n1. 刷新頁面打亂排列順序。\n2. 可以拖曳方塊排列順序。\n3. 確認排列順序是否正確。\n\n![](https://i.imgur.com/1xYdtS0.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission30)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission30/index.html)\n\n<!--more-->\n\n## 架構\n\n```html\n<h1>苗栗國必去前10名景點</h1>\n<p>請利用拖曳排列出這10名的順序</p>\n<ul class=\"draggable-list\" id=\"draggable-list\"></ul>\n<button class=\"check-btn\" id=\"check-btn\">\n  Check Attractions\n  <i class=\"fas fa-paper-plane\"></i>\n</button>\n```\n\n拖曳方塊不能寫死，因為每次刷新頁面順序會打亂，打亂的順序排名用 javascript 撰寫。\n\n## CSS 樣式\n\n拖曳的時候會呈現色差\n\n```css\n.draggable-list li.over .draggable {\n  background-color: #eaeaea;\n}\n```\n\n用顏色確認目前排列順序是否正確。\n\n```css\n.draggable-list li.right .person-name {\n  color: #3ae374;\n}\n\n.draggable-list li.wrong .person-name {\n  color: #ff3838;\n}\n```\n\n按鈕縮放效果\n\n```css\n.check-btn:active {\n  transform: scale(0.98);\n}\n```\n\n點擊按鈕不要有邊框線條\n\n```css\n.check-btn:focus {\n  outline: none;\n}\n```\n\n## JavaScript\n\n### 1. 綁定 DOM ，給初始值\n\n```javascript\nconst draggableList = document.querySelector('#draggable-list')\nconst checkBtn = document.querySelector('#check-btn')\n\nconst attractions = [\n  '客家大院',\n  '後龍鎮半天寮休閒文化園區 - 好望角',\n  '天空之城',\n  '九華山 天空步道',\n  '苗栗客家圓樓',\n  '雅聞七里香玫瑰森林',\n  '龍騰斷橋(魚藤坪斷橋)',\n  '飛牛牧場',\n  '銅鑼炮仗花海公園',\n  '舊銅鑼隧道',\n]\n\nlet dragStartIndex\nconst listItems = []\n```\n\n### 2. 產生 DOM 並呈現在畫面上\n\n> 展開運算符 ( Spread Operator ) :\n> 是把一個陣列展開成個別值，這個運算符後面必定接著一個陣列。\n> 最常見的是用來組合 ( 連接 ) 陣列。\n\n> 其餘運算符 ( Rest Operator ) :\n> 是收集其餘的 ( 剩餘的 ) 這些值，轉變成一個陣列。它會用在函式定義時的傳入參數識別名定義 ( 其餘參數, Rest parameters )，以及解構賦值時\n>\n> 以上兩點引述自 : [展開運算符與其餘運算符](https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html)\n\n`setAttribute( 'data-名稱', 'value 值')` : 設定元件屬性，就是在元件上賦予名字跟值。\n不過這命名不能亂命，為了方面辨識或是避免搞混，在名稱前面會加上 `data-` 。\n以下範例用 `console` 查看\n![](https://i.imgur.com/tx1LA4c.png)\n\n不過上面值是 `number` ，如果是字串要用 `string`，以下示範\n\n```javascript\n// 加兩個屬性\nlistItem.setAttribute('data-id', 'dataId')\nlistItem.setAttribute('data-name', 'dataName')\n```\n\n![](https://i.imgur.com/DuEqPBg.png)\n\n利用**展開運算符**把陣列內的景點變成個別的值，再用 `forEach` 產生每筆資料，每筆資料用 `setAttribute` 設定索引值，再把資料加入倒 `ul` 元件底下。\n\n```javascript\ncreatListItem()\n\nfunction creatListItem() {\n  ;[...attractions].forEach((person, index) => {\n    const listItem = document.createElement('li')\n    listItem.setAttribute('data-Index', index) //這不是設定className，單純的 name 跟 value\n\n    listItem.innerHTML = `\n    <span class='number'>${index + 1}</span>\n    <div class='draggable' draggable='true'>\n      <p class='person-name'>${person}</p>\n      <i class='fas fa-grip-lines'></i>\n    </div>\n    `\n    listItems.push(listItem)\n    draggableList.appendChild(listItem)\n  })\n\n  addEventListeners()\n}\n```\n\n### 3. 資料隨機排列\n\n有了資料後，每次刷新頁面資料要隨機排列。\n要隨機排列就要有亂數，並且把亂數跟字串綁定，這樣每次刷新頁面順序就會是亂的。\n\n把陣列內的字串用 map 產生出新的陣列 :\n將字串賦予到 value 裡面，再用 `Math.random()` 產生亂數，把這些亂數賦予到 sort 裡面，但是目前排列順序還是不對，必須依照我設定的順序跟數字綁定\n\n```javascript\n;[...attractions].map((a) => ({ value: a, sort: Math.random() }))\n```\n\n![](https://i.imgur.com/asWCFfa.png)\n\n- ` sort()` : 把資料依照正確順序排列。[Codepen](https://codepen.io/gleofgja/pen/LYbNwoE?editors=0011)\n\n```javascript\n// 本來陣列內數字是亂的，經過 sort 會依照大小排列\nconst numbers = [1, 3, 9, 6, 20, 15]\nconsole.log(\n  numbers.sort(function (a, b) {\n    return a - b\n  })\n)\n\n// arrow function\nconsole.log(numbers.sort((a, b) => a - b))\n```\n\n![](https://i.imgur.com/rRpF2i2.png)\n\n看過上面的解釋後，接下來要把陣列內的字串跟正確的數字順序做綁定。\n\n```javascript\n;[...attractions].sort((a, b) => a.sort - b.sort)\n```\n\n![](https://i.imgur.com/WRDnx5f.png)\n比照上面那張圖，原本是亂掉的，現在依照陣列內的順序讓數字由小到大排列。\n\n有了順序後，數字不被看見，只要取 value 就好。\n\n```javascript\n.map((a) => a.value)\n```\n\n### 4. 拖曳效果\n\n下表參考自 : [HTML5 Drag and Drop API 筆記](https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/)\n| | Drag Source | Drag Target |解釋 |\n| -------- | -------- | -------- |-------- |\n| 1 | dragstart| |**開始**拖曳元素時觸發此事件|\n| 2 | drag | dragenter |拖曳元素時觸發此事件|\n| 3 | | dragover |當元素拖曳到**有效位置放置**則觸發此事件|\n| 4 | | dragleave |拖曳的元素**離開**有效的位置時觸發|\n| 5 | | drop |在**有效位置**上**放置**元素時觸發此事件|\n| 6 | dropend | |當拖曳**結束**時會觸發此事件|\n\n> 這段來自 : [製作可拖曳的元素（HTML5 Drag and Drop API）](https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html) > ![](https://i.imgur.com/BoqFTzM.png)\n>\n> - **Drag Source** 指的是被點擊要拖曳的物件，也就是藍色的圓，通常是一個 element。\n> - **Drop Target** 指的是拖曳的物件被放置的區域，也就是右邊的綠色區域，通常是一個 div container。\n> - **drag**：在 drag source 被拖曳時會持續被觸發。\n> - **dragover**：當拖曳的 drag source 在 drop target 上方時會持續被觸發。\n\n```javascript\nfunction addEventListeners() {\n  const draggables = document.querySelectorAll('.draggable')\n  const dragListItems = document.querySelectorAll('.draggable-list li')\n  //選到 ul 底下所有 li ( 因為 li 沒有 calssName ，所以這樣寫)\n\n  draggables.forEach((draggable) => {\n    draggable.addEventListener('dragstart', dragStart)\n  })\n\n  dragListItems.forEach((item) => {\n    item.addEventListener('dragover', dragOver)\n    item.addEventListener('drop', dragDrag)\n    item.addEventListener('dragenter', dragEnter)\n    item.addEventListener('dragleave', dragLeave)\n  })\n}\n```\n\n拖曳時更換顏色\n\n```javascript\nfunction dragEnter() {\n  // console.log('Event: ', 'dragEnter')\n  this.classList.add('over')\n}\n\nfunction dragLeave() {\n  // console.log('Event: ', 'dragLeave')\n  this.classList.remove('over')\n}\n```\n\n當我拖曳時 `dragstart` 就會開始抓取當前的索引值\n\n```javascript\nfunction dragStart() {\n  // console.log('Event: ', 'dragStart')\n  //拖曳的時候抓取索引值\n  dragStartIndex = +this.closest('li').getAttribute('data-Index')\n  //上面設定索引值，這裡抓索引值，+ 號改型別用\n  // console.log(dragStartIndex)\n  // console.log(typeof dragStartIndex)\n}\n```\n\n如果沒有 `+` 號，當我拖曳第一個，用 `console` 看會顯示下圖\n![](https://i.imgur.com/lQOGwH6.png)\n\n有 `+` 號\n![](https://i.imgur.com/ZTQX984.png)\n\n抓到索引值後把拖曳到該欄位的索引值對換。\n\n```javascript\nfunction dragDrag() {\n  // console.log('Event: ', 'dragDrag')\n  const dragEndIndex = +this.getAttribute('data-Index')\n  swapItems(dragStartIndex, dragEndIndex)\n  this.classList.remove('over')\n}\n\nfunction swapItems(from, to) {\n  const itemOne = listItems[from].querySelector('.draggable')\n  const itemTwo = listItems[to].querySelector('.draggable')\n\n  listItems[from].appendChild(itemTwo)\n  listItems[to].appendChild(itemOne)\n}\n```\n\n### 5. 確認清單順序是否正確\n\n```javascript\nfunction checkOrder() {\n  listItems.forEach((listItem, index) => {\n    const personName = listItem.querySelector('.draggable').innerText.trim()\n\n    if (personName !== attractions[index]) {\n      listItem.classList.add('wrong')\n    } else {\n      listItem.classList.remove('wrong')\n      listItem.classList.add('right')\n    }\n  })\n}\n\ncheckBtn.addEventListener('click', checkOrder)\n```\n\n## 參考資料\n\n[展開運算符與其餘運算符](https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html)\n[HTML5 Drag and Drop API 筆記](https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/)\n[製作可拖曳的元素（HTML5 Drag and Drop API）](https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview)\n","slug":"dragdrop","published":1,"updated":"2021-03-26T16:13:10.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpw0018g0tr3v5p69t5","content":"<html><head></head><body><h2 id=\"功能描述\"><a href=\"#功能描述\" class=\"headerlink\" title=\"功能描述:\"></a>功能描述:</h2><ol>\n<li>刷新頁面打亂排列順序。</li>\n<li>可以拖曳方塊排列順序。</li>\n<li>確認排列順序是否正確。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/1xYdtS0.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission30\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission30/index.html\">Demo</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h2><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>苗栗國必去前10名景點<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>請利用拖曳排列出這10名的順序<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"draggable-list\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"draggable-list\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"check-btn\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"check-btn\"</span>&gt;</span></span><br><span class=\"line\">  Check Attractions</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fas fa-paper-plane\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>拖曳方塊不能寫死，因為每次刷新頁面順序會打亂，打亂的順序排名用 javascript 撰寫。</p>\n<h2 id=\"CSS-樣式\"><a href=\"#CSS-樣式\" class=\"headerlink\" title=\"CSS 樣式\"></a>CSS 樣式</h2><p>拖曳的時候會呈現色差</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.draggable-list</span> <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-class\">.over</span> <span class=\"hljs-selector-class\">.draggable</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#eaeaea</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用顏色確認目前排列順序是否正確。</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.draggable-list</span> <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-class\">.right</span> <span class=\"hljs-selector-class\">.person-name</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#3ae374</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.draggable-list</span> <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-class\">.wrong</span> <span class=\"hljs-selector-class\">.person-name</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ff3838</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>按鈕縮放效果</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.check-btn</span><span class=\"hljs-selector-pseudo\">:active</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">0.98</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>點擊按鈕不要有邊框線條</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.check-btn</span><span class=\"hljs-selector-pseudo\">:focus</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">outline</span>: none;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"1-綁定-DOM-，給初始值\"><a href=\"#1-綁定-DOM-，給初始值\" class=\"headerlink\" title=\"1. 綁定 DOM ，給初始值\"></a>1. 綁定 DOM ，給初始值</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> draggableList = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#draggable-list'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> checkBtn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#check-btn'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> attractions = [</span><br><span class=\"line\">  <span class=\"hljs-string\">'客家大院'</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">'後龍鎮半天寮休閒文化園區 - 好望角'</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">'天空之城'</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">'九華山 天空步道'</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">'苗栗客家圓樓'</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">'雅聞七里香玫瑰森林'</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">'龍騰斷橋(魚藤坪斷橋)'</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">'飛牛牧場'</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">'銅鑼炮仗花海公園'</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">'舊銅鑼隧道'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> dragStartIndex</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> listItems = []</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-產生-DOM-並呈現在畫面上\"><a href=\"#2-產生-DOM-並呈現在畫面上\" class=\"headerlink\" title=\"2. 產生 DOM 並呈現在畫面上\"></a>2. 產生 DOM 並呈現在畫面上</h3><blockquote>\n<p>展開運算符 ( Spread Operator ) :<br>是把一個陣列展開成個別值，這個運算符後面必定接著一個陣列。<br>最常見的是用來組合 ( 連接 ) 陣列。</p>\n</blockquote>\n<blockquote>\n<p>其餘運算符 ( Rest Operator ) :<br>是收集其餘的 ( 剩餘的 ) 這些值，轉變成一個陣列。它會用在函式定義時的傳入參數識別名定義 ( 其餘參數, Rest parameters )，以及解構賦值時</p>\n<p>以上兩點引述自 : <a href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html\">展開運算符與其餘運算符</a></p>\n</blockquote>\n<p><code>setAttribute( 'data-名稱', 'value 值')</code> : 設定元件屬性，就是在元件上賦予名字跟值。<br>不過這命名不能亂命，為了方面辨識或是避免搞混，在名稱前面會加上 <code>data-</code> 。<br>以下範例用 <code>console</code> 查看<br><img src=\"https://i.imgur.com/tx1LA4c.png\"></p>\n<p>不過上面值是 <code>number</code> ，如果是字串要用 <code>string</code>，以下示範</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 加兩個屬性</span></span><br><span class=\"line\">listItem.setAttribute(<span class=\"hljs-string\">'data-id'</span>, <span class=\"hljs-string\">'dataId'</span>)</span><br><span class=\"line\">listItem.setAttribute(<span class=\"hljs-string\">'data-name'</span>, <span class=\"hljs-string\">'dataName'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/DuEqPBg.png\"></p>\n<p>利用<strong>展開運算符</strong>把陣列內的景點變成個別的值，再用 <code>forEach</code> 產生每筆資料，每筆資料用 <code>setAttribute</code> 設定索引值，再把資料加入倒 <code>ul</code> 元件底下。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creatListItem()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">creatListItem</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  ;[...attractions].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">person, index</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> listItem = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'li'</span>)</span><br><span class=\"line\">    listItem.setAttribute(<span class=\"hljs-string\">'data-Index'</span>, index) <span class=\"hljs-comment\">//這不是設定className，單純的 name 跟 value</span></span><br><span class=\"line\"></span><br><span class=\"line\">    listItem.innerHTML = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;span class='number'&gt;<span class=\"hljs-subst\">${index + <span class=\"hljs-number\">1</span>}</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;div class='draggable' draggable='true'&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;p class='person-name'&gt;<span class=\"hljs-subst\">${person}</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;i class='fas fa-grip-lines'&gt;&lt;/i&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    `</span></span><br><span class=\"line\">    listItems.push(listItem)</span><br><span class=\"line\">    draggableList.appendChild(listItem)</span><br><span class=\"line\">  })</span><br><span class=\"line\"></span><br><span class=\"line\">  addEventListeners()</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-資料隨機排列\"><a href=\"#3-資料隨機排列\" class=\"headerlink\" title=\"3. 資料隨機排列\"></a>3. 資料隨機排列</h3><p>有了資料後，每次刷新頁面資料要隨機排列。<br>要隨機排列就要有亂數，並且把亂數跟字串綁定，這樣每次刷新頁面順序就會是亂的。</p>\n<p>把陣列內的字串用 map 產生出新的陣列 :<br>將字串賦予到 value 裡面，再用 <code>Math.random()</code> 產生亂數，把這些亂數賦予到 sort 裡面，但是目前排列順序還是不對，必須依照我設定的順序跟數字綁定</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[...attractions].map(<span class=\"hljs-function\">(<span class=\"hljs-params\">a</span>) =&gt;</span> ({ <span class=\"hljs-attr\">value</span>: a, <span class=\"hljs-attr\">sort</span>: <span class=\"hljs-built_in\">Math</span>.random() }))</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/asWCFfa.png\"></p>\n<ul>\n<li><code> sort()</code> : 把資料依照正確順序排列。<a href=\"https://codepen.io/gleofgja/pen/LYbNwoE?editors=0011\">Codepen</a></li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 本來陣列內數字是亂的，經過 sort 會依照大小排列</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">15</span>]</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(</span><br><span class=\"line\">  numbers.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) </span>{</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> a - b</span><br><span class=\"line\">  })</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// arrow function</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(numbers.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a - b))</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/rRpF2i2.png\"></p>\n<p>看過上面的解釋後，接下來要把陣列內的字串跟正確的數字順序做綁定。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[...attractions].sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a.sort - b.sort)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/WRDnx5f.png\"><br>比照上面那張圖，原本是亂掉的，現在依照陣列內的順序讓數字由小到大排列。</p>\n<p>有了順序後，數字不被看見，只要取 value 就好。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">a</span>) =&gt;</span> a.value)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-拖曳效果\"><a href=\"#4-拖曳效果\" class=\"headerlink\" title=\"4. 拖曳效果\"></a>4. 拖曳效果</h3><p>下表參考自 : <a href=\"https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/\">HTML5 Drag and Drop API 筆記</a><br>| | Drag Source | Drag Target |解釋 |<br>| ——– | ——– | ——– |——– |<br>| 1 | dragstart| |<strong>開始</strong>拖曳元素時觸發此事件|<br>| 2 | drag | dragenter |拖曳元素時觸發此事件|<br>| 3 | | dragover |當元素拖曳到<strong>有效位置放置</strong>則觸發此事件|<br>| 4 | | dragleave |拖曳的元素<strong>離開</strong>有效的位置時觸發|<br>| 5 | | drop |在<strong>有效位置</strong>上<strong>放置</strong>元素時觸發此事件|<br>| 6 | dropend | |當拖曳<strong>結束</strong>時會觸發此事件|</p>\n<blockquote>\n<p>這段來自 : <a href=\"https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html\">製作可拖曳的元素（HTML5 Drag and Drop API）</a> &gt; <img src=\"https://i.imgur.com/BoqFTzM.png\"></p>\n<ul>\n<li><strong>Drag Source</strong> 指的是被點擊要拖曳的物件，也就是藍色的圓，通常是一個 element。</li>\n<li><strong>Drop Target</strong> 指的是拖曳的物件被放置的區域，也就是右邊的綠色區域，通常是一個 div container。</li>\n<li><strong>drag</strong>：在 drag source 被拖曳時會持續被觸發。</li>\n<li><strong>dragover</strong>：當拖曳的 drag source 在 drop target 上方時會持續被觸發。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addEventListeners</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> draggables = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'.draggable'</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> dragListItems = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'.draggable-list li'</span>)</span><br><span class=\"line\">  <span class=\"hljs-comment\">//選到 ul 底下所有 li ( 因為 li 沒有 calssName ，所以這樣寫)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  draggables.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">draggable</span>) =&gt;</span> {</span><br><span class=\"line\">    draggable.addEventListener(<span class=\"hljs-string\">'dragstart'</span>, dragStart)</span><br><span class=\"line\">  })</span><br><span class=\"line\"></span><br><span class=\"line\">  dragListItems.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> {</span><br><span class=\"line\">    item.addEventListener(<span class=\"hljs-string\">'dragover'</span>, dragOver)</span><br><span class=\"line\">    item.addEventListener(<span class=\"hljs-string\">'drop'</span>, dragDrag)</span><br><span class=\"line\">    item.addEventListener(<span class=\"hljs-string\">'dragenter'</span>, dragEnter)</span><br><span class=\"line\">    item.addEventListener(<span class=\"hljs-string\">'dragleave'</span>, dragLeave)</span><br><span class=\"line\">  })</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>拖曳時更換顏色</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dragEnter</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log('Event: ', 'dragEnter')</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.classList.add(<span class=\"hljs-string\">'over'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dragLeave</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log('Event: ', 'dragLeave')</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.classList.remove(<span class=\"hljs-string\">'over'</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>當我拖曳時 <code>dragstart</code> 就會開始抓取當前的索引值</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dragStart</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log('Event: ', 'dragStart')</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">//拖曳的時候抓取索引值</span></span><br><span class=\"line\">  dragStartIndex = +<span class=\"hljs-built_in\">this</span>.closest(<span class=\"hljs-string\">'li'</span>).getAttribute(<span class=\"hljs-string\">'data-Index'</span>)</span><br><span class=\"line\">  <span class=\"hljs-comment\">//上面設定索引值，這裡抓索引值，+ 號改型別用</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(dragStartIndex)</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(typeof dragStartIndex)</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果沒有 <code>+</code> 號，當我拖曳第一個，用 <code>console</code> 看會顯示下圖<br><img src=\"https://i.imgur.com/lQOGwH6.png\"></p>\n<p>有 <code>+</code> 號<br><img src=\"https://i.imgur.com/ZTQX984.png\"></p>\n<p>抓到索引值後把拖曳到該欄位的索引值對換。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dragDrag</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log('Event: ', 'dragDrag')</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> dragEndIndex = +<span class=\"hljs-built_in\">this</span>.getAttribute(<span class=\"hljs-string\">'data-Index'</span>)</span><br><span class=\"line\">  swapItems(dragStartIndex, dragEndIndex)</span><br><span class=\"line\">  <span class=\"hljs-built_in\">this</span>.classList.remove(<span class=\"hljs-string\">'over'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swapItems</span>(<span class=\"hljs-params\">from, to</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> itemOne = listItems[<span class=\"hljs-keyword\">from</span>].querySelector(<span class=\"hljs-string\">'.draggable'</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> itemTwo = listItems[to].querySelector(<span class=\"hljs-string\">'.draggable'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  listItems[<span class=\"hljs-keyword\">from</span>].appendChild(itemTwo)</span><br><span class=\"line\">  listItems[to].appendChild(itemOne)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"5-確認清單順序是否正確\"><a href=\"#5-確認清單順序是否正確\" class=\"headerlink\" title=\"5. 確認清單順序是否正確\"></a>5. 確認清單順序是否正確</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkOrder</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  listItems.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">listItem, index</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> personName = listItem.querySelector(<span class=\"hljs-string\">'.draggable'</span>).innerText.trim()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (personName !== attractions[index]) {</span><br><span class=\"line\">      listItem.classList.add(<span class=\"hljs-string\">'wrong'</span>)</span><br><span class=\"line\">    } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">      listItem.classList.remove(<span class=\"hljs-string\">'wrong'</span>)</span><br><span class=\"line\">      listItem.classList.add(<span class=\"hljs-string\">'right'</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  })</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">checkBtn.addEventListener(<span class=\"hljs-string\">'click'</span>, checkOrder)</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html\">展開運算符與其餘運算符</a><br><a href=\"https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/\">HTML5 Drag and Drop API 筆記</a><br><a href=\"https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html\">製作可拖曳的元素（HTML5 Drag and Drop API）</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview\">20 Web Projects With Vanilla JavaScript</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"作品集","path":"tags/作品集/"},{"name":"dragDrop","path":"tags/dragDrop/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><h2 id=\"功能描述\"><a href=\"#功能描述\" class=\"headerlink\" title=\"功能描述:\"></a>功能描述:</h2><ol>\n<li>刷新頁面打亂排列順序。</li>\n<li>可以拖曳方塊排列順序。</li>\n<li>確認排列順序是否正確。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/1xYdtS0.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission30\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission30/index.html\">Demo</a></p></body></html>","more":"<h2 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>苗栗國必去前10名景點<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>請利用拖曳排列出這10名的順序<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;draggable-list&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;draggable-list&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;check-btn&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;check-btn&quot;</span>&gt;</span></span><br><span class=\"line\">  Check Attractions</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fas fa-paper-plane&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>拖曳方塊不能寫死，因為每次刷新頁面順序會打亂，打亂的順序排名用 javascript 撰寫。</p>\n<h2 id=\"CSS-樣式\"><a href=\"#CSS-樣式\" class=\"headerlink\" title=\"CSS 樣式\"></a>CSS 樣式</h2><p>拖曳的時候會呈現色差</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.draggable-list</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.over</span> <span class=\"selector-class\">.draggable</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eaeaea</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用顏色確認目前排列順序是否正確。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.draggable-list</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.right</span> <span class=\"selector-class\">.person-name</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#3ae374</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.draggable-list</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.wrong</span> <span class=\"selector-class\">.person-name</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ff3838</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按鈕縮放效果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.check-btn</span><span class=\"selector-pseudo\">:active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.98</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>點擊按鈕不要有邊框線條</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.check-btn</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"1-綁定-DOM-，給初始值\"><a href=\"#1-綁定-DOM-，給初始值\" class=\"headerlink\" title=\"1. 綁定 DOM ，給初始值\"></a>1. 綁定 DOM ，給初始值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> draggableList = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#draggable-list&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkBtn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#check-btn&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> attractions = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;客家大院&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;後龍鎮半天寮休閒文化園區 - 好望角&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;天空之城&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;九華山 天空步道&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;苗栗客家圓樓&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;雅聞七里香玫瑰森林&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;龍騰斷橋(魚藤坪斷橋)&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;飛牛牧場&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;銅鑼炮仗花海公園&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;舊銅鑼隧道&#x27;</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dragStartIndex</span><br><span class=\"line\"><span class=\"keyword\">const</span> listItems = []</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-產生-DOM-並呈現在畫面上\"><a href=\"#2-產生-DOM-並呈現在畫面上\" class=\"headerlink\" title=\"2. 產生 DOM 並呈現在畫面上\"></a>2. 產生 DOM 並呈現在畫面上</h3><blockquote>\n<p>展開運算符 ( Spread Operator ) :<br>是把一個陣列展開成個別值，這個運算符後面必定接著一個陣列。<br>最常見的是用來組合 ( 連接 ) 陣列。</p>\n</blockquote>\n<blockquote>\n<p>其餘運算符 ( Rest Operator ) :<br>是收集其餘的 ( 剩餘的 ) 這些值，轉變成一個陣列。它會用在函式定義時的傳入參數識別名定義 ( 其餘參數, Rest parameters )，以及解構賦值時</p>\n<p>以上兩點引述自 : <a href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html\">展開運算符與其餘運算符</a></p>\n</blockquote>\n<p><code>setAttribute( &#39;data-名稱&#39;, &#39;value 值&#39;)</code> : 設定元件屬性，就是在元件上賦予名字跟值。<br>不過這命名不能亂命，為了方面辨識或是避免搞混，在名稱前面會加上 <code>data-</code> 。<br>以下範例用 <code>console</code> 查看<br><img src=\"https://i.imgur.com/tx1LA4c.png\"></p>\n<p>不過上面值是 <code>number</code> ，如果是字串要用 <code>string</code>，以下示範</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加兩個屬性</span></span><br><span class=\"line\">listItem.setAttribute(<span class=\"string\">&#x27;data-id&#x27;</span>, <span class=\"string\">&#x27;dataId&#x27;</span>)</span><br><span class=\"line\">listItem.setAttribute(<span class=\"string\">&#x27;data-name&#x27;</span>, <span class=\"string\">&#x27;dataName&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/DuEqPBg.png\"></p>\n<p>利用<strong>展開運算符</strong>把陣列內的景點變成個別的值，再用 <code>forEach</code> 產生每筆資料，每筆資料用 <code>setAttribute</code> 設定索引值，再把資料加入倒 <code>ul</code> 元件底下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creatListItem()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creatListItem</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ;[...attractions].forEach(<span class=\"function\">(<span class=\"params\">person, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listItem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">    listItem.setAttribute(<span class=\"string\">&#x27;data-Index&#x27;</span>, index) <span class=\"comment\">//這不是設定className，單純的 name 跟 value</span></span><br><span class=\"line\"></span><br><span class=\"line\">    listItem.innerHTML = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span class=&#x27;number&#x27;&gt;<span class=\"subst\">$&#123;index + <span class=\"number\">1</span>&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&#x27;draggable&#x27; draggable=&#x27;true&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;p class=&#x27;person-name&#x27;&gt;<span class=\"subst\">$&#123;person&#125;</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;i class=&#x27;fas fa-grip-lines&#x27;&gt;&lt;/i&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">    listItems.push(listItem)</span><br><span class=\"line\">    draggableList.appendChild(listItem)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  addEventListeners()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-資料隨機排列\"><a href=\"#3-資料隨機排列\" class=\"headerlink\" title=\"3. 資料隨機排列\"></a>3. 資料隨機排列</h3><p>有了資料後，每次刷新頁面資料要隨機排列。<br>要隨機排列就要有亂數，並且把亂數跟字串綁定，這樣每次刷新頁面順序就會是亂的。</p>\n<p>把陣列內的字串用 map 產生出新的陣列 :<br>將字串賦予到 value 裡面，再用 <code>Math.random()</code> 產生亂數，把這些亂數賦予到 sort 裡面，但是目前排列順序還是不對，必須依照我設定的順序跟數字綁定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[...attractions].map(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> (&#123; <span class=\"attr\">value</span>: a, <span class=\"attr\">sort</span>: <span class=\"built_in\">Math</span>.random() &#125;))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/asWCFfa.png\"></p>\n<ul>\n<li><code> sort()</code> : 把資料依照正確順序排列。<a href=\"https://codepen.io/gleofgja/pen/LYbNwoE?editors=0011\">Codepen</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 本來陣列內數字是亂的，經過 sort 會依照大小排列</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  numbers.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arrow function</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/rRpF2i2.png\"></p>\n<p>看過上面的解釋後，接下來要把陣列內的字串跟正確的數字順序做綁定。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[...attractions].sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.sort - b.sort)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/WRDnx5f.png\"><br>比照上面那張圖，原本是亂掉的，現在依照陣列內的順序讓數字由小到大排列。</p>\n<p>有了順序後，數字不被看見，只要取 value 就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.map(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a.value)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-拖曳效果\"><a href=\"#4-拖曳效果\" class=\"headerlink\" title=\"4. 拖曳效果\"></a>4. 拖曳效果</h3><p>下表參考自 : <a href=\"https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/\">HTML5 Drag and Drop API 筆記</a><br>| | Drag Source | Drag Target |解釋 |<br>| ——– | ——– | ——– |——– |<br>| 1 | dragstart| |<strong>開始</strong>拖曳元素時觸發此事件|<br>| 2 | drag | dragenter |拖曳元素時觸發此事件|<br>| 3 | | dragover |當元素拖曳到<strong>有效位置放置</strong>則觸發此事件|<br>| 4 | | dragleave |拖曳的元素<strong>離開</strong>有效的位置時觸發|<br>| 5 | | drop |在<strong>有效位置</strong>上<strong>放置</strong>元素時觸發此事件|<br>| 6 | dropend | |當拖曳<strong>結束</strong>時會觸發此事件|</p>\n<blockquote>\n<p>這段來自 : <a href=\"https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html\">製作可拖曳的元素（HTML5 Drag and Drop API）</a> &gt; <img src=\"https://i.imgur.com/BoqFTzM.png\"></p>\n<ul>\n<li><strong>Drag Source</strong> 指的是被點擊要拖曳的物件，也就是藍色的圓，通常是一個 element。</li>\n<li><strong>Drop Target</strong> 指的是拖曳的物件被放置的區域，也就是右邊的綠色區域，通常是一個 div container。</li>\n<li><strong>drag</strong>：在 drag source 被拖曳時會持續被觸發。</li>\n<li><strong>dragover</strong>：當拖曳的 drag source 在 drop target 上方時會持續被觸發。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEventListeners</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> draggables = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.draggable&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragListItems = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.draggable-list li&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">//選到 ul 底下所有 li ( 因為 li 沒有 calssName ，所以這樣寫)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  draggables.forEach(<span class=\"function\">(<span class=\"params\">draggable</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    draggable.addEventListener(<span class=\"string\">&#x27;dragstart&#x27;</span>, dragStart)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  dragListItems.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    item.addEventListener(<span class=\"string\">&#x27;dragover&#x27;</span>, dragOver)</span><br><span class=\"line\">    item.addEventListener(<span class=\"string\">&#x27;drop&#x27;</span>, dragDrag)</span><br><span class=\"line\">    item.addEventListener(<span class=\"string\">&#x27;dragenter&#x27;</span>, dragEnter)</span><br><span class=\"line\">    item.addEventListener(<span class=\"string\">&#x27;dragleave&#x27;</span>, dragLeave)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>拖曳時更換顏色</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragEnter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&#x27;Event: &#x27;, &#x27;dragEnter&#x27;)</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.classList.add(<span class=\"string\">&#x27;over&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragLeave</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&#x27;Event: &#x27;, &#x27;dragLeave&#x27;)</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.classList.remove(<span class=\"string\">&#x27;over&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當我拖曳時 <code>dragstart</code> 就會開始抓取當前的索引值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragStart</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&#x27;Event: &#x27;, &#x27;dragStart&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">//拖曳的時候抓取索引值</span></span><br><span class=\"line\">  dragStartIndex = +<span class=\"built_in\">this</span>.closest(<span class=\"string\">&#x27;li&#x27;</span>).getAttribute(<span class=\"string\">&#x27;data-Index&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">//上面設定索引值，這裡抓索引值，+ 號改型別用</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(dragStartIndex)</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(typeof dragStartIndex)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果沒有 <code>+</code> 號，當我拖曳第一個，用 <code>console</code> 看會顯示下圖<br><img src=\"https://i.imgur.com/lQOGwH6.png\"></p>\n<p>有 <code>+</code> 號<br><img src=\"https://i.imgur.com/ZTQX984.png\"></p>\n<p>抓到索引值後把拖曳到該欄位的索引值對換。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragDrag</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(&#x27;Event: &#x27;, &#x27;dragDrag&#x27;)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragEndIndex = +<span class=\"built_in\">this</span>.getAttribute(<span class=\"string\">&#x27;data-Index&#x27;</span>)</span><br><span class=\"line\">  swapItems(dragStartIndex, dragEndIndex)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.classList.remove(<span class=\"string\">&#x27;over&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swapItems</span>(<span class=\"params\">from, to</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> itemOne = listItems[<span class=\"keyword\">from</span>].querySelector(<span class=\"string\">&#x27;.draggable&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> itemTwo = listItems[to].querySelector(<span class=\"string\">&#x27;.draggable&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  listItems[<span class=\"keyword\">from</span>].appendChild(itemTwo)</span><br><span class=\"line\">  listItems[to].appendChild(itemOne)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-確認清單順序是否正確\"><a href=\"#5-確認清單順序是否正確\" class=\"headerlink\" title=\"5. 確認清單順序是否正確\"></a>5. 確認清單順序是否正確</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkOrder</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  listItems.forEach(<span class=\"function\">(<span class=\"params\">listItem, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> personName = listItem.querySelector(<span class=\"string\">&#x27;.draggable&#x27;</span>).innerText.trim()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (personName !== attractions[index]) &#123;</span><br><span class=\"line\">      listItem.classList.add(<span class=\"string\">&#x27;wrong&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      listItem.classList.remove(<span class=\"string\">&#x27;wrong&#x27;</span>)</span><br><span class=\"line\">      listItem.classList.add(<span class=\"string\">&#x27;right&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkBtn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, checkOrder)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html\">展開運算符與其餘運算符</a><br><a href=\"https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/\">HTML5 Drag and Drop API 筆記</a><br><a href=\"https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html\">製作可拖曳的元素（HTML5 Drag and Drop API）</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview\">20 Web Projects With Vanilla JavaScript</a></p>"},{"title":"JavaScript 實作 - 簡易表單驗證","date":"2020-12-30T16:00:00.000Z","_content":"\n功能敘述：\n確認使用者輸入的資料是否正確。\n\n![](https://i.imgur.com/vTeKNB1.png)\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission21)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission21/index.html)\n\n<!--more-->\n\n## 第一部分: 刻板+上色\n\n先寫好要一般 form 表單要填寫的資料，\n\n1. 使用者名稱\n2. 使用者信箱\n3. 密碼\n4. 密碼 2 次驗證\n\n上色跟輸入框的間隔可依照個人喜好設定\n\n```html\n<div class=\"container\">\n<!-- 輸入使用者名稱 -->\n<form class='form' id='form'>\n  <h1>表單驗證</h1>\n  <div class=\"formControl\">\n    <label for=\"username\">UserName:</label>\n    <input type=\"text\" id=\"username\" placeholder=\"Key in UserName\">\n    <small class='failMessage'>Error message</small>\n  </div>\n  <!-- 輸入使用者e-mail -->\n  <div class=\"formControl\">\n    <label for=\"email\">E-mail:</label>\n    <input type=\"text\" id=\"email\" placeholder=\"Key in E-mail\">\n    <small class='failMessage'>Error message</small>\n  </div>\n  <!-- 輸入使用者密碼 -->\n  <div class=\"formControl\">\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" placeholder=\"Key in password\">\n    <small class='failMessage'>密碼錯誤</small>\n  </div>\n  <!-- 確認使用者密碼 -->\n  <div class=\"formControl\">\n    <label for=\"confirmPassword\">Confirm Password:</label>\n    <input type=\"password\" id=\"confirmPassword\" placeholder=\"Key in password again\">\n    <small class='failMessage'>請重新輸入密碼</small>\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n</div>\n<script src=\"./all.js\"></script>\n</body>\n```\n\n## 第二部分: 驗證\n\n### 1. 抓取 DOM\n\n先抓取 dom 元素，因為是抓 id 所以是用 `#`\n\n```javascript\n// 抓取 dom 元素\nconst form = document.querySelector('#form')\nconst username = document.querySelector('#username')\nconst email = document.querySelector('#email')\nconst password = document.querySelector('#password')\nconst confirmPassword = document.querySelector('#confirmPassword')\n```\n\n### 2. 常用的獨立寫出來\n\n因為只要寫錯就會顯示錯誤訊息，這動作很重複所以將這些函式獨立拉出來，\n利用 callback function 的方式重複使用\n要特別注意以下兩點\n\n1. 是第 3 行 `formControl` 必須要用 `父元素` 的方式不能用 class 選擇器，不然它只會抓取 class 選擇器的最後一個，不會抓到每個 input 輸入框的父層\n2. 第 5 行的 `small` 必須用 `formControl` 的方式抓，不能用 `document` ，不然會抓不到\n\n```javascript\n// 失敗顯示\nfunction showFail(input, message) {\n  const formControl = input.parentElement\n  formControl.className = 'formControl fail'\n  const small = formControl.querySelector('small')\n  small.innerText = message\n}\n\n// 成功顯示\nfunction showSuccess(input) {\n  const formControl = input.parentElement\n  formControl.className = 'formControl success'\n}\n\n// 第一字體變大寫\nfunction getFiledName(input) {\n  return input.id.slice(0, 1).toUpperCase() + input.id.slice(1).toLowerCase()\n}\n```\n\n### 3. 取消重複性\n\n因為每個 dom 的 `input` 都要驗證的話就會有很多 `if else` 判斷式，這時候可以用 javascript 的 `forEach` 來讀取每個 dom ，然後再寫一次 `if else` 就可以每個都判斷\n\n`checkInput` 裡面的值用陣列顯示，那每個質都要被讀取到就用 `forEach` ，在陣列中的 dom 因為綁了 `input` 所以直接帶入是否是空值得判斷式，因為如果寫在裡面會太大包，造成日後不好維護，外加太醜，所以這邊直接用 callback function 的方式\n\n```javascript\n// 輸入框輸入確認\nfunction checkInput(inputId) {\n  inputId.forEach(inputArr)\n}\n\n// 輸入框 callback function\nfunction inputArr(input) {\n  if (input.value.trim() === '') {\n    showFail(input, `${getFiledName(input)} is require`)\n  } else {\n    showSuccess(input)\n  }\n}\n```\n\n### 4. 驗證\n\n#### ( 1 ) 使用者名稱長度的驗證\n\n為了防止使用者名字長度過長或是過短，所以要設定一個卡關機制\n\n```javascript\n// 輸入使用者名稱跟密碼長度限制\nfunction checkLength(input, min, max) {\n  if (input.value.length < min) {\n    showFail(input, `${getFiledName(input)} must be at least ${min} characters`)\n  } else if (input.value.length > max) {\n    showFail(\n      input,\n      `${getFiledName(input)} must be  less than ${max} characters`\n    )\n  } else {\n    showSuccess(input)\n  }\n}\n```\n\n#### ( 2 ) 信箱驗證\n\n```javascript\n// 信箱正規表達驗證\nfunction checkMail(input) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  // return re.test(String(email).toLowerCase())\n  if (re.test(input.value)) {\n    showSuccess(input)\n  } else {\n    showFail(input, 'email is not valid')\n  }\n}\n```\n\n#### ( 3 ) 密碼雙重驗證\n\n```javascript\n// 密碼雙重驗證\nfunction checkPasswordMatch(password, confirmPassword) {\n  if (password.value !== confirmPassword.value) {\n    showFail(confirmPassword, 'password is not match')\n  }\n}\n```\n\n#### ( 4 ) 執行\n\n```javascript\n// 執行\nform.addEventListener('submit', function (e) {\n  e.preventDefault()\n  checkInput([username, email, password, confirmPassword])\n  checkLength(username, 3, 8)\n  checkLength(password, 3, 12)\n  checkMail(email)\n  checkPasswordMatch(password, confirmPassword)\n})\n```\n\n### [Demo](https://codepen.io/gleofgja/pen/JjRpOje?editors=1010)\n\n## 參考資料\n\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842050#overview)\n","source":"_posts/2020/formVaild.md","raw":"---\ntitle: JavaScript 實作 - 簡易表單驗證\ndate: 2020/12/31\ntags:\n  - JavaScript\n  - 作品集\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n功能敘述：\n確認使用者輸入的資料是否正確。\n\n![](https://i.imgur.com/vTeKNB1.png)\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission21)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission21/index.html)\n\n<!--more-->\n\n## 第一部分: 刻板+上色\n\n先寫好要一般 form 表單要填寫的資料，\n\n1. 使用者名稱\n2. 使用者信箱\n3. 密碼\n4. 密碼 2 次驗證\n\n上色跟輸入框的間隔可依照個人喜好設定\n\n```html\n<div class=\"container\">\n<!-- 輸入使用者名稱 -->\n<form class='form' id='form'>\n  <h1>表單驗證</h1>\n  <div class=\"formControl\">\n    <label for=\"username\">UserName:</label>\n    <input type=\"text\" id=\"username\" placeholder=\"Key in UserName\">\n    <small class='failMessage'>Error message</small>\n  </div>\n  <!-- 輸入使用者e-mail -->\n  <div class=\"formControl\">\n    <label for=\"email\">E-mail:</label>\n    <input type=\"text\" id=\"email\" placeholder=\"Key in E-mail\">\n    <small class='failMessage'>Error message</small>\n  </div>\n  <!-- 輸入使用者密碼 -->\n  <div class=\"formControl\">\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" placeholder=\"Key in password\">\n    <small class='failMessage'>密碼錯誤</small>\n  </div>\n  <!-- 確認使用者密碼 -->\n  <div class=\"formControl\">\n    <label for=\"confirmPassword\">Confirm Password:</label>\n    <input type=\"password\" id=\"confirmPassword\" placeholder=\"Key in password again\">\n    <small class='failMessage'>請重新輸入密碼</small>\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n</div>\n<script src=\"./all.js\"></script>\n</body>\n```\n\n## 第二部分: 驗證\n\n### 1. 抓取 DOM\n\n先抓取 dom 元素，因為是抓 id 所以是用 `#`\n\n```javascript\n// 抓取 dom 元素\nconst form = document.querySelector('#form')\nconst username = document.querySelector('#username')\nconst email = document.querySelector('#email')\nconst password = document.querySelector('#password')\nconst confirmPassword = document.querySelector('#confirmPassword')\n```\n\n### 2. 常用的獨立寫出來\n\n因為只要寫錯就會顯示錯誤訊息，這動作很重複所以將這些函式獨立拉出來，\n利用 callback function 的方式重複使用\n要特別注意以下兩點\n\n1. 是第 3 行 `formControl` 必須要用 `父元素` 的方式不能用 class 選擇器，不然它只會抓取 class 選擇器的最後一個，不會抓到每個 input 輸入框的父層\n2. 第 5 行的 `small` 必須用 `formControl` 的方式抓，不能用 `document` ，不然會抓不到\n\n```javascript\n// 失敗顯示\nfunction showFail(input, message) {\n  const formControl = input.parentElement\n  formControl.className = 'formControl fail'\n  const small = formControl.querySelector('small')\n  small.innerText = message\n}\n\n// 成功顯示\nfunction showSuccess(input) {\n  const formControl = input.parentElement\n  formControl.className = 'formControl success'\n}\n\n// 第一字體變大寫\nfunction getFiledName(input) {\n  return input.id.slice(0, 1).toUpperCase() + input.id.slice(1).toLowerCase()\n}\n```\n\n### 3. 取消重複性\n\n因為每個 dom 的 `input` 都要驗證的話就會有很多 `if else` 判斷式，這時候可以用 javascript 的 `forEach` 來讀取每個 dom ，然後再寫一次 `if else` 就可以每個都判斷\n\n`checkInput` 裡面的值用陣列顯示，那每個質都要被讀取到就用 `forEach` ，在陣列中的 dom 因為綁了 `input` 所以直接帶入是否是空值得判斷式，因為如果寫在裡面會太大包，造成日後不好維護，外加太醜，所以這邊直接用 callback function 的方式\n\n```javascript\n// 輸入框輸入確認\nfunction checkInput(inputId) {\n  inputId.forEach(inputArr)\n}\n\n// 輸入框 callback function\nfunction inputArr(input) {\n  if (input.value.trim() === '') {\n    showFail(input, `${getFiledName(input)} is require`)\n  } else {\n    showSuccess(input)\n  }\n}\n```\n\n### 4. 驗證\n\n#### ( 1 ) 使用者名稱長度的驗證\n\n為了防止使用者名字長度過長或是過短，所以要設定一個卡關機制\n\n```javascript\n// 輸入使用者名稱跟密碼長度限制\nfunction checkLength(input, min, max) {\n  if (input.value.length < min) {\n    showFail(input, `${getFiledName(input)} must be at least ${min} characters`)\n  } else if (input.value.length > max) {\n    showFail(\n      input,\n      `${getFiledName(input)} must be  less than ${max} characters`\n    )\n  } else {\n    showSuccess(input)\n  }\n}\n```\n\n#### ( 2 ) 信箱驗證\n\n```javascript\n// 信箱正規表達驗證\nfunction checkMail(input) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  // return re.test(String(email).toLowerCase())\n  if (re.test(input.value)) {\n    showSuccess(input)\n  } else {\n    showFail(input, 'email is not valid')\n  }\n}\n```\n\n#### ( 3 ) 密碼雙重驗證\n\n```javascript\n// 密碼雙重驗證\nfunction checkPasswordMatch(password, confirmPassword) {\n  if (password.value !== confirmPassword.value) {\n    showFail(confirmPassword, 'password is not match')\n  }\n}\n```\n\n#### ( 4 ) 執行\n\n```javascript\n// 執行\nform.addEventListener('submit', function (e) {\n  e.preventDefault()\n  checkInput([username, email, password, confirmPassword])\n  checkLength(username, 3, 8)\n  checkLength(password, 3, 12)\n  checkMail(email)\n  checkPasswordMatch(password, confirmPassword)\n})\n```\n\n### [Demo](https://codepen.io/gleofgja/pen/JjRpOje?editors=1010)\n\n## 參考資料\n\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842050#overview)\n","slug":"formVaild","published":1,"updated":"2021-03-26T16:13:10.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpx001bg0trh7mr8e6l","content":"<html><head></head><body><p>功能敘述：<br>確認使用者輸入的資料是否正確。</p>\n<p><img src=\"https://i.imgur.com/vTeKNB1.png\"><br><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission21\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission21/index.html\">Demo</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"第一部分-刻板-上色\"><a href=\"#第一部分-刻板-上色\" class=\"headerlink\" title=\"第一部分: 刻板+上色\"></a>第一部分: 刻板+上色</h2><p>先寫好要一般 form 表單要填寫的資料，</p>\n<ol>\n<li>使用者名稱</li>\n<li>使用者信箱</li>\n<li>密碼</li>\n<li>密碼 2 次驗證</li>\n</ol>\n<p>上色跟輸入框的間隔可依照個人喜好設定</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- 輸入使用者名稱 --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'form'</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'form'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>表單驗證<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"formControl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"username\"</span>&gt;</span>UserName:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Key in UserName\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'failMessage'</span>&gt;</span>Error message<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!-- 輸入使用者e-mail --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"formControl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"email\"</span>&gt;</span>E-mail:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Key in E-mail\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'failMessage'</span>&gt;</span>Error message<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!-- 輸入使用者密碼 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"formControl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"password\"</span>&gt;</span>Password:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Key in password\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'failMessage'</span>&gt;</span>密碼錯誤<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!-- 確認使用者密碼 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"formControl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"confirmPassword\"</span>&gt;</span>Confirm Password:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"confirmPassword\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Key in password again\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'failMessage'</span>&gt;</span>請重新輸入密碼<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./all.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"第二部分-驗證\"><a href=\"#第二部分-驗證\" class=\"headerlink\" title=\"第二部分: 驗證\"></a>第二部分: 驗證</h2><h3 id=\"1-抓取-DOM\"><a href=\"#1-抓取-DOM\" class=\"headerlink\" title=\"1. 抓取 DOM\"></a>1. 抓取 DOM</h3><p>先抓取 dom 元素，因為是抓 id 所以是用 <code>#</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 抓取 dom 元素</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> form = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#form'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> username = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#username'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> email = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#email'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> password = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#password'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> confirmPassword = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#confirmPassword'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-常用的獨立寫出來\"><a href=\"#2-常用的獨立寫出來\" class=\"headerlink\" title=\"2. 常用的獨立寫出來\"></a>2. 常用的獨立寫出來</h3><p>因為只要寫錯就會顯示錯誤訊息，這動作很重複所以將這些函式獨立拉出來，<br>利用 callback function 的方式重複使用<br>要特別注意以下兩點</p>\n<ol>\n<li>是第 3 行 <code>formControl</code> 必須要用 <code>父元素</code> 的方式不能用 class 選擇器，不然它只會抓取 class 選擇器的最後一個，不會抓到每個 input 輸入框的父層</li>\n<li>第 5 行的 <code>small</code> 必須用 <code>formControl</code> 的方式抓，不能用 <code>document</code> ，不然會抓不到</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 失敗顯示</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showFail</span>(<span class=\"hljs-params\">input, message</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> formControl = input.parentElement</span><br><span class=\"line\">  formControl.className = <span class=\"hljs-string\">'formControl fail'</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> small = formControl.querySelector(<span class=\"hljs-string\">'small'</span>)</span><br><span class=\"line\">  small.innerText = message</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 成功顯示</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showSuccess</span>(<span class=\"hljs-params\">input</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> formControl = input.parentElement</span><br><span class=\"line\">  formControl.className = <span class=\"hljs-string\">'formControl success'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 第一字體變大寫</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFiledName</span>(<span class=\"hljs-params\">input</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> input.id.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>).toUpperCase() + input.id.slice(<span class=\"hljs-number\">1</span>).toLowerCase()</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-取消重複性\"><a href=\"#3-取消重複性\" class=\"headerlink\" title=\"3. 取消重複性\"></a>3. 取消重複性</h3><p>因為每個 dom 的 <code>input</code> 都要驗證的話就會有很多 <code>if else</code> 判斷式，這時候可以用 javascript 的 <code>forEach</code> 來讀取每個 dom ，然後再寫一次 <code>if else</code> 就可以每個都判斷</p>\n<p><code>checkInput</code> 裡面的值用陣列顯示，那每個質都要被讀取到就用 <code>forEach</code> ，在陣列中的 dom 因為綁了 <code>input</code> 所以直接帶入是否是空值得判斷式，因為如果寫在裡面會太大包，造成日後不好維護，外加太醜，所以這邊直接用 callback function 的方式</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 輸入框輸入確認</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkInput</span>(<span class=\"hljs-params\">inputId</span>) </span>{</span><br><span class=\"line\">  inputId.forEach(inputArr)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 輸入框 callback function</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inputArr</span>(<span class=\"hljs-params\">input</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (input.value.trim() === <span class=\"hljs-string\">''</span>) {</span><br><span class=\"line\">    showFail(input, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${getFiledName(input)}</span> is require`</span>)</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    showSuccess(input)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-驗證\"><a href=\"#4-驗證\" class=\"headerlink\" title=\"4. 驗證\"></a>4. 驗證</h3><h4 id=\"1-使用者名稱長度的驗證\"><a href=\"#1-使用者名稱長度的驗證\" class=\"headerlink\" title=\"( 1 ) 使用者名稱長度的驗證\"></a>( 1 ) 使用者名稱長度的驗證</h4><p>為了防止使用者名字長度過長或是過短，所以要設定一個卡關機制</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 輸入使用者名稱跟密碼長度限制</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkLength</span>(<span class=\"hljs-params\">input, min, max</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (input.value.length &lt; min) {</span><br><span class=\"line\">    showFail(input, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${getFiledName(input)}</span> must be at least <span class=\"hljs-subst\">${min}</span> characters`</span>)</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (input.value.length &gt; max) {</span><br><span class=\"line\">    showFail(</span><br><span class=\"line\">      input,</span><br><span class=\"line\">      <span class=\"hljs-string\">`<span class=\"hljs-subst\">${getFiledName(input)}</span> must be  less than <span class=\"hljs-subst\">${max}</span> characters`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    showSuccess(input)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-信箱驗證\"><a href=\"#2-信箱驗證\" class=\"headerlink\" title=\"( 2 ) 信箱驗證\"></a>( 2 ) 信箱驗證</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 信箱正規表達驗證</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkMail</span>(<span class=\"hljs-params\">input</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> re = <span class=\"hljs-regexp\">/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// return re.test(String(email).toLowerCase())</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (re.test(input.value)) {</span><br><span class=\"line\">    showSuccess(input)</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    showFail(input, <span class=\"hljs-string\">'email is not valid'</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"3-密碼雙重驗證\"><a href=\"#3-密碼雙重驗證\" class=\"headerlink\" title=\"( 3 ) 密碼雙重驗證\"></a>( 3 ) 密碼雙重驗證</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 密碼雙重驗證</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkPasswordMatch</span>(<span class=\"hljs-params\">password, confirmPassword</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (password.value !== confirmPassword.value) {</span><br><span class=\"line\">    showFail(confirmPassword, <span class=\"hljs-string\">'password is not match'</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"4-執行\"><a href=\"#4-執行\" class=\"headerlink\" title=\"( 4 ) 執行\"></a>( 4 ) 執行</h4><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 執行</span></span><br><span class=\"line\">form.addEventListener(<span class=\"hljs-string\">'submit'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  checkInput([username, email, password, confirmPassword])</span><br><span class=\"line\">  checkLength(username, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>)</span><br><span class=\"line\">  checkLength(password, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>)</span><br><span class=\"line\">  checkMail(email)</span><br><span class=\"line\">  checkPasswordMatch(password, confirmPassword)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a><a href=\"https://codepen.io/gleofgja/pen/JjRpOje?editors=1010\">Demo</a></h3><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842050#overview\">20 Web Projects With Vanilla JavaScript</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"作品集","path":"tags/作品集/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><p>功能敘述：<br>確認使用者輸入的資料是否正確。</p>\n<p><img src=\"https://i.imgur.com/vTeKNB1.png\"><br><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission21\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission21/index.html\">Demo</a></p></body></html>","more":"<h2 id=\"第一部分-刻板-上色\"><a href=\"#第一部分-刻板-上色\" class=\"headerlink\" title=\"第一部分: 刻板+上色\"></a>第一部分: 刻板+上色</h2><p>先寫好要一般 form 表單要填寫的資料，</p>\n<ol>\n<li>使用者名稱</li>\n<li>使用者信箱</li>\n<li>密碼</li>\n<li>密碼 2 次驗證</li>\n</ol>\n<p>上色跟輸入框的間隔可依照個人喜好設定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 輸入使用者名稱 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;form&#x27;</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;form&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>表單驗證<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span>UserName:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Key in UserName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">small</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;failMessage&#x27;</span>&gt;</span>Error message<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 輸入使用者e-mail --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span>E-mail:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Key in E-mail&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">small</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;failMessage&#x27;</span>&gt;</span>Error message<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 輸入使用者密碼 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>Password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Key in password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">small</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;failMessage&#x27;</span>&gt;</span>密碼錯誤<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 確認使用者密碼 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;formControl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;confirmPassword&quot;</span>&gt;</span>Confirm Password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;confirmPassword&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Key in password again&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">small</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;failMessage&#x27;</span>&gt;</span>請重新輸入密碼<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./all.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二部分-驗證\"><a href=\"#第二部分-驗證\" class=\"headerlink\" title=\"第二部分: 驗證\"></a>第二部分: 驗證</h2><h3 id=\"1-抓取-DOM\"><a href=\"#1-抓取-DOM\" class=\"headerlink\" title=\"1. 抓取 DOM\"></a>1. 抓取 DOM</h3><p>先抓取 dom 元素，因為是抓 id 所以是用 <code>#</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抓取 dom 元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#form&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> username = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#username&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> email = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#email&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> password = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#password&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> confirmPassword = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#confirmPassword&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-常用的獨立寫出來\"><a href=\"#2-常用的獨立寫出來\" class=\"headerlink\" title=\"2. 常用的獨立寫出來\"></a>2. 常用的獨立寫出來</h3><p>因為只要寫錯就會顯示錯誤訊息，這動作很重複所以將這些函式獨立拉出來，<br>利用 callback function 的方式重複使用<br>要特別注意以下兩點</p>\n<ol>\n<li>是第 3 行 <code>formControl</code> 必須要用 <code>父元素</code> 的方式不能用 class 選擇器，不然它只會抓取 class 選擇器的最後一個，不會抓到每個 input 輸入框的父層</li>\n<li>第 5 行的 <code>small</code> 必須用 <code>formControl</code> 的方式抓，不能用 <code>document</code> ，不然會抓不到</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 失敗顯示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showFail</span>(<span class=\"params\">input, message</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> formControl = input.parentElement</span><br><span class=\"line\">  formControl.className = <span class=\"string\">&#x27;formControl fail&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> small = formControl.querySelector(<span class=\"string\">&#x27;small&#x27;</span>)</span><br><span class=\"line\">  small.innerText = message</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 成功顯示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showSuccess</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> formControl = input.parentElement</span><br><span class=\"line\">  formControl.className = <span class=\"string\">&#x27;formControl success&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一字體變大寫</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFiledName</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> input.id.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase() + input.id.slice(<span class=\"number\">1</span>).toLowerCase()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-取消重複性\"><a href=\"#3-取消重複性\" class=\"headerlink\" title=\"3. 取消重複性\"></a>3. 取消重複性</h3><p>因為每個 dom 的 <code>input</code> 都要驗證的話就會有很多 <code>if else</code> 判斷式，這時候可以用 javascript 的 <code>forEach</code> 來讀取每個 dom ，然後再寫一次 <code>if else</code> 就可以每個都判斷</p>\n<p><code>checkInput</code> 裡面的值用陣列顯示，那每個質都要被讀取到就用 <code>forEach</code> ，在陣列中的 dom 因為綁了 <code>input</code> 所以直接帶入是否是空值得判斷式，因為如果寫在裡面會太大包，造成日後不好維護，外加太醜，所以這邊直接用 callback function 的方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 輸入框輸入確認</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkInput</span>(<span class=\"params\">inputId</span>) </span>&#123;</span><br><span class=\"line\">  inputId.forEach(inputArr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 輸入框 callback function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inputArr</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input.value.trim() === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">    showFail(input, <span class=\"string\">`<span class=\"subst\">$&#123;getFiledName(input)&#125;</span> is require`</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    showSuccess(input)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-驗證\"><a href=\"#4-驗證\" class=\"headerlink\" title=\"4. 驗證\"></a>4. 驗證</h3><h4 id=\"1-使用者名稱長度的驗證\"><a href=\"#1-使用者名稱長度的驗證\" class=\"headerlink\" title=\"( 1 ) 使用者名稱長度的驗證\"></a>( 1 ) 使用者名稱長度的驗證</h4><p>為了防止使用者名字長度過長或是過短，所以要設定一個卡關機制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 輸入使用者名稱跟密碼長度限制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkLength</span>(<span class=\"params\">input, min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input.value.length &lt; min) &#123;</span><br><span class=\"line\">    showFail(input, <span class=\"string\">`<span class=\"subst\">$&#123;getFiledName(input)&#125;</span> must be at least <span class=\"subst\">$&#123;min&#125;</span> characters`</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.value.length &gt; max) &#123;</span><br><span class=\"line\">    showFail(</span><br><span class=\"line\">      input,</span><br><span class=\"line\">      <span class=\"string\">`<span class=\"subst\">$&#123;getFiledName(input)&#125;</span> must be  less than <span class=\"subst\">$&#123;max&#125;</span> characters`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    showSuccess(input)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-信箱驗證\"><a href=\"#2-信箱驗證\" class=\"headerlink\" title=\"( 2 ) 信箱驗證\"></a>( 2 ) 信箱驗證</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 信箱正規表達驗證</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkMail</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> re = <span class=\"regexp\">/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</span></span><br><span class=\"line\">  <span class=\"comment\">// return re.test(String(email).toLowerCase())</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (re.test(input.value)) &#123;</span><br><span class=\"line\">    showSuccess(input)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    showFail(input, <span class=\"string\">&#x27;email is not valid&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-密碼雙重驗證\"><a href=\"#3-密碼雙重驗證\" class=\"headerlink\" title=\"( 3 ) 密碼雙重驗證\"></a>( 3 ) 密碼雙重驗證</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 密碼雙重驗證</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPasswordMatch</span>(<span class=\"params\">password, confirmPassword</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (password.value !== confirmPassword.value) &#123;</span><br><span class=\"line\">    showFail(confirmPassword, <span class=\"string\">&#x27;password is not match&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-執行\"><a href=\"#4-執行\" class=\"headerlink\" title=\"( 4 ) 執行\"></a>( 4 ) 執行</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 執行</span></span><br><span class=\"line\">form.addEventListener(<span class=\"string\">&#x27;submit&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  checkInput([username, email, password, confirmPassword])</span><br><span class=\"line\">  checkLength(username, <span class=\"number\">3</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">  checkLength(password, <span class=\"number\">3</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">  checkMail(email)</span><br><span class=\"line\">  checkPasswordMatch(password, confirmPassword)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a><a href=\"https://codepen.io/gleofgja/pen/JjRpOje?editors=1010\">Demo</a></h3><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842050#overview\">20 Web Projects With Vanilla JavaScript</a></p>"},{"title":"Git - 基本操作","date":"2020-12-19T16:00:00.000Z","description":"介紹 Git 基本指令的操作","_content":"\n## 簡介\n\nGit 是一個可控制程式碼版本的工具\n當我們在開發的時候為了不影響線上的產品，就會先開一個分支出來在分支上做開發，這樣既可以大膽的開發也不怕會影響到線上正在運行的版本，同時又做到程式碼的控管，是一個很方便的工具\n\n<!-- more -->\n\n## Git 指令\n\nGit 有分幾個簡單寫常用的幾個指令\n`git init`: 在我們 local 端建立數據庫\n`git add .`: 加入索引\n`git commit -m`: 將目前加入索引的資料提交出去\n`git push origin`: 推送到遠端數據庫\n`git pull`: 從遠端數據庫拉取最新的版本\n`git branch`: 查看分支\n`git checkout `: 切換到該分支\n`git log`: 查看 git 歷史紀錄\n`git status`: 查看目前資料狀態\n`git merge`: 合併分支\n\n工作上常用的大概是以上這幾種\n\n---\n\n## 安裝\n\nOS: window\n首先到 [Git 官網](https://git-scm.com/)下載 Git\n![](https://i.imgur.com/A0KD6ji.png)\n\n或是用 chcoclatey 安裝也可以 ，輸入`choco install git`\n\n初次安裝的話會需要設定使用者名稱跟密碼\n\n## 初始化\n\n安裝完成後在桌面建立資料夾，並簡單新增檔案，然後再對資料夾案右鍵，選取 Git Bash Here\n![](https://i.imgur.com/Tga7KCl.png)\n會出現 Bash 視窗\n![](https://i.imgur.com/Ae4RKtN.png)\n這樣就初始化完成了\n\n## 加入索引\n\n接下來就可以開發了\n\n本來是檔案內容是空的，現在加入一點基本資料，然後要將這資料加入索引\n當我們新增或是更改完成時就要將資料新增到索引，同時放到一個暫存區裡面\n因為 VScode 有內建 `git add` ，就是下圖紅框處，如果有更改某檔案的資料，在 changes 就會有紀錄，首先左邊選單選到 Source control 會看到有檔案變更，點擊紅框的 + 號，要加入索引就把滑鼠移至紅框，會出現 + 號，點擊就 add 了\n![](https://i.imgur.com/FeAhBnc.png)\n\nadd 新增索引後，如下圖\n![](https://i.imgur.com/7AHm6f6.png)\n\n## 提交\n\n當確定好更改的檔案並加入索引後，我們要 commit ，把暫存區裡面的資料丟到儲存庫裡面\n通常 commit 後面都會接此次更改的資訊，寫法如下\n`git commit -m \"add index.html\"`，要記得空格跟加雙引號\n![](https://i.imgur.com/qQ0nwuq.png)\n\n然後推送至遠端數據庫\n\n## 建立遠端儲存庫\n\n在推送至遠端數據庫之前，要先在遠端建立遠端數據庫，那這會用到 Github ，\n如果沒有 Github 要先辦一下\n登入後看到右上角有個 + 號，點擊候選取 `New repository`\n![](https://i.imgur.com/TF4JMgd.png)\n會出現以下畫面，然後再紅框處輸入遠端數據庫的名稱，這邊用 test1 示範，然後點擊下面的\nCreate repository\n![](https://i.imgur.com/rEvAKi8.png)\n\n接著會顯示以下畫面\n![](https://i.imgur.com/vqMTP0o.png)\n\n## 推送至遠端數據庫\n\n當我們把資料都丟到數據庫後，接下來要將新增或是修改的檔案推送到遠端數據庫中\n`git push origin test` ，意思是將 test 這個分之 push 到遠端的數據庫中\n因為我剛剛已經 init、add、commit 了，所以現在就直接 push，點選右邊紅框的複製紐\n直接貼上\n![](https://i.imgur.com/zS5tHdk.png)\n\n用 `git log` 指令確認一下狀態\n![](https://i.imgur.com/9HjeMar.png)\n\n在回到 Github 在刷新一次頁面，確認一下\n![](https://i.imgur.com/1ZPugtq.png)\n\n這樣不管是 loacal 或是 remote，前置作業就算是完成了\n\n## 製造分支\n\n接下來我們可以試著用分支開發\n造分支有兩種方法:\n\n1. `git checkout -b 分支名稱`: 這方法比較直接，輸入完直接造分支同時切到該分支上\n   ![](https://i.imgur.com/1QXhPuf.png)\n\n2. `git branch 分支名稱`: 這方法會造分支但不會切換到該分支，必須再下 `git checkout 分支名稱` 才會切過去，以下示範\n   我先用 `branch` 創造分支 `dev2` ，然後再確認目前在哪個分支上\n   (**亮綠色有星號的就是在該分支上**)\n   但因為我創的是 `dev2` ，所以還沒轉過去，要用 `checkout` 才可以切換過去\n   ![](https://i.imgur.com/XZGOfc8.png)\n\n## 合併分支\n\n接下來流程跟上面步驟一樣\n\n1. 建立索引 add 或是 按 +\n2. 提交至儲存庫` git commit`\n3. 推送至遠端\n\n---\n\n### 實際操作:\n\n1. 確認在哪個分之\n2. 在分支上新增 `h2` 內容，並加入索引\n3. 用 `git status` 確認目前更改的檔案有哪些\n\n如下圖\n![](https://i.imgur.com/oz44dB5.png)\n\n提交到儲存庫後，左邊的暫存檔就會不見\n![](https://i.imgur.com/WiXB10q.png)\n\n再示範一次，新增 h3 內容\n我們可以點擊更改的檔案查看哪邊有高亮，有代表變更的地方\n![](https://i.imgur.com/q086OIx.png)\n\n提交後。高亮就會不見\n![](https://i.imgur.com/OfQeK2n.png)\n\n再推送到遠端\n`git push origin 分支名稱`\n![](https://i.imgur.com/KcZ8GBP.png)\n\n到遠端切換到分支上查看，確實有剛新增的內容\n![](https://i.imgur.com/Zco4gdf.png)\n\n### 接下來要合併了\n\n**切回 主支( main )**\n![](https://i.imgur.com/BrJ6tEq.png)\n\n可以看到沒有 h2、h3 的內容\n但再切回 dev1 分支查看是有的\n![](https://i.imgur.com/efIhab5.png)\n\n合併時我們要先切到要被合併的那個分支上，可以用 `git branch` 確認高亮跟星號在哪，如下圖\n![](https://i.imgur.com/cvzd86T.png)\n`merge` 完後 dev1 的內容就會被新增到主支(main)上，然後就可以繼續做開發了\n\n---\n\n## 參考資料\n\n[把檔案交給 Git 控管](https://gitbook.tw/chapters/using-git/add-to-git.html)\n","source":"_posts/2020/git.md","raw":"---\ntitle: Git - 基本操作\ndate: 2020/12/20\ntags: Git\ncategories: Git\ndescription: 介紹 Git 基本指令的操作\n---\n\n## 簡介\n\nGit 是一個可控制程式碼版本的工具\n當我們在開發的時候為了不影響線上的產品，就會先開一個分支出來在分支上做開發，這樣既可以大膽的開發也不怕會影響到線上正在運行的版本，同時又做到程式碼的控管，是一個很方便的工具\n\n<!-- more -->\n\n## Git 指令\n\nGit 有分幾個簡單寫常用的幾個指令\n`git init`: 在我們 local 端建立數據庫\n`git add .`: 加入索引\n`git commit -m`: 將目前加入索引的資料提交出去\n`git push origin`: 推送到遠端數據庫\n`git pull`: 從遠端數據庫拉取最新的版本\n`git branch`: 查看分支\n`git checkout `: 切換到該分支\n`git log`: 查看 git 歷史紀錄\n`git status`: 查看目前資料狀態\n`git merge`: 合併分支\n\n工作上常用的大概是以上這幾種\n\n---\n\n## 安裝\n\nOS: window\n首先到 [Git 官網](https://git-scm.com/)下載 Git\n![](https://i.imgur.com/A0KD6ji.png)\n\n或是用 chcoclatey 安裝也可以 ，輸入`choco install git`\n\n初次安裝的話會需要設定使用者名稱跟密碼\n\n## 初始化\n\n安裝完成後在桌面建立資料夾，並簡單新增檔案，然後再對資料夾案右鍵，選取 Git Bash Here\n![](https://i.imgur.com/Tga7KCl.png)\n會出現 Bash 視窗\n![](https://i.imgur.com/Ae4RKtN.png)\n這樣就初始化完成了\n\n## 加入索引\n\n接下來就可以開發了\n\n本來是檔案內容是空的，現在加入一點基本資料，然後要將這資料加入索引\n當我們新增或是更改完成時就要將資料新增到索引，同時放到一個暫存區裡面\n因為 VScode 有內建 `git add` ，就是下圖紅框處，如果有更改某檔案的資料，在 changes 就會有紀錄，首先左邊選單選到 Source control 會看到有檔案變更，點擊紅框的 + 號，要加入索引就把滑鼠移至紅框，會出現 + 號，點擊就 add 了\n![](https://i.imgur.com/FeAhBnc.png)\n\nadd 新增索引後，如下圖\n![](https://i.imgur.com/7AHm6f6.png)\n\n## 提交\n\n當確定好更改的檔案並加入索引後，我們要 commit ，把暫存區裡面的資料丟到儲存庫裡面\n通常 commit 後面都會接此次更改的資訊，寫法如下\n`git commit -m \"add index.html\"`，要記得空格跟加雙引號\n![](https://i.imgur.com/qQ0nwuq.png)\n\n然後推送至遠端數據庫\n\n## 建立遠端儲存庫\n\n在推送至遠端數據庫之前，要先在遠端建立遠端數據庫，那這會用到 Github ，\n如果沒有 Github 要先辦一下\n登入後看到右上角有個 + 號，點擊候選取 `New repository`\n![](https://i.imgur.com/TF4JMgd.png)\n會出現以下畫面，然後再紅框處輸入遠端數據庫的名稱，這邊用 test1 示範，然後點擊下面的\nCreate repository\n![](https://i.imgur.com/rEvAKi8.png)\n\n接著會顯示以下畫面\n![](https://i.imgur.com/vqMTP0o.png)\n\n## 推送至遠端數據庫\n\n當我們把資料都丟到數據庫後，接下來要將新增或是修改的檔案推送到遠端數據庫中\n`git push origin test` ，意思是將 test 這個分之 push 到遠端的數據庫中\n因為我剛剛已經 init、add、commit 了，所以現在就直接 push，點選右邊紅框的複製紐\n直接貼上\n![](https://i.imgur.com/zS5tHdk.png)\n\n用 `git log` 指令確認一下狀態\n![](https://i.imgur.com/9HjeMar.png)\n\n在回到 Github 在刷新一次頁面，確認一下\n![](https://i.imgur.com/1ZPugtq.png)\n\n這樣不管是 loacal 或是 remote，前置作業就算是完成了\n\n## 製造分支\n\n接下來我們可以試著用分支開發\n造分支有兩種方法:\n\n1. `git checkout -b 分支名稱`: 這方法比較直接，輸入完直接造分支同時切到該分支上\n   ![](https://i.imgur.com/1QXhPuf.png)\n\n2. `git branch 分支名稱`: 這方法會造分支但不會切換到該分支，必須再下 `git checkout 分支名稱` 才會切過去，以下示範\n   我先用 `branch` 創造分支 `dev2` ，然後再確認目前在哪個分支上\n   (**亮綠色有星號的就是在該分支上**)\n   但因為我創的是 `dev2` ，所以還沒轉過去，要用 `checkout` 才可以切換過去\n   ![](https://i.imgur.com/XZGOfc8.png)\n\n## 合併分支\n\n接下來流程跟上面步驟一樣\n\n1. 建立索引 add 或是 按 +\n2. 提交至儲存庫` git commit`\n3. 推送至遠端\n\n---\n\n### 實際操作:\n\n1. 確認在哪個分之\n2. 在分支上新增 `h2` 內容，並加入索引\n3. 用 `git status` 確認目前更改的檔案有哪些\n\n如下圖\n![](https://i.imgur.com/oz44dB5.png)\n\n提交到儲存庫後，左邊的暫存檔就會不見\n![](https://i.imgur.com/WiXB10q.png)\n\n再示範一次，新增 h3 內容\n我們可以點擊更改的檔案查看哪邊有高亮，有代表變更的地方\n![](https://i.imgur.com/q086OIx.png)\n\n提交後。高亮就會不見\n![](https://i.imgur.com/OfQeK2n.png)\n\n再推送到遠端\n`git push origin 分支名稱`\n![](https://i.imgur.com/KcZ8GBP.png)\n\n到遠端切換到分支上查看，確實有剛新增的內容\n![](https://i.imgur.com/Zco4gdf.png)\n\n### 接下來要合併了\n\n**切回 主支( main )**\n![](https://i.imgur.com/BrJ6tEq.png)\n\n可以看到沒有 h2、h3 的內容\n但再切回 dev1 分支查看是有的\n![](https://i.imgur.com/efIhab5.png)\n\n合併時我們要先切到要被合併的那個分支上，可以用 `git branch` 確認高亮跟星號在哪，如下圖\n![](https://i.imgur.com/cvzd86T.png)\n`merge` 完後 dev1 的內容就會被新增到主支(main)上，然後就可以繼續做開發了\n\n---\n\n## 參考資料\n\n[把檔案交給 Git 控管](https://gitbook.tw/chapters/using-git/add-to-git.html)\n","slug":"git","published":1,"updated":"2021-03-26T16:13:10.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lpz001eg0tr7luo2l5h","content":"<html><head></head><body><h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>Git 是一個可控制程式碼版本的工具<br>當我們在開發的時候為了不影響線上的產品，就會先開一個分支出來在分支上做開發，這樣既可以大膽的開發也不怕會影響到線上正在運行的版本，同時又做到程式碼的控管，是一個很方便的工具</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Git-指令\"><a href=\"#Git-指令\" class=\"headerlink\" title=\"Git 指令\"></a>Git 指令</h2><p>Git 有分幾個簡單寫常用的幾個指令<br><code>git init</code>: 在我們 local 端建立數據庫<br><code>git add .</code>: 加入索引<br><code>git commit -m</code>: 將目前加入索引的資料提交出去<br><code>git push origin</code>: 推送到遠端數據庫<br><code>git pull</code>: 從遠端數據庫拉取最新的版本<br><code>git branch</code>: 查看分支<br><code>git checkout </code>: 切換到該分支<br><code>git log</code>: 查看 git 歷史紀錄<br><code>git status</code>: 查看目前資料狀態<br><code>git merge</code>: 合併分支</p>\n<p>工作上常用的大概是以上這幾種</p>\n<hr>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>OS: window<br>首先到 <a href=\"https://git-scm.com/\">Git 官網</a>下載 Git<br><img src=\"https://i.imgur.com/A0KD6ji.png\"></p>\n<p>或是用 chcoclatey 安裝也可以 ，輸入<code>choco install git</code></p>\n<p>初次安裝的話會需要設定使用者名稱跟密碼</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>安裝完成後在桌面建立資料夾，並簡單新增檔案，然後再對資料夾案右鍵，選取 Git Bash Here<br><img src=\"https://i.imgur.com/Tga7KCl.png\"><br>會出現 Bash 視窗<br><img src=\"https://i.imgur.com/Ae4RKtN.png\"><br>這樣就初始化完成了</p>\n<h2 id=\"加入索引\"><a href=\"#加入索引\" class=\"headerlink\" title=\"加入索引\"></a>加入索引</h2><p>接下來就可以開發了</p>\n<p>本來是檔案內容是空的，現在加入一點基本資料，然後要將這資料加入索引<br>當我們新增或是更改完成時就要將資料新增到索引，同時放到一個暫存區裡面<br>因為 VScode 有內建 <code>git add</code> ，就是下圖紅框處，如果有更改某檔案的資料，在 changes 就會有紀錄，首先左邊選單選到 Source control 會看到有檔案變更，點擊紅框的 + 號，要加入索引就把滑鼠移至紅框，會出現 + 號，點擊就 add 了<br><img src=\"https://i.imgur.com/FeAhBnc.png\"></p>\n<p>add 新增索引後，如下圖<br><img src=\"https://i.imgur.com/7AHm6f6.png\"></p>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><p>當確定好更改的檔案並加入索引後，我們要 commit ，把暫存區裡面的資料丟到儲存庫裡面<br>通常 commit 後面都會接此次更改的資訊，寫法如下<br><code>git commit -m \"add index.html\"</code>，要記得空格跟加雙引號<br><img src=\"https://i.imgur.com/qQ0nwuq.png\"></p>\n<p>然後推送至遠端數據庫</p>\n<h2 id=\"建立遠端儲存庫\"><a href=\"#建立遠端儲存庫\" class=\"headerlink\" title=\"建立遠端儲存庫\"></a>建立遠端儲存庫</h2><p>在推送至遠端數據庫之前，要先在遠端建立遠端數據庫，那這會用到 Github ，<br>如果沒有 Github 要先辦一下<br>登入後看到右上角有個 + 號，點擊候選取 <code>New repository</code><br><img src=\"https://i.imgur.com/TF4JMgd.png\"><br>會出現以下畫面，然後再紅框處輸入遠端數據庫的名稱，這邊用 test1 示範，然後點擊下面的<br>Create repository<br><img src=\"https://i.imgur.com/rEvAKi8.png\"></p>\n<p>接著會顯示以下畫面<br><img src=\"https://i.imgur.com/vqMTP0o.png\"></p>\n<h2 id=\"推送至遠端數據庫\"><a href=\"#推送至遠端數據庫\" class=\"headerlink\" title=\"推送至遠端數據庫\"></a>推送至遠端數據庫</h2><p>當我們把資料都丟到數據庫後，接下來要將新增或是修改的檔案推送到遠端數據庫中<br><code>git push origin test</code> ，意思是將 test 這個分之 push 到遠端的數據庫中<br>因為我剛剛已經 init、add、commit 了，所以現在就直接 push，點選右邊紅框的複製紐<br>直接貼上<br><img src=\"https://i.imgur.com/zS5tHdk.png\"></p>\n<p>用 <code>git log</code> 指令確認一下狀態<br><img src=\"https://i.imgur.com/9HjeMar.png\"></p>\n<p>在回到 Github 在刷新一次頁面，確認一下<br><img src=\"https://i.imgur.com/1ZPugtq.png\"></p>\n<p>這樣不管是 loacal 或是 remote，前置作業就算是完成了</p>\n<h2 id=\"製造分支\"><a href=\"#製造分支\" class=\"headerlink\" title=\"製造分支\"></a>製造分支</h2><p>接下來我們可以試著用分支開發<br>造分支有兩種方法:</p>\n<ol>\n<li><p><code>git checkout -b 分支名稱</code>: 這方法比較直接，輸入完直接造分支同時切到該分支上<br><img src=\"https://i.imgur.com/1QXhPuf.png\"></p>\n</li>\n<li><p><code>git branch 分支名稱</code>: 這方法會造分支但不會切換到該分支，必須再下 <code>git checkout 分支名稱</code> 才會切過去，以下示範<br>我先用 <code>branch</code> 創造分支 <code>dev2</code> ，然後再確認目前在哪個分支上<br>(<strong>亮綠色有星號的就是在該分支上</strong>)<br>但因為我創的是 <code>dev2</code> ，所以還沒轉過去，要用 <code>checkout</code> 才可以切換過去<br><img src=\"https://i.imgur.com/XZGOfc8.png\"></p>\n</li>\n</ol>\n<h2 id=\"合併分支\"><a href=\"#合併分支\" class=\"headerlink\" title=\"合併分支\"></a>合併分支</h2><p>接下來流程跟上面步驟一樣</p>\n<ol>\n<li>建立索引 add 或是 按 +</li>\n<li>提交至儲存庫<code> git commit</code></li>\n<li>推送至遠端</li>\n</ol>\n<hr>\n<h3 id=\"實際操作\"><a href=\"#實際操作\" class=\"headerlink\" title=\"實際操作:\"></a>實際操作:</h3><ol>\n<li>確認在哪個分之</li>\n<li>在分支上新增 <code>h2</code> 內容，並加入索引</li>\n<li>用 <code>git status</code> 確認目前更改的檔案有哪些</li>\n</ol>\n<p>如下圖<br><img src=\"https://i.imgur.com/oz44dB5.png\"></p>\n<p>提交到儲存庫後，左邊的暫存檔就會不見<br><img src=\"https://i.imgur.com/WiXB10q.png\"></p>\n<p>再示範一次，新增 h3 內容<br>我們可以點擊更改的檔案查看哪邊有高亮，有代表變更的地方<br><img src=\"https://i.imgur.com/q086OIx.png\"></p>\n<p>提交後。高亮就會不見<br><img src=\"https://i.imgur.com/OfQeK2n.png\"></p>\n<p>再推送到遠端<br><code>git push origin 分支名稱</code><br><img src=\"https://i.imgur.com/KcZ8GBP.png\"></p>\n<p>到遠端切換到分支上查看，確實有剛新增的內容<br><img src=\"https://i.imgur.com/Zco4gdf.png\"></p>\n<h3 id=\"接下來要合併了\"><a href=\"#接下來要合併了\" class=\"headerlink\" title=\"接下來要合併了\"></a>接下來要合併了</h3><p><strong>切回 主支( main )</strong><br><img src=\"https://i.imgur.com/BrJ6tEq.png\"></p>\n<p>可以看到沒有 h2、h3 的內容<br>但再切回 dev1 分支查看是有的<br><img src=\"https://i.imgur.com/efIhab5.png\"></p>\n<p>合併時我們要先切到要被合併的那個分支上，可以用 <code>git branch</code> 確認高亮跟星號在哪，如下圖<br><img src=\"https://i.imgur.com/cvzd86T.png\"><br><code>merge</code> 完後 dev1 的內容就會被新增到主支(main)上，然後就可以繼續做開發了</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://gitbook.tw/chapters/using-git/add-to-git.html\">把檔案交給 Git 控管</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Git","path":"categories/Git/"}],"_tags":[{"name":"Git","path":"tags/Git/"}],"excerpt":"<html><head></head><body><h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>Git 是一個可控制程式碼版本的工具<br>當我們在開發的時候為了不影響線上的產品，就會先開一個分支出來在分支上做開發，這樣既可以大膽的開發也不怕會影響到線上正在運行的版本，同時又做到程式碼的控管，是一個很方便的工具</p></body></html>","more":"<h2 id=\"Git-指令\"><a href=\"#Git-指令\" class=\"headerlink\" title=\"Git 指令\"></a>Git 指令</h2><p>Git 有分幾個簡單寫常用的幾個指令<br><code>git init</code>: 在我們 local 端建立數據庫<br><code>git add .</code>: 加入索引<br><code>git commit -m</code>: 將目前加入索引的資料提交出去<br><code>git push origin</code>: 推送到遠端數據庫<br><code>git pull</code>: 從遠端數據庫拉取最新的版本<br><code>git branch</code>: 查看分支<br><code>git checkout </code>: 切換到該分支<br><code>git log</code>: 查看 git 歷史紀錄<br><code>git status</code>: 查看目前資料狀態<br><code>git merge</code>: 合併分支</p>\n<p>工作上常用的大概是以上這幾種</p>\n<hr>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>OS: window<br>首先到 <a href=\"https://git-scm.com/\">Git 官網</a>下載 Git<br><img src=\"https://i.imgur.com/A0KD6ji.png\"></p>\n<p>或是用 chcoclatey 安裝也可以 ，輸入<code>choco install git</code></p>\n<p>初次安裝的話會需要設定使用者名稱跟密碼</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>安裝完成後在桌面建立資料夾，並簡單新增檔案，然後再對資料夾案右鍵，選取 Git Bash Here<br><img src=\"https://i.imgur.com/Tga7KCl.png\"><br>會出現 Bash 視窗<br><img src=\"https://i.imgur.com/Ae4RKtN.png\"><br>這樣就初始化完成了</p>\n<h2 id=\"加入索引\"><a href=\"#加入索引\" class=\"headerlink\" title=\"加入索引\"></a>加入索引</h2><p>接下來就可以開發了</p>\n<p>本來是檔案內容是空的，現在加入一點基本資料，然後要將這資料加入索引<br>當我們新增或是更改完成時就要將資料新增到索引，同時放到一個暫存區裡面<br>因為 VScode 有內建 <code>git add</code> ，就是下圖紅框處，如果有更改某檔案的資料，在 changes 就會有紀錄，首先左邊選單選到 Source control 會看到有檔案變更，點擊紅框的 + 號，要加入索引就把滑鼠移至紅框，會出現 + 號，點擊就 add 了<br><img src=\"https://i.imgur.com/FeAhBnc.png\"></p>\n<p>add 新增索引後，如下圖<br><img src=\"https://i.imgur.com/7AHm6f6.png\"></p>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><p>當確定好更改的檔案並加入索引後，我們要 commit ，把暫存區裡面的資料丟到儲存庫裡面<br>通常 commit 後面都會接此次更改的資訊，寫法如下<br><code>git commit -m &quot;add index.html&quot;</code>，要記得空格跟加雙引號<br><img src=\"https://i.imgur.com/qQ0nwuq.png\"></p>\n<p>然後推送至遠端數據庫</p>\n<h2 id=\"建立遠端儲存庫\"><a href=\"#建立遠端儲存庫\" class=\"headerlink\" title=\"建立遠端儲存庫\"></a>建立遠端儲存庫</h2><p>在推送至遠端數據庫之前，要先在遠端建立遠端數據庫，那這會用到 Github ，<br>如果沒有 Github 要先辦一下<br>登入後看到右上角有個 + 號，點擊候選取 <code>New repository</code><br><img src=\"https://i.imgur.com/TF4JMgd.png\"><br>會出現以下畫面，然後再紅框處輸入遠端數據庫的名稱，這邊用 test1 示範，然後點擊下面的<br>Create repository<br><img src=\"https://i.imgur.com/rEvAKi8.png\"></p>\n<p>接著會顯示以下畫面<br><img src=\"https://i.imgur.com/vqMTP0o.png\"></p>\n<h2 id=\"推送至遠端數據庫\"><a href=\"#推送至遠端數據庫\" class=\"headerlink\" title=\"推送至遠端數據庫\"></a>推送至遠端數據庫</h2><p>當我們把資料都丟到數據庫後，接下來要將新增或是修改的檔案推送到遠端數據庫中<br><code>git push origin test</code> ，意思是將 test 這個分之 push 到遠端的數據庫中<br>因為我剛剛已經 init、add、commit 了，所以現在就直接 push，點選右邊紅框的複製紐<br>直接貼上<br><img src=\"https://i.imgur.com/zS5tHdk.png\"></p>\n<p>用 <code>git log</code> 指令確認一下狀態<br><img src=\"https://i.imgur.com/9HjeMar.png\"></p>\n<p>在回到 Github 在刷新一次頁面，確認一下<br><img src=\"https://i.imgur.com/1ZPugtq.png\"></p>\n<p>這樣不管是 loacal 或是 remote，前置作業就算是完成了</p>\n<h2 id=\"製造分支\"><a href=\"#製造分支\" class=\"headerlink\" title=\"製造分支\"></a>製造分支</h2><p>接下來我們可以試著用分支開發<br>造分支有兩種方法:</p>\n<ol>\n<li><p><code>git checkout -b 分支名稱</code>: 這方法比較直接，輸入完直接造分支同時切到該分支上<br><img src=\"https://i.imgur.com/1QXhPuf.png\"></p>\n</li>\n<li><p><code>git branch 分支名稱</code>: 這方法會造分支但不會切換到該分支，必須再下 <code>git checkout 分支名稱</code> 才會切過去，以下示範<br>我先用 <code>branch</code> 創造分支 <code>dev2</code> ，然後再確認目前在哪個分支上<br>(<strong>亮綠色有星號的就是在該分支上</strong>)<br>但因為我創的是 <code>dev2</code> ，所以還沒轉過去，要用 <code>checkout</code> 才可以切換過去<br><img src=\"https://i.imgur.com/XZGOfc8.png\"></p>\n</li>\n</ol>\n<h2 id=\"合併分支\"><a href=\"#合併分支\" class=\"headerlink\" title=\"合併分支\"></a>合併分支</h2><p>接下來流程跟上面步驟一樣</p>\n<ol>\n<li>建立索引 add 或是 按 +</li>\n<li>提交至儲存庫<code> git commit</code></li>\n<li>推送至遠端</li>\n</ol>\n<hr>\n<h3 id=\"實際操作\"><a href=\"#實際操作\" class=\"headerlink\" title=\"實際操作:\"></a>實際操作:</h3><ol>\n<li>確認在哪個分之</li>\n<li>在分支上新增 <code>h2</code> 內容，並加入索引</li>\n<li>用 <code>git status</code> 確認目前更改的檔案有哪些</li>\n</ol>\n<p>如下圖<br><img src=\"https://i.imgur.com/oz44dB5.png\"></p>\n<p>提交到儲存庫後，左邊的暫存檔就會不見<br><img src=\"https://i.imgur.com/WiXB10q.png\"></p>\n<p>再示範一次，新增 h3 內容<br>我們可以點擊更改的檔案查看哪邊有高亮，有代表變更的地方<br><img src=\"https://i.imgur.com/q086OIx.png\"></p>\n<p>提交後。高亮就會不見<br><img src=\"https://i.imgur.com/OfQeK2n.png\"></p>\n<p>再推送到遠端<br><code>git push origin 分支名稱</code><br><img src=\"https://i.imgur.com/KcZ8GBP.png\"></p>\n<p>到遠端切換到分支上查看，確實有剛新增的內容<br><img src=\"https://i.imgur.com/Zco4gdf.png\"></p>\n<h3 id=\"接下來要合併了\"><a href=\"#接下來要合併了\" class=\"headerlink\" title=\"接下來要合併了\"></a>接下來要合併了</h3><p><strong>切回 主支( main )</strong><br><img src=\"https://i.imgur.com/BrJ6tEq.png\"></p>\n<p>可以看到沒有 h2、h3 的內容<br>但再切回 dev1 分支查看是有的<br><img src=\"https://i.imgur.com/efIhab5.png\"></p>\n<p>合併時我們要先切到要被合併的那個分支上，可以用 <code>git branch</code> 確認高亮跟星號在哪，如下圖<br><img src=\"https://i.imgur.com/cvzd86T.png\"><br><code>merge</code> 完後 dev1 的內容就會被新增到主支(main)上，然後就可以繼續做開發了</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://gitbook.tw/chapters/using-git/add-to-git.html\">把檔案交給 Git 控管</a></p>"},{"title":"Vue - MVVM 簡介","date":"2021-02-21T16:00:00.000Z","_content":"\n## 介紹\n\nMVVM 是由 Model、View 跟 ViewModel 這三個東西之間的作用，可以比較好管理開發者的內容。\n\n<!-- more -->\n\n- Model：管理資料來源如 API 和本地資料庫\n- View：顯示 UI 和接收使用者動作\n- ViewModel：從 Model 取得 View 所需的資料\n\n![](https://i.imgur.com/KBZjJJN.png)\n\n使用者透過 view 操作來影響 view model ，只要在 view 裡面操做， view model 同時也會跟著變動，同時也修改 model 的內容，那 view model 資料發生變動，又會同時改變 View 顯示的內容，所以他們三個是互相交互作用的。\n\nVue 強大的地方在於 Vue 組件，他可以把龐大的 App 分裝，把相關的功能集中，讓這些組件獨立封裝而且好維護也好測試。\n\n![](https://i.imgur.com/u71Nukr.png)\n\n---\n\n## 參考資料\n\n[精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n[MVVM 架構](https://ithelp.ithome.com.tw/articles/10192829)\n","source":"_posts/2020/mvvm.md","raw":"---\ntitle: Vue - MVVM 簡介\ndate: 2021/02/22\ntags: MVVM\ncategories:\n  - Vue\n---\n\n## 介紹\n\nMVVM 是由 Model、View 跟 ViewModel 這三個東西之間的作用，可以比較好管理開發者的內容。\n\n<!-- more -->\n\n- Model：管理資料來源如 API 和本地資料庫\n- View：顯示 UI 和接收使用者動作\n- ViewModel：從 Model 取得 View 所需的資料\n\n![](https://i.imgur.com/KBZjJJN.png)\n\n使用者透過 view 操作來影響 view model ，只要在 view 裡面操做， view model 同時也會跟著變動，同時也修改 model 的內容，那 view model 資料發生變動，又會同時改變 View 顯示的內容，所以他們三個是互相交互作用的。\n\nVue 強大的地方在於 Vue 組件，他可以把龐大的 App 分裝，把相關的功能集中，讓這些組件獨立封裝而且好維護也好測試。\n\n![](https://i.imgur.com/u71Nukr.png)\n\n---\n\n## 參考資料\n\n[精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n[MVVM 架構](https://ithelp.ithome.com.tw/articles/10192829)\n","slug":"mvvm","published":1,"updated":"2021-03-26T16:13:10.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lq0001hg0trf08wa9g0","content":"<html><head></head><body><h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><p>MVVM 是由 Model、View 跟 ViewModel 這三個東西之間的作用，可以比較好管理開發者的內容。</p>\n<a id=\"more\"></a>\n\n<ul>\n<li>Model：管理資料來源如 API 和本地資料庫</li>\n<li>View：顯示 UI 和接收使用者動作</li>\n<li>ViewModel：從 Model 取得 View 所需的資料</li>\n</ul>\n<p><img src=\"https://i.imgur.com/KBZjJJN.png\"></p>\n<p>使用者透過 view 操作來影響 view model ，只要在 view 裡面操做， view model 同時也會跟著變動，同時也修改 model 的內容，那 view model 資料發生變動，又會同時改變 View 顯示的內容，所以他們三個是互相交互作用的。</p>\n<p>Vue 強大的地方在於 Vue 組件，他可以把龐大的 App 分裝，把相關的功能集中，讓這些組件獨立封裝而且好維護也好測試。</p>\n<p><img src=\"https://i.imgur.com/u71Nukr.png\"></p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://hiskio.com/courses/145\">精通 VueJS 前端開發完全指南</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10192829\">MVVM 架構</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"MVVM","path":"tags/MVVM/"}],"excerpt":"<html><head></head><body><h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><p>MVVM 是由 Model、View 跟 ViewModel 這三個東西之間的作用，可以比較好管理開發者的內容。</p></body></html>","more":"<ul>\n<li>Model：管理資料來源如 API 和本地資料庫</li>\n<li>View：顯示 UI 和接收使用者動作</li>\n<li>ViewModel：從 Model 取得 View 所需的資料</li>\n</ul>\n<p><img src=\"https://i.imgur.com/KBZjJJN.png\"></p>\n<p>使用者透過 view 操作來影響 view model ，只要在 view 裡面操做， view model 同時也會跟著變動，同時也修改 model 的內容，那 view model 資料發生變動，又會同時改變 View 顯示的內容，所以他們三個是互相交互作用的。</p>\n<p>Vue 強大的地方在於 Vue 組件，他可以把龐大的 App 分裝，把相關的功能集中，讓這些組件獨立封裝而且好維護也好測試。</p>\n<p><img src=\"https://i.imgur.com/u71Nukr.png\"></p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://hiskio.com/courses/145\">精通 VueJS 前端開發完全指南</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10192829\">MVVM 架構</a></p>"},{"title":"Vue - 父組件傳遞到子組件的  props 語法","date":"2021-03-01T16:00:00.000Z","_content":"\n## 簡介\n\n當組件化的網頁要從後端伺服器請求資料的時候，那些回傳的資料都會經過父層組件傳到子層組件去，那父層組件的參數要傳到子層組件的話就要透過 `props` 語法。\n\n![](https://i.imgur.com/Hmwi0nd.png)\n\n<!--more-->\n\n## 1. props 沒有限制型別\n\n沒有限制型別的寫法就是說待會在接收父層的資料的時候不會有限制。\n\n套用之前的範例，這是在不需要從 `Vue 實例` ( 父層 ) 傳參數的寫法。\n\n```html\n<div id=\"app\">\n  <cpn></cpn>\n</div>\n\n<template id=\"cpn\">\n  <div>\n    <h1>{{message}}</h1>\n  </div>\n</template>\n```\n\n```javascript\nconst cpn = {\n  template: '#cpn',\n  data() {\n    return {\n      message: 'Hello World',\n    }\n  },\n}\n\nconst app = new Vue({\n  el: '#app',\n  components: {\n    cpn,\n  },\n})\n```\n\n正常會顯示下圖\n![](https://i.imgur.com/QBPGEO8.png)\n\n但是現在要從 `Vue 實例` ( 父層 ) 傳變數，那我們先在父層新增一些資料，同時又要接收資料。\n\n方法如下:\n\n1. 在組件內先新增 `props` 屬性，然後在陣列內新增變數，變數的名稱是自定義的 ( `JS` 第 4 行 ) 。\n2. 在模板中新新增組件標籤 ( `HTML` 第 8、9 行 )。\n3. 在組件標籤上動態綁定父子組件 ( `HTML` 第 2 行 ) 。\n\n`props` 陣列內寫的是變數，不是字串。\n\n```html\n<div id=\"app\">\n  <cpn :cmovies=\"movies\" :cmessage=\"message\"></cpn>\n</div>\n\n<template id=\"cpn\">\n  <div>\n    <h2>{{cmovies}}</h2>\n    <h2>{{cmessage}}</h2>\n\n    <ul>\n      <li v-for=\"item in cmovies\">{{item}}</li>\n    </ul>\n  </div>\n</template>\n```\n\n```javascript\nconst cpn = {\n  template: '#cpn',\n  // 1. 沒有限制型別的寫法\n  props: ['cmovies', 'cmessage'],\n}\n\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello world',\n    movies: ['索爾', '鋼鐵人', '綠巨人浩克'],\n  },\n  components: {\n    cpn,\n  },\n})\n```\n\n這樣就子組件就可以從父層拿到資料並渲染\n![](https://i.imgur.com/eXDEKQS.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/qBqMgGp?editors=1011)\n\n## 2. props 驗證資料\n\n上面範例是子組件在接收父層組件資料的時候沒有限制型別的寫法，而且 `props` 接收的明明是變數，但看起來卻像是字串，接下來要寫的是 `props` 接收到的資料需要驗證的寫法。\n\n方法很簡單，HTML 模板內容不變，將 `props` 改成陣列再把子組件名稱改成 `key` 值跟對應的 `value` 值。\n\n```javascript\nconst cpn = {\n  template: '#cpn',\n  // 1. 沒有限制型別的寫法\n  // props:['cmovies', 'cmessage'],\n\n  // 2. 限制型別的寫法\n  props: {\n    cmovies: Array,\n    cmessage: String,\n  },\n}\n\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello world',\n    movies: ['索爾', '鋼鐵人', '綠巨人浩克'],\n  },\n  components: {\n    cpn,\n  },\n})\n```\n\n一樣可以顯示\n![](https://i.imgur.com/jVyDRGr.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/Rwoewjm?editors=1011)\n\n## 3. 設定默認值的寫法\n\n當我在模板標籤中沒有動態綁定父子組件的話，會自動顯示子組件預設的默認值。以下會示範當沒有動綁定的話會怎麼顯示。\n\n要設定默認值有兩種寫法:\n\n1. `default` 直接給值 ( `JS` 第 15 行 )。\n2. `default` 已函式的型式給值 ( `JS` 第 17 行)。\n\n現在故意在模板上少寫動態綁定的其中一項 ( `HTML` 第 5、6 行)。\n\n```html\n<div id=\"app\">\n  <cpn :cmovies=\"movies\" :cmessage=\"message\"></cpn>\n\n  <!--   沒有從父組件拿到 message 參數，顯示默認值 -->\n  <cpn :cmessage=\"message\"></cpn>\n\n  <cpn :cmovies=\"movies\"></cpn>\n</div>\n\n<template id=\"cpn\">\n  <div>\n    <h2>{{cmessage}}</h2>\n\n    <ul>\n      <li v-for=\"item in cmovies\">{{item}}</li>\n    </ul>\n  </div>\n</template>\n```\n\n```javascript\nconst cpn = {\n  template: '#cpn',\n  // 1. 沒有限制型別的寫法\n  // props:['cmovies', 'cmessage'],\n\n  // 2. 限制型別的寫法\n  // props:{\n  //   cmovies: Array,\n  //   cmessage: String\n  // },\n\n  // 3. 設定預設值寫法\n  props: {\n    cmessage: {\n      type: String,\n      // default: 'none', //這是第一種寫法\n      default() {\n        return {\n          message: '這是第2種寫法，以函式表示的 message',\n        }\n      },\n      require: true, //必須要有的，如果有少就會報錯\n    },\n    cmovies: {\n      type: String,\n      default() {\n        //這是第2種寫法，以函式表示\n        return ['超人', '閃電俠', '神力女超人']\n      },\n      require: true, //必須要有的，如果有少就會報錯\n    },\n  },\n\n  data() {\n    return {}\n  },\n}\n\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello world',\n    movies: ['索爾', '鋼鐵人', '綠巨人浩克'],\n  },\n  components: {\n    cpn,\n  },\n})\n```\n\n顯示下圖。\n![](https://i.imgur.com/R2ira8K.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/eYBLxgm?editors=1011)\n\n比較需要注意的是標籤上的命名，在組件中是可以接受小駝峰的，但是在 `#app` 裡面的標籤只能接受全小寫或是串接式寫法 ( kebab Case ) ，盡量以串接式寫法為主。\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=59)\n","source":"_posts/2020/props.md","raw":"---\ntitle: Vue - 父組件傳遞到子組件的  props 語法\ndate: 2021/03/02\ntags:\n  - Vue\n  - props\n\ncategories:\n  - Vue\n---\n\n## 簡介\n\n當組件化的網頁要從後端伺服器請求資料的時候，那些回傳的資料都會經過父層組件傳到子層組件去，那父層組件的參數要傳到子層組件的話就要透過 `props` 語法。\n\n![](https://i.imgur.com/Hmwi0nd.png)\n\n<!--more-->\n\n## 1. props 沒有限制型別\n\n沒有限制型別的寫法就是說待會在接收父層的資料的時候不會有限制。\n\n套用之前的範例，這是在不需要從 `Vue 實例` ( 父層 ) 傳參數的寫法。\n\n```html\n<div id=\"app\">\n  <cpn></cpn>\n</div>\n\n<template id=\"cpn\">\n  <div>\n    <h1>{{message}}</h1>\n  </div>\n</template>\n```\n\n```javascript\nconst cpn = {\n  template: '#cpn',\n  data() {\n    return {\n      message: 'Hello World',\n    }\n  },\n}\n\nconst app = new Vue({\n  el: '#app',\n  components: {\n    cpn,\n  },\n})\n```\n\n正常會顯示下圖\n![](https://i.imgur.com/QBPGEO8.png)\n\n但是現在要從 `Vue 實例` ( 父層 ) 傳變數，那我們先在父層新增一些資料，同時又要接收資料。\n\n方法如下:\n\n1. 在組件內先新增 `props` 屬性，然後在陣列內新增變數，變數的名稱是自定義的 ( `JS` 第 4 行 ) 。\n2. 在模板中新新增組件標籤 ( `HTML` 第 8、9 行 )。\n3. 在組件標籤上動態綁定父子組件 ( `HTML` 第 2 行 ) 。\n\n`props` 陣列內寫的是變數，不是字串。\n\n```html\n<div id=\"app\">\n  <cpn :cmovies=\"movies\" :cmessage=\"message\"></cpn>\n</div>\n\n<template id=\"cpn\">\n  <div>\n    <h2>{{cmovies}}</h2>\n    <h2>{{cmessage}}</h2>\n\n    <ul>\n      <li v-for=\"item in cmovies\">{{item}}</li>\n    </ul>\n  </div>\n</template>\n```\n\n```javascript\nconst cpn = {\n  template: '#cpn',\n  // 1. 沒有限制型別的寫法\n  props: ['cmovies', 'cmessage'],\n}\n\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello world',\n    movies: ['索爾', '鋼鐵人', '綠巨人浩克'],\n  },\n  components: {\n    cpn,\n  },\n})\n```\n\n這樣就子組件就可以從父層拿到資料並渲染\n![](https://i.imgur.com/eXDEKQS.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/qBqMgGp?editors=1011)\n\n## 2. props 驗證資料\n\n上面範例是子組件在接收父層組件資料的時候沒有限制型別的寫法，而且 `props` 接收的明明是變數，但看起來卻像是字串，接下來要寫的是 `props` 接收到的資料需要驗證的寫法。\n\n方法很簡單，HTML 模板內容不變，將 `props` 改成陣列再把子組件名稱改成 `key` 值跟對應的 `value` 值。\n\n```javascript\nconst cpn = {\n  template: '#cpn',\n  // 1. 沒有限制型別的寫法\n  // props:['cmovies', 'cmessage'],\n\n  // 2. 限制型別的寫法\n  props: {\n    cmovies: Array,\n    cmessage: String,\n  },\n}\n\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello world',\n    movies: ['索爾', '鋼鐵人', '綠巨人浩克'],\n  },\n  components: {\n    cpn,\n  },\n})\n```\n\n一樣可以顯示\n![](https://i.imgur.com/jVyDRGr.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/Rwoewjm?editors=1011)\n\n## 3. 設定默認值的寫法\n\n當我在模板標籤中沒有動態綁定父子組件的話，會自動顯示子組件預設的默認值。以下會示範當沒有動綁定的話會怎麼顯示。\n\n要設定默認值有兩種寫法:\n\n1. `default` 直接給值 ( `JS` 第 15 行 )。\n2. `default` 已函式的型式給值 ( `JS` 第 17 行)。\n\n現在故意在模板上少寫動態綁定的其中一項 ( `HTML` 第 5、6 行)。\n\n```html\n<div id=\"app\">\n  <cpn :cmovies=\"movies\" :cmessage=\"message\"></cpn>\n\n  <!--   沒有從父組件拿到 message 參數，顯示默認值 -->\n  <cpn :cmessage=\"message\"></cpn>\n\n  <cpn :cmovies=\"movies\"></cpn>\n</div>\n\n<template id=\"cpn\">\n  <div>\n    <h2>{{cmessage}}</h2>\n\n    <ul>\n      <li v-for=\"item in cmovies\">{{item}}</li>\n    </ul>\n  </div>\n</template>\n```\n\n```javascript\nconst cpn = {\n  template: '#cpn',\n  // 1. 沒有限制型別的寫法\n  // props:['cmovies', 'cmessage'],\n\n  // 2. 限制型別的寫法\n  // props:{\n  //   cmovies: Array,\n  //   cmessage: String\n  // },\n\n  // 3. 設定預設值寫法\n  props: {\n    cmessage: {\n      type: String,\n      // default: 'none', //這是第一種寫法\n      default() {\n        return {\n          message: '這是第2種寫法，以函式表示的 message',\n        }\n      },\n      require: true, //必須要有的，如果有少就會報錯\n    },\n    cmovies: {\n      type: String,\n      default() {\n        //這是第2種寫法，以函式表示\n        return ['超人', '閃電俠', '神力女超人']\n      },\n      require: true, //必須要有的，如果有少就會報錯\n    },\n  },\n\n  data() {\n    return {}\n  },\n}\n\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello world',\n    movies: ['索爾', '鋼鐵人', '綠巨人浩克'],\n  },\n  components: {\n    cpn,\n  },\n})\n```\n\n顯示下圖。\n![](https://i.imgur.com/R2ira8K.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/eYBLxgm?editors=1011)\n\n比較需要注意的是標籤上的命名，在組件中是可以接受小駝峰的，但是在 `#app` 裡面的標籤只能接受全小寫或是串接式寫法 ( kebab Case ) ，盡量以串接式寫法為主。\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=59)\n","slug":"props","published":1,"updated":"2021-03-26T16:13:10.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lq1001kg0tr589a1l6c","content":"<html><head></head><body><h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>當組件化的網頁要從後端伺服器請求資料的時候，那些回傳的資料都會經過父層組件傳到子層組件去，那父層組件的參數要傳到子層組件的話就要透過 <code>props</code> 語法。</p>\n<p><img src=\"https://i.imgur.com/Hmwi0nd.png\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-props-沒有限制型別\"><a href=\"#1-props-沒有限制型別\" class=\"headerlink\" title=\"1. props 沒有限制型別\"></a>1. props 沒有限制型別</h2><p>沒有限制型別的寫法就是說待會在接收父層的資料的時候不會有限制。</p>\n<p>套用之前的範例，這是在不需要從 <code>Vue 實例</code> ( 父層 ) 傳參數的寫法。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cpn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cpn\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> cpn = {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'#cpn'</span>,</span><br><span class=\"line\">  data() {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">      message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    cpn,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>正常會顯示下圖<br><img src=\"https://i.imgur.com/QBPGEO8.png\"></p>\n<p>但是現在要從 <code>Vue 實例</code> ( 父層 ) 傳變數，那我們先在父層新增一些資料，同時又要接收資料。</p>\n<p>方法如下:</p>\n<ol>\n<li>在組件內先新增 <code>props</code> 屬性，然後在陣列內新增變數，變數的名稱是自定義的 ( <code>JS</code> 第 4 行 ) 。</li>\n<li>在模板中新新增組件標籤 ( <code>HTML</code> 第 8、9 行 )。</li>\n<li>在組件標籤上動態綁定父子組件 ( <code>HTML</code> 第 2 行 ) 。</li>\n</ol>\n<p><code>props</code> 陣列內寫的是變數，不是字串。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cpn</span> <span class=\"hljs-attr\">:cmovies</span>=<span class=\"hljs-string\">\"movies\"</span> <span class=\"hljs-attr\">:cmessage</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cpn\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{cmovies}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{cmessage}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"item in cmovies\"</span>&gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> cpn = {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'#cpn'</span>,</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 1. 沒有限制型別的寫法</span></span><br><span class=\"line\">  props: [<span class=\"hljs-string\">'cmovies'</span>, <span class=\"hljs-string\">'cmessage'</span>],</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello world'</span>,</span><br><span class=\"line\">    movies: [<span class=\"hljs-string\">'索爾'</span>, <span class=\"hljs-string\">'鋼鐵人'</span>, <span class=\"hljs-string\">'綠巨人浩克'</span>],</span><br><span class=\"line\">  },</span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    cpn,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>這樣就子組件就可以從父層拿到資料並渲染<br><img src=\"https://i.imgur.com/eXDEKQS.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/qBqMgGp?editors=1011\">DEMO</a></p>\n<h2 id=\"2-props-驗證資料\"><a href=\"#2-props-驗證資料\" class=\"headerlink\" title=\"2. props 驗證資料\"></a>2. props 驗證資料</h2><p>上面範例是子組件在接收父層組件資料的時候沒有限制型別的寫法，而且 <code>props</code> 接收的明明是變數，但看起來卻像是字串，接下來要寫的是 <code>props</code> 接收到的資料需要驗證的寫法。</p>\n<p>方法很簡單，HTML 模板內容不變，將 <code>props</code> 改成陣列再把子組件名稱改成 <code>key</code> 值跟對應的 <code>value</code> 值。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> cpn = {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'#cpn'</span>,</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 1. 沒有限制型別的寫法</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// props:['cmovies', 'cmessage'],</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 2. 限制型別的寫法</span></span><br><span class=\"line\">  props: {</span><br><span class=\"line\">    cmovies: <span class=\"hljs-built_in\">Array</span>,</span><br><span class=\"line\">    cmessage: <span class=\"hljs-built_in\">String</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello world'</span>,</span><br><span class=\"line\">    movies: [<span class=\"hljs-string\">'索爾'</span>, <span class=\"hljs-string\">'鋼鐵人'</span>, <span class=\"hljs-string\">'綠巨人浩克'</span>],</span><br><span class=\"line\">  },</span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    cpn,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>一樣可以顯示<br><img src=\"https://i.imgur.com/jVyDRGr.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/Rwoewjm?editors=1011\">DEMO</a></p>\n<h2 id=\"3-設定默認值的寫法\"><a href=\"#3-設定默認值的寫法\" class=\"headerlink\" title=\"3. 設定默認值的寫法\"></a>3. 設定默認值的寫法</h2><p>當我在模板標籤中沒有動態綁定父子組件的話，會自動顯示子組件預設的默認值。以下會示範當沒有動綁定的話會怎麼顯示。</p>\n<p>要設定默認值有兩種寫法:</p>\n<ol>\n<li><code>default</code> 直接給值 ( <code>JS</code> 第 15 行 )。</li>\n<li><code>default</code> 已函式的型式給值 ( <code>JS</code> 第 17 行)。</li>\n</ol>\n<p>現在故意在模板上少寫動態綁定的其中一項 ( <code>HTML</code> 第 5、6 行)。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cpn</span> <span class=\"hljs-attr\">:cmovies</span>=<span class=\"hljs-string\">\"movies\"</span> <span class=\"hljs-attr\">:cmessage</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cpn</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   沒有從父組件拿到 message 參數，顯示默認值 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cpn</span> <span class=\"hljs-attr\">:cmessage</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cpn</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cpn</span> <span class=\"hljs-attr\">:cmovies</span>=<span class=\"hljs-string\">\"movies\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cpn\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{cmessage}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"item in cmovies\"</span>&gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> cpn = {</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'#cpn'</span>,</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 1. 沒有限制型別的寫法</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// props:['cmovies', 'cmessage'],</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 2. 限制型別的寫法</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// props:{</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">//   cmovies: Array,</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">//   cmessage: String</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// },</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 3. 設定預設值寫法</span></span><br><span class=\"line\">  props: {</span><br><span class=\"line\">    cmessage: {</span><br><span class=\"line\">      type: <span class=\"hljs-built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"hljs-comment\">// default: 'none', //這是第一種寫法</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">default</span>() {</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">          message: <span class=\"hljs-string\">'這是第2種寫法，以函式表示的 message'</span>,</span><br><span class=\"line\">        }</span><br><span class=\"line\">      },</span><br><span class=\"line\">      <span class=\"hljs-built_in\">require</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//必須要有的，如果有少就會報錯</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    cmovies: {</span><br><span class=\"line\">      type: <span class=\"hljs-built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"hljs-keyword\">default</span>() {</span><br><span class=\"line\">        <span class=\"hljs-comment\">//這是第2種寫法，以函式表示</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'超人'</span>, <span class=\"hljs-string\">'閃電俠'</span>, <span class=\"hljs-string\">'神力女超人'</span>]</span><br><span class=\"line\">      },</span><br><span class=\"line\">      <span class=\"hljs-built_in\">require</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">//必須要有的，如果有少就會報錯</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\"></span><br><span class=\"line\">  data() {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> {}</span><br><span class=\"line\">  },</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello world'</span>,</span><br><span class=\"line\">    movies: [<span class=\"hljs-string\">'索爾'</span>, <span class=\"hljs-string\">'鋼鐵人'</span>, <span class=\"hljs-string\">'綠巨人浩克'</span>],</span><br><span class=\"line\">  },</span><br><span class=\"line\">  components: {</span><br><span class=\"line\">    cpn,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖。<br><img src=\"https://i.imgur.com/R2ira8K.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/eYBLxgm?editors=1011\">DEMO</a></p>\n<p>比較需要注意的是標籤上的命名，在組件中是可以接受小駝峰的，但是在 <code>#app</code> 裡面的標籤只能接受全小寫或是串接式寫法 ( kebab Case ) ，盡量以串接式寫法為主。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=59\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"Vue","path":"tags/Vue/"},{"name":"props","path":"tags/props/"}],"excerpt":"<html><head></head><body><h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>當組件化的網頁要從後端伺服器請求資料的時候，那些回傳的資料都會經過父層組件傳到子層組件去，那父層組件的參數要傳到子層組件的話就要透過 <code>props</code> 語法。</p>\n<p><img src=\"https://i.imgur.com/Hmwi0nd.png\"></p></body></html>","more":"<h2 id=\"1-props-沒有限制型別\"><a href=\"#1-props-沒有限制型別\" class=\"headerlink\" title=\"1. props 沒有限制型別\"></a>1. props 沒有限制型別</h2><p>沒有限制型別的寫法就是說待會在接收父層的資料的時候不會有限制。</p>\n<p>套用之前的範例，這是在不需要從 <code>Vue 實例</code> ( 父層 ) 傳參數的寫法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">cpn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cpn&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cpn = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;#cpn&#x27;</span>,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    cpn,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>正常會顯示下圖<br><img src=\"https://i.imgur.com/QBPGEO8.png\"></p>\n<p>但是現在要從 <code>Vue 實例</code> ( 父層 ) 傳變數，那我們先在父層新增一些資料，同時又要接收資料。</p>\n<p>方法如下:</p>\n<ol>\n<li>在組件內先新增 <code>props</code> 屬性，然後在陣列內新增變數，變數的名稱是自定義的 ( <code>JS</code> 第 4 行 ) 。</li>\n<li>在模板中新新增組件標籤 ( <code>HTML</code> 第 8、9 行 )。</li>\n<li>在組件標籤上動態綁定父子組件 ( <code>HTML</code> 第 2 行 ) 。</li>\n</ol>\n<p><code>props</code> 陣列內寫的是變數，不是字串。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">cpn</span> <span class=\"attr\">:cmovies</span>=<span class=\"string\">&quot;movies&quot;</span> <span class=\"attr\">:cmessage</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cpn&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in cmovies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cpn = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;#cpn&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 1. 沒有限制型別的寫法</span></span><br><span class=\"line\">  props: [<span class=\"string\">&#x27;cmovies&#x27;</span>, <span class=\"string\">&#x27;cmessage&#x27;</span>],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello world&#x27;</span>,</span><br><span class=\"line\">    movies: [<span class=\"string\">&#x27;索爾&#x27;</span>, <span class=\"string\">&#x27;鋼鐵人&#x27;</span>, <span class=\"string\">&#x27;綠巨人浩克&#x27;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    cpn,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這樣就子組件就可以從父層拿到資料並渲染<br><img src=\"https://i.imgur.com/eXDEKQS.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/qBqMgGp?editors=1011\">DEMO</a></p>\n<h2 id=\"2-props-驗證資料\"><a href=\"#2-props-驗證資料\" class=\"headerlink\" title=\"2. props 驗證資料\"></a>2. props 驗證資料</h2><p>上面範例是子組件在接收父層組件資料的時候沒有限制型別的寫法，而且 <code>props</code> 接收的明明是變數，但看起來卻像是字串，接下來要寫的是 <code>props</code> 接收到的資料需要驗證的寫法。</p>\n<p>方法很簡單，HTML 模板內容不變，將 <code>props</code> 改成陣列再把子組件名稱改成 <code>key</code> 值跟對應的 <code>value</code> 值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cpn = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;#cpn&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 1. 沒有限制型別的寫法</span></span><br><span class=\"line\">  <span class=\"comment\">// props:[&#x27;cmovies&#x27;, &#x27;cmessage&#x27;],</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. 限制型別的寫法</span></span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    cmovies: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">    cmessage: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello world&#x27;</span>,</span><br><span class=\"line\">    movies: [<span class=\"string\">&#x27;索爾&#x27;</span>, <span class=\"string\">&#x27;鋼鐵人&#x27;</span>, <span class=\"string\">&#x27;綠巨人浩克&#x27;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    cpn,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>一樣可以顯示<br><img src=\"https://i.imgur.com/jVyDRGr.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/Rwoewjm?editors=1011\">DEMO</a></p>\n<h2 id=\"3-設定默認值的寫法\"><a href=\"#3-設定默認值的寫法\" class=\"headerlink\" title=\"3. 設定默認值的寫法\"></a>3. 設定默認值的寫法</h2><p>當我在模板標籤中沒有動態綁定父子組件的話，會自動顯示子組件預設的默認值。以下會示範當沒有動綁定的話會怎麼顯示。</p>\n<p>要設定默認值有兩種寫法:</p>\n<ol>\n<li><code>default</code> 直接給值 ( <code>JS</code> 第 15 行 )。</li>\n<li><code>default</code> 已函式的型式給值 ( <code>JS</code> 第 17 行)。</li>\n</ol>\n<p>現在故意在模板上少寫動態綁定的其中一項 ( <code>HTML</code> 第 5、6 行)。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">cpn</span> <span class=\"attr\">:cmovies</span>=<span class=\"string\">&quot;movies&quot;</span> <span class=\"attr\">:cmessage</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   沒有從父組件拿到 message 參數，顯示默認值 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">cpn</span> <span class=\"attr\">:cmessage</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">cpn</span> <span class=\"attr\">:cmovies</span>=<span class=\"string\">&quot;movies&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">cpn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cpn&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in cmovies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cpn = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;#cpn&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 1. 沒有限制型別的寫法</span></span><br><span class=\"line\">  <span class=\"comment\">// props:[&#x27;cmovies&#x27;, &#x27;cmessage&#x27;],</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. 限制型別的寫法</span></span><br><span class=\"line\">  <span class=\"comment\">// props:&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   cmovies: Array,</span></span><br><span class=\"line\">  <span class=\"comment\">//   cmessage: String</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. 設定預設值寫法</span></span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    cmessage: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"comment\">// default: &#x27;none&#x27;, //這是第一種寫法</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          message: <span class=\"string\">&#x27;這是第2種寫法，以函式表示的 message&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"built_in\">require</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//必須要有的，如果有少就會報錯</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cmovies: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//這是第2種寫法，以函式表示</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;超人&#x27;</span>, <span class=\"string\">&#x27;閃電俠&#x27;</span>, <span class=\"string\">&#x27;神力女超人&#x27;</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"built_in\">require</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//必須要有的，如果有少就會報錯</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello world&#x27;</span>,</span><br><span class=\"line\">    movies: [<span class=\"string\">&#x27;索爾&#x27;</span>, <span class=\"string\">&#x27;鋼鐵人&#x27;</span>, <span class=\"string\">&#x27;綠巨人浩克&#x27;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    cpn,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖。<br><img src=\"https://i.imgur.com/R2ira8K.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/eYBLxgm?editors=1011\">DEMO</a></p>\n<p>比較需要注意的是標籤上的命名，在組件中是可以接受小駝峰的，但是在 <code>#app</code> 裡面的標籤只能接受全小寫或是串接式寫法 ( kebab Case ) ，盡量以串接式寫法為主。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=59\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>"},{"title":"Git - 如何發 PR 完成協作 ( Pull Request )","date":"2020-12-27T16:00:00.000Z","_content":"\n1. `git clone`、`git pull` 這兩個指令有什麼不同，又分別代表什麼意思。\n2. `Pull Request` 的流程是甚麼\n3. 為什麼需要透過 `Pull Request` 來開發\n<!-- more -->\n\n---\n\n## `git clone`、`git pull` 這兩個指令有什麼不同，又分別代表什麼意思。\n\n兩個都是更新檔案，repository 更新的過程會不一樣，一個是整包下載，一個是下載本地端已經有只需要下載部分更新的檔案，兩個同樣都是把檔案更新到最新的狀態\n\n- `git clone` :在本地( local )端還沒有 repository 的狀況下，我們就會需要使用到 `clone` ，把整包 repository 載下來，一般也只需要 clone 一次，之後就只需要 pull 了。\n\n- `git pull` :就是我們本地( local )端已經有 repository 了，這時候就不需要在 `clone` ，只需要透過 `pull` 的方式，將遠端 ( remote )的 repository 載下來就可以了\n\n以上就是 clone、pull 的差別\n\n## 為什麼需要透過 `Pull Request` 來開發\n\n一般在開發或是看到很有興趣的開源專案，如果想加入新功能或是加入開發專安的話就會需要使用到 `Pull Request`，也就是我們俗稱的 `PR`\n\n## `Pull Request` 的流程是甚麼\n\n**Pull Request 簡稱 PR**\n如果已經是這個團隊的開者之一，那就單純 clone 就好，\n如果是別的開源專案又不是這個專案的原始開發者之一，那就需要先將專案 fork 出來，再開始開發\n\n以饅頭計畫的專案為例，我們已經是這個專案的開發人員之一，所以只需要 clone 下來就好，然後開分之並在分支上進行開發，做完之後我們會需要 push 到 remote repository，這時候就要發 PR 了，讓資深工程師確認我們寫的需求有沒有問題，如果沒問題就會 merge 到主支上\n\n### 以下示範:\n\n因為之前已經 clone 過了，<font color=#FF0000>**請記得先切換到主之上**</font>，然後再把本地端的檔案 pull 到最新的狀態，然後再用 `git checkout -b 分支名稱`，創建該分支同時切換到該分支上，如下圖\n![](https://i.imgur.com/SIEMhnl.jpg)\n\n接下來就是 Git 基本操作了\n在分支上新增好內容後，把新增或是更改資料加入索引\n![](https://i.imgur.com/YCKG1RJ.jpg)\n\n然後提交(commit)上去\n出現`git push --set-upstream origin example-mission`的原因可以參考[這篇文章](https://blog.csdn.net/benben_2015/article/details/78803753)\n解決方法就是複製貼上...\n![](https://i.imgur.com/X7JS8Fu.png)\n\n上面太模糊..補上清晰版...\n![](https://i.imgur.com/Fn1eXXI.png)\n\npush 上去後到 Github 專案點選左上 Pull Request，\n因為目前還沒有發 PR，所以沒看到我剛新增的內容。\n要發 PR 的話要點選右邊那兩個紅框的，\n![](https://i.imgur.com/KcQ30Je.png)\n\n一種是 **Compare & pull request** ，另一種是**New pull request**，兩個都可以發，過程不一樣而已，以下兩種都會示範\n\n### New pull request\n\n點擊 **New pull request** 會顯示下圖畫面，\n<font color=#FF0000>左邊 `base:main` 是主支千萬不要動到</font>，動右邊要 merge 的分支就好\n因為我們要把剛才新增的內容合併到主之上，所以選擇剛才新增的分支名稱 `example-mission`\n![](https://i.imgur.com/2lQZlxZ.png)\n\n選完就會顯示剛才新增的內容，如下圖，確認 OK 後點選右邊的 `Create pull request`\n![](https://i.imgur.com/vkAsffP.png)\n\n接著會進入以下畫面，這邊就要寫一下大標題，還有較細項的更改內容，\n填寫完後再按右下的 `Create pull request`\n![](https://i.imgur.com/dJDi880.png)\n\n按下後會進入以下畫面\n![](https://i.imgur.com/MEOjzcS.png)\n\n再回到 Pull Request 刷新一下，就會看到剛才新發的 PR 了\n![](https://i.imgur.com/yA8Saeh.png)\n\n接下來就等資深工程師確認我們寫的內容有無問題，\n沒問題就會按下 `Merge pull request`，合併到主支(main)上\n\n### Compare & pull request\n\n這邊更簡單，也推薦使用這個\n因為點選 Compare & pull request 後系統會自動選取剛才新建的分支上，會顯示下圖\n![](https://i.imgur.com/dJDi880.png)\n\n接著叫輸入大標題跟內容再 `Create pull request` ，這樣 PR 就發完了\n\n## 參考資料\n\n[與其它開發者的互動 - 使用 Pull Request（PR） - 為你自己學 Git | 高見龍](https://gitbook.tw/chapters/github/pull-request.html)\n[git add、git commit - 提交版本](https://w3c.hexschool.com/git/b9be5b1e)\n[Git master branch has no upstream branch 的解決](https://blog.csdn.net/benben_2015/article/details/78803753)\n","source":"_posts/2020/pullRequest.md","raw":"---\ntitle: Git - 如何發 PR 完成協作 ( Pull Request )\ndate: 2020/12/28\ntags:\n  - Pull Request\n  - git clone\n  - git pull\ncategories: Pull Request\n# description: Pull Request、git clone、git pull 的基本介紹\n---\n\n1. `git clone`、`git pull` 這兩個指令有什麼不同，又分別代表什麼意思。\n2. `Pull Request` 的流程是甚麼\n3. 為什麼需要透過 `Pull Request` 來開發\n<!-- more -->\n\n---\n\n## `git clone`、`git pull` 這兩個指令有什麼不同，又分別代表什麼意思。\n\n兩個都是更新檔案，repository 更新的過程會不一樣，一個是整包下載，一個是下載本地端已經有只需要下載部分更新的檔案，兩個同樣都是把檔案更新到最新的狀態\n\n- `git clone` :在本地( local )端還沒有 repository 的狀況下，我們就會需要使用到 `clone` ，把整包 repository 載下來，一般也只需要 clone 一次，之後就只需要 pull 了。\n\n- `git pull` :就是我們本地( local )端已經有 repository 了，這時候就不需要在 `clone` ，只需要透過 `pull` 的方式，將遠端 ( remote )的 repository 載下來就可以了\n\n以上就是 clone、pull 的差別\n\n## 為什麼需要透過 `Pull Request` 來開發\n\n一般在開發或是看到很有興趣的開源專案，如果想加入新功能或是加入開發專安的話就會需要使用到 `Pull Request`，也就是我們俗稱的 `PR`\n\n## `Pull Request` 的流程是甚麼\n\n**Pull Request 簡稱 PR**\n如果已經是這個團隊的開者之一，那就單純 clone 就好，\n如果是別的開源專案又不是這個專案的原始開發者之一，那就需要先將專案 fork 出來，再開始開發\n\n以饅頭計畫的專案為例，我們已經是這個專案的開發人員之一，所以只需要 clone 下來就好，然後開分之並在分支上進行開發，做完之後我們會需要 push 到 remote repository，這時候就要發 PR 了，讓資深工程師確認我們寫的需求有沒有問題，如果沒問題就會 merge 到主支上\n\n### 以下示範:\n\n因為之前已經 clone 過了，<font color=#FF0000>**請記得先切換到主之上**</font>，然後再把本地端的檔案 pull 到最新的狀態，然後再用 `git checkout -b 分支名稱`，創建該分支同時切換到該分支上，如下圖\n![](https://i.imgur.com/SIEMhnl.jpg)\n\n接下來就是 Git 基本操作了\n在分支上新增好內容後，把新增或是更改資料加入索引\n![](https://i.imgur.com/YCKG1RJ.jpg)\n\n然後提交(commit)上去\n出現`git push --set-upstream origin example-mission`的原因可以參考[這篇文章](https://blog.csdn.net/benben_2015/article/details/78803753)\n解決方法就是複製貼上...\n![](https://i.imgur.com/X7JS8Fu.png)\n\n上面太模糊..補上清晰版...\n![](https://i.imgur.com/Fn1eXXI.png)\n\npush 上去後到 Github 專案點選左上 Pull Request，\n因為目前還沒有發 PR，所以沒看到我剛新增的內容。\n要發 PR 的話要點選右邊那兩個紅框的，\n![](https://i.imgur.com/KcQ30Je.png)\n\n一種是 **Compare & pull request** ，另一種是**New pull request**，兩個都可以發，過程不一樣而已，以下兩種都會示範\n\n### New pull request\n\n點擊 **New pull request** 會顯示下圖畫面，\n<font color=#FF0000>左邊 `base:main` 是主支千萬不要動到</font>，動右邊要 merge 的分支就好\n因為我們要把剛才新增的內容合併到主之上，所以選擇剛才新增的分支名稱 `example-mission`\n![](https://i.imgur.com/2lQZlxZ.png)\n\n選完就會顯示剛才新增的內容，如下圖，確認 OK 後點選右邊的 `Create pull request`\n![](https://i.imgur.com/vkAsffP.png)\n\n接著會進入以下畫面，這邊就要寫一下大標題，還有較細項的更改內容，\n填寫完後再按右下的 `Create pull request`\n![](https://i.imgur.com/dJDi880.png)\n\n按下後會進入以下畫面\n![](https://i.imgur.com/MEOjzcS.png)\n\n再回到 Pull Request 刷新一下，就會看到剛才新發的 PR 了\n![](https://i.imgur.com/yA8Saeh.png)\n\n接下來就等資深工程師確認我們寫的內容有無問題，\n沒問題就會按下 `Merge pull request`，合併到主支(main)上\n\n### Compare & pull request\n\n這邊更簡單，也推薦使用這個\n因為點選 Compare & pull request 後系統會自動選取剛才新建的分支上，會顯示下圖\n![](https://i.imgur.com/dJDi880.png)\n\n接著叫輸入大標題跟內容再 `Create pull request` ，這樣 PR 就發完了\n\n## 參考資料\n\n[與其它開發者的互動 - 使用 Pull Request（PR） - 為你自己學 Git | 高見龍](https://gitbook.tw/chapters/github/pull-request.html)\n[git add、git commit - 提交版本](https://w3c.hexschool.com/git/b9be5b1e)\n[Git master branch has no upstream branch 的解決](https://blog.csdn.net/benben_2015/article/details/78803753)\n","slug":"pullRequest","published":1,"updated":"2021-03-26T16:13:10.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lq2001ng0tr7efdd9k1","content":"<html><head></head><body><ol>\n<li><code>git clone</code>、<code>git pull</code> 這兩個指令有什麼不同，又分別代表什麼意思。</li>\n<li><code>Pull Request</code> 的流程是甚麼</li>\n<li>為什麼需要透過 <code>Pull Request</code> 來開發<a id=\"more\"></a>\n\n</li>\n</ol>\n<hr>\n<h2 id=\"git-clone、git-pull-這兩個指令有什麼不同，又分別代表什麼意思。\"><a href=\"#git-clone、git-pull-這兩個指令有什麼不同，又分別代表什麼意思。\" class=\"headerlink\" title=\"git clone、git pull 這兩個指令有什麼不同，又分別代表什麼意思。\"></a><code>git clone</code>、<code>git pull</code> 這兩個指令有什麼不同，又分別代表什麼意思。</h2><p>兩個都是更新檔案，repository 更新的過程會不一樣，一個是整包下載，一個是下載本地端已經有只需要下載部分更新的檔案，兩個同樣都是把檔案更新到最新的狀態</p>\n<ul>\n<li><p><code>git clone</code> :在本地( local )端還沒有 repository 的狀況下，我們就會需要使用到 <code>clone</code> ，把整包 repository 載下來，一般也只需要 clone 一次，之後就只需要 pull 了。</p>\n</li>\n<li><p><code>git pull</code> :就是我們本地( local )端已經有 repository 了，這時候就不需要在 <code>clone</code> ，只需要透過 <code>pull</code> 的方式，將遠端 ( remote )的 repository 載下來就可以了</p>\n</li>\n</ul>\n<p>以上就是 clone、pull 的差別</p>\n<h2 id=\"為什麼需要透過-Pull-Request-來開發\"><a href=\"#為什麼需要透過-Pull-Request-來開發\" class=\"headerlink\" title=\"為什麼需要透過 Pull Request 來開發\"></a>為什麼需要透過 <code>Pull Request</code> 來開發</h2><p>一般在開發或是看到很有興趣的開源專案，如果想加入新功能或是加入開發專安的話就會需要使用到 <code>Pull Request</code>，也就是我們俗稱的 <code>PR</code></p>\n<h2 id=\"Pull-Request-的流程是甚麼\"><a href=\"#Pull-Request-的流程是甚麼\" class=\"headerlink\" title=\"Pull Request 的流程是甚麼\"></a><code>Pull Request</code> 的流程是甚麼</h2><p><strong>Pull Request 簡稱 PR</strong><br>如果已經是這個團隊的開者之一，那就單純 clone 就好，<br>如果是別的開源專案又不是這個專案的原始開發者之一，那就需要先將專案 fork 出來，再開始開發</p>\n<p>以饅頭計畫的專案為例，我們已經是這個專案的開發人員之一，所以只需要 clone 下來就好，然後開分之並在分支上進行開發，做完之後我們會需要 push 到 remote repository，這時候就要發 PR 了，讓資深工程師確認我們寫的需求有沒有問題，如果沒問題就會 merge 到主支上</p>\n<h3 id=\"以下示範\"><a href=\"#以下示範\" class=\"headerlink\" title=\"以下示範:\"></a>以下示範:</h3><p>因為之前已經 clone 過了，<font color=\"#FF0000\"><strong>請記得先切換到主之上</strong></font>，然後再把本地端的檔案 pull 到最新的狀態，然後再用 <code>git checkout -b 分支名稱</code>，創建該分支同時切換到該分支上，如下圖<br><img src=\"https://i.imgur.com/SIEMhnl.jpg\"></p>\n<p>接下來就是 Git 基本操作了<br>在分支上新增好內容後，把新增或是更改資料加入索引<br><img src=\"https://i.imgur.com/YCKG1RJ.jpg\"></p>\n<p>然後提交(commit)上去<br>出現<code>git push --set-upstream origin example-mission</code>的原因可以參考<a href=\"https://blog.csdn.net/benben_2015/article/details/78803753\">這篇文章</a><br>解決方法就是複製貼上…<br><img src=\"https://i.imgur.com/X7JS8Fu.png\"></p>\n<p>上面太模糊..補上清晰版…<br><img src=\"https://i.imgur.com/Fn1eXXI.png\"></p>\n<p>push 上去後到 Github 專案點選左上 Pull Request，<br>因為目前還沒有發 PR，所以沒看到我剛新增的內容。<br>要發 PR 的話要點選右邊那兩個紅框的，<br><img src=\"https://i.imgur.com/KcQ30Je.png\"></p>\n<p>一種是 <strong>Compare &amp; pull request</strong> ，另一種是<strong>New pull request</strong>，兩個都可以發，過程不一樣而已，以下兩種都會示範</p>\n<h3 id=\"New-pull-request\"><a href=\"#New-pull-request\" class=\"headerlink\" title=\"New pull request\"></a>New pull request</h3><p>點擊 <strong>New pull request</strong> 會顯示下圖畫面，<br><font color=\"#FF0000\">左邊 <code>base:main</code> 是主支千萬不要動到</font>，動右邊要 merge 的分支就好<br>因為我們要把剛才新增的內容合併到主之上，所以選擇剛才新增的分支名稱 <code>example-mission</code><br><img src=\"https://i.imgur.com/2lQZlxZ.png\"></p>\n<p>選完就會顯示剛才新增的內容，如下圖，確認 OK 後點選右邊的 <code>Create pull request</code><br><img src=\"https://i.imgur.com/vkAsffP.png\"></p>\n<p>接著會進入以下畫面，這邊就要寫一下大標題，還有較細項的更改內容，<br>填寫完後再按右下的 <code>Create pull request</code><br><img src=\"https://i.imgur.com/dJDi880.png\"></p>\n<p>按下後會進入以下畫面<br><img src=\"https://i.imgur.com/MEOjzcS.png\"></p>\n<p>再回到 Pull Request 刷新一下，就會看到剛才新發的 PR 了<br><img src=\"https://i.imgur.com/yA8Saeh.png\"></p>\n<p>接下來就等資深工程師確認我們寫的內容有無問題，<br>沒問題就會按下 <code>Merge pull request</code>，合併到主支(main)上</p>\n<h3 id=\"Compare-amp-pull-request\"><a href=\"#Compare-amp-pull-request\" class=\"headerlink\" title=\"Compare &amp; pull request\"></a>Compare &amp; pull request</h3><p>這邊更簡單，也推薦使用這個<br>因為點選 Compare &amp; pull request 後系統會自動選取剛才新建的分支上，會顯示下圖<br><img src=\"https://i.imgur.com/dJDi880.png\"></p>\n<p>接著叫輸入大標題跟內容再 <code>Create pull request</code> ，這樣 PR 就發完了</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://gitbook.tw/chapters/github/pull-request.html\">與其它開發者的互動 - 使用 Pull Request（PR） - 為你自己學 Git | 高見龍</a><br><a href=\"https://w3c.hexschool.com/git/b9be5b1e\">git add、git commit - 提交版本</a><br><a href=\"https://blog.csdn.net/benben_2015/article/details/78803753\">Git master branch has no upstream branch 的解決</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Pull Request","path":"categories/Pull-Request/"}],"_tags":[{"name":"Pull Request","path":"tags/Pull-Request/"},{"name":"git clone","path":"tags/git-clone/"},{"name":"git pull","path":"tags/git-pull/"}],"excerpt":"<html><head></head><body><ol>\n<li><code>git clone</code>、<code>git pull</code> 這兩個指令有什麼不同，又分別代表什麼意思。</li>\n<li><code>Pull Request</code> 的流程是甚麼</li>\n<li>為什麼需要透過 <code>Pull Request</code> 來開發</li></ol></body></html>","more":"</li>\n</ol>\n<hr>\n<h2 id=\"git-clone、git-pull-這兩個指令有什麼不同，又分別代表什麼意思。\"><a href=\"#git-clone、git-pull-這兩個指令有什麼不同，又分別代表什麼意思。\" class=\"headerlink\" title=\"git clone、git pull 這兩個指令有什麼不同，又分別代表什麼意思。\"></a><code>git clone</code>、<code>git pull</code> 這兩個指令有什麼不同，又分別代表什麼意思。</h2><p>兩個都是更新檔案，repository 更新的過程會不一樣，一個是整包下載，一個是下載本地端已經有只需要下載部分更新的檔案，兩個同樣都是把檔案更新到最新的狀態</p>\n<ul>\n<li><p><code>git clone</code> :在本地( local )端還沒有 repository 的狀況下，我們就會需要使用到 <code>clone</code> ，把整包 repository 載下來，一般也只需要 clone 一次，之後就只需要 pull 了。</p>\n</li>\n<li><p><code>git pull</code> :就是我們本地( local )端已經有 repository 了，這時候就不需要在 <code>clone</code> ，只需要透過 <code>pull</code> 的方式，將遠端 ( remote )的 repository 載下來就可以了</p>\n</li>\n</ul>\n<p>以上就是 clone、pull 的差別</p>\n<h2 id=\"為什麼需要透過-Pull-Request-來開發\"><a href=\"#為什麼需要透過-Pull-Request-來開發\" class=\"headerlink\" title=\"為什麼需要透過 Pull Request 來開發\"></a>為什麼需要透過 <code>Pull Request</code> 來開發</h2><p>一般在開發或是看到很有興趣的開源專案，如果想加入新功能或是加入開發專安的話就會需要使用到 <code>Pull Request</code>，也就是我們俗稱的 <code>PR</code></p>\n<h2 id=\"Pull-Request-的流程是甚麼\"><a href=\"#Pull-Request-的流程是甚麼\" class=\"headerlink\" title=\"Pull Request 的流程是甚麼\"></a><code>Pull Request</code> 的流程是甚麼</h2><p><strong>Pull Request 簡稱 PR</strong><br>如果已經是這個團隊的開者之一，那就單純 clone 就好，<br>如果是別的開源專案又不是這個專案的原始開發者之一，那就需要先將專案 fork 出來，再開始開發</p>\n<p>以饅頭計畫的專案為例，我們已經是這個專案的開發人員之一，所以只需要 clone 下來就好，然後開分之並在分支上進行開發，做完之後我們會需要 push 到 remote repository，這時候就要發 PR 了，讓資深工程師確認我們寫的需求有沒有問題，如果沒問題就會 merge 到主支上</p>\n<h3 id=\"以下示範\"><a href=\"#以下示範\" class=\"headerlink\" title=\"以下示範:\"></a>以下示範:</h3><p>因為之前已經 clone 過了，<font color=#FF0000><strong>請記得先切換到主之上</strong></font>，然後再把本地端的檔案 pull 到最新的狀態，然後再用 <code>git checkout -b 分支名稱</code>，創建該分支同時切換到該分支上，如下圖<br><img src=\"https://i.imgur.com/SIEMhnl.jpg\"></p>\n<p>接下來就是 Git 基本操作了<br>在分支上新增好內容後，把新增或是更改資料加入索引<br><img src=\"https://i.imgur.com/YCKG1RJ.jpg\"></p>\n<p>然後提交(commit)上去<br>出現<code>git push --set-upstream origin example-mission</code>的原因可以參考<a href=\"https://blog.csdn.net/benben_2015/article/details/78803753\">這篇文章</a><br>解決方法就是複製貼上…<br><img src=\"https://i.imgur.com/X7JS8Fu.png\"></p>\n<p>上面太模糊..補上清晰版…<br><img src=\"https://i.imgur.com/Fn1eXXI.png\"></p>\n<p>push 上去後到 Github 專案點選左上 Pull Request，<br>因為目前還沒有發 PR，所以沒看到我剛新增的內容。<br>要發 PR 的話要點選右邊那兩個紅框的，<br><img src=\"https://i.imgur.com/KcQ30Je.png\"></p>\n<p>一種是 <strong>Compare &amp; pull request</strong> ，另一種是<strong>New pull request</strong>，兩個都可以發，過程不一樣而已，以下兩種都會示範</p>\n<h3 id=\"New-pull-request\"><a href=\"#New-pull-request\" class=\"headerlink\" title=\"New pull request\"></a>New pull request</h3><p>點擊 <strong>New pull request</strong> 會顯示下圖畫面，<br><font color=#FF0000>左邊 <code>base:main</code> 是主支千萬不要動到</font>，動右邊要 merge 的分支就好<br>因為我們要把剛才新增的內容合併到主之上，所以選擇剛才新增的分支名稱 <code>example-mission</code><br><img src=\"https://i.imgur.com/2lQZlxZ.png\"></p>\n<p>選完就會顯示剛才新增的內容，如下圖，確認 OK 後點選右邊的 <code>Create pull request</code><br><img src=\"https://i.imgur.com/vkAsffP.png\"></p>\n<p>接著會進入以下畫面，這邊就要寫一下大標題，還有較細項的更改內容，<br>填寫完後再按右下的 <code>Create pull request</code><br><img src=\"https://i.imgur.com/dJDi880.png\"></p>\n<p>按下後會進入以下畫面<br><img src=\"https://i.imgur.com/MEOjzcS.png\"></p>\n<p>再回到 Pull Request 刷新一下，就會看到剛才新發的 PR 了<br><img src=\"https://i.imgur.com/yA8Saeh.png\"></p>\n<p>接下來就等資深工程師確認我們寫的內容有無問題，<br>沒問題就會按下 <code>Merge pull request</code>，合併到主支(main)上</p>\n<h3 id=\"Compare-amp-pull-request\"><a href=\"#Compare-amp-pull-request\" class=\"headerlink\" title=\"Compare &amp; pull request\"></a>Compare &amp; pull request</h3><p>這邊更簡單，也推薦使用這個<br>因為點選 Compare &amp; pull request 後系統會自動選取剛才新建的分支上，會顯示下圖<br><img src=\"https://i.imgur.com/dJDi880.png\"></p>\n<p>接著叫輸入大標題跟內容再 <code>Create pull request</code> ，這樣 PR 就發完了</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://gitbook.tw/chapters/github/pull-request.html\">與其它開發者的互動 - 使用 Pull Request（PR） - 為你自己學 Git | 高見龍</a><br><a href=\"https://w3c.hexschool.com/git/b9be5b1e\">git add、git commit - 提交版本</a><br><a href=\"https://blog.csdn.net/benben_2015/article/details/78803753\">Git master branch has no upstream branch 的解決</a></p>"},{"title":"Vue - Router","description":"介紹整個 Vue 骨架的重點，與解說","_content":"\n## 新增路由路徑及連結\n\n[ Vue-router:官方文件](https://router.vuejs.org/zh/installation.html)\n\n透過切換網址來決定要顯示的組件內容，而切換網址就要用 router 來幫你達成!\n\n<!-- more -->\n\n在終端機切換到自己命名的資料夾並安裝 `npm install vue-router --save`\n\n到 index.js 引入 `Vue.use()` ，啟用路由功能\n\n```javascript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n//以上為官方元件\n\n// 這邊路徑就是左邊檔案路徑，保險起見一律都不加 .vue 字尾!!!\n// 路徑除了 from 要加入根目錄的 '@' 以外，其他地方不要加\nimport home from '@/components/HelloWorld'\nimport page from '@/components/pages/page'\n\nVue.use(VueRouter) //路由啟用。這行很重要!!\n\nexport default new VueRouter({\n  // 這邊路徑是自訂的\n  routes: [\n    {\n      name: '元件呈現的名稱',\n      path: '對應的虛擬路徑',\n      component: 對應的元件,\n    },\n    {\n      path: '/index',\n      name: 'home',\n      component: home,\n    },\n    {\n      path: '/page',\n      name: 'page',\n      component: page,\n    },\n  ],\n})\n```\n\n[export 解釋](export:)\n路由載入完啟用後，再到 main.js 載入路由配置\n\n```javascript\nimport Vue from 'vue'\nimport App from './App'\n\nimport router from './router' //新增這行\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  components: { App },\n  template: '<App/>',\n  router, //跟這行\n})\n```\n\n這邊示範一下透過設定的路徑來顯示組件內容\n\n因為首頁(HelloWorld.vue)的路徑(path)我定義為 /index ，\n所以在網址上如果沒有輸入定義路徑會顯示下圖\n![](https://i.imgur.com/OpDIjWn.png)\n可以看到，畫面只會顯示 app.vue 的圖片沒有其他內容，但如果在網址後面輸入 /index ，就會顯示下圖\n![](https://i.imgur.com/s8j7vel.png)\n這樣就可以看到 HelloWorld.vue 的內容\n\n---\n\n#### 接下來使用 BS4 套件，來快速顯示組件的內容\n\n首先，在 index.html 引入 [BS4](https://getbootstrap.com/docs/4.4/getting-started/introduction/) cdn\n有分頁才會有不同路徑，所以在 components 底下新增 pages 資料夾，裡面新增 page.vue\n![](https://i.imgur.com/u1kUcmR.png)\n\n到 page.vue 新增模板記得在模板內加上 div (這邊用 hello 標籤示範)。\n接著在標籤內貼上 BS4 套件(這邊用 card 套件示範)，`src` 裡面的 ...記得刪除!!，不然會錯誤!!\n\n```html\n<template>\n  <div class=\"hello\">\n    <div class=\"card\" style=\"width: 18rem;\">\n      <img src=\"\" class=\"card-img-top\" alt=\"...\" />\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Card title</h5>\n        <p class=\"card-text\">\n          Some quick example text to build on the card title and make up the\n          bulk of the card's content.\n        </p>\n        <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n      </div>\n    </div>\n  </div>\n</template>\n```\n\n再來要製做可以切換組件內容的 navbar\n先把 app.vue 內容刪除，留下 app 標籤跟 router-view，img 也可以留下做分隔，\n並在裡面套入 BS4 導覽列套件，然後把不要的內容刪掉並補上 vue 的連結標籤，這邊的連結已經不是< a href=\"#\" > 了，而是 `router-link` ，連結路徑用 `to` ，這個路徑是 index.js 裡面自定義的路徑，記得要寫 router-view 這樣才可以顯示組件，如下圖\n\n> 這邊說明一下 router-view：\n> router-view 是呈現 router/index.js 裡面的元件，\n> 而 router/index.js 是設定各元件之間的連結\n\n![](https://i.imgur.com/mJyGWw8.png)\n\n完成後會看到畫面如下\n![](https://i.imgur.com/MkY1IT5.png)\n沒有任何組件，因為網址還沒輸入任何自定義路徑\n\n按一下 index，會顯示下圖\n![](https://i.imgur.com/qNPA2Nv.png)\n\n按一下 page，會顯示下圖\n![](https://i.imgur.com/C7LFYrj.png)\n\n---\n\n## 製作巢狀路由頁面\n\n接下來要做巢狀路由\n\n**注意!!!!在巢狀裡面一律不加斜號 '/' !!!**\n\n[參考文件](https://dotblogs.com.tw/wasichris/2017/03/06/235449)\n繼續在 pages 資料夾下新建立 3 個組件(這邊用 childX 示範)，然後再引入 BS4 套件的，只是要辨別而以所以用簡單的 alert 套件就好(其實是懶)\n\n```html\n這是 child1 範本\n<template>\n  <div>\n    <div class=\"alert alert-primary\" role=\"alert\">child1</div>\n  </div>\n</template>\n```\n\n![](https://i.imgur.com/yWI4RJb.png)\n\n因為我們要在 page 裡面切換 child 組件，所以先把 card 套件內的內容通通刪掉並補上 `router-view`\n\n```html\n<template>\n  <div class=\"hello\">\n    <div class=\"card\" style=\"width: 18rem;\">\n      <router-view></router-view>\n    </div>\n  </div>\n</template>\n```\n\n接下來要自定義路徑，但這是巢狀路徑，所以要在 page 底下加上 children，這 children 是使用陣列，裡面內容就跟外面的物件一樣，但在的第一個子元件的路徑可以是空直，這樣只要切到 page 頁面就會自動載入 child1 元件，子元件下陣列內的路徑也甭加 '/' ，直接寫路徑名字就好。\n下面組件新增完後上面也要引入組件路徑。\n範例如下：\n\n```javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\n//以上為官方元件\n\n// 這邊路徑就是左邊檔案路徑\nimport home from '@/components/HelloWorld'\nimport page from '@/components/pages/page'\nimport child1 from '@/components/pages/child1'\nimport child2 from '@/components/pages/child2'\nimport child3 from '@/components/pages/child3'\n\nVue.use(Router) // 路由啟用。這行很重要!!\n\nexport default new Router({\n  // 這邊路徑是自訂的\n  routes: [\n    {\n      path: '/index', //對應的虛擬路徑\n      name: 'home', //元件呈現的名稱\n      component: home, //對應的元件\n    },\n    {\n      path: '/page', //對應的虛擬路徑\n      name: 'page', //元件呈現的名稱\n      component: page, //對應的元件\n      children: [\n        {\n          path: '', //對應的虛擬路徑\n          name: 'child1', //元件呈現的名稱\n          component: child1, //對應的元件\n        },\n        {\n          path: 'child2', //對應的虛擬路徑\n          name: 'child2', //元件呈現的名稱\n          component: child2, //對應的元件\n        },\n        {\n          path: 'child3', //對應的虛擬路徑\n          name: 'child3', //元件呈現的名稱\n          component: child3, //對應的元件\n        },\n      ],\n    },\n  ],\n})\n```\n\nOK，到目前為止我們只要切換網址就可以看到 child 組件了，先試試 page 頁\n我有在 app.vue 用 container 限制寬並置中\n![](https://i.imgur.com/VQac8sW.png)\n\n可以看到目前在 page 頁，並自動帶入 child1\n輸入 child2 如下圖\n![](https://i.imgur.com/Oo9tIoy.png)\n\n接下來要在 page 頁面下新增子分頁的連結，\n\n```html\n<template>\n  <div class=\"hello\">\n    <router-link to=\"/page/\">child1</router-link>\n    <router-link to=\"/page/child2\">child2</router-link>\n    <router-link to=\"/page/child3\">child3</router-link>\n\n    <!--     也可以用 v-bind 動態綁定 name 的方式來連結路徑，下面示範 -->\n    <router-link :to=\"{ name: 'child3' }\">child3</router-link>\n\n    <div class=\"card\" style=\"width: 18rem;\">\n      <router-view></router-view>\n    </div>\n  </div>\n</template>\n```\n\n結果如下圖，本想把 card 套件移除，但發現他剛好可以把 alert 套件框住不會滿版，就索性留著\n![](https://i.imgur.com/KsCUrFh.png)\n然後注意網址!!!\n在點擊子組件的時候就會切換到自訂義的網址，同時也顯示不同子頁面\n![](https://i.imgur.com/vEjYlxE.png)\n![](https://i.imgur.com/0hV0ukO.png)\n\n---\n\n### 參考資料：\n\n### [Vue 出電商網站](https://courses.hexschool.com/courses/670031/lectures/11949226)\n\n### [Vue 官方文件](https://router.vuejs.org/zh/guide/#html)\n\n### [搞搞就懂部落格](https://dotblogs.com.tw/wasichris/2017/03/06/235449)\n","source":"_posts/2020/router.md","raw":"---\ntitle: Vue - Router\ntags: Router\ncategories: Vue\ndescription: 介紹整個 Vue 骨架的重點，與解說\n---\n\n## 新增路由路徑及連結\n\n[ Vue-router:官方文件](https://router.vuejs.org/zh/installation.html)\n\n透過切換網址來決定要顯示的組件內容，而切換網址就要用 router 來幫你達成!\n\n<!-- more -->\n\n在終端機切換到自己命名的資料夾並安裝 `npm install vue-router --save`\n\n到 index.js 引入 `Vue.use()` ，啟用路由功能\n\n```javascript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n//以上為官方元件\n\n// 這邊路徑就是左邊檔案路徑，保險起見一律都不加 .vue 字尾!!!\n// 路徑除了 from 要加入根目錄的 '@' 以外，其他地方不要加\nimport home from '@/components/HelloWorld'\nimport page from '@/components/pages/page'\n\nVue.use(VueRouter) //路由啟用。這行很重要!!\n\nexport default new VueRouter({\n  // 這邊路徑是自訂的\n  routes: [\n    {\n      name: '元件呈現的名稱',\n      path: '對應的虛擬路徑',\n      component: 對應的元件,\n    },\n    {\n      path: '/index',\n      name: 'home',\n      component: home,\n    },\n    {\n      path: '/page',\n      name: 'page',\n      component: page,\n    },\n  ],\n})\n```\n\n[export 解釋](export:)\n路由載入完啟用後，再到 main.js 載入路由配置\n\n```javascript\nimport Vue from 'vue'\nimport App from './App'\n\nimport router from './router' //新增這行\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  components: { App },\n  template: '<App/>',\n  router, //跟這行\n})\n```\n\n這邊示範一下透過設定的路徑來顯示組件內容\n\n因為首頁(HelloWorld.vue)的路徑(path)我定義為 /index ，\n所以在網址上如果沒有輸入定義路徑會顯示下圖\n![](https://i.imgur.com/OpDIjWn.png)\n可以看到，畫面只會顯示 app.vue 的圖片沒有其他內容，但如果在網址後面輸入 /index ，就會顯示下圖\n![](https://i.imgur.com/s8j7vel.png)\n這樣就可以看到 HelloWorld.vue 的內容\n\n---\n\n#### 接下來使用 BS4 套件，來快速顯示組件的內容\n\n首先，在 index.html 引入 [BS4](https://getbootstrap.com/docs/4.4/getting-started/introduction/) cdn\n有分頁才會有不同路徑，所以在 components 底下新增 pages 資料夾，裡面新增 page.vue\n![](https://i.imgur.com/u1kUcmR.png)\n\n到 page.vue 新增模板記得在模板內加上 div (這邊用 hello 標籤示範)。\n接著在標籤內貼上 BS4 套件(這邊用 card 套件示範)，`src` 裡面的 ...記得刪除!!，不然會錯誤!!\n\n```html\n<template>\n  <div class=\"hello\">\n    <div class=\"card\" style=\"width: 18rem;\">\n      <img src=\"\" class=\"card-img-top\" alt=\"...\" />\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">Card title</h5>\n        <p class=\"card-text\">\n          Some quick example text to build on the card title and make up the\n          bulk of the card's content.\n        </p>\n        <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n      </div>\n    </div>\n  </div>\n</template>\n```\n\n再來要製做可以切換組件內容的 navbar\n先把 app.vue 內容刪除，留下 app 標籤跟 router-view，img 也可以留下做分隔，\n並在裡面套入 BS4 導覽列套件，然後把不要的內容刪掉並補上 vue 的連結標籤，這邊的連結已經不是< a href=\"#\" > 了，而是 `router-link` ，連結路徑用 `to` ，這個路徑是 index.js 裡面自定義的路徑，記得要寫 router-view 這樣才可以顯示組件，如下圖\n\n> 這邊說明一下 router-view：\n> router-view 是呈現 router/index.js 裡面的元件，\n> 而 router/index.js 是設定各元件之間的連結\n\n![](https://i.imgur.com/mJyGWw8.png)\n\n完成後會看到畫面如下\n![](https://i.imgur.com/MkY1IT5.png)\n沒有任何組件，因為網址還沒輸入任何自定義路徑\n\n按一下 index，會顯示下圖\n![](https://i.imgur.com/qNPA2Nv.png)\n\n按一下 page，會顯示下圖\n![](https://i.imgur.com/C7LFYrj.png)\n\n---\n\n## 製作巢狀路由頁面\n\n接下來要做巢狀路由\n\n**注意!!!!在巢狀裡面一律不加斜號 '/' !!!**\n\n[參考文件](https://dotblogs.com.tw/wasichris/2017/03/06/235449)\n繼續在 pages 資料夾下新建立 3 個組件(這邊用 childX 示範)，然後再引入 BS4 套件的，只是要辨別而以所以用簡單的 alert 套件就好(其實是懶)\n\n```html\n這是 child1 範本\n<template>\n  <div>\n    <div class=\"alert alert-primary\" role=\"alert\">child1</div>\n  </div>\n</template>\n```\n\n![](https://i.imgur.com/yWI4RJb.png)\n\n因為我們要在 page 裡面切換 child 組件，所以先把 card 套件內的內容通通刪掉並補上 `router-view`\n\n```html\n<template>\n  <div class=\"hello\">\n    <div class=\"card\" style=\"width: 18rem;\">\n      <router-view></router-view>\n    </div>\n  </div>\n</template>\n```\n\n接下來要自定義路徑，但這是巢狀路徑，所以要在 page 底下加上 children，這 children 是使用陣列，裡面內容就跟外面的物件一樣，但在的第一個子元件的路徑可以是空直，這樣只要切到 page 頁面就會自動載入 child1 元件，子元件下陣列內的路徑也甭加 '/' ，直接寫路徑名字就好。\n下面組件新增完後上面也要引入組件路徑。\n範例如下：\n\n```javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\n//以上為官方元件\n\n// 這邊路徑就是左邊檔案路徑\nimport home from '@/components/HelloWorld'\nimport page from '@/components/pages/page'\nimport child1 from '@/components/pages/child1'\nimport child2 from '@/components/pages/child2'\nimport child3 from '@/components/pages/child3'\n\nVue.use(Router) // 路由啟用。這行很重要!!\n\nexport default new Router({\n  // 這邊路徑是自訂的\n  routes: [\n    {\n      path: '/index', //對應的虛擬路徑\n      name: 'home', //元件呈現的名稱\n      component: home, //對應的元件\n    },\n    {\n      path: '/page', //對應的虛擬路徑\n      name: 'page', //元件呈現的名稱\n      component: page, //對應的元件\n      children: [\n        {\n          path: '', //對應的虛擬路徑\n          name: 'child1', //元件呈現的名稱\n          component: child1, //對應的元件\n        },\n        {\n          path: 'child2', //對應的虛擬路徑\n          name: 'child2', //元件呈現的名稱\n          component: child2, //對應的元件\n        },\n        {\n          path: 'child3', //對應的虛擬路徑\n          name: 'child3', //元件呈現的名稱\n          component: child3, //對應的元件\n        },\n      ],\n    },\n  ],\n})\n```\n\nOK，到目前為止我們只要切換網址就可以看到 child 組件了，先試試 page 頁\n我有在 app.vue 用 container 限制寬並置中\n![](https://i.imgur.com/VQac8sW.png)\n\n可以看到目前在 page 頁，並自動帶入 child1\n輸入 child2 如下圖\n![](https://i.imgur.com/Oo9tIoy.png)\n\n接下來要在 page 頁面下新增子分頁的連結，\n\n```html\n<template>\n  <div class=\"hello\">\n    <router-link to=\"/page/\">child1</router-link>\n    <router-link to=\"/page/child2\">child2</router-link>\n    <router-link to=\"/page/child3\">child3</router-link>\n\n    <!--     也可以用 v-bind 動態綁定 name 的方式來連結路徑，下面示範 -->\n    <router-link :to=\"{ name: 'child3' }\">child3</router-link>\n\n    <div class=\"card\" style=\"width: 18rem;\">\n      <router-view></router-view>\n    </div>\n  </div>\n</template>\n```\n\n結果如下圖，本想把 card 套件移除，但發現他剛好可以把 alert 套件框住不會滿版，就索性留著\n![](https://i.imgur.com/KsCUrFh.png)\n然後注意網址!!!\n在點擊子組件的時候就會切換到自訂義的網址，同時也顯示不同子頁面\n![](https://i.imgur.com/vEjYlxE.png)\n![](https://i.imgur.com/0hV0ukO.png)\n\n---\n\n### 參考資料：\n\n### [Vue 出電商網站](https://courses.hexschool.com/courses/670031/lectures/11949226)\n\n### [Vue 官方文件](https://router.vuejs.org/zh/guide/#html)\n\n### [搞搞就懂部落格](https://dotblogs.com.tw/wasichris/2017/03/06/235449)\n","slug":"router","published":1,"date":"2020-08-30T11:55:58.883Z","updated":"2021-03-26T16:13:10.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lq3001qg0tr0r6wceb6","content":"<html><head></head><body><h2 id=\"新增路由路徑及連結\"><a href=\"#新增路由路徑及連結\" class=\"headerlink\" title=\"新增路由路徑及連結\"></a>新增路由路徑及連結</h2><p><a href=\"https://router.vuejs.org/zh/installation.html\"> Vue-router:官方文件</a></p>\n<p>透過切換網址來決定要顯示的組件內容，而切換網址就要用 router 來幫你達成!</p>\n<a id=\"more\"></a>\n\n<p>在終端機切換到自己命名的資料夾並安裝 <code>npm install vue-router --save</code></p>\n<p>到 index.js 引入 <code>Vue.use()</code> ，啟用路由功能</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> VueRouter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//以上為官方元件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 這邊路徑就是左邊檔案路徑，保險起見一律都不加 .vue 字尾!!!</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// 路徑除了 from 要加入根目錄的 '@' 以外，其他地方不要加</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> home <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/components/HelloWorld'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> page <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/components/pages/page'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter) <span class=\"hljs-comment\">//路由啟用。這行很重要!!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> VueRouter({</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 這邊路徑是自訂的</span></span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: <span class=\"hljs-string\">'元件呈現的名稱'</span>,</span><br><span class=\"line\">      path: <span class=\"hljs-string\">'對應的虛擬路徑'</span>,</span><br><span class=\"line\">      component: 對應的元件,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      path: <span class=\"hljs-string\">'/index'</span>,</span><br><span class=\"line\">      name: <span class=\"hljs-string\">'home'</span>,</span><br><span class=\"line\">      component: home,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      path: <span class=\"hljs-string\">'/page'</span>,</span><br><span class=\"line\">      name: <span class=\"hljs-string\">'page'</span>,</span><br><span class=\"line\">      component: page,</span><br><span class=\"line\">    },</span><br><span class=\"line\">  ],</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"export:\">export 解釋</a><br>路由載入完啟用後，再到 main.js 載入路由配置</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./App'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./router'</span> <span class=\"hljs-comment\">//新增這行</span></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"hljs-literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  components: { App },</span><br><span class=\"line\">  template: <span class=\"hljs-string\">'&lt;App/&gt;'</span>,</span><br><span class=\"line\">  router, <span class=\"hljs-comment\">//跟這行</span></span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>這邊示範一下透過設定的路徑來顯示組件內容</p>\n<p>因為首頁(HelloWorld.vue)的路徑(path)我定義為 /index ，<br>所以在網址上如果沒有輸入定義路徑會顯示下圖<br><img src=\"https://i.imgur.com/OpDIjWn.png\"><br>可以看到，畫面只會顯示 app.vue 的圖片沒有其他內容，但如果在網址後面輸入 /index ，就會顯示下圖<br><img src=\"https://i.imgur.com/s8j7vel.png\"><br>這樣就可以看到 HelloWorld.vue 的內容</p>\n<hr>\n<h4 id=\"接下來使用-BS4-套件，來快速顯示組件的內容\"><a href=\"#接下來使用-BS4-套件，來快速顯示組件的內容\" class=\"headerlink\" title=\"接下來使用 BS4 套件，來快速顯示組件的內容\"></a>接下來使用 BS4 套件，來快速顯示組件的內容</h4><p>首先，在 index.html 引入 <a href=\"https://getbootstrap.com/docs/4.4/getting-started/introduction/\">BS4</a> cdn<br>有分頁才會有不同路徑，所以在 components 底下新增 pages 資料夾，裡面新增 page.vue<br><img src=\"https://i.imgur.com/u1kUcmR.png\"></p>\n<p>到 page.vue 新增模板記得在模板內加上 div (這邊用 hello 標籤示範)。<br>接著在標籤內貼上 BS4 套件(這邊用 card 套件示範)，<code>src</code> 裡面的 …記得刪除!!，不然會錯誤!!</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 18rem;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-img-top\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"...\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-body\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-title\"</span>&gt;</span>Card title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card-text\"</span>&gt;</span></span><br><span class=\"line\">          Some quick example text to build on the card title and make up the</span><br><span class=\"line\">          bulk of the card's content.</span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span>&gt;</span>Go somewhere<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>再來要製做可以切換組件內容的 navbar<br>先把 app.vue 內容刪除，留下 app 標籤跟 router-view，img 也可以留下做分隔，<br>並在裡面套入 BS4 導覽列套件，然後把不要的內容刪掉並補上 vue 的連結標籤，這邊的連結已經不是&lt; a href=”#” &gt; 了，而是 <code>router-link</code> ，連結路徑用 <code>to</code> ，這個路徑是 index.js 裡面自定義的路徑，記得要寫 router-view 這樣才可以顯示組件，如下圖</p>\n<blockquote>\n<p>這邊說明一下 router-view：<br>router-view 是呈現 router/index.js 裡面的元件，<br>而 router/index.js 是設定各元件之間的連結</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/mJyGWw8.png\"></p>\n<p>完成後會看到畫面如下<br><img src=\"https://i.imgur.com/MkY1IT5.png\"><br>沒有任何組件，因為網址還沒輸入任何自定義路徑</p>\n<p>按一下 index，會顯示下圖<br><img src=\"https://i.imgur.com/qNPA2Nv.png\"></p>\n<p>按一下 page，會顯示下圖<br><img src=\"https://i.imgur.com/C7LFYrj.png\"></p>\n<hr>\n<h2 id=\"製作巢狀路由頁面\"><a href=\"#製作巢狀路由頁面\" class=\"headerlink\" title=\"製作巢狀路由頁面\"></a>製作巢狀路由頁面</h2><p>接下來要做巢狀路由</p>\n<p><strong>注意!!!!在巢狀裡面一律不加斜號 ‘/‘ !!!</strong></p>\n<p><a href=\"https://dotblogs.com.tw/wasichris/2017/03/06/235449\">參考文件</a><br>繼續在 pages 資料夾下新建立 3 個組件(這邊用 childX 示範)，然後再引入 BS4 套件的，只是要辨別而以所以用簡單的 alert 套件就好(其實是懶)</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">這是 child1 範本</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"alert alert-primary\"</span> <span class=\"hljs-attr\">role</span>=<span class=\"hljs-string\">\"alert\"</span>&gt;</span>child1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/yWI4RJb.png\"></p>\n<p>因為我們要在 page 裡面切換 child 組件，所以先把 card 套件內的內容通通刪掉並補上 <code>router-view</code></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 18rem;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>接下來要自定義路徑，但這是巢狀路徑，所以要在 page 底下加上 children，這 children 是使用陣列，裡面內容就跟外面的物件一樣，但在的第一個子元件的路徑可以是空直，這樣只要切到 page 頁面就會自動載入 child1 元件，子元件下陣列內的路徑也甭加 ‘/‘ ，直接寫路徑名字就好。<br>下面組件新增完後上面也要引入組件路徑。<br>範例如下：</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//以上為官方元件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 這邊路徑就是左邊檔案路徑</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> home <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/components/HelloWorld'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> page <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/components/pages/page'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> child1 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/components/pages/child1'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> child2 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/components/pages/child2'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> child3 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/components/pages/child3'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router) <span class=\"hljs-comment\">// 路由啟用。這行很重要!!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Router({</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 這邊路徑是自訂的</span></span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      path: <span class=\"hljs-string\">'/index'</span>, <span class=\"hljs-comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">      name: <span class=\"hljs-string\">'home'</span>, <span class=\"hljs-comment\">//元件呈現的名稱</span></span><br><span class=\"line\">      component: home, <span class=\"hljs-comment\">//對應的元件</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      path: <span class=\"hljs-string\">'/page'</span>, <span class=\"hljs-comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">      name: <span class=\"hljs-string\">'page'</span>, <span class=\"hljs-comment\">//元件呈現的名稱</span></span><br><span class=\"line\">      component: page, <span class=\"hljs-comment\">//對應的元件</span></span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        {</span><br><span class=\"line\">          path: <span class=\"hljs-string\">''</span>, <span class=\"hljs-comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">          name: <span class=\"hljs-string\">'child1'</span>, <span class=\"hljs-comment\">//元件呈現的名稱</span></span><br><span class=\"line\">          component: child1, <span class=\"hljs-comment\">//對應的元件</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        {</span><br><span class=\"line\">          path: <span class=\"hljs-string\">'child2'</span>, <span class=\"hljs-comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">          name: <span class=\"hljs-string\">'child2'</span>, <span class=\"hljs-comment\">//元件呈現的名稱</span></span><br><span class=\"line\">          component: child2, <span class=\"hljs-comment\">//對應的元件</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">        {</span><br><span class=\"line\">          path: <span class=\"hljs-string\">'child3'</span>, <span class=\"hljs-comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">          name: <span class=\"hljs-string\">'child3'</span>, <span class=\"hljs-comment\">//元件呈現的名稱</span></span><br><span class=\"line\">          component: child3, <span class=\"hljs-comment\">//對應的元件</span></span><br><span class=\"line\">        },</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    },</span><br><span class=\"line\">  ],</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>OK，到目前為止我們只要切換網址就可以看到 child 組件了，先試試 page 頁<br>我有在 app.vue 用 container 限制寬並置中<br><img src=\"https://i.imgur.com/VQac8sW.png\"></p>\n<p>可以看到目前在 page 頁，並自動帶入 child1<br>輸入 child2 如下圖<br><img src=\"https://i.imgur.com/Oo9tIoy.png\"></p>\n<p>接下來要在 page 頁面下新增子分頁的連結，</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"hello\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/page/\"</span>&gt;</span>child1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/page/child2\"</span>&gt;</span>child2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/page/child3\"</span>&gt;</span>child3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">&lt;!--     也可以用 v-bind 動態綁定 name 的方式來連結路徑，下面示範 --&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"{ name: 'child3' }\"</span>&gt;</span>child3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 18rem;\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>結果如下圖，本想把 card 套件移除，但發現他剛好可以把 alert 套件框住不會滿版，就索性留著<br><img src=\"https://i.imgur.com/KsCUrFh.png\"><br>然後注意網址!!!<br>在點擊子組件的時候就會切換到自訂義的網址，同時也顯示不同子頁面<br><img src=\"https://i.imgur.com/vEjYlxE.png\"><br><img src=\"https://i.imgur.com/0hV0ukO.png\"></p>\n<hr>\n<h3 id=\"參考資料：\"><a href=\"#參考資料：\" class=\"headerlink\" title=\"參考資料：\"></a>參考資料：</h3><h3 id=\"Vue-出電商網站\"><a href=\"#Vue-出電商網站\" class=\"headerlink\" title=\"Vue 出電商網站\"></a><a href=\"https://courses.hexschool.com/courses/670031/lectures/11949226\">Vue 出電商網站</a></h3><h3 id=\"Vue-官方文件\"><a href=\"#Vue-官方文件\" class=\"headerlink\" title=\"Vue 官方文件\"></a><a href=\"https://router.vuejs.org/zh/guide/#html\">Vue 官方文件</a></h3><h3 id=\"搞搞就懂部落格\"><a href=\"#搞搞就懂部落格\" class=\"headerlink\" title=\"搞搞就懂部落格\"></a><a href=\"https://dotblogs.com.tw/wasichris/2017/03/06/235449\">搞搞就懂部落格</a></h3></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"Router","path":"tags/Router/"}],"excerpt":"<html><head></head><body><h2 id=\"新增路由路徑及連結\"><a href=\"#新增路由路徑及連結\" class=\"headerlink\" title=\"新增路由路徑及連結\"></a>新增路由路徑及連結</h2><p><a href=\"https://router.vuejs.org/zh/installation.html\"> Vue-router:官方文件</a></p>\n<p>透過切換網址來決定要顯示的組件內容，而切換網址就要用 router 來幫你達成!</p></body></html>","more":"<p>在終端機切換到自己命名的資料夾並安裝 <code>npm install vue-router --save</code></p>\n<p>到 index.js 引入 <code>Vue.use()</code> ，啟用路由功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//以上為官方元件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 這邊路徑就是左邊檔案路徑，保險起見一律都不加 .vue 字尾!!!</span></span><br><span class=\"line\"><span class=\"comment\">// 路徑除了 from 要加入根目錄的 &#x27;@&#x27; 以外，其他地方不要加</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> home <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> page <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/pages/page&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter) <span class=\"comment\">//路由啟用。這行很重要!!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這邊路徑是自訂的</span></span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;元件呈現的名稱&#x27;</span>,</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;對應的虛擬路徑&#x27;</span>,</span><br><span class=\"line\">      component: 對應的元件,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/index&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">      component: home,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/page&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;page&#x27;</span>,</span><br><span class=\"line\">      component: page,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"export:\">export 解釋</a><br>路由載入完啟用後，再到 main.js 載入路由配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span> <span class=\"comment\">//新增這行</span></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  components: &#123; App &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class=\"line\">  router, <span class=\"comment\">//跟這行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這邊示範一下透過設定的路徑來顯示組件內容</p>\n<p>因為首頁(HelloWorld.vue)的路徑(path)我定義為 /index ，<br>所以在網址上如果沒有輸入定義路徑會顯示下圖<br><img src=\"https://i.imgur.com/OpDIjWn.png\"><br>可以看到，畫面只會顯示 app.vue 的圖片沒有其他內容，但如果在網址後面輸入 /index ，就會顯示下圖<br><img src=\"https://i.imgur.com/s8j7vel.png\"><br>這樣就可以看到 HelloWorld.vue 的內容</p>\n<hr>\n<h4 id=\"接下來使用-BS4-套件，來快速顯示組件的內容\"><a href=\"#接下來使用-BS4-套件，來快速顯示組件的內容\" class=\"headerlink\" title=\"接下來使用 BS4 套件，來快速顯示組件的內容\"></a>接下來使用 BS4 套件，來快速顯示組件的內容</h4><p>首先，在 index.html 引入 <a href=\"https://getbootstrap.com/docs/4.4/getting-started/introduction/\">BS4</a> cdn<br>有分頁才會有不同路徑，所以在 components 底下新增 pages 資料夾，裡面新增 page.vue<br><img src=\"https://i.imgur.com/u1kUcmR.png\"></p>\n<p>到 page.vue 新增模板記得在模板內加上 div (這邊用 hello 標籤示範)。<br>接著在標籤內貼上 BS4 套件(這邊用 card 套件示範)，<code>src</code> 裡面的 …記得刪除!!，不然會錯誤!!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 18rem;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-img-top&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;...&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-body&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h5</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-title&quot;</span>&gt;</span>Card title<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-text&quot;</span>&gt;</span></span><br><span class=\"line\">          Some quick example text to build on the card title and make up the</span><br><span class=\"line\">          bulk of the card&#x27;s content.</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>Go somewhere<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>再來要製做可以切換組件內容的 navbar<br>先把 app.vue 內容刪除，留下 app 標籤跟 router-view，img 也可以留下做分隔，<br>並在裡面套入 BS4 導覽列套件，然後把不要的內容刪掉並補上 vue 的連結標籤，這邊的連結已經不是&lt; a href=”#” &gt; 了，而是 <code>router-link</code> ，連結路徑用 <code>to</code> ，這個路徑是 index.js 裡面自定義的路徑，記得要寫 router-view 這樣才可以顯示組件，如下圖</p>\n<blockquote>\n<p>這邊說明一下 router-view：<br>router-view 是呈現 router/index.js 裡面的元件，<br>而 router/index.js 是設定各元件之間的連結</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/mJyGWw8.png\"></p>\n<p>完成後會看到畫面如下<br><img src=\"https://i.imgur.com/MkY1IT5.png\"><br>沒有任何組件，因為網址還沒輸入任何自定義路徑</p>\n<p>按一下 index，會顯示下圖<br><img src=\"https://i.imgur.com/qNPA2Nv.png\"></p>\n<p>按一下 page，會顯示下圖<br><img src=\"https://i.imgur.com/C7LFYrj.png\"></p>\n<hr>\n<h2 id=\"製作巢狀路由頁面\"><a href=\"#製作巢狀路由頁面\" class=\"headerlink\" title=\"製作巢狀路由頁面\"></a>製作巢狀路由頁面</h2><p>接下來要做巢狀路由</p>\n<p><strong>注意!!!!在巢狀裡面一律不加斜號 ‘/‘ !!!</strong></p>\n<p><a href=\"https://dotblogs.com.tw/wasichris/2017/03/06/235449\">參考文件</a><br>繼續在 pages 資料夾下新建立 3 個組件(這邊用 childX 示範)，然後再引入 BS4 套件的，只是要辨別而以所以用簡單的 alert 套件就好(其實是懶)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">這是 child1 範本</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-primary&quot;</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;alert&quot;</span>&gt;</span>child1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/yWI4RJb.png\"></p>\n<p>因為我們要在 page 裡面切換 child 組件，所以先把 card 套件內的內容通通刪掉並補上 <code>router-view</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 18rem;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下來要自定義路徑，但這是巢狀路徑，所以要在 page 底下加上 children，這 children 是使用陣列，裡面內容就跟外面的物件一樣，但在的第一個子元件的路徑可以是空直，這樣只要切到 page 頁面就會自動載入 child1 元件，子元件下陣列內的路徑也甭加 ‘/‘ ，直接寫路徑名字就好。<br>下面組件新增完後上面也要引入組件路徑。<br>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//以上為官方元件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 這邊路徑就是左邊檔案路徑</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> home <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> page <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/pages/page&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> child1 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/pages/child1&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> child2 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/pages/child2&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> child3 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/pages/child3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router) <span class=\"comment\">// 路由啟用。這行很重要!!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 這邊路徑是自訂的</span></span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/index&#x27;</span>, <span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">      name: <span class=\"string\">&#x27;home&#x27;</span>, <span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">      component: home, <span class=\"comment\">//對應的元件</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/page&#x27;</span>, <span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">      name: <span class=\"string\">&#x27;page&#x27;</span>, <span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">      component: page, <span class=\"comment\">//對應的元件</span></span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">          name: <span class=\"string\">&#x27;child1&#x27;</span>, <span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">          component: child1, <span class=\"comment\">//對應的元件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;child2&#x27;</span>, <span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">          name: <span class=\"string\">&#x27;child2&#x27;</span>, <span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">          component: child2, <span class=\"comment\">//對應的元件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;child3&#x27;</span>, <span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">          name: <span class=\"string\">&#x27;child3&#x27;</span>, <span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">          component: child3, <span class=\"comment\">//對應的元件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>OK，到目前為止我們只要切換網址就可以看到 child 組件了，先試試 page 頁<br>我有在 app.vue 用 container 限制寬並置中<br><img src=\"https://i.imgur.com/VQac8sW.png\"></p>\n<p>可以看到目前在 page 頁，並自動帶入 child1<br>輸入 child2 如下圖<br><img src=\"https://i.imgur.com/Oo9tIoy.png\"></p>\n<p>接下來要在 page 頁面下新增子分頁的連結，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/page/&quot;</span>&gt;</span>child1<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/page/child2&quot;</span>&gt;</span>child2<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/page/child3&quot;</span>&gt;</span>child3<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--     也可以用 v-bind 動態綁定 name 的方式來連結路徑，下面示範 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; name: &#x27;child3&#x27; &#125;&quot;</span>&gt;</span>child3<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 18rem;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>結果如下圖，本想把 card 套件移除，但發現他剛好可以把 alert 套件框住不會滿版，就索性留著<br><img src=\"https://i.imgur.com/KsCUrFh.png\"><br>然後注意網址!!!<br>在點擊子組件的時候就會切換到自訂義的網址，同時也顯示不同子頁面<br><img src=\"https://i.imgur.com/vEjYlxE.png\"><br><img src=\"https://i.imgur.com/0hV0ukO.png\"></p>\n<hr>\n<h3 id=\"參考資料：\"><a href=\"#參考資料：\" class=\"headerlink\" title=\"參考資料：\"></a>參考資料：</h3><h3 id=\"Vue-出電商網站\"><a href=\"#Vue-出電商網站\" class=\"headerlink\" title=\"Vue 出電商網站\"></a><a href=\"https://courses.hexschool.com/courses/670031/lectures/11949226\">Vue 出電商網站</a></h3><h3 id=\"Vue-官方文件\"><a href=\"#Vue-官方文件\" class=\"headerlink\" title=\"Vue 官方文件\"></a><a href=\"https://router.vuejs.org/zh/guide/#html\">Vue 官方文件</a></h3><h3 id=\"搞搞就懂部落格\"><a href=\"#搞搞就懂部落格\" class=\"headerlink\" title=\"搞搞就懂部落格\"></a><a href=\"https://dotblogs.com.tw/wasichris/2017/03/06/235449\">搞搞就懂部落格</a></h3>"},{"title":"jQuery - 介紹","date":"2021-01-13T16:00:00.000Z","_content":" \n## 三大重點\n- 選擇器 (selector)\n- 事件觸發 (event)\n- 事件處發的回調函數\n<!--more-->\n**撰寫步驟如下:**\n1. 選擇: 顯示、隱藏元素\n2. 事件: 改變樣式\n3. 動作: DOM 操作\n\n## 選擇器 (Selector)\n### id 選擇器\n利用按下 `button` 按鈕改變字體顏色\n\n以下示範:\n首先給個 `id` 元素跟 `button`\n```html\n<div id=\"color\">color</div>\n<button id='changeColor'>Button</button>\n```\n再來是執行步驟:\n1. 選擇要改變的元素 `#color`\n2. 改變顏色 `css('color', 'red')`\n3. 在 click 動作下執行\n\n```javascript\n$('#changeColor').click(function(){\n  $('#color').css('color', 'red')\n})\n\n```\n[DEMO](https://codepen.io/gleofgja/pen/LYRXxMx?editors=1011)\n\n### class 選擇器\n來看一下跟 `id` 選擇器有什麼差別\n\n給同個 `id` & `className` 再用 `console.log` 查看\n```html\n<div id=\"dog\" class=\"dog\">dog 1</div>\n<div id=\"dog\" class=\"dog\">dog 2</div>\n```\n\n先示範選擇器抓 `id` 的效果\n然後在 `console.log` 下 `$('#dog').text()`，顯示如下\n![](https://i.imgur.com/HjZsX8q.png)\n只會抓到第一個 `id` 的 `dog` 而已\n\n再試試選擇器抓 `className` 的話呢?\n輸入 `$('.dog').text()` ，顯示如下紅框處\n![](https://i.imgur.com/FdkEjg8.png)\n\n綠色是選擇器的差別上面是 `id` ，下面是 `className`\n可以看如果用 `className` 選擇器的話兩個都會顯示\n\n[DEMO](https://codepen.io/gleofgja/pen/LYRXWPy?editors=1011)\n\n### 元素選擇器\n觀念跟 `class` 很像，可以同時更改多個元素內容或樣式，但會有點風險，因為同個檔案裡面或有多個相同元素\n\n給三個 `p` 元素跟一個 `button` ，透過按下 `button` 可以更改元素內的內容，以下示範\n```html\n<p>p1</p>\n<p>p2</p>\n<p>p3</p>\n\n<button id=\"changeWord\">change-Word</button>\n```\n\njQuery 步驟:\n1. 選擇要改變的元素 `p`\n2. 改變的樣式 `.text('changeWord')`\n3. 按下 `button` 的動作\n\n```javascript\n$('#changeWord').click(function(){\n  $('p').text('changeWord')\n})\n\n```\n\n[DEMO](https://codepen.io/gleofgja/pen/GRjwWNX?editors=1011)\n\n---\n## 總結 `id` 、 `className` & 元素的差別:\n- id: 若有很多相同 id ，<font color=#FF0000>只會選取第一個</font>\n- className: 會同時選取<font color=#FF0000>所有</font>相同的 className\n- 元素: 會同時選取<font color=#FF0000>所有</font>相同的元素\n\n會用到 `className` 的原因是為了方便選更改多個樣式，可以用在相同的商品列表上，但如果選擇 `id` 的話就只會更改單一樣式而且是第一個，之後相同 `id` 的不會更改到\n\n---\n## 參考資料:\n[jQuery 幼幼班](https://codeshiba.teachable.com/courses/1255270/lectures/29521035)","source":"_posts/2020/selector.md","raw":"---\ntitle:  jQuery - 介紹\ndate: 2021/01/14\ntags:  jQuery\n\n--- \n## 三大重點\n- 選擇器 (selector)\n- 事件觸發 (event)\n- 事件處發的回調函數\n<!--more-->\n**撰寫步驟如下:**\n1. 選擇: 顯示、隱藏元素\n2. 事件: 改變樣式\n3. 動作: DOM 操作\n\n## 選擇器 (Selector)\n### id 選擇器\n利用按下 `button` 按鈕改變字體顏色\n\n以下示範:\n首先給個 `id` 元素跟 `button`\n```html\n<div id=\"color\">color</div>\n<button id='changeColor'>Button</button>\n```\n再來是執行步驟:\n1. 選擇要改變的元素 `#color`\n2. 改變顏色 `css('color', 'red')`\n3. 在 click 動作下執行\n\n```javascript\n$('#changeColor').click(function(){\n  $('#color').css('color', 'red')\n})\n\n```\n[DEMO](https://codepen.io/gleofgja/pen/LYRXxMx?editors=1011)\n\n### class 選擇器\n來看一下跟 `id` 選擇器有什麼差別\n\n給同個 `id` & `className` 再用 `console.log` 查看\n```html\n<div id=\"dog\" class=\"dog\">dog 1</div>\n<div id=\"dog\" class=\"dog\">dog 2</div>\n```\n\n先示範選擇器抓 `id` 的效果\n然後在 `console.log` 下 `$('#dog').text()`，顯示如下\n![](https://i.imgur.com/HjZsX8q.png)\n只會抓到第一個 `id` 的 `dog` 而已\n\n再試試選擇器抓 `className` 的話呢?\n輸入 `$('.dog').text()` ，顯示如下紅框處\n![](https://i.imgur.com/FdkEjg8.png)\n\n綠色是選擇器的差別上面是 `id` ，下面是 `className`\n可以看如果用 `className` 選擇器的話兩個都會顯示\n\n[DEMO](https://codepen.io/gleofgja/pen/LYRXWPy?editors=1011)\n\n### 元素選擇器\n觀念跟 `class` 很像，可以同時更改多個元素內容或樣式，但會有點風險，因為同個檔案裡面或有多個相同元素\n\n給三個 `p` 元素跟一個 `button` ，透過按下 `button` 可以更改元素內的內容，以下示範\n```html\n<p>p1</p>\n<p>p2</p>\n<p>p3</p>\n\n<button id=\"changeWord\">change-Word</button>\n```\n\njQuery 步驟:\n1. 選擇要改變的元素 `p`\n2. 改變的樣式 `.text('changeWord')`\n3. 按下 `button` 的動作\n\n```javascript\n$('#changeWord').click(function(){\n  $('p').text('changeWord')\n})\n\n```\n\n[DEMO](https://codepen.io/gleofgja/pen/GRjwWNX?editors=1011)\n\n---\n## 總結 `id` 、 `className` & 元素的差別:\n- id: 若有很多相同 id ，<font color=#FF0000>只會選取第一個</font>\n- className: 會同時選取<font color=#FF0000>所有</font>相同的 className\n- 元素: 會同時選取<font color=#FF0000>所有</font>相同的元素\n\n會用到 `className` 的原因是為了方便選更改多個樣式，可以用在相同的商品列表上，但如果選擇 `id` 的話就只會更改單一樣式而且是第一個，之後相同 `id` 的不會更改到\n\n---\n## 參考資料:\n[jQuery 幼幼班](https://codeshiba.teachable.com/courses/1255270/lectures/29521035)","slug":"selector","published":1,"updated":"2021-03-26T16:13:10.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lq5001tg0tr2gzf88jv","content":"<html><head></head><body><h2 id=\"三大重點\"><a href=\"#三大重點\" class=\"headerlink\" title=\"三大重點\"></a>三大重點</h2><ul>\n<li>選擇器 (selector)</li>\n<li>事件觸發 (event)</li>\n<li>事件處發的回調函數<a id=\"more\"></a></li>\n</ul>\n<p><strong>撰寫步驟如下:</strong></p>\n<ol>\n<li>選擇: 顯示、隱藏元素</li>\n<li>事件: 改變樣式</li>\n<li>動作: DOM 操作</li>\n</ol>\n<h2 id=\"選擇器-Selector\"><a href=\"#選擇器-Selector\" class=\"headerlink\" title=\"選擇器 (Selector)\"></a>選擇器 (Selector)</h2><h3 id=\"id-選擇器\"><a href=\"#id-選擇器\" class=\"headerlink\" title=\"id 選擇器\"></a>id 選擇器</h3><p>利用按下 <code>button</code> 按鈕改變字體顏色</p>\n<p>以下示範:<br>首先給個 <code>id</code> 元素跟 <code>button</code></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"color\"</span>&gt;</span>color<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'changeColor'</span>&gt;</span>Button<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>再來是執行步驟:</p>\n<ol>\n<li>選擇要改變的元素 <code>#color</code></li>\n<li>改變顏色 <code>css('color', 'red')</code></li>\n<li>在 click 動作下執行</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'#changeColor'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#color'</span>).css(<span class=\"hljs-string\">'color'</span>, <span class=\"hljs-string\">'red'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p><a href=\"https://codepen.io/gleofgja/pen/LYRXxMx?editors=1011\">DEMO</a></p>\n<h3 id=\"class-選擇器\"><a href=\"#class-選擇器\" class=\"headerlink\" title=\"class 選擇器\"></a>class 選擇器</h3><p>來看一下跟 <code>id</code> 選擇器有什麼差別</p>\n<p>給同個 <code>id</code> &amp; <code>className</code> 再用 <code>console.log</code> 查看</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dog\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"dog\"</span>&gt;</span>dog 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dog\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"dog\"</span>&gt;</span>dog 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>先示範選擇器抓 <code>id</code> 的效果<br>然後在 <code>console.log</code> 下 <code>$('#dog').text()</code>，顯示如下<br><img src=\"https://i.imgur.com/HjZsX8q.png\"><br>只會抓到第一個 <code>id</code> 的 <code>dog</code> 而已</p>\n<p>再試試選擇器抓 <code>className</code> 的話呢?<br>輸入 <code>$('.dog').text()</code> ，顯示如下紅框處<br><img src=\"https://i.imgur.com/FdkEjg8.png\"></p>\n<p>綠色是選擇器的差別上面是 <code>id</code> ，下面是 <code>className</code><br>可以看如果用 <code>className</code> 選擇器的話兩個都會顯示</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/LYRXWPy?editors=1011\">DEMO</a></p>\n<h3 id=\"元素選擇器\"><a href=\"#元素選擇器\" class=\"headerlink\" title=\"元素選擇器\"></a>元素選擇器</h3><p>觀念跟 <code>class</code> 很像，可以同時更改多個元素內容或樣式，但會有點風險，因為同個檔案裡面或有多個相同元素</p>\n<p>給三個 <code>p</code> 元素跟一個 <code>button</code> ，透過按下 <code>button</code> 可以更改元素內的內容，以下示範</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>p1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>p2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>p3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"changeWord\"</span>&gt;</span>change-Word<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>jQuery 步驟:</p>\n<ol>\n<li>選擇要改變的元素 <code>p</code></li>\n<li>改變的樣式 <code>.text('changeWord')</code></li>\n<li>按下 <code>button</code> 的動作</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'#changeWord'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'p'</span>).text(<span class=\"hljs-string\">'changeWord'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/GRjwWNX?editors=1011\">DEMO</a></p>\n<hr>\n<h2 id=\"總結-id-、-className-amp-元素的差別\"><a href=\"#總結-id-、-className-amp-元素的差別\" class=\"headerlink\" title=\"總結 id 、 className &amp; 元素的差別:\"></a>總結 <code>id</code> 、 <code>className</code> &amp; 元素的差別:</h2><ul>\n<li>id: 若有很多相同 id ，<font color=\"#FF0000\">只會選取第一個</font></li>\n<li>className: 會同時選取<font color=\"#FF0000\">所有</font>相同的 className</li>\n<li>元素: 會同時選取<font color=\"#FF0000\">所有</font>相同的元素</li>\n</ul>\n<p>會用到 <code>className</code> 的原因是為了方便選更改多個樣式，可以用在相同的商品列表上，但如果選擇 <code>id</code> 的話就只會更改單一樣式而且是第一個，之後相同 <code>id</code> 的不會更改到</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料:\"></a>參考資料:</h2><p><a href=\"https://codeshiba.teachable.com/courses/1255270/lectures/29521035\">jQuery 幼幼班</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[],"_tags":[{"name":"jQuery","path":"tags/jQuery/"}],"excerpt":"<html><head></head><body><h2 id=\"三大重點\"><a href=\"#三大重點\" class=\"headerlink\" title=\"三大重點\"></a>三大重點</h2><ul>\n<li>選擇器 (selector)</li>\n<li>事件觸發 (event)</li>\n<li>事件處發的回調函數</li></ul></body></html>","more":"</li>\n</ul>\n<p><strong>撰寫步驟如下:</strong></p>\n<ol>\n<li>選擇: 顯示、隱藏元素</li>\n<li>事件: 改變樣式</li>\n<li>動作: DOM 操作</li>\n</ol>\n<h2 id=\"選擇器-Selector\"><a href=\"#選擇器-Selector\" class=\"headerlink\" title=\"選擇器 (Selector)\"></a>選擇器 (Selector)</h2><h3 id=\"id-選擇器\"><a href=\"#id-選擇器\" class=\"headerlink\" title=\"id 選擇器\"></a>id 選擇器</h3><p>利用按下 <code>button</code> 按鈕改變字體顏色</p>\n<p>以下示範:<br>首先給個 <code>id</code> 元素跟 <code>button</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;color&quot;</span>&gt;</span>color<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;changeColor&#x27;</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>再來是執行步驟:</p>\n<ol>\n<li>選擇要改變的元素 <code>#color</code></li>\n<li>改變顏色 <code>css(&#39;color&#39;, &#39;red&#39;)</code></li>\n<li>在 click 動作下執行</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#changeColor&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#color&#x27;</span>).css(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/gleofgja/pen/LYRXxMx?editors=1011\">DEMO</a></p>\n<h3 id=\"class-選擇器\"><a href=\"#class-選擇器\" class=\"headerlink\" title=\"class 選擇器\"></a>class 選擇器</h3><p>來看一下跟 <code>id</code> 選擇器有什麼差別</p>\n<p>給同個 <code>id</code> &amp; <code>className</code> 再用 <code>console.log</code> 查看</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dog&quot;</span>&gt;</span>dog 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dog&quot;</span>&gt;</span>dog 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>先示範選擇器抓 <code>id</code> 的效果<br>然後在 <code>console.log</code> 下 <code>$(&#39;#dog&#39;).text()</code>，顯示如下<br><img src=\"https://i.imgur.com/HjZsX8q.png\"><br>只會抓到第一個 <code>id</code> 的 <code>dog</code> 而已</p>\n<p>再試試選擇器抓 <code>className</code> 的話呢?<br>輸入 <code>$(&#39;.dog&#39;).text()</code> ，顯示如下紅框處<br><img src=\"https://i.imgur.com/FdkEjg8.png\"></p>\n<p>綠色是選擇器的差別上面是 <code>id</code> ，下面是 <code>className</code><br>可以看如果用 <code>className</code> 選擇器的話兩個都會顯示</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/LYRXWPy?editors=1011\">DEMO</a></p>\n<h3 id=\"元素選擇器\"><a href=\"#元素選擇器\" class=\"headerlink\" title=\"元素選擇器\"></a>元素選擇器</h3><p>觀念跟 <code>class</code> 很像，可以同時更改多個元素內容或樣式，但會有點風險，因為同個檔案裡面或有多個相同元素</p>\n<p>給三個 <code>p</code> 元素跟一個 <code>button</code> ，透過按下 <code>button</code> 可以更改元素內的內容，以下示範</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>p1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>p2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>p3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;changeWord&quot;</span>&gt;</span>change-Word<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>jQuery 步驟:</p>\n<ol>\n<li>選擇要改變的元素 <code>p</code></li>\n<li>改變的樣式 <code>.text(&#39;changeWord&#39;)</code></li>\n<li>按下 <code>button</code> 的動作</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#changeWord&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;p&#x27;</span>).text(<span class=\"string\">&#x27;changeWord&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/GRjwWNX?editors=1011\">DEMO</a></p>\n<hr>\n<h2 id=\"總結-id-、-className-amp-元素的差別\"><a href=\"#總結-id-、-className-amp-元素的差別\" class=\"headerlink\" title=\"總結 id 、 className &amp; 元素的差別:\"></a>總結 <code>id</code> 、 <code>className</code> &amp; 元素的差別:</h2><ul>\n<li>id: 若有很多相同 id ，<font color=#FF0000>只會選取第一個</font></li>\n<li>className: 會同時選取<font color=#FF0000>所有</font>相同的 className</li>\n<li>元素: 會同時選取<font color=#FF0000>所有</font>相同的元素</li>\n</ul>\n<p>會用到 <code>className</code> 的原因是為了方便選更改多個樣式，可以用在相同的商品列表上，但如果選擇 <code>id</code> 的話就只會更改單一樣式而且是第一個，之後相同 <code>id</code> 的不會更改到</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料:\"></a>參考資料:</h2><p><a href=\"https://codeshiba.teachable.com/courses/1255270/lectures/29521035\">jQuery 幼幼班</a></p>"},{"title":"JavaScript 實作 - 打字遊戲","date":"2021-01-28T16:00:00.000Z","_content":"\n## 功能敘述：\n\n1. 在時間內輸入顯示的單字可以得分。\n2. 依照難度調整獎勵時間。\n3. 時間內未輸入完成會顯示新訊息。\n\n![](https://i.imgur.com/uVuOz1v.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission27)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission27/index.html)\n\n<!--more-->\n\n## 功能需求\n\n1. 進入頁面後隨機產生文字。\n2. 可以直接在輸入框輸入單字(不需要滑鼠點擊輸入框)，輸入正確得一分。\n3. 進入頁面後時間開始倒數，若輸入正確倒數時間會增加。\n4. 時間內沒寫完會顯示時間到的訊息。\n5. 增加的時間可以依照難度調整獎勵時間。\n6. 難度選單可以選擇隱藏或是顯示。\n7. 刷新頁面後難度不會被回復預設值。\n\n## 模板架構\n\n1. button 顯是隱藏難度。\n2. 難度選單。\n3. 顯示隨機產生的文字。\n4. 輸入框。\n5. 顯示時間跟分數。\n\n#### 1. 顯示隱藏難度\n\n```html\n<button id=\"settings-btn\" class=\"settings-btn\">\n  <i class=\"fas fa-cog\"></i>\n</button>\n```\n\n#### 2. 難度選單\n\n```html\n<div id=\"settings\" class=\"settings\">\n  <form id=\"settings-form\">\n    <div>\n      <label for=\"difficulty\">Difficulty</label>\n      <select id=\"difficulty\">\n        <option value=\"easy\">Easy</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"hard\">Hard</option>\n      </select>\n    </div>\n  </form>\n</div>\n```\n\n#### 3. 顯示隨機產生的文字、輸入框、顯示時間跟分數\n\n```html\n<div class=\"container\">\n  <h2>👩‍💻 Speed Typer 👨‍💻</h2>\n  <small>Type the following:</small>\n\n  <h1 id=\"word\"></h1>\n\n  <input\n    type=\"text\"\n    id=\"text\"\n    autocomplete=\"off\"\n    placeholder=\"Type the word here...\"\n  />\n\n  <p class=\"time-container\">Time left: <span id=\"time\">10s</span></p>\n\n  <p class=\"score-container\">Score: <span id=\"score\">0</span></p>\n\n  <div id=\"end-game-container\" class=\"end-game-container\"></div>\n</div>\n```\n\n架構完成圖\n![](https://i.imgur.com/hkQyRRM.png)\n\nCSS 樣式可以依照個人喜好來設定。\n\n## 功能撰寫 ( JavaScript )\n\n### 1. 將 DOM 跟元素做綁定\n\n```javascript\nconst word = document.getElementById('word')\nconst text = document.getElementById('text')\nconst scoreEl = document.getElementById('score')\nconst timeEl = document.getElementById('time')\nconst endgameEl = document.getElementById('end-game-container')\nconst settingsBtn = document.getElementById('settings-btn')\nconst settings = document.getElementById('settings')\nconst settingsForm = document.getElementById('settings-form')\nconst difficultySelect = document.getElementById('difficulty')\n```\n\n### 2. 進入頁面後隨機產生文字。\n\n文字資料可以透過 API 獲取。\n或是像作者直接給陣列值再用 `Math.random`、`Math.floor`、`words.length`的方式隨機抓取一個值。\n\n打 API 要資料的方法有三種 Ajax、axios、fetch，以下用 axios 示範，選用 axios 是因為比較簡單，直接給 API [url](https://random-word-api.herokuapp.com/home) ，再用 `then` 抓取回傳的資料就可以了，如果資料回傳錯誤就會走 `catch` 。\n用 `console` 查看 `response` 的資料如下圖\n![](https://i.imgur.com/4paTkbD.png)\n\n有了這值後再把值賦予到 `randomWord` 變數上，讓其他函示可以取用。\n\n```javascript\n// 用 Axios 打 API 抓取 response 的值\nfunction getRandomWord() {\n  axios\n    .get('https://random-word-api.herokuapp.com/word?number=1')\n    .then((res) => {\n      // console.log(res);\n      randomWord = res.data[0]\n      // console.log(randomWord);\n      word.innerHTML = randomWord\n    })\n    .catch((error) => {\n      console.log('沒抓到單字資料')\n    })\n}\ngetRandomWord()\n```\n\n### 3. 比對輸入的值是否吻合再給予獎勵\n\n`focus()` : 打開視窗就可以直接輸入單字了。\n\n把 `e.target.value` 抓到的值賦予到 `inputText` 變數上，方便跟上面拆分的 `randomWord` 做比對，要注意 `randomWord` 不能用 `cosnt` 、`let`、`var` 宣告，不然會抓不到，比對成功後，分數會加 1，同時給予獎勵增長時間 5 秒。\n\n```javascript\ntext.focus()\n\n// 答對加分，同時把分數綁到 DOM 上\nfunction updateScore() {\n  score++\n  scoreEl.innerHTML = score\n}\n\n// 在輸入框輸入文字同時跟顯示的文字做對比\ntext.addEventListener('input', (e) => {\n  let inputText = e.target.value\n  if (inputText === randomWord) {\n    getRandomWord()\n    updateScore()\n    e.target.value = '' //只能用 e.target.value 來清空值\n\n    time += 5\n\n    updateTime()\n  }\n})\n```\n\n### 4. 時間內沒寫完會顯示時間到的訊息。\n\n輸入文字的同時時間也會開始倒數，倒數的數字要設置停損點 ( clearInterval )，不然會數到負的。\n\n- `setInterval` : 是設定固定時間重複循環的語法。\n\n```javascript\nconst initTime = setInterval(updateTime, 1000)\n\nfunction updateTime() {\n  // 時間開始倒扣\n  time--\n  // 倒扣的時間顯示在 DOM 上\n  timeEl.innerHTML = time + ' s '\n  if (time === 0) {\n    clearInterval(initTime) //少了這個停損點倒數的數字會變成負的\n\n    // 時間到的訊息用字串模板的方式載入\n    endgameEl.innerHTML = `\n    <h1>Time ran out</h1>\n    <p>Your final score is ${score}</p>\n    <button onclick=\"location.reload()\">Reload</button>\n    `\n    endgameEl.style.display = 'flex'\n  }\n}\n```\n\n### 5. 難度選單可以選擇隱藏或是顯示。\n\n用 `toggle` 搭配 css style 就可以了。\n\n```javascript\nsettingsBtn.addEventListener('click', () => {\n  settings.classList.toggle('hide')\n})\n```\n\n### 6. 刷新頁面後難度不會被回復預設值。\n\n要刷新頁面選單的值不會恢復成預設值就會使用到 `localStorage` ，把選擇的難度寫入到瀏覽器裡面。\n\n1. 選擇難度是一個`event`，把選到的難度用 `setItem` 寫到瀏覽器記憶體 `localStorage` 裡面\n2. 再用 `difficulty` 抓取選到的難度同時判斷輸入單字的時間要多還是要少\n3. 到目前為止頁面刷新後難度還是會恢復成預設值，所以要把選單的值寫到 value 裡面\n\n```javascript\n// 1. 選擇難度，把資料寫進瀏覽器記憶體裡面\nsettingsForm.addEventListener('change', (e) => {\n  difficulty = e.target.value\n  localStorage.setItem('difficulty', difficulty)\n})\n\n// 2. 把選到的值賦予到 difficulty 變數裡面，用來判斷難增加的時間\nlet difficulty =\n  localStorage.getItem('difficulty') !== null\n    ? localStorage.getItem('difficulty')\n    : 'medium'\n\n// 3. 這是選完後抓取選單的值，確保頁面刷新後不會恢復成預設值\ndifficultySelect.value =\n  localStorage.getItem('difficulty') !== null\n    ? localStorage.getItem('difficulty')\n    : 'medium'\n```\n\n### 7. 增加的時間可以依照難度調整獎勵時間。\n\n如果難度越高，獎勵時間就越少，反之同理。\n\n```javascript\n// 依照難度調整增加輸入時間\nif (difficulty === 'hard') {\n  time += 2\n} else if (difficulty === 'medium') {\n  time += 3\n} else {\n  time += 5\n}\n```\n\n## 功能撰寫 ( jQuery )\n\n### 1. 進入頁面後隨機產生文字。\n\n上面 JS 是用 Axios 打 API 獲取資料，jQuery 只能用 AJAX 打 API\n本來是打 [RANDOM USER GENERATOR](https://randomuser.me/) 的 API，但發現 username 會有其他國家非英文的名字，所以改成打 [Word](https://random-word-api.herokuapp.com/home) 的 API 獲取單字資料。\n\n- AJAX 起手式 :\n  `url` : 打 API 的網址。\n  `method` : 拿資料的方法。\n  `dataType` : 資料的格式。\n  `success` : 拿到資料後會打要做什麼事。\n\n```javascript\nfunction randomUser() {\n  $.ajax({\n    url: 'https://random-word-api.herokuapp.com/word?number=1',\n    method: 'get',\n    dataType: 'json',\n    success: function (res) {\n      // console.log(res);\n      data = res[0]\n      // console.log(data);\n      $('#word').text(data)\n    },\n  })\n  time--\n  $('#time').val(time)\n}\n```\n\n### 2. 比對輸入的值是否吻合再給予獎勵\n\n給個分數的初始值，把值設定成 number 型式，判斷書入的值跟單字一樣後會重打一次 API 同時刷新時間，輸入正確後會給獎勵分數。\n\n```javascript\nlet score = 0\n$('#text').on('input', function (e) {\n  const textInput = $(this).val()\n  // console.log(textInput);\n  if (textInput === data) {\n    randomUser()\n    updateTime()\n    $('#text').val('')\n    score++\n    $('#score').text(score)\n  }\n})\n```\n\n### 3. 時間內沒寫完會顯示時間到的訊息。\n\n設定時間初始值順便把型別轉成 number。\n把時間寫入 DOM 元素裡面，當時間到未輸入完單字就會顯示新訊息。\n\n```javascript\nlet time = 20\nconst initTime = setInterval(updateTime, 1000)\n\nfunction updateTime() {\n  time--\n  $('#time').text(time + ' s ')\n  if (time === 0) {\n    clearInterval(initTime)\n    $('#end-game-container').html(`\n    <h1>Time ran out</h1>\n    <p>Your final score is ${score}</p>\n    <button onclick=\"location.reload()\">Reload</button>\n    `)\n    $('#end-game-container').css('display', 'flex')\n  }\n}\n```\n\n### 4. 難度選單可以選擇隱藏或是顯示。\n\n用 `toggleClass` 可以顯示或是隱藏某個元素。\n\n```javascript\n$('#settings-btn').on('click', () => {\n  $('#settings').toggleClass('hide')\n})\n```\n\n### 5. 刷新頁面後難度不會被回復預設值。\n\n難度選完後不要恢復成預設值的方法就是把資料寫進瀏覽器記憶體裡面，寫入後每次更換難度都會刷新一次頁面。\n\n```javascript\n$('#difficulty').change(function () {\n  difficulty = $('#difficulty').val()\n  console.log(difficulty)\n  localStorage.setItem('difficulty', difficulty)\n  location.reload()\n})\n\n$('#difficulty').val(\n  localStorage.getItem('difficulty') !== null\n    ? localStorage.getItem('difficulty')\n    : 'medium'\n)\n```\n\n## 參考資料\n\n[Axios](https://github.com/axios/axios)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview)\n[談談 JavaScript 的 setTimeout 與 setInterval](https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/)\n[RANDOM USER GENERATOR](https://randomuser.me/)\n","source":"_posts/2020/typingGmae.md","raw":"---\ntitle: JavaScript 實作 - 打字遊戲\ndate: 2021/01/29\ntags:\n  - JavaScript\n  - 作品集\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n## 功能敘述：\n\n1. 在時間內輸入顯示的單字可以得分。\n2. 依照難度調整獎勵時間。\n3. 時間內未輸入完成會顯示新訊息。\n\n![](https://i.imgur.com/uVuOz1v.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission27)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission27/index.html)\n\n<!--more-->\n\n## 功能需求\n\n1. 進入頁面後隨機產生文字。\n2. 可以直接在輸入框輸入單字(不需要滑鼠點擊輸入框)，輸入正確得一分。\n3. 進入頁面後時間開始倒數，若輸入正確倒數時間會增加。\n4. 時間內沒寫完會顯示時間到的訊息。\n5. 增加的時間可以依照難度調整獎勵時間。\n6. 難度選單可以選擇隱藏或是顯示。\n7. 刷新頁面後難度不會被回復預設值。\n\n## 模板架構\n\n1. button 顯是隱藏難度。\n2. 難度選單。\n3. 顯示隨機產生的文字。\n4. 輸入框。\n5. 顯示時間跟分數。\n\n#### 1. 顯示隱藏難度\n\n```html\n<button id=\"settings-btn\" class=\"settings-btn\">\n  <i class=\"fas fa-cog\"></i>\n</button>\n```\n\n#### 2. 難度選單\n\n```html\n<div id=\"settings\" class=\"settings\">\n  <form id=\"settings-form\">\n    <div>\n      <label for=\"difficulty\">Difficulty</label>\n      <select id=\"difficulty\">\n        <option value=\"easy\">Easy</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"hard\">Hard</option>\n      </select>\n    </div>\n  </form>\n</div>\n```\n\n#### 3. 顯示隨機產生的文字、輸入框、顯示時間跟分數\n\n```html\n<div class=\"container\">\n  <h2>👩‍💻 Speed Typer 👨‍💻</h2>\n  <small>Type the following:</small>\n\n  <h1 id=\"word\"></h1>\n\n  <input\n    type=\"text\"\n    id=\"text\"\n    autocomplete=\"off\"\n    placeholder=\"Type the word here...\"\n  />\n\n  <p class=\"time-container\">Time left: <span id=\"time\">10s</span></p>\n\n  <p class=\"score-container\">Score: <span id=\"score\">0</span></p>\n\n  <div id=\"end-game-container\" class=\"end-game-container\"></div>\n</div>\n```\n\n架構完成圖\n![](https://i.imgur.com/hkQyRRM.png)\n\nCSS 樣式可以依照個人喜好來設定。\n\n## 功能撰寫 ( JavaScript )\n\n### 1. 將 DOM 跟元素做綁定\n\n```javascript\nconst word = document.getElementById('word')\nconst text = document.getElementById('text')\nconst scoreEl = document.getElementById('score')\nconst timeEl = document.getElementById('time')\nconst endgameEl = document.getElementById('end-game-container')\nconst settingsBtn = document.getElementById('settings-btn')\nconst settings = document.getElementById('settings')\nconst settingsForm = document.getElementById('settings-form')\nconst difficultySelect = document.getElementById('difficulty')\n```\n\n### 2. 進入頁面後隨機產生文字。\n\n文字資料可以透過 API 獲取。\n或是像作者直接給陣列值再用 `Math.random`、`Math.floor`、`words.length`的方式隨機抓取一個值。\n\n打 API 要資料的方法有三種 Ajax、axios、fetch，以下用 axios 示範，選用 axios 是因為比較簡單，直接給 API [url](https://random-word-api.herokuapp.com/home) ，再用 `then` 抓取回傳的資料就可以了，如果資料回傳錯誤就會走 `catch` 。\n用 `console` 查看 `response` 的資料如下圖\n![](https://i.imgur.com/4paTkbD.png)\n\n有了這值後再把值賦予到 `randomWord` 變數上，讓其他函示可以取用。\n\n```javascript\n// 用 Axios 打 API 抓取 response 的值\nfunction getRandomWord() {\n  axios\n    .get('https://random-word-api.herokuapp.com/word?number=1')\n    .then((res) => {\n      // console.log(res);\n      randomWord = res.data[0]\n      // console.log(randomWord);\n      word.innerHTML = randomWord\n    })\n    .catch((error) => {\n      console.log('沒抓到單字資料')\n    })\n}\ngetRandomWord()\n```\n\n### 3. 比對輸入的值是否吻合再給予獎勵\n\n`focus()` : 打開視窗就可以直接輸入單字了。\n\n把 `e.target.value` 抓到的值賦予到 `inputText` 變數上，方便跟上面拆分的 `randomWord` 做比對，要注意 `randomWord` 不能用 `cosnt` 、`let`、`var` 宣告，不然會抓不到，比對成功後，分數會加 1，同時給予獎勵增長時間 5 秒。\n\n```javascript\ntext.focus()\n\n// 答對加分，同時把分數綁到 DOM 上\nfunction updateScore() {\n  score++\n  scoreEl.innerHTML = score\n}\n\n// 在輸入框輸入文字同時跟顯示的文字做對比\ntext.addEventListener('input', (e) => {\n  let inputText = e.target.value\n  if (inputText === randomWord) {\n    getRandomWord()\n    updateScore()\n    e.target.value = '' //只能用 e.target.value 來清空值\n\n    time += 5\n\n    updateTime()\n  }\n})\n```\n\n### 4. 時間內沒寫完會顯示時間到的訊息。\n\n輸入文字的同時時間也會開始倒數，倒數的數字要設置停損點 ( clearInterval )，不然會數到負的。\n\n- `setInterval` : 是設定固定時間重複循環的語法。\n\n```javascript\nconst initTime = setInterval(updateTime, 1000)\n\nfunction updateTime() {\n  // 時間開始倒扣\n  time--\n  // 倒扣的時間顯示在 DOM 上\n  timeEl.innerHTML = time + ' s '\n  if (time === 0) {\n    clearInterval(initTime) //少了這個停損點倒數的數字會變成負的\n\n    // 時間到的訊息用字串模板的方式載入\n    endgameEl.innerHTML = `\n    <h1>Time ran out</h1>\n    <p>Your final score is ${score}</p>\n    <button onclick=\"location.reload()\">Reload</button>\n    `\n    endgameEl.style.display = 'flex'\n  }\n}\n```\n\n### 5. 難度選單可以選擇隱藏或是顯示。\n\n用 `toggle` 搭配 css style 就可以了。\n\n```javascript\nsettingsBtn.addEventListener('click', () => {\n  settings.classList.toggle('hide')\n})\n```\n\n### 6. 刷新頁面後難度不會被回復預設值。\n\n要刷新頁面選單的值不會恢復成預設值就會使用到 `localStorage` ，把選擇的難度寫入到瀏覽器裡面。\n\n1. 選擇難度是一個`event`，把選到的難度用 `setItem` 寫到瀏覽器記憶體 `localStorage` 裡面\n2. 再用 `difficulty` 抓取選到的難度同時判斷輸入單字的時間要多還是要少\n3. 到目前為止頁面刷新後難度還是會恢復成預設值，所以要把選單的值寫到 value 裡面\n\n```javascript\n// 1. 選擇難度，把資料寫進瀏覽器記憶體裡面\nsettingsForm.addEventListener('change', (e) => {\n  difficulty = e.target.value\n  localStorage.setItem('difficulty', difficulty)\n})\n\n// 2. 把選到的值賦予到 difficulty 變數裡面，用來判斷難增加的時間\nlet difficulty =\n  localStorage.getItem('difficulty') !== null\n    ? localStorage.getItem('difficulty')\n    : 'medium'\n\n// 3. 這是選完後抓取選單的值，確保頁面刷新後不會恢復成預設值\ndifficultySelect.value =\n  localStorage.getItem('difficulty') !== null\n    ? localStorage.getItem('difficulty')\n    : 'medium'\n```\n\n### 7. 增加的時間可以依照難度調整獎勵時間。\n\n如果難度越高，獎勵時間就越少，反之同理。\n\n```javascript\n// 依照難度調整增加輸入時間\nif (difficulty === 'hard') {\n  time += 2\n} else if (difficulty === 'medium') {\n  time += 3\n} else {\n  time += 5\n}\n```\n\n## 功能撰寫 ( jQuery )\n\n### 1. 進入頁面後隨機產生文字。\n\n上面 JS 是用 Axios 打 API 獲取資料，jQuery 只能用 AJAX 打 API\n本來是打 [RANDOM USER GENERATOR](https://randomuser.me/) 的 API，但發現 username 會有其他國家非英文的名字，所以改成打 [Word](https://random-word-api.herokuapp.com/home) 的 API 獲取單字資料。\n\n- AJAX 起手式 :\n  `url` : 打 API 的網址。\n  `method` : 拿資料的方法。\n  `dataType` : 資料的格式。\n  `success` : 拿到資料後會打要做什麼事。\n\n```javascript\nfunction randomUser() {\n  $.ajax({\n    url: 'https://random-word-api.herokuapp.com/word?number=1',\n    method: 'get',\n    dataType: 'json',\n    success: function (res) {\n      // console.log(res);\n      data = res[0]\n      // console.log(data);\n      $('#word').text(data)\n    },\n  })\n  time--\n  $('#time').val(time)\n}\n```\n\n### 2. 比對輸入的值是否吻合再給予獎勵\n\n給個分數的初始值，把值設定成 number 型式，判斷書入的值跟單字一樣後會重打一次 API 同時刷新時間，輸入正確後會給獎勵分數。\n\n```javascript\nlet score = 0\n$('#text').on('input', function (e) {\n  const textInput = $(this).val()\n  // console.log(textInput);\n  if (textInput === data) {\n    randomUser()\n    updateTime()\n    $('#text').val('')\n    score++\n    $('#score').text(score)\n  }\n})\n```\n\n### 3. 時間內沒寫完會顯示時間到的訊息。\n\n設定時間初始值順便把型別轉成 number。\n把時間寫入 DOM 元素裡面，當時間到未輸入完單字就會顯示新訊息。\n\n```javascript\nlet time = 20\nconst initTime = setInterval(updateTime, 1000)\n\nfunction updateTime() {\n  time--\n  $('#time').text(time + ' s ')\n  if (time === 0) {\n    clearInterval(initTime)\n    $('#end-game-container').html(`\n    <h1>Time ran out</h1>\n    <p>Your final score is ${score}</p>\n    <button onclick=\"location.reload()\">Reload</button>\n    `)\n    $('#end-game-container').css('display', 'flex')\n  }\n}\n```\n\n### 4. 難度選單可以選擇隱藏或是顯示。\n\n用 `toggleClass` 可以顯示或是隱藏某個元素。\n\n```javascript\n$('#settings-btn').on('click', () => {\n  $('#settings').toggleClass('hide')\n})\n```\n\n### 5. 刷新頁面後難度不會被回復預設值。\n\n難度選完後不要恢復成預設值的方法就是把資料寫進瀏覽器記憶體裡面，寫入後每次更換難度都會刷新一次頁面。\n\n```javascript\n$('#difficulty').change(function () {\n  difficulty = $('#difficulty').val()\n  console.log(difficulty)\n  localStorage.setItem('difficulty', difficulty)\n  location.reload()\n})\n\n$('#difficulty').val(\n  localStorage.getItem('difficulty') !== null\n    ? localStorage.getItem('difficulty')\n    : 'medium'\n)\n```\n\n## 參考資料\n\n[Axios](https://github.com/axios/axios)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview)\n[談談 JavaScript 的 setTimeout 與 setInterval](https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/)\n[RANDOM USER GENERATOR](https://randomuser.me/)\n","slug":"typingGmae","published":1,"updated":"2021-03-26T16:13:10.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lq6001wg0tr6nq2c4g7","content":"<html><head></head><body><h2 id=\"功能敘述：\"><a href=\"#功能敘述：\" class=\"headerlink\" title=\"功能敘述：\"></a>功能敘述：</h2><ol>\n<li>在時間內輸入顯示的單字可以得分。</li>\n<li>依照難度調整獎勵時間。</li>\n<li>時間內未輸入完成會顯示新訊息。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/uVuOz1v.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission27\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission27/index.html\">Demo</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"功能需求\"><a href=\"#功能需求\" class=\"headerlink\" title=\"功能需求\"></a>功能需求</h2><ol>\n<li>進入頁面後隨機產生文字。</li>\n<li>可以直接在輸入框輸入單字(不需要滑鼠點擊輸入框)，輸入正確得一分。</li>\n<li>進入頁面後時間開始倒數，若輸入正確倒數時間會增加。</li>\n<li>時間內沒寫完會顯示時間到的訊息。</li>\n<li>增加的時間可以依照難度調整獎勵時間。</li>\n<li>難度選單可以選擇隱藏或是顯示。</li>\n<li>刷新頁面後難度不會被回復預設值。</li>\n</ol>\n<h2 id=\"模板架構\"><a href=\"#模板架構\" class=\"headerlink\" title=\"模板架構\"></a>模板架構</h2><ol>\n<li>button 顯是隱藏難度。</li>\n<li>難度選單。</li>\n<li>顯示隨機產生的文字。</li>\n<li>輸入框。</li>\n<li>顯示時間跟分數。</li>\n</ol>\n<h4 id=\"1-顯示隱藏難度\"><a href=\"#1-顯示隱藏難度\" class=\"headerlink\" title=\"1. 顯示隱藏難度\"></a>1. 顯示隱藏難度</h4><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"settings-btn\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"settings-btn\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fas fa-cog\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-難度選單\"><a href=\"#2-難度選單\" class=\"headerlink\" title=\"2. 難度選單\"></a>2. 難度選單</h4><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"settings\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"settings\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"settings-form\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"difficulty\"</span>&gt;</span>Difficulty<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"difficulty\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"easy\"</span>&gt;</span>Easy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"medium\"</span>&gt;</span>Medium<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"hard\"</span>&gt;</span>Hard<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"3-顯示隨機產生的文字、輸入框、顯示時間跟分數\"><a href=\"#3-顯示隨機產生的文字、輸入框、顯示時間跟分數\" class=\"headerlink\" title=\"3. 顯示隨機產生的文字、輸入框、顯示時間跟分數\"></a>3. 顯示隨機產生的文字、輸入框、顯示時間跟分數</h4><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>👩‍💻 Speed Typer 👨‍💻<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span>&gt;</span>Type the following:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"word\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">    <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">    <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">    <span class=\"hljs-attr\">autocomplete</span>=<span class=\"hljs-string\">\"off\"</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">    <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Type the word here...\"</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">  /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"time-container\"</span>&gt;</span>Time left: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"time\"</span>&gt;</span>10s<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"score-container\"</span>&gt;</span>Score: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"score\"</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"end-game-container\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"end-game-container\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>架構完成圖<br><img src=\"https://i.imgur.com/hkQyRRM.png\"></p>\n<p>CSS 樣式可以依照個人喜好來設定。</p>\n<h2 id=\"功能撰寫-JavaScript\"><a href=\"#功能撰寫-JavaScript\" class=\"headerlink\" title=\"功能撰寫 ( JavaScript )\"></a>功能撰寫 ( JavaScript )</h2><h3 id=\"1-將-DOM-跟元素做綁定\"><a href=\"#1-將-DOM-跟元素做綁定\" class=\"headerlink\" title=\"1. 將 DOM 跟元素做綁定\"></a>1. 將 DOM 跟元素做綁定</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> word = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'word'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'text'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> scoreEl = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'score'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> timeEl = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'time'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> endgameEl = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'end-game-container'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> settingsBtn = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'settings-btn'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> settings = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'settings'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> settingsForm = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'settings-form'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> difficultySelect = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'difficulty'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-進入頁面後隨機產生文字。\"><a href=\"#2-進入頁面後隨機產生文字。\" class=\"headerlink\" title=\"2. 進入頁面後隨機產生文字。\"></a>2. 進入頁面後隨機產生文字。</h3><p>文字資料可以透過 API 獲取。<br>或是像作者直接給陣列值再用 <code>Math.random</code>、<code>Math.floor</code>、<code>words.length</code>的方式隨機抓取一個值。</p>\n<p>打 API 要資料的方法有三種 Ajax、axios、fetch，以下用 axios 示範，選用 axios 是因為比較簡單，直接給 API <a href=\"https://random-word-api.herokuapp.com/home\">url</a> ，再用 <code>then</code> 抓取回傳的資料就可以了，如果資料回傳錯誤就會走 <code>catch</code> 。<br>用 <code>console</code> 查看 <code>response</code> 的資料如下圖<br><img src=\"https://i.imgur.com/4paTkbD.png\"></p>\n<p>有了這值後再把值賦予到 <code>randomWord</code> 變數上，讓其他函示可以取用。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 用 Axios 打 API 抓取 response 的值</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRandomWord</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  axios</span><br><span class=\"line\">    .get(<span class=\"hljs-string\">'https://random-word-api.herokuapp.com/word?number=1'</span>)</span><br><span class=\"line\">    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-comment\">// console.log(res);</span></span><br><span class=\"line\">      randomWord = res.data[<span class=\"hljs-number\">0</span>]</span><br><span class=\"line\">      <span class=\"hljs-comment\">// console.log(randomWord);</span></span><br><span class=\"line\">      word.innerHTML = randomWord</span><br><span class=\"line\">    })</span><br><span class=\"line\">    .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'沒抓到單字資料'</span>)</span><br><span class=\"line\">    })</span><br><span class=\"line\">}</span><br><span class=\"line\">getRandomWord()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-比對輸入的值是否吻合再給予獎勵\"><a href=\"#3-比對輸入的值是否吻合再給予獎勵\" class=\"headerlink\" title=\"3. 比對輸入的值是否吻合再給予獎勵\"></a>3. 比對輸入的值是否吻合再給予獎勵</h3><p><code>focus()</code> : 打開視窗就可以直接輸入單字了。</p>\n<p>把 <code>e.target.value</code> 抓到的值賦予到 <code>inputText</code> 變數上，方便跟上面拆分的 <code>randomWord</code> 做比對，要注意 <code>randomWord</code> 不能用 <code>cosnt</code> 、<code>let</code>、<code>var</code> 宣告，不然會抓不到，比對成功後，分數會加 1，同時給予獎勵增長時間 5 秒。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text.focus()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 答對加分，同時把分數綁到 DOM 上</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateScore</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  score++</span><br><span class=\"line\">  scoreEl.innerHTML = score</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 在輸入框輸入文字同時跟顯示的文字做對比</span></span><br><span class=\"line\">text.addEventListener(<span class=\"hljs-string\">'input'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> inputText = e.target.value</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (inputText === randomWord) {</span><br><span class=\"line\">    getRandomWord()</span><br><span class=\"line\">    updateScore()</span><br><span class=\"line\">    e.target.value = <span class=\"hljs-string\">''</span> <span class=\"hljs-comment\">//只能用 e.target.value 來清空值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    time += <span class=\"hljs-number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    updateTime()</span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-時間內沒寫完會顯示時間到的訊息。\"><a href=\"#4-時間內沒寫完會顯示時間到的訊息。\" class=\"headerlink\" title=\"4. 時間內沒寫完會顯示時間到的訊息。\"></a>4. 時間內沒寫完會顯示時間到的訊息。</h3><p>輸入文字的同時時間也會開始倒數，倒數的數字要設置停損點 ( clearInterval )，不然會數到負的。</p>\n<ul>\n<li><code>setInterval</code> : 是設定固定時間重複循環的語法。</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> initTime = <span class=\"hljs-built_in\">setInterval</span>(updateTime, <span class=\"hljs-number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateTime</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 時間開始倒扣</span></span><br><span class=\"line\">  time--</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 倒扣的時間顯示在 DOM 上</span></span><br><span class=\"line\">  timeEl.innerHTML = time + <span class=\"hljs-string\">' s '</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (time === <span class=\"hljs-number\">0</span>) {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">clearInterval</span>(initTime) <span class=\"hljs-comment\">//少了這個停損點倒數的數字會變成負的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 時間到的訊息用字串模板的方式載入</span></span><br><span class=\"line\">    endgameEl.innerHTML = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h1&gt;Time ran out&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;Your final score is <span class=\"hljs-subst\">${score}</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;button onclick=\"location.reload()\"&gt;Reload&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    `</span></span><br><span class=\"line\">    endgameEl.style.display = <span class=\"hljs-string\">'flex'</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"5-難度選單可以選擇隱藏或是顯示。\"><a href=\"#5-難度選單可以選擇隱藏或是顯示。\" class=\"headerlink\" title=\"5. 難度選單可以選擇隱藏或是顯示。\"></a>5. 難度選單可以選擇隱藏或是顯示。</h3><p>用 <code>toggle</code> 搭配 css style 就可以了。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">settingsBtn.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  settings.classList.toggle(<span class=\"hljs-string\">'hide'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"6-刷新頁面後難度不會被回復預設值。\"><a href=\"#6-刷新頁面後難度不會被回復預設值。\" class=\"headerlink\" title=\"6. 刷新頁面後難度不會被回復預設值。\"></a>6. 刷新頁面後難度不會被回復預設值。</h3><p>要刷新頁面選單的值不會恢復成預設值就會使用到 <code>localStorage</code> ，把選擇的難度寫入到瀏覽器裡面。</p>\n<ol>\n<li>選擇難度是一個<code>event</code>，把選到的難度用 <code>setItem</code> 寫到瀏覽器記憶體 <code>localStorage</code> 裡面</li>\n<li>再用 <code>difficulty</code> 抓取選到的難度同時判斷輸入單字的時間要多還是要少</li>\n<li>到目前為止頁面刷新後難度還是會恢復成預設值，所以要把選單的值寫到 value 裡面</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 1. 選擇難度，把資料寫進瀏覽器記憶體裡面</span></span><br><span class=\"line\">settingsForm.addEventListener(<span class=\"hljs-string\">'change'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {</span><br><span class=\"line\">  difficulty = e.target.value</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'difficulty'</span>, difficulty)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 2. 把選到的值賦予到 difficulty 變數裡面，用來判斷難增加的時間</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> difficulty =</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'difficulty'</span>) !== <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">    ? <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'difficulty'</span>)</span><br><span class=\"line\">    : <span class=\"hljs-string\">'medium'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 3. 這是選完後抓取選單的值，確保頁面刷新後不會恢復成預設值</span></span><br><span class=\"line\">difficultySelect.value =</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'difficulty'</span>) !== <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">    ? <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'difficulty'</span>)</span><br><span class=\"line\">    : <span class=\"hljs-string\">'medium'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"7-增加的時間可以依照難度調整獎勵時間。\"><a href=\"#7-增加的時間可以依照難度調整獎勵時間。\" class=\"headerlink\" title=\"7. 增加的時間可以依照難度調整獎勵時間。\"></a>7. 增加的時間可以依照難度調整獎勵時間。</h3><p>如果難度越高，獎勵時間就越少，反之同理。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 依照難度調整增加輸入時間</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (difficulty === <span class=\"hljs-string\">'hard'</span>) {</span><br><span class=\"line\">  time += <span class=\"hljs-number\">2</span></span><br><span class=\"line\">} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (difficulty === <span class=\"hljs-string\">'medium'</span>) {</span><br><span class=\"line\">  time += <span class=\"hljs-number\">3</span></span><br><span class=\"line\">} <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">  time += <span class=\"hljs-number\">5</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"功能撰寫-jQuery\"><a href=\"#功能撰寫-jQuery\" class=\"headerlink\" title=\"功能撰寫 ( jQuery )\"></a>功能撰寫 ( jQuery )</h2><h3 id=\"1-進入頁面後隨機產生文字。\"><a href=\"#1-進入頁面後隨機產生文字。\" class=\"headerlink\" title=\"1. 進入頁面後隨機產生文字。\"></a>1. 進入頁面後隨機產生文字。</h3><p>上面 JS 是用 Axios 打 API 獲取資料，jQuery 只能用 AJAX 打 API<br>本來是打 <a href=\"https://randomuser.me/\">RANDOM USER GENERATOR</a> 的 API，但發現 username 會有其他國家非英文的名字，所以改成打 <a href=\"https://random-word-api.herokuapp.com/home\">Word</a> 的 API 獲取單字資料。</p>\n<ul>\n<li>AJAX 起手式 :<br><code>url</code> : 打 API 的網址。<br><code>method</code> : 拿資料的方法。<br><code>dataType</code> : 資料的格式。<br><code>success</code> : 拿到資料後會打要做什麼事。</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">randomUser</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  $.ajax({</span><br><span class=\"line\">    url: <span class=\"hljs-string\">'https://random-word-api.herokuapp.com/word?number=1'</span>,</span><br><span class=\"line\">    method: <span class=\"hljs-string\">'get'</span>,</span><br><span class=\"line\">    dataType: <span class=\"hljs-string\">'json'</span>,</span><br><span class=\"line\">    success: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{</span><br><span class=\"line\">      <span class=\"hljs-comment\">// console.log(res);</span></span><br><span class=\"line\">      data = res[<span class=\"hljs-number\">0</span>]</span><br><span class=\"line\">      <span class=\"hljs-comment\">// console.log(data);</span></span><br><span class=\"line\">      $(<span class=\"hljs-string\">'#word'</span>).text(data)</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\">  time--</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#time'</span>).val(time)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-比對輸入的值是否吻合再給予獎勵\"><a href=\"#2-比對輸入的值是否吻合再給予獎勵\" class=\"headerlink\" title=\"2. 比對輸入的值是否吻合再給予獎勵\"></a>2. 比對輸入的值是否吻合再給予獎勵</h3><p>給個分數的初始值，把值設定成 number 型式，判斷書入的值跟單字一樣後會重打一次 API 同時刷新時間，輸入正確後會給獎勵分數。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> score = <span class=\"hljs-number\">0</span></span><br><span class=\"line\">$(<span class=\"hljs-string\">'#text'</span>).on(<span class=\"hljs-string\">'input'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> textInput = $(<span class=\"hljs-built_in\">this</span>).val()</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(textInput);</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (textInput === data) {</span><br><span class=\"line\">    randomUser()</span><br><span class=\"line\">    updateTime()</span><br><span class=\"line\">    $(<span class=\"hljs-string\">'#text'</span>).val(<span class=\"hljs-string\">''</span>)</span><br><span class=\"line\">    score++</span><br><span class=\"line\">    $(<span class=\"hljs-string\">'#score'</span>).text(score)</span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-時間內沒寫完會顯示時間到的訊息。\"><a href=\"#3-時間內沒寫完會顯示時間到的訊息。\" class=\"headerlink\" title=\"3. 時間內沒寫完會顯示時間到的訊息。\"></a>3. 時間內沒寫完會顯示時間到的訊息。</h3><p>設定時間初始值順便把型別轉成 number。<br>把時間寫入 DOM 元素裡面，當時間到未輸入完單字就會顯示新訊息。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> time = <span class=\"hljs-number\">20</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> initTime = <span class=\"hljs-built_in\">setInterval</span>(updateTime, <span class=\"hljs-number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateTime</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  time--</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#time'</span>).text(time + <span class=\"hljs-string\">' s '</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (time === <span class=\"hljs-number\">0</span>) {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">clearInterval</span>(initTime)</span><br><span class=\"line\">    $(<span class=\"hljs-string\">'#end-game-container'</span>).html(<span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;h1&gt;Time ran out&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;p&gt;Your final score is <span class=\"hljs-subst\">${score}</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;button onclick=\"location.reload()\"&gt;Reload&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    `</span>)</span><br><span class=\"line\">    $(<span class=\"hljs-string\">'#end-game-container'</span>).css(<span class=\"hljs-string\">'display'</span>, <span class=\"hljs-string\">'flex'</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-難度選單可以選擇隱藏或是顯示。\"><a href=\"#4-難度選單可以選擇隱藏或是顯示。\" class=\"headerlink\" title=\"4. 難度選單可以選擇隱藏或是顯示。\"></a>4. 難度選單可以選擇隱藏或是顯示。</h3><p>用 <code>toggleClass</code> 可以顯示或是隱藏某個元素。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'#settings-btn'</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\">() =&gt;</span> {</span><br><span class=\"line\">  $(<span class=\"hljs-string\">'#settings'</span>).toggleClass(<span class=\"hljs-string\">'hide'</span>)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"5-刷新頁面後難度不會被回復預設值。\"><a href=\"#5-刷新頁面後難度不會被回復預設值。\" class=\"headerlink\" title=\"5. 刷新頁面後難度不會被回復預設值。\"></a>5. 刷新頁面後難度不會被回復預設值。</h3><p>難度選完後不要恢復成預設值的方法就是把資料寫進瀏覽器記憶體裡面，寫入後每次更換難度都會刷新一次頁面。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"hljs-string\">'#difficulty'</span>).change(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  difficulty = $(<span class=\"hljs-string\">'#difficulty'</span>).val()</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(difficulty)</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'difficulty'</span>, difficulty)</span><br><span class=\"line\">  location.reload()</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"hljs-string\">'#difficulty'</span>).val(</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'difficulty'</span>) !== <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">    ? <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'difficulty'</span>)</span><br><span class=\"line\">    : <span class=\"hljs-string\">'medium'</span></span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://github.com/axios/axios\">Axios</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview\">20 Web Projects With Vanilla JavaScript</a><br><a href=\"https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/\">談談 JavaScript 的 setTimeout 與 setInterval</a><br><a href=\"https://randomuser.me/\">RANDOM USER GENERATOR</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"作品集","path":"tags/作品集/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><h2 id=\"功能敘述：\"><a href=\"#功能敘述：\" class=\"headerlink\" title=\"功能敘述：\"></a>功能敘述：</h2><ol>\n<li>在時間內輸入顯示的單字可以得分。</li>\n<li>依照難度調整獎勵時間。</li>\n<li>時間內未輸入完成會顯示新訊息。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/uVuOz1v.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission27\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission27/index.html\">Demo</a></p></body></html>","more":"<h2 id=\"功能需求\"><a href=\"#功能需求\" class=\"headerlink\" title=\"功能需求\"></a>功能需求</h2><ol>\n<li>進入頁面後隨機產生文字。</li>\n<li>可以直接在輸入框輸入單字(不需要滑鼠點擊輸入框)，輸入正確得一分。</li>\n<li>進入頁面後時間開始倒數，若輸入正確倒數時間會增加。</li>\n<li>時間內沒寫完會顯示時間到的訊息。</li>\n<li>增加的時間可以依照難度調整獎勵時間。</li>\n<li>難度選單可以選擇隱藏或是顯示。</li>\n<li>刷新頁面後難度不會被回復預設值。</li>\n</ol>\n<h2 id=\"模板架構\"><a href=\"#模板架構\" class=\"headerlink\" title=\"模板架構\"></a>模板架構</h2><ol>\n<li>button 顯是隱藏難度。</li>\n<li>難度選單。</li>\n<li>顯示隨機產生的文字。</li>\n<li>輸入框。</li>\n<li>顯示時間跟分數。</li>\n</ol>\n<h4 id=\"1-顯示隱藏難度\"><a href=\"#1-顯示隱藏難度\" class=\"headerlink\" title=\"1. 顯示隱藏難度\"></a>1. 顯示隱藏難度</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;settings-btn&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;settings-btn&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fas fa-cog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-難度選單\"><a href=\"#2-難度選單\" class=\"headerlink\" title=\"2. 難度選單\"></a>2. 難度選單</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;settings&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;settings&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;settings-form&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;difficulty&quot;</span>&gt;</span>Difficulty<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;difficulty&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;easy&quot;</span>&gt;</span>Easy<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;medium&quot;</span>&gt;</span>Medium<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hard&quot;</span>&gt;</span>Hard<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-顯示隨機產生的文字、輸入框、顯示時間跟分數\"><a href=\"#3-顯示隨機產生的文字、輸入框、顯示時間跟分數\" class=\"headerlink\" title=\"3. 顯示隨機產生的文字、輸入框、顯示時間跟分數\"></a>3. 顯示隨機產生的文字、輸入框、顯示時間跟分數</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>👩‍💻 Speed Typer 👨‍💻<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>Type the following:<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;word&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Type the word here...&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;time-container&quot;</span>&gt;</span>Time left: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;time&quot;</span>&gt;</span>10s<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;score-container&quot;</span>&gt;</span>Score: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;score&quot;</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;end-game-container&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;end-game-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>架構完成圖<br><img src=\"https://i.imgur.com/hkQyRRM.png\"></p>\n<p>CSS 樣式可以依照個人喜好來設定。</p>\n<h2 id=\"功能撰寫-JavaScript\"><a href=\"#功能撰寫-JavaScript\" class=\"headerlink\" title=\"功能撰寫 ( JavaScript )\"></a>功能撰寫 ( JavaScript )</h2><h3 id=\"1-將-DOM-跟元素做綁定\"><a href=\"#1-將-DOM-跟元素做綁定\" class=\"headerlink\" title=\"1. 將 DOM 跟元素做綁定\"></a>1. 將 DOM 跟元素做綁定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> word = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;word&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;text&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> scoreEl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;score&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> timeEl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;time&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> endgameEl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;end-game-container&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> settingsBtn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;settings-btn&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> settings = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;settings&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> settingsForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;settings-form&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> difficultySelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;difficulty&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-進入頁面後隨機產生文字。\"><a href=\"#2-進入頁面後隨機產生文字。\" class=\"headerlink\" title=\"2. 進入頁面後隨機產生文字。\"></a>2. 進入頁面後隨機產生文字。</h3><p>文字資料可以透過 API 獲取。<br>或是像作者直接給陣列值再用 <code>Math.random</code>、<code>Math.floor</code>、<code>words.length</code>的方式隨機抓取一個值。</p>\n<p>打 API 要資料的方法有三種 Ajax、axios、fetch，以下用 axios 示範，選用 axios 是因為比較簡單，直接給 API <a href=\"https://random-word-api.herokuapp.com/home\">url</a> ，再用 <code>then</code> 抓取回傳的資料就可以了，如果資料回傳錯誤就會走 <code>catch</code> 。<br>用 <code>console</code> 查看 <code>response</code> 的資料如下圖<br><img src=\"https://i.imgur.com/4paTkbD.png\"></p>\n<p>有了這值後再把值賦予到 <code>randomWord</code> 變數上，讓其他函示可以取用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用 Axios 打 API 抓取 response 的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandomWord</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  axios</span><br><span class=\"line\">    .get(<span class=\"string\">&#x27;https://random-word-api.herokuapp.com/word?number=1&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(res);</span></span><br><span class=\"line\">      randomWord = res.data[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"comment\">// console.log(randomWord);</span></span><br><span class=\"line\">      word.innerHTML = randomWord</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;沒抓到單字資料&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getRandomWord()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-比對輸入的值是否吻合再給予獎勵\"><a href=\"#3-比對輸入的值是否吻合再給予獎勵\" class=\"headerlink\" title=\"3. 比對輸入的值是否吻合再給予獎勵\"></a>3. 比對輸入的值是否吻合再給予獎勵</h3><p><code>focus()</code> : 打開視窗就可以直接輸入單字了。</p>\n<p>把 <code>e.target.value</code> 抓到的值賦予到 <code>inputText</code> 變數上，方便跟上面拆分的 <code>randomWord</code> 做比對，要注意 <code>randomWord</code> 不能用 <code>cosnt</code> 、<code>let</code>、<code>var</code> 宣告，不然會抓不到，比對成功後，分數會加 1，同時給予獎勵增長時間 5 秒。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text.focus()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 答對加分，同時把分數綁到 DOM 上</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateScore</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  score++</span><br><span class=\"line\">  scoreEl.innerHTML = score</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在輸入框輸入文字同時跟顯示的文字做對比</span></span><br><span class=\"line\">text.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> inputText = e.target.value</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (inputText === randomWord) &#123;</span><br><span class=\"line\">    getRandomWord()</span><br><span class=\"line\">    updateScore()</span><br><span class=\"line\">    e.target.value = <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">//只能用 e.target.value 來清空值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    time += <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    updateTime()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-時間內沒寫完會顯示時間到的訊息。\"><a href=\"#4-時間內沒寫完會顯示時間到的訊息。\" class=\"headerlink\" title=\"4. 時間內沒寫完會顯示時間到的訊息。\"></a>4. 時間內沒寫完會顯示時間到的訊息。</h3><p>輸入文字的同時時間也會開始倒數，倒數的數字要設置停損點 ( clearInterval )，不然會數到負的。</p>\n<ul>\n<li><code>setInterval</code> : 是設定固定時間重複循環的語法。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initTime = <span class=\"built_in\">setInterval</span>(updateTime, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateTime</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 時間開始倒扣</span></span><br><span class=\"line\">  time--</span><br><span class=\"line\">  <span class=\"comment\">// 倒扣的時間顯示在 DOM 上</span></span><br><span class=\"line\">  timeEl.innerHTML = time + <span class=\"string\">&#x27; s &#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (time === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(initTime) <span class=\"comment\">//少了這個停損點倒數的數字會變成負的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 時間到的訊息用字串模板的方式載入</span></span><br><span class=\"line\">    endgameEl.innerHTML = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;Time ran out&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;Your final score is <span class=\"subst\">$&#123;score&#125;</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button onclick=&quot;location.reload()&quot;&gt;Reload&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">    endgameEl.style.display = <span class=\"string\">&#x27;flex&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-難度選單可以選擇隱藏或是顯示。\"><a href=\"#5-難度選單可以選擇隱藏或是顯示。\" class=\"headerlink\" title=\"5. 難度選單可以選擇隱藏或是顯示。\"></a>5. 難度選單可以選擇隱藏或是顯示。</h3><p>用 <code>toggle</code> 搭配 css style 就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">settingsBtn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  settings.classList.toggle(<span class=\"string\">&#x27;hide&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-刷新頁面後難度不會被回復預設值。\"><a href=\"#6-刷新頁面後難度不會被回復預設值。\" class=\"headerlink\" title=\"6. 刷新頁面後難度不會被回復預設值。\"></a>6. 刷新頁面後難度不會被回復預設值。</h3><p>要刷新頁面選單的值不會恢復成預設值就會使用到 <code>localStorage</code> ，把選擇的難度寫入到瀏覽器裡面。</p>\n<ol>\n<li>選擇難度是一個<code>event</code>，把選到的難度用 <code>setItem</code> 寫到瀏覽器記憶體 <code>localStorage</code> 裡面</li>\n<li>再用 <code>difficulty</code> 抓取選到的難度同時判斷輸入單字的時間要多還是要少</li>\n<li>到目前為止頁面刷新後難度還是會恢復成預設值，所以要把選單的值寫到 value 裡面</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 選擇難度，把資料寫進瀏覽器記憶體裡面</span></span><br><span class=\"line\">settingsForm.addEventListener(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  difficulty = e.target.value</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;difficulty&#x27;</span>, difficulty)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 把選到的值賦予到 difficulty 變數裡面，用來判斷難增加的時間</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> difficulty =</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;difficulty&#x27;</span>) !== <span class=\"literal\">null</span></span><br><span class=\"line\">    ? <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;difficulty&#x27;</span>)</span><br><span class=\"line\">    : <span class=\"string\">&#x27;medium&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 這是選完後抓取選單的值，確保頁面刷新後不會恢復成預設值</span></span><br><span class=\"line\">difficultySelect.value =</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;difficulty&#x27;</span>) !== <span class=\"literal\">null</span></span><br><span class=\"line\">    ? <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;difficulty&#x27;</span>)</span><br><span class=\"line\">    : <span class=\"string\">&#x27;medium&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-增加的時間可以依照難度調整獎勵時間。\"><a href=\"#7-增加的時間可以依照難度調整獎勵時間。\" class=\"headerlink\" title=\"7. 增加的時間可以依照難度調整獎勵時間。\"></a>7. 增加的時間可以依照難度調整獎勵時間。</h3><p>如果難度越高，獎勵時間就越少，反之同理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依照難度調整增加輸入時間</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (difficulty === <span class=\"string\">&#x27;hard&#x27;</span>) &#123;</span><br><span class=\"line\">  time += <span class=\"number\">2</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (difficulty === <span class=\"string\">&#x27;medium&#x27;</span>) &#123;</span><br><span class=\"line\">  time += <span class=\"number\">3</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  time += <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"功能撰寫-jQuery\"><a href=\"#功能撰寫-jQuery\" class=\"headerlink\" title=\"功能撰寫 ( jQuery )\"></a>功能撰寫 ( jQuery )</h2><h3 id=\"1-進入頁面後隨機產生文字。\"><a href=\"#1-進入頁面後隨機產生文字。\" class=\"headerlink\" title=\"1. 進入頁面後隨機產生文字。\"></a>1. 進入頁面後隨機產生文字。</h3><p>上面 JS 是用 Axios 打 API 獲取資料，jQuery 只能用 AJAX 打 API<br>本來是打 <a href=\"https://randomuser.me/\">RANDOM USER GENERATOR</a> 的 API，但發現 username 會有其他國家非英文的名字，所以改成打 <a href=\"https://random-word-api.herokuapp.com/home\">Word</a> 的 API 獲取單字資料。</p>\n<ul>\n<li>AJAX 起手式 :<br><code>url</code> : 打 API 的網址。<br><code>method</code> : 拿資料的方法。<br><code>dataType</code> : 資料的格式。<br><code>success</code> : 拿到資料後會打要做什麼事。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomUser</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">&#x27;https://random-word-api.herokuapp.com/word?number=1&#x27;</span>,</span><br><span class=\"line\">    method: <span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(res);</span></span><br><span class=\"line\">      data = res[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"comment\">// console.log(data);</span></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;#word&#x27;</span>).text(data)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  time--</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#time&#x27;</span>).val(time)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-比對輸入的值是否吻合再給予獎勵\"><a href=\"#2-比對輸入的值是否吻合再給予獎勵\" class=\"headerlink\" title=\"2. 比對輸入的值是否吻合再給予獎勵\"></a>2. 比對輸入的值是否吻合再給予獎勵</h3><p>給個分數的初始值，把值設定成 number 型式，判斷書入的值跟單字一樣後會重打一次 API 同時刷新時間，輸入正確後會給獎勵分數。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> score = <span class=\"number\">0</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#text&#x27;</span>).on(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textInput = $(<span class=\"built_in\">this</span>).val()</span><br><span class=\"line\">  <span class=\"comment\">// console.log(textInput);</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (textInput === data) &#123;</span><br><span class=\"line\">    randomUser()</span><br><span class=\"line\">    updateTime()</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#text&#x27;</span>).val(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    score++</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#score&#x27;</span>).text(score)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-時間內沒寫完會顯示時間到的訊息。\"><a href=\"#3-時間內沒寫完會顯示時間到的訊息。\" class=\"headerlink\" title=\"3. 時間內沒寫完會顯示時間到的訊息。\"></a>3. 時間內沒寫完會顯示時間到的訊息。</h3><p>設定時間初始值順便把型別轉成 number。<br>把時間寫入 DOM 元素裡面，當時間到未輸入完單字就會顯示新訊息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> time = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> initTime = <span class=\"built_in\">setInterval</span>(updateTime, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateTime</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  time--</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#time&#x27;</span>).text(time + <span class=\"string\">&#x27; s &#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (time === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(initTime)</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#end-game-container&#x27;</span>).html(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;Time ran out&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;Your final score is <span class=\"subst\">$&#123;score&#125;</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button onclick=&quot;location.reload()&quot;&gt;Reload&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#end-game-container&#x27;</span>).css(<span class=\"string\">&#x27;display&#x27;</span>, <span class=\"string\">&#x27;flex&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-難度選單可以選擇隱藏或是顯示。\"><a href=\"#4-難度選單可以選擇隱藏或是顯示。\" class=\"headerlink\" title=\"4. 難度選單可以選擇隱藏或是顯示。\"></a>4. 難度選單可以選擇隱藏或是顯示。</h3><p>用 <code>toggleClass</code> 可以顯示或是隱藏某個元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#settings-btn&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#settings&#x27;</span>).toggleClass(<span class=\"string\">&#x27;hide&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-刷新頁面後難度不會被回復預設值。\"><a href=\"#5-刷新頁面後難度不會被回復預設值。\" class=\"headerlink\" title=\"5. 刷新頁面後難度不會被回復預設值。\"></a>5. 刷新頁面後難度不會被回復預設值。</h3><p>難度選完後不要恢復成預設值的方法就是把資料寫進瀏覽器記憶體裡面，寫入後每次更換難度都會刷新一次頁面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#difficulty&#x27;</span>).change(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  difficulty = $(<span class=\"string\">&#x27;#difficulty&#x27;</span>).val()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(difficulty)</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;difficulty&#x27;</span>, difficulty)</span><br><span class=\"line\">  location.reload()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#difficulty&#x27;</span>).val(</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;difficulty&#x27;</span>) !== <span class=\"literal\">null</span></span><br><span class=\"line\">    ? <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;difficulty&#x27;</span>)</span><br><span class=\"line\">    : <span class=\"string\">&#x27;medium&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://github.com/axios/axios\">Axios</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview\">20 Web Projects With Vanilla JavaScript</a><br><a href=\"https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/\">談談 JavaScript 的 setTimeout 與 setInterval</a><br><a href=\"https://randomuser.me/\">RANDOM USER GENERATOR</a></p>"},{"title":"Vue - 動態綁定及監聽","date":"2020-08-06T16:00:00.000Z","description":"用動態綁定製作簡單的按鈕","_content":"\n## v-bind\n\n`v-bind` 指令是用來把一個數值綁定到 HTML 屬性上，因為到後期會大量用到，所以會使用縮寫 \" : \"\n\n<!-- more -->\n\n#### 用 v-bind 製作一個簡單的按鈕\n\n```html\n<div id=\"app\">\n  <button :type=\"selected\">selected</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      selected: 'submit',\n    },\n  })\n</script>\n```\n\n[codePen](https://codepen.io/gleofgja/pen/bGEXQrj)\n\n![](https://i.imgur.com/ph81atN.png)\n\n透過 v-bind 可以將 submit 這個值綁到 type 屬性上\n\n---\n\n## v-on\n\n`v-on` 縮寫為 \"@\"，用來偵聽 DOM 輸入的事件並改變資料\n\n#### 製作一個簡單的按鈕\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" :checked=\"selected\" />\n  <button @click=\"toggle\">toggle</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      selected: false,\n    },\n    methods: {\n      toggle() {\n        this.selected = !this.selected\n      },\n    },\n  })\n</script>\n```\n\n[codePen](https://codepen.io/gleofgja/pen/bGEXQrj?editors=1010)\n\n![](https://i.imgur.com/9ciSSo0.png)\n\n`checked` 屬性是控制 `input` 著 `checkbox` 有沒有被勾選到，而 `selected` 這個值是代表 `data` 裡面的 `selected` ，要讓 `selected` 賦予值，就必須要用 `v-bind` 動態綁定到 `checked` 屬性上，再透過 `v-on` 偵聽事件綁定 `selected`。\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","source":"_posts/2020/v-bind 及 v-on 的使用.md","raw":"---\ntitle: Vue - 動態綁定及監聽\ndate: 2020/08/07\ntags: Vue\ncategories:\n  - Vue\ndescription: 用動態綁定製作簡單的按鈕\n---\n\n## v-bind\n\n`v-bind` 指令是用來把一個數值綁定到 HTML 屬性上，因為到後期會大量用到，所以會使用縮寫 \" : \"\n\n<!-- more -->\n\n#### 用 v-bind 製作一個簡單的按鈕\n\n```html\n<div id=\"app\">\n  <button :type=\"selected\">selected</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      selected: 'submit',\n    },\n  })\n</script>\n```\n\n[codePen](https://codepen.io/gleofgja/pen/bGEXQrj)\n\n![](https://i.imgur.com/ph81atN.png)\n\n透過 v-bind 可以將 submit 這個值綁到 type 屬性上\n\n---\n\n## v-on\n\n`v-on` 縮寫為 \"@\"，用來偵聽 DOM 輸入的事件並改變資料\n\n#### 製作一個簡單的按鈕\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" :checked=\"selected\" />\n  <button @click=\"toggle\">toggle</button>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      selected: false,\n    },\n    methods: {\n      toggle() {\n        this.selected = !this.selected\n      },\n    },\n  })\n</script>\n```\n\n[codePen](https://codepen.io/gleofgja/pen/bGEXQrj?editors=1010)\n\n![](https://i.imgur.com/9ciSSo0.png)\n\n`checked` 屬性是控制 `input` 著 `checkbox` 有沒有被勾選到，而 `selected` 這個值是代表 `data` 裡面的 `selected` ，要讓 `selected` 賦予值，就必須要用 `v-bind` 動態綁定到 `checked` 屬性上，再透過 `v-on` 偵聽事件綁定 `selected`。\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","slug":"v-bind 及 v-on 的使用","published":1,"updated":"2021-03-26T16:13:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lq7001zg0trhnht11et","content":"<html><head></head><body><h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h2><p><code>v-bind</code> 指令是用來把一個數值綁定到 HTML 屬性上，因為到後期會大量用到，所以會使用縮寫 “ : “</p>\n<a id=\"more\"></a>\n\n<h4 id=\"用-v-bind-製作一個簡單的按鈕\"><a href=\"#用-v-bind-製作一個簡單的按鈕\" class=\"headerlink\" title=\"用 v-bind 製作一個簡單的按鈕\"></a>用 v-bind 製作一個簡單的按鈕</h4><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">:type</span>=<span class=\"hljs-string\">\"selected\"</span>&gt;</span>selected<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      selected: <span class=\"hljs-string\">'submit'</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/bGEXQrj\">codePen</a></p>\n<p><img src=\"https://i.imgur.com/ph81atN.png\"></p>\n<p>透過 v-bind 可以將 submit 這個值綁到 type 屬性上</p>\n<hr>\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><p><code>v-on</code> 縮寫為 “@”，用來偵聽 DOM 輸入的事件並改變資料</p>\n<h4 id=\"製作一個簡單的按鈕\"><a href=\"#製作一個簡單的按鈕\" class=\"headerlink\" title=\"製作一個簡單的按鈕\"></a>製作一個簡單的按鈕</h4><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">:checked</span>=<span class=\"hljs-string\">\"selected\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"toggle\"</span>&gt;</span>toggle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      selected: <span class=\"hljs-literal\">false</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      toggle() {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        <span class=\"hljs-built_in\">this</span>.selected = !<span class=\"hljs-built_in\">this</span>.selected</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/bGEXQrj?editors=1010\">codePen</a></p>\n<p><img src=\"https://i.imgur.com/9ciSSo0.png\"></p>\n<p><code>checked</code> 屬性是控制 <code>input</code> 著 <code>checkbox</code> 有沒有被勾選到，而 <code>selected</code> 這個值是代表 <code>data</code> 裡面的 <code>selected</code> ，要讓 <code>selected</code> 賦予值，就必須要用 <code>v-bind</code> 動態綁定到 <code>checked</code> 屬性上，再透過 <code>v-on</code> 偵聽事件綁定 <code>selected</code>。</p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"Vue","path":"tags/Vue/"}],"excerpt":"<html><head></head><body><h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h2><p><code>v-bind</code> 指令是用來把一個數值綁定到 HTML 屬性上，因為到後期會大量用到，所以會使用縮寫 “ : “</p></body></html>","more":"<h4 id=\"用-v-bind-製作一個簡單的按鈕\"><a href=\"#用-v-bind-製作一個簡單的按鈕\" class=\"headerlink\" title=\"用 v-bind 製作一個簡單的按鈕\"></a>用 v-bind 製作一個簡單的按鈕</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:type</span>=<span class=\"string\">&quot;selected&quot;</span>&gt;</span>selected<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      selected: <span class=\"string\">&#x27;submit&#x27;</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/bGEXQrj\">codePen</a></p>\n<p><img src=\"https://i.imgur.com/ph81atN.png\"></p>\n<p>透過 v-bind 可以將 submit 這個值綁到 type 屬性上</p>\n<hr>\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><p><code>v-on</code> 縮寫為 “@”，用來偵聽 DOM 輸入的事件並改變資料</p>\n<h4 id=\"製作一個簡單的按鈕\"><a href=\"#製作一個簡單的按鈕\" class=\"headerlink\" title=\"製作一個簡單的按鈕\"></a>製作一個簡單的按鈕</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">:checked</span>=<span class=\"string\">&quot;selected&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;toggle&quot;</span>&gt;</span>toggle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      selected: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      toggle() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.selected = !<span class=\"built_in\">this</span>.selected</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/bGEXQrj?editors=1010\">codePen</a></p>\n<p><img src=\"https://i.imgur.com/9ciSSo0.png\"></p>\n<p><code>checked</code> 屬性是控制 <code>input</code> 著 <code>checkbox</code> 有沒有被勾選到，而 <code>selected</code> 這個值是代表 <code>data</code> 裡面的 <code>selected</code> ，要讓 <code>selected</code> 賦予值，就必須要用 <code>v-bind</code> 動態綁定到 <code>checked</code> 屬性上，再透過 <code>v-on</code> 偵聽事件綁定 <code>selected</code>。</p>\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2>"},{"title":"Vue - 判斷式","date":"2020-08-07T16:00:00.000Z","description":"介紹 v-if 跟 v-show 的差別","_content":"\n## v-if\n\n[CodePen](https://codepen.io/gleofgja/pen/ZEQgEoG?editors=1010)\n我想透過勾選來決定要不要顯示 `h1` 標籤的內容，顯用 `v-model` 綁定屬性，再用 `v-if` 判斷決定與否\n\n<!-- more -->\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checked\" />\n  <h1 v-if=\"checked\">Hello World!</h1>\n</div>\n\n<!-- Scss -->\n<!-- #app{\n  text-align: center;\n  h1{\n    font-size: 30px;\n    color: red;\n  }\n} -->\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checked: false,\n  },\n})\n```\n\n![](https://i.imgur.com/02GE7NZ.png)\n\n---\n\nv-if 除了可以用在元素上，也可以用 template 模板包住某些元素\n![](https://i.imgur.com/ZNNucL1.png)\n\n這樣一個一個寫在元素太麻煩，所以改成直接寫在 `template` 模板上，會有一樣的效果\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checked\" />\n  <!--   <h1 v-if=\"checked\">Hello World!</h1> -->\n\n  <template v-if=\"checked\">\n    <h1>html</h1>\n    <h2>javascript</h2>\n    <h3>css</h3>\n  </template>\n</div>\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checked: false,\n  },\n})\n```\n\n![](https://i.imgur.com/wakHHCD.png)\n\n---\n\n在**勾選**顯示時，用開發者工具看會顯示 DOM 元素\n![](https://i.imgur.com/eZ04Y1R.png)\n\n---\n\n但是**不勾選**時，DOM 元素會直接被拿掉而不是用 `display:none` 隱藏\n![](https://i.imgur.com/rBTAJQ8.png)\n\n---\n\n## v-else\n\n[CodePen](https://codepen.io/gleofgja/pen/PoZMwpr?editors=1010)\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checked\" />\n  <h1 v-if=\"checked\">Hello World!</h1>\n  <h1 v-else>OverWatch</h1>\n</div>\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checked: true,\n  },\n})\n```\n\n不是 A 就是 B，當 `v-if` 屬性是 `false` 時，則會顯示 `v-else`，而 **`v-if` 跟 `v-else` 之間不能有任何元素**，若出現其他元素 `v-else` 就不會觸發\n用開發者工具看，會發現一樣不是透過 `display:none` 隱藏\n![](https://i.imgur.com/CWUZZn3.png)\n![](https://i.imgur.com/3qKlC19.png)\n\n---\n\n## v-else-if\n\n[CodePen](https://codepen.io/gleofgja/pen/ExPqabQ?editors=1010)\n\n`v-if` 跟 `v-else` 是簡單的二元判斷，那`v-else-if` 是提供兩者之間的選擇，介於 `v-if` 跟 `v-else` 之間，同時很多個 `v-else-if` 也沒關係!\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checkedOne\" />\n  <input type=\"checkbox\" v-model=\"checkedTwo\" />\n  <h1 v-if=\"checkedOne\">勾選 checkedOne!</h1>\n  <h1 v-else-if=\"checkedTwo\">勾選 checkedTwo</h1>\n  <h1 v-else>checkedOne、checkedTwo，都不是</h1>\n</div>\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checkedOne: false,\n    checkedTwo: false,\n  },\n})\n```\n\n再都不勾選情況下:\n![](https://i.imgur.com/Z2PDQ6q.png)\n\n勾選 checkedOne:\n![](https://i.imgur.com/aUjUlsJ.png)\n\n勾選 checkTwo:\n![](https://i.imgur.com/g8cSZyH.png)\n\n兩個都勾，會顯示 checkedOne 是因為判斷第一個 v-if 已經成立\n![](https://i.imgur.com/vdKqwV4.png)\n\n---\n\n## v-show\n\n`v-if` 是透過刪除 DOM 元素來決定顯示與否，但如果要透過 CSS 的 `display:none`來控制 並且在不刪除 DOM 情況下，這時就要用 `v-show` 。\n\nv-show 有兩個地方要特別注意:\n<font color=\"red\">1. 沒有 v-else 2. 不能用 template </font>\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checkedOne\" />\n  <h1 v-show=\"checkedOne\">勾選 checkedOne!</h1>\n</div>\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checkedOne: false,\n    checkedTwo: false,\n  },\n})\n```\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","source":"_posts/2020/v-if.md","raw":"---\ntitle: Vue - 判斷式\ndate: 2020/08/08\ntags: v-if\ncategories:\n  - Vue\ndescription: 介紹 v-if 跟 v-show 的差別\n---\n\n## v-if\n\n[CodePen](https://codepen.io/gleofgja/pen/ZEQgEoG?editors=1010)\n我想透過勾選來決定要不要顯示 `h1` 標籤的內容，顯用 `v-model` 綁定屬性，再用 `v-if` 判斷決定與否\n\n<!-- more -->\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checked\" />\n  <h1 v-if=\"checked\">Hello World!</h1>\n</div>\n\n<!-- Scss -->\n<!-- #app{\n  text-align: center;\n  h1{\n    font-size: 30px;\n    color: red;\n  }\n} -->\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checked: false,\n  },\n})\n```\n\n![](https://i.imgur.com/02GE7NZ.png)\n\n---\n\nv-if 除了可以用在元素上，也可以用 template 模板包住某些元素\n![](https://i.imgur.com/ZNNucL1.png)\n\n這樣一個一個寫在元素太麻煩，所以改成直接寫在 `template` 模板上，會有一樣的效果\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checked\" />\n  <!--   <h1 v-if=\"checked\">Hello World!</h1> -->\n\n  <template v-if=\"checked\">\n    <h1>html</h1>\n    <h2>javascript</h2>\n    <h3>css</h3>\n  </template>\n</div>\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checked: false,\n  },\n})\n```\n\n![](https://i.imgur.com/wakHHCD.png)\n\n---\n\n在**勾選**顯示時，用開發者工具看會顯示 DOM 元素\n![](https://i.imgur.com/eZ04Y1R.png)\n\n---\n\n但是**不勾選**時，DOM 元素會直接被拿掉而不是用 `display:none` 隱藏\n![](https://i.imgur.com/rBTAJQ8.png)\n\n---\n\n## v-else\n\n[CodePen](https://codepen.io/gleofgja/pen/PoZMwpr?editors=1010)\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checked\" />\n  <h1 v-if=\"checked\">Hello World!</h1>\n  <h1 v-else>OverWatch</h1>\n</div>\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checked: true,\n  },\n})\n```\n\n不是 A 就是 B，當 `v-if` 屬性是 `false` 時，則會顯示 `v-else`，而 **`v-if` 跟 `v-else` 之間不能有任何元素**，若出現其他元素 `v-else` 就不會觸發\n用開發者工具看，會發現一樣不是透過 `display:none` 隱藏\n![](https://i.imgur.com/CWUZZn3.png)\n![](https://i.imgur.com/3qKlC19.png)\n\n---\n\n## v-else-if\n\n[CodePen](https://codepen.io/gleofgja/pen/ExPqabQ?editors=1010)\n\n`v-if` 跟 `v-else` 是簡單的二元判斷，那`v-else-if` 是提供兩者之間的選擇，介於 `v-if` 跟 `v-else` 之間，同時很多個 `v-else-if` 也沒關係!\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checkedOne\" />\n  <input type=\"checkbox\" v-model=\"checkedTwo\" />\n  <h1 v-if=\"checkedOne\">勾選 checkedOne!</h1>\n  <h1 v-else-if=\"checkedTwo\">勾選 checkedTwo</h1>\n  <h1 v-else>checkedOne、checkedTwo，都不是</h1>\n</div>\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checkedOne: false,\n    checkedTwo: false,\n  },\n})\n```\n\n再都不勾選情況下:\n![](https://i.imgur.com/Z2PDQ6q.png)\n\n勾選 checkedOne:\n![](https://i.imgur.com/aUjUlsJ.png)\n\n勾選 checkTwo:\n![](https://i.imgur.com/g8cSZyH.png)\n\n兩個都勾，會顯示 checkedOne 是因為判斷第一個 v-if 已經成立\n![](https://i.imgur.com/vdKqwV4.png)\n\n---\n\n## v-show\n\n`v-if` 是透過刪除 DOM 元素來決定顯示與否，但如果要透過 CSS 的 `display:none`來控制 並且在不刪除 DOM 情況下，這時就要用 `v-show` 。\n\nv-show 有兩個地方要特別注意:\n<font color=\"red\">1. 沒有 v-else 2. 不能用 template </font>\n\n```html\n<div id=\"app\">\n  <input type=\"checkbox\" v-model=\"checkedOne\" />\n  <h1 v-show=\"checkedOne\">勾選 checkedOne!</h1>\n</div>\n```\n\n```javascript\nlet vm = new Vue({\n  el: '#app',\n  data: {\n    checkedOne: false,\n    checkedTwo: false,\n  },\n})\n```\n\n---\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","slug":"v-if","published":1,"updated":"2021-03-26T16:13:11.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lq80022g0tr5udv67j5","content":"<html><head></head><body><h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p><a href=\"https://codepen.io/gleofgja/pen/ZEQgEoG?editors=1010\">CodePen</a><br>我想透過勾選來決定要不要顯示 <code>h1</code> 標籤的內容，顯用 <code>v-model</code> 綁定屬性，再用 <code>v-if</code> 判斷決定與否</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"checked\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"checked\"</span>&gt;</span>Hello World!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- Scss --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- #app{</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  text-align: center;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  h1{</span></span><br><span class=\"line\"><span class=\"hljs-comment\">    font-size: 30px;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">    color: red;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  }</span></span><br><span class=\"line\"><span class=\"hljs-comment\">} --&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    checked: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/02GE7NZ.png\"></p>\n<hr>\n<p>v-if 除了可以用在元素上，也可以用 template 模板包住某些元素<br><img src=\"https://i.imgur.com/ZNNucL1.png\"></p>\n<p>這樣一個一個寫在元素太麻煩，所以改成直接寫在 <code>template</code> 模板上，會有一樣的效果</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"checked\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   &lt;h1 v-if=\"checked\"&gt;Hello World!&lt;/h1&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"checked\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>html<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>javascript<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>css<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    checked: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/wakHHCD.png\"></p>\n<hr>\n<p>在<strong>勾選</strong>顯示時，用開發者工具看會顯示 DOM 元素<br><img src=\"https://i.imgur.com/eZ04Y1R.png\"></p>\n<hr>\n<p>但是<strong>不勾選</strong>時，DOM 元素會直接被拿掉而不是用 <code>display:none</code> 隱藏<br><img src=\"https://i.imgur.com/rBTAJQ8.png\"></p>\n<hr>\n<h2 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h2><p><a href=\"https://codepen.io/gleofgja/pen/PoZMwpr?editors=1010\">CodePen</a></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"checked\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"checked\"</span>&gt;</span>Hello World!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>OverWatch<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    checked: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>不是 A 就是 B，當 <code>v-if</code> 屬性是 <code>false</code> 時，則會顯示 <code>v-else</code>，而 <strong><code>v-if</code> 跟 <code>v-else</code> 之間不能有任何元素</strong>，若出現其他元素 <code>v-else</code> 就不會觸發<br>用開發者工具看，會發現一樣不是透過 <code>display:none</code> 隱藏<br><img src=\"https://i.imgur.com/CWUZZn3.png\"><br><img src=\"https://i.imgur.com/3qKlC19.png\"></p>\n<hr>\n<h2 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h2><p><a href=\"https://codepen.io/gleofgja/pen/ExPqabQ?editors=1010\">CodePen</a></p>\n<p><code>v-if</code> 跟 <code>v-else</code> 是簡單的二元判斷，那<code>v-else-if</code> 是提供兩者之間的選擇，介於 <code>v-if</code> 跟 <code>v-else</code> 之間，同時很多個 <code>v-else-if</code> 也沒關係!</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"checkedOne\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"checkedTwo\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"checkedOne\"</span>&gt;</span>勾選 checkedOne!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">v-else-if</span>=<span class=\"hljs-string\">\"checkedTwo\"</span>&gt;</span>勾選 checkedTwo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>checkedOne、checkedTwo，都不是<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    checkedOne: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">    checkedTwo: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>再都不勾選情況下:<br><img src=\"https://i.imgur.com/Z2PDQ6q.png\"></p>\n<p>勾選 checkedOne:<br><img src=\"https://i.imgur.com/aUjUlsJ.png\"></p>\n<p>勾選 checkTwo:<br><img src=\"https://i.imgur.com/g8cSZyH.png\"></p>\n<p>兩個都勾，會顯示 checkedOne 是因為判斷第一個 v-if 已經成立<br><img src=\"https://i.imgur.com/vdKqwV4.png\"></p>\n<hr>\n<h2 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h2><p><code>v-if</code> 是透過刪除 DOM 元素來決定顯示與否，但如果要透過 CSS 的 <code>display:none</code>來控制 並且在不刪除 DOM 情況下，這時就要用 <code>v-show</code> 。</p>\n<p>v-show 有兩個地方要特別注意:<br><font color=\"red\">1. 沒有 v-else 2. 不能用 template </font></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"checkedOne\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">\"checkedOne\"</span>&gt;</span>勾選 checkedOne!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    checkedOne: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">    checkedTwo: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"v-if","path":"tags/v-if/"}],"excerpt":"<html><head></head><body><h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p><a href=\"https://codepen.io/gleofgja/pen/ZEQgEoG?editors=1010\">CodePen</a><br>我想透過勾選來決定要不要顯示 <code>h1</code> 標籤的內容，顯用 <code>v-model</code> 綁定屬性，再用 <code>v-if</code> 判斷決定與否</p></body></html>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checked&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;checked&quot;</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Scss --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- #app&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  text-align: center;</span></span><br><span class=\"line\"><span class=\"comment\">  h1&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    font-size: 30px;</span></span><br><span class=\"line\"><span class=\"comment\">    color: red;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checked: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/02GE7NZ.png\"></p>\n<hr>\n<p>v-if 除了可以用在元素上，也可以用 template 模板包住某些元素<br><img src=\"https://i.imgur.com/ZNNucL1.png\"></p>\n<p>這樣一個一個寫在元素太麻煩，所以改成直接寫在 <code>template</code> 模板上，會有一樣的效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checked&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   &lt;h1 v-if=&quot;checked&quot;&gt;Hello World!&lt;/h1&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;checked&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>html<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>javascript<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>css<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checked: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/wakHHCD.png\"></p>\n<hr>\n<p>在<strong>勾選</strong>顯示時，用開發者工具看會顯示 DOM 元素<br><img src=\"https://i.imgur.com/eZ04Y1R.png\"></p>\n<hr>\n<p>但是<strong>不勾選</strong>時，DOM 元素會直接被拿掉而不是用 <code>display:none</code> 隱藏<br><img src=\"https://i.imgur.com/rBTAJQ8.png\"></p>\n<hr>\n<h2 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h2><p><a href=\"https://codepen.io/gleofgja/pen/PoZMwpr?editors=1010\">CodePen</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checked&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;checked&quot;</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>OverWatch<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checked: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>不是 A 就是 B，當 <code>v-if</code> 屬性是 <code>false</code> 時，則會顯示 <code>v-else</code>，而 <strong><code>v-if</code> 跟 <code>v-else</code> 之間不能有任何元素</strong>，若出現其他元素 <code>v-else</code> 就不會觸發<br>用開發者工具看，會發現一樣不是透過 <code>display:none</code> 隱藏<br><img src=\"https://i.imgur.com/CWUZZn3.png\"><br><img src=\"https://i.imgur.com/3qKlC19.png\"></p>\n<hr>\n<h2 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h2><p><a href=\"https://codepen.io/gleofgja/pen/ExPqabQ?editors=1010\">CodePen</a></p>\n<p><code>v-if</code> 跟 <code>v-else</code> 是簡單的二元判斷，那<code>v-else-if</code> 是提供兩者之間的選擇，介於 <code>v-if</code> 跟 <code>v-else</code> 之間，同時很多個 <code>v-else-if</code> 也沒關係!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedOne&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedTwo&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;checkedOne&quot;</span>&gt;</span>勾選 checkedOne!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;checkedTwo&quot;</span>&gt;</span>勾選 checkedTwo<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>checkedOne、checkedTwo，都不是<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checkedOne: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    checkedTwo: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>再都不勾選情況下:<br><img src=\"https://i.imgur.com/Z2PDQ6q.png\"></p>\n<p>勾選 checkedOne:<br><img src=\"https://i.imgur.com/aUjUlsJ.png\"></p>\n<p>勾選 checkTwo:<br><img src=\"https://i.imgur.com/g8cSZyH.png\"></p>\n<p>兩個都勾，會顯示 checkedOne 是因為判斷第一個 v-if 已經成立<br><img src=\"https://i.imgur.com/vdKqwV4.png\"></p>\n<hr>\n<h2 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h2><p><code>v-if</code> 是透過刪除 DOM 元素來決定顯示與否，但如果要透過 CSS 的 <code>display:none</code>來控制 並且在不刪除 DOM 情況下，這時就要用 <code>v-show</code> 。</p>\n<p>v-show 有兩個地方要特別注意:<br><font color=\"red\">1. 沒有 v-else 2. 不能用 template </font></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedOne&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;checkedOne&quot;</span>&gt;</span>勾選 checkedOne!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checkedOne: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    checkedTwo: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2>"},{"title":"Vue - 基本語法( 一 )","date":"2021-02-21T16:00:00.000Z","_content":"\n簡單介紹 Vue 模板基本語法的使用，包含 : `v-bind`、`mustache` 、`v-once`、`v-html`、`v-text` ...等等。\n以下範例皆使用 Vue 2.6.1 版本。\n\n<!--more-->\n\n## 一、插值語法\n\n### 1. mustache\n\n在 `html` 模板中插入 `mustache` 語法。\n以下為官方文件的案例。\n\n```html\n<div id=\"app\">{{message}}</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: ' hello world',\n  },\n})\n```\n\n[codePen](https://codepen.io/gleofgja/pen/WNoZzEv?editors=1010)\n\n#### 表達式\n\nmustache 不只可以寫簡單的變數，還可以寫出簡單的表達式。\n\n```html\n<div id=\"app\">\n  {{message}}\n\n  <!--   以下示範簡單的表達式 -->\n  <h2>{{firstName + lastName}}</h2>\n\n  <!--   由於中間名字黏在一起不好看，所以中間加入空格，寫法有兩種 -->\n  <h2>第一種: {{firstName +' '+ lastName}}</h2>\n  <h2>第二種: {{firstName}} {{lastName}}</h2>\n\n  <!--   計算 -->\n  <h3>計算: {{count * 2}}</h3>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: ' hello world',\n    firstName: 'Tseng',\n    lastName: 'ken',\n    count: 100,\n  },\n})\n```\n\n![](https://i.imgur.com/MrHyWSW.png)\n\n[codePen](https://codepen.io/gleofgja/pen/QWGqmmN?editors=1010)\n\n### 2. v-once\n\n這項指令後面不需要填寫任何表達式，而且這指令只會渲染元素或是組件一次，並且不會隨資料改變而改變。\n\n一樣使用官方案例\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: ' hello world',\n  },\n})\n```\n\n但是我們只要在開發者模式下更改 message 變數的資料，裡面的值就會更著改變，如下圖\n![](https://i.imgur.com/PLWWSOK.png)\n\n但是加上 `v-once` 語法\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n  <h2 v-once>{{message}}</h2>\n</div>\n<!-- JS 一樣不變 -->\n```\n\n然後用更改 `message` 裡面的資料，如下圖\n![](https://i.imgur.com/rIForuj.png)\n可以看到沒有加上` v-once` 語法的 `message` 被改變的，而加上 `v-once` 的沒有被改變。\n\n[Demo](https://codepen.io/gleofgja/pen/vYyejBo?editors=1011)\n\n### 3. v-html\n\n有時候在 `data` 資料裡面會有涵蓋標籤的語法。\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n  <h3>{{url}}</h3>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: ' hello world',\n    url: '<a href=\"https://www.google.com\">Google</a>',\n  },\n})\n```\n\n在這樣的狀況下會顯示\n![](https://i.imgur.com/nvAXbQi.png)\n\n要正常顯示就要加上 `v-html`，意思是要以 `html` 的型式展示\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n  <h3>{{url}}</h3>\n\n  <h3 v-html=\"url\"></h3>\n</div>\n```\n\n這樣就可以正常顯示了\n![](https://i.imgur.com/ExiDSjs.png)\n\n不過這指令要小心，因為有很大的機會會有 XSS 攻擊，比較不推薦此種寫法。\n\n[DEMO](https://codepen.io/gleofgja/pen/MWbEGeQ?editors=1011)\n\n### 4. v-text\n\n一樣使用官網的案例\n\n之前都是用 `mustache` 顯示 `message` 的值，同樣的方式是在標籤上面加上 `v-text` 不需要 `mustache` 也一樣可以顯示\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n  <h2 v-text=\"message\"></h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n  },\n})\n```\n\n如下圖\n![](https://i.imgur.com/Qn8MkXU.png)\n\n但是這種寫法比較不靈活，如果我們想在後面加入一些字\n\n```html\n<div id=\"app\">\n  <h2>{{message}}，你好啊!!</h2>\n  <h2 v-text=\"message\">，你好啊!!</h2>\n</div>\n```\n\n`v-text` 會直接覆蓋掉標籤裡面的值，如下圖\n![](https://i.imgur.com/B0RNWmX.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/ZEBXoaj?editors=1011)\n\n## 二、動態綁定\n\n在現代網頁中的每個連結或是圖片都是用動態來顯示的，不是寫死的。\n\n### 1. v-bind\n\n可以動態綁定\n\n- `a` 元素的 `href`\n- `img` 元素的 `src`\n\n> 因為之後會大量使用，所以 v-bind 的語法糖為 \" : \" (冒號)\n\n以前最一開始的寫法是直接在 img 標籤上寫入網址，如下\n\n[(圖片來自官網)](https://cn.vuejs.org/index.html)\n\n```html\n<div id=\"app\">\n  {{message}}\n  <img src=\"https://cn.vuejs.org/images/logo.png\" alt=\"\" />\n</div>\n```\n\n顯示如下\n![](https://i.imgur.com/a0QQsSp.png)\n\n但是現在要動態的方式顯示，寫法如下:\n給 `src` 屬性動態綁定(v-bind) `imgUrl`，一旦綁定後 `imgUrl` 就是<font color=#FF0000>變數</font>!!那這變數就會去 vue 實例裡面找他的 `value` 值，再把 `value` 值放交給 `src` 。\n\n```html\n<div id=\"app\">\n  {{message}}\n  <!--   <img src=\"https://cn.vuejs.org/images/logo.png\" alt=\"\"> -->\n  <img :src=\"imgUrl\" alt=\"\" />\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    imgUrl: 'https://cn.vuejs.org/images/logo.png',\n  },\n})\n```\n\n顯示的效果跟上圖是一樣的。\n\n---\n\n同樣的換成 `a` 連結型式\n\n```html\n<div id=\"app\">\n  <!-- 命令式 -->\n  <a href=\"https://www.google.com/\">寫死的 Google</a>\n\n  <!-- 聲明式 -->\n  <a :href=\"linkUrl\">動態綁定的Google</a>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    linkUrl: 'https://www.google.com/',\n  },\n})\n```\n\n雖然顯示結果是一樣的，但在開發網頁的時候不可能把所有連結都寫死在標籤上，而是透過後端伺服器請求資料然後<font color=#FF0000>動態綁定</font>在標籤上。\n![](https://i.imgur.com/SAeBZzc.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/poNWVYO?editors=1011)\n\n### 2. v-bind 綁定 className\n\n上面講完基本<font color=#FF0000>連結</font>的動態綁定，接下來要講<font color=#FF0000> className </font>的用動態綁定。\n\n如果想在某個 className 上加點屬性，從最原始寫法到進階動態綁定的寫法，如下\n\n```html\n<div id=\"app\">\n  <!-- 最原始的 -->\n  <h2 class=\"active\">{{message}}</h2>\n\n  <!-- 動態綁定一 -->\n  <h2 :class=\"active\">{{message}}</h2>\n</div>\n```\n\n除了以上兩種，再來要綁<font color=#FF0000>物件型式</font>的，在 class 後面要綁定的是一個<font color=#FF0000>物件</font>，寫法跟對應的值都寫在下面程式碼裡面。\n\n當 `className` 被判斷為 `true` 的時候，那 `className` 的屬性就會被加到 `class` 裡面，這樣就可以透過控制布林值來決定要不要顯示。\n\n```html\n<div id=\"app\">\n  <!--<h2 :class='{key1: value1, key2: value2}'>{{message}}</h2> -->\n  <!--<h2 :class='{className1: 布林值1, className2: 布林值2}'>{{message}}</h2> -->\n  <h2 :class=\"{active: true, line: false}\">{{message}}</h2>\n</div>\n\n<style>\n  .active {\n    color: red;\n  }\n</style>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n  },\n})\n```\n\n![](https://i.imgur.com/Qk3OWBc.png)\n![](https://i.imgur.com/wAf31lb.png)\n如上圖一旦屬性判斷為 true 的時候就顯示。\n\n但是布林值不可能寫在標籤上面，必須要動態綁定。\n\n```html\n<div id=\"app\">\n  <h2 :class=\"{active: isActive, line: isLine}\">{{message}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    isActive: true,\n    isLine: true,\n  },\n})\n```\n\n如果兩個都為 `true` 就同時看到兩個 class ( `active` & `line` )。\n![](https://i.imgur.com/R9k1xtb.png)\n\n但是現在我可以透過開發者工具來控制。\n![](https://i.imgur.com/0SVyrVT.png)\n`isLine` 變成 `false` 後就不會顯示了。\n![](https://i.imgur.com/NCPMv0k.png)\n\n不過這樣控制顯示結果也點不對，總不可能叫使用者去開發者工具那邊更改吧，所以這例稍微超前一下要用 v-on 來做切換，它是一個監聽的指令。\n\n```html\n<div id=\"app\">\n  <h2 :class=\"{active: isActive, line: isLine}\">{{message}}</h2>\n  <button v-on:click=\"change\">Change</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    isActive: true,\n    isLine: true,\n  },\n  methods: {\n    change() {\n      this.isActive = !this.isActive\n    },\n  },\n})\n```\n\n這樣就可以用按鈕來做動態切換了。\n![](https://i.imgur.com/Nodj8p7.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/xxRXzyg?editors=1011)\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=14)\n","source":"_posts/2020/基本模板語法.md","raw":"---\ntitle: Vue - 基本語法( 一 )\ndate: 2021/02/22\ntags:\n  - v-bind\n  - mustache\n  - v-once\n  - v-html\n  - v-text\n  - Vue\ncategories:\n  - v-bind\n  - mustache\n  - v-once\n  - v-html\n  - v-text\n  - Vue\n---\n\n簡單介紹 Vue 模板基本語法的使用，包含 : `v-bind`、`mustache` 、`v-once`、`v-html`、`v-text` ...等等。\n以下範例皆使用 Vue 2.6.1 版本。\n\n<!--more-->\n\n## 一、插值語法\n\n### 1. mustache\n\n在 `html` 模板中插入 `mustache` 語法。\n以下為官方文件的案例。\n\n```html\n<div id=\"app\">{{message}}</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: ' hello world',\n  },\n})\n```\n\n[codePen](https://codepen.io/gleofgja/pen/WNoZzEv?editors=1010)\n\n#### 表達式\n\nmustache 不只可以寫簡單的變數，還可以寫出簡單的表達式。\n\n```html\n<div id=\"app\">\n  {{message}}\n\n  <!--   以下示範簡單的表達式 -->\n  <h2>{{firstName + lastName}}</h2>\n\n  <!--   由於中間名字黏在一起不好看，所以中間加入空格，寫法有兩種 -->\n  <h2>第一種: {{firstName +' '+ lastName}}</h2>\n  <h2>第二種: {{firstName}} {{lastName}}</h2>\n\n  <!--   計算 -->\n  <h3>計算: {{count * 2}}</h3>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: ' hello world',\n    firstName: 'Tseng',\n    lastName: 'ken',\n    count: 100,\n  },\n})\n```\n\n![](https://i.imgur.com/MrHyWSW.png)\n\n[codePen](https://codepen.io/gleofgja/pen/QWGqmmN?editors=1010)\n\n### 2. v-once\n\n這項指令後面不需要填寫任何表達式，而且這指令只會渲染元素或是組件一次，並且不會隨資料改變而改變。\n\n一樣使用官方案例\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: ' hello world',\n  },\n})\n```\n\n但是我們只要在開發者模式下更改 message 變數的資料，裡面的值就會更著改變，如下圖\n![](https://i.imgur.com/PLWWSOK.png)\n\n但是加上 `v-once` 語法\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n  <h2 v-once>{{message}}</h2>\n</div>\n<!-- JS 一樣不變 -->\n```\n\n然後用更改 `message` 裡面的資料，如下圖\n![](https://i.imgur.com/rIForuj.png)\n可以看到沒有加上` v-once` 語法的 `message` 被改變的，而加上 `v-once` 的沒有被改變。\n\n[Demo](https://codepen.io/gleofgja/pen/vYyejBo?editors=1011)\n\n### 3. v-html\n\n有時候在 `data` 資料裡面會有涵蓋標籤的語法。\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n  <h3>{{url}}</h3>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: ' hello world',\n    url: '<a href=\"https://www.google.com\">Google</a>',\n  },\n})\n```\n\n在這樣的狀況下會顯示\n![](https://i.imgur.com/nvAXbQi.png)\n\n要正常顯示就要加上 `v-html`，意思是要以 `html` 的型式展示\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n  <h3>{{url}}</h3>\n\n  <h3 v-html=\"url\"></h3>\n</div>\n```\n\n這樣就可以正常顯示了\n![](https://i.imgur.com/ExiDSjs.png)\n\n不過這指令要小心，因為有很大的機會會有 XSS 攻擊，比較不推薦此種寫法。\n\n[DEMO](https://codepen.io/gleofgja/pen/MWbEGeQ?editors=1011)\n\n### 4. v-text\n\n一樣使用官網的案例\n\n之前都是用 `mustache` 顯示 `message` 的值，同樣的方式是在標籤上面加上 `v-text` 不需要 `mustache` 也一樣可以顯示\n\n```html\n<div id=\"app\">\n  <h2>{{message}}</h2>\n  <h2 v-text=\"message\"></h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n  },\n})\n```\n\n如下圖\n![](https://i.imgur.com/Qn8MkXU.png)\n\n但是這種寫法比較不靈活，如果我們想在後面加入一些字\n\n```html\n<div id=\"app\">\n  <h2>{{message}}，你好啊!!</h2>\n  <h2 v-text=\"message\">，你好啊!!</h2>\n</div>\n```\n\n`v-text` 會直接覆蓋掉標籤裡面的值，如下圖\n![](https://i.imgur.com/B0RNWmX.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/ZEBXoaj?editors=1011)\n\n## 二、動態綁定\n\n在現代網頁中的每個連結或是圖片都是用動態來顯示的，不是寫死的。\n\n### 1. v-bind\n\n可以動態綁定\n\n- `a` 元素的 `href`\n- `img` 元素的 `src`\n\n> 因為之後會大量使用，所以 v-bind 的語法糖為 \" : \" (冒號)\n\n以前最一開始的寫法是直接在 img 標籤上寫入網址，如下\n\n[(圖片來自官網)](https://cn.vuejs.org/index.html)\n\n```html\n<div id=\"app\">\n  {{message}}\n  <img src=\"https://cn.vuejs.org/images/logo.png\" alt=\"\" />\n</div>\n```\n\n顯示如下\n![](https://i.imgur.com/a0QQsSp.png)\n\n但是現在要動態的方式顯示，寫法如下:\n給 `src` 屬性動態綁定(v-bind) `imgUrl`，一旦綁定後 `imgUrl` 就是<font color=#FF0000>變數</font>!!那這變數就會去 vue 實例裡面找他的 `value` 值，再把 `value` 值放交給 `src` 。\n\n```html\n<div id=\"app\">\n  {{message}}\n  <!--   <img src=\"https://cn.vuejs.org/images/logo.png\" alt=\"\"> -->\n  <img :src=\"imgUrl\" alt=\"\" />\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    imgUrl: 'https://cn.vuejs.org/images/logo.png',\n  },\n})\n```\n\n顯示的效果跟上圖是一樣的。\n\n---\n\n同樣的換成 `a` 連結型式\n\n```html\n<div id=\"app\">\n  <!-- 命令式 -->\n  <a href=\"https://www.google.com/\">寫死的 Google</a>\n\n  <!-- 聲明式 -->\n  <a :href=\"linkUrl\">動態綁定的Google</a>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    linkUrl: 'https://www.google.com/',\n  },\n})\n```\n\n雖然顯示結果是一樣的，但在開發網頁的時候不可能把所有連結都寫死在標籤上，而是透過後端伺服器請求資料然後<font color=#FF0000>動態綁定</font>在標籤上。\n![](https://i.imgur.com/SAeBZzc.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/poNWVYO?editors=1011)\n\n### 2. v-bind 綁定 className\n\n上面講完基本<font color=#FF0000>連結</font>的動態綁定，接下來要講<font color=#FF0000> className </font>的用動態綁定。\n\n如果想在某個 className 上加點屬性，從最原始寫法到進階動態綁定的寫法，如下\n\n```html\n<div id=\"app\">\n  <!-- 最原始的 -->\n  <h2 class=\"active\">{{message}}</h2>\n\n  <!-- 動態綁定一 -->\n  <h2 :class=\"active\">{{message}}</h2>\n</div>\n```\n\n除了以上兩種，再來要綁<font color=#FF0000>物件型式</font>的，在 class 後面要綁定的是一個<font color=#FF0000>物件</font>，寫法跟對應的值都寫在下面程式碼裡面。\n\n當 `className` 被判斷為 `true` 的時候，那 `className` 的屬性就會被加到 `class` 裡面，這樣就可以透過控制布林值來決定要不要顯示。\n\n```html\n<div id=\"app\">\n  <!--<h2 :class='{key1: value1, key2: value2}'>{{message}}</h2> -->\n  <!--<h2 :class='{className1: 布林值1, className2: 布林值2}'>{{message}}</h2> -->\n  <h2 :class=\"{active: true, line: false}\">{{message}}</h2>\n</div>\n\n<style>\n  .active {\n    color: red;\n  }\n</style>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n  },\n})\n```\n\n![](https://i.imgur.com/Qk3OWBc.png)\n![](https://i.imgur.com/wAf31lb.png)\n如上圖一旦屬性判斷為 true 的時候就顯示。\n\n但是布林值不可能寫在標籤上面，必須要動態綁定。\n\n```html\n<div id=\"app\">\n  <h2 :class=\"{active: isActive, line: isLine}\">{{message}}</h2>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    isActive: true,\n    isLine: true,\n  },\n})\n```\n\n如果兩個都為 `true` 就同時看到兩個 class ( `active` & `line` )。\n![](https://i.imgur.com/R9k1xtb.png)\n\n但是現在我可以透過開發者工具來控制。\n![](https://i.imgur.com/0SVyrVT.png)\n`isLine` 變成 `false` 後就不會顯示了。\n![](https://i.imgur.com/NCPMv0k.png)\n\n不過這樣控制顯示結果也點不對，總不可能叫使用者去開發者工具那邊更改吧，所以這例稍微超前一下要用 v-on 來做切換，它是一個監聽的指令。\n\n```html\n<div id=\"app\">\n  <h2 :class=\"{active: isActive, line: isLine}\">{{message}}</h2>\n  <button v-on:click=\"change\">Change</button>\n</div>\n```\n\n```javascript\nconst app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello World',\n    isActive: true,\n    isLine: true,\n  },\n  methods: {\n    change() {\n      this.isActive = !this.isActive\n    },\n  },\n})\n```\n\n這樣就可以用按鈕來做動態切換了。\n![](https://i.imgur.com/Nodj8p7.png)\n\n[DEMO](https://codepen.io/gleofgja/pen/xxRXzyg?editors=1011)\n\n## 參考資料\n\n[2019 年最全最新 Vue、Vuejs 教程，从入门到精通](https://www.bilibili.com/video/BV15741177Eh?p=14)\n","slug":"基本模板語法","published":1,"updated":"2021-03-26T16:13:09.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lq90025g0tr41pm2l08","content":"<html><head></head><body><p>簡單介紹 Vue 模板基本語法的使用，包含 : <code>v-bind</code>、<code>mustache</code> 、<code>v-once</code>、<code>v-html</code>、<code>v-text</code> …等等。<br>以下範例皆使用 Vue 2.6.1 版本。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一、插值語法\"><a href=\"#一、插值語法\" class=\"headerlink\" title=\"一、插值語法\"></a>一、插值語法</h2><h3 id=\"1-mustache\"><a href=\"#1-mustache\" class=\"headerlink\" title=\"1. mustache\"></a>1. mustache</h3><p>在 <code>html</code> 模板中插入 <code>mustache</code> 語法。<br>以下為官方文件的案例。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">' hello world'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/WNoZzEv?editors=1010\">codePen</a></p>\n<h4 id=\"表達式\"><a href=\"#表達式\" class=\"headerlink\" title=\"表達式\"></a>表達式</h4><p>mustache 不只可以寫簡單的變數，還可以寫出簡單的表達式。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  {{message}}</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   以下示範簡單的表達式 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{firstName + lastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   由於中間名字黏在一起不好看，所以中間加入空格，寫法有兩種 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>第一種: {{firstName +' '+ lastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>第二種: {{firstName}} {{lastName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   計算 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>計算: {{count * 2}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">' hello world'</span>,</span><br><span class=\"line\">    firstName: <span class=\"hljs-string\">'Tseng'</span>,</span><br><span class=\"line\">    lastName: <span class=\"hljs-string\">'ken'</span>,</span><br><span class=\"line\">    count: <span class=\"hljs-number\">100</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/MrHyWSW.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/QWGqmmN?editors=1010\">codePen</a></p>\n<h3 id=\"2-v-once\"><a href=\"#2-v-once\" class=\"headerlink\" title=\"2. v-once\"></a>2. v-once</h3><p>這項指令後面不需要填寫任何表達式，而且這指令只會渲染元素或是組件一次，並且不會隨資料改變而改變。</p>\n<p>一樣使用官方案例</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">' hello world'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>但是我們只要在開發者模式下更改 message 變數的資料，裡面的值就會更著改變，如下圖<br><img src=\"https://i.imgur.com/PLWWSOK.png\"></p>\n<p>但是加上 <code>v-once</code> 語法</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-once</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- JS 一樣不變 --&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>然後用更改 <code>message</code> 裡面的資料，如下圖<br><img src=\"https://i.imgur.com/rIForuj.png\"><br>可以看到沒有加上<code> v-once</code> 語法的 <code>message</code> 被改變的，而加上 <code>v-once</code> 的沒有被改變。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/vYyejBo?editors=1011\">Demo</a></p>\n<h3 id=\"3-v-html\"><a href=\"#3-v-html\" class=\"headerlink\" title=\"3. v-html\"></a>3. v-html</h3><p>有時候在 <code>data</code> 資料裡面會有涵蓋標籤的語法。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>{{url}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">' hello world'</span>,</span><br><span class=\"line\">    url: <span class=\"hljs-string\">'&lt;a href=\"https://www.google.com\"&gt;Google&lt;/a&gt;'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在這樣的狀況下會顯示<br><img src=\"https://i.imgur.com/nvAXbQi.png\"></p>\n<p>要正常顯示就要加上 <code>v-html</code>，意思是要以 <code>html</code> 的型式展示</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>{{url}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">\"url\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>這樣就可以正常顯示了<br><img src=\"https://i.imgur.com/ExiDSjs.png\"></p>\n<p>不過這指令要小心，因為有很大的機會會有 XSS 攻擊，比較不推薦此種寫法。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWbEGeQ?editors=1011\">DEMO</a></p>\n<h3 id=\"4-v-text\"><a href=\"#4-v-text\" class=\"headerlink\" title=\"4. v-text\"></a>4. v-text</h3><p>一樣使用官網的案例</p>\n<p>之前都是用 <code>mustache</code> 顯示 <code>message</code> 的值，同樣的方式是在標籤上面加上 <code>v-text</code> 不需要 <code>mustache</code> 也一樣可以顯示</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-text</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如下圖<br><img src=\"https://i.imgur.com/Qn8MkXU.png\"></p>\n<p>但是這種寫法比較不靈活，如果我們想在後面加入一些字</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{message}}，你好啊!!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-text</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span>，你好啊!!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>v-text</code> 會直接覆蓋掉標籤裡面的值，如下圖<br><img src=\"https://i.imgur.com/B0RNWmX.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEBXoaj?editors=1011\">DEMO</a></p>\n<h2 id=\"二、動態綁定\"><a href=\"#二、動態綁定\" class=\"headerlink\" title=\"二、動態綁定\"></a>二、動態綁定</h2><p>在現代網頁中的每個連結或是圖片都是用動態來顯示的，不是寫死的。</p>\n<h3 id=\"1-v-bind\"><a href=\"#1-v-bind\" class=\"headerlink\" title=\"1. v-bind\"></a>1. v-bind</h3><p>可以動態綁定</p>\n<ul>\n<li><code>a</code> 元素的 <code>href</code></li>\n<li><code>img</code> 元素的 <code>src</code></li>\n</ul>\n<blockquote>\n<p>因為之後會大量使用，所以 v-bind 的語法糖為 “ : “ (冒號)</p>\n</blockquote>\n<p>以前最一開始的寫法是直接在 img 標籤上寫入網址，如下</p>\n<p><a href=\"https://cn.vuejs.org/index.html\">(圖片來自官網)</a></p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  {{message}}</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cn.vuejs.org/images/logo.png\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示如下<br><img src=\"https://i.imgur.com/a0QQsSp.png\"></p>\n<p>但是現在要動態的方式顯示，寫法如下:<br>給 <code>src</code> 屬性動態綁定(v-bind) <code>imgUrl</code>，一旦綁定後 <code>imgUrl</code> 就是<font color=\"#FF0000\">變數</font>!!那這變數就會去 vue 實例裡面找他的 <code>value</code> 值，再把 <code>value</code> 值放交給 <code>src</code> 。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  {{message}}</span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--   &lt;img src=\"https://cn.vuejs.org/images/logo.png\" alt=\"\"&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">\"imgUrl\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">    imgUrl: <span class=\"hljs-string\">'https://cn.vuejs.org/images/logo.png'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示的效果跟上圖是一樣的。</p>\n<hr>\n<p>同樣的換成 <code>a</code> 連結型式</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!-- 命令式 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.google.com/\"</span>&gt;</span>寫死的 Google<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!-- 聲明式 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">\"linkUrl\"</span>&gt;</span>動態綁定的Google<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    linkUrl: <span class=\"hljs-string\">'https://www.google.com/'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>雖然顯示結果是一樣的，但在開發網頁的時候不可能把所有連結都寫死在標籤上，而是透過後端伺服器請求資料然後<font color=\"#FF0000\">動態綁定</font>在標籤上。<br><img src=\"https://i.imgur.com/SAeBZzc.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/poNWVYO?editors=1011\">DEMO</a></p>\n<h3 id=\"2-v-bind-綁定-className\"><a href=\"#2-v-bind-綁定-className\" class=\"headerlink\" title=\"2. v-bind 綁定 className\"></a>2. v-bind 綁定 className</h3><p>上面講完基本<font color=\"#FF0000\">連結</font>的動態綁定，接下來要講<font color=\"#FF0000\"> className </font>的用動態綁定。</p>\n<p>如果想在某個 className 上加點屬性，從最原始寫法到進階動態綁定的寫法，如下</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!-- 最原始的 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"active\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!-- 動態綁定一 --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"active\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>除了以上兩種，再來要綁<font color=\"#FF0000\">物件型式</font>的，在 class 後面要綁定的是一個<font color=\"#FF0000\">物件</font>，寫法跟對應的值都寫在下面程式碼裡面。</p>\n<p>當 <code>className</code> 被判斷為 <code>true</code> 的時候，那 <code>className</code> 的屬性就會被加到 <code>class</code> 裡面，這樣就可以透過控制布林值來決定要不要顯示。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--&lt;h2 :class='{key1: value1, key2: value2}'&gt;{{message}}&lt;/h2&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!--&lt;h2 :class='{className1: 布林值1, className2: 布林值2}'&gt;{{message}}&lt;/h2&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"{active: true, line: false}\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-css\">  <span class=\"hljs-selector-class\">.active</span> {</span></span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">  }</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/Qk3OWBc.png\"><br><img src=\"https://i.imgur.com/wAf31lb.png\"><br>如上圖一旦屬性判斷為 true 的時候就顯示。</p>\n<p>但是布林值不可能寫在標籤上面，必須要動態綁定。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"{active: isActive, line: isLine}\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">    isActive: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    isLine: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果兩個都為 <code>true</code> 就同時看到兩個 class ( <code>active</code> &amp; <code>line</code> )。<br><img src=\"https://i.imgur.com/R9k1xtb.png\"></p>\n<p>但是現在我可以透過開發者工具來控制。<br><img src=\"https://i.imgur.com/0SVyrVT.png\"><br><code>isLine</code> 變成 <code>false</code> 後就不會顯示了。<br><img src=\"https://i.imgur.com/NCPMv0k.png\"></p>\n<p>不過這樣控制顯示結果也點不對，總不可能叫使用者去開發者工具那邊更改吧，所以這例稍微超前一下要用 v-on 來做切換，它是一個監聽的指令。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"{active: isActive, line: isLine}\"</span>&gt;</span>{{message}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">\"change\"</span>&gt;</span>Change<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({</span><br><span class=\"line\">  el: <span class=\"hljs-string\">'#app'</span>,</span><br><span class=\"line\">  data: {</span><br><span class=\"line\">    message: <span class=\"hljs-string\">'Hello World'</span>,</span><br><span class=\"line\">    isActive: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    isLine: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\">  methods: {</span><br><span class=\"line\">    change() {</span><br><span class=\"line\">      <span class=\"hljs-built_in\">this</span>.isActive = !<span class=\"hljs-built_in\">this</span>.isActive</span><br><span class=\"line\">    },</span><br><span class=\"line\">  },</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>這樣就可以用按鈕來做動態切換了。<br><img src=\"https://i.imgur.com/Nodj8p7.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/xxRXzyg?editors=1011\">DEMO</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=14\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"v-bind","path":"categories/v-bind/"},{"name":"mustache","path":"categories/v-bind/mustache/"},{"name":"v-once","path":"categories/v-bind/mustache/v-once/"},{"name":"v-html","path":"categories/v-bind/mustache/v-once/v-html/"},{"name":"v-text","path":"categories/v-bind/mustache/v-once/v-html/v-text/"},{"name":"Vue","path":"categories/v-bind/mustache/v-once/v-html/v-text/Vue/"}],"_tags":[{"name":"Vue","path":"tags/Vue/"},{"name":"v-bind","path":"tags/v-bind/"},{"name":"mustache","path":"tags/mustache/"},{"name":"v-once","path":"tags/v-once/"},{"name":"v-html","path":"tags/v-html/"},{"name":"v-text","path":"tags/v-text/"}],"excerpt":"<html><head></head><body><p>簡單介紹 Vue 模板基本語法的使用，包含 : <code>v-bind</code>、<code>mustache</code> 、<code>v-once</code>、<code>v-html</code>、<code>v-text</code> …等等。<br>以下範例皆使用 Vue 2.6.1 版本。</p></body></html>","more":"<h2 id=\"一、插值語法\"><a href=\"#一、插值語法\" class=\"headerlink\" title=\"一、插值語法\"></a>一、插值語法</h2><h3 id=\"1-mustache\"><a href=\"#1-mustache\" class=\"headerlink\" title=\"1. mustache\"></a>1. mustache</h3><p>在 <code>html</code> 模板中插入 <code>mustache</code> 語法。<br>以下為官方文件的案例。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27; hello world&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/WNoZzEv?editors=1010\">codePen</a></p>\n<h4 id=\"表達式\"><a href=\"#表達式\" class=\"headerlink\" title=\"表達式\"></a>表達式</h4><p>mustache 不只可以寫簡單的變數，還可以寫出簡單的表達式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   以下示範簡單的表達式 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;firstName + lastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   由於中間名字黏在一起不好看，所以中間加入空格，寫法有兩種 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>第一種: &#123;&#123;firstName +&#x27; &#x27;+ lastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>第二種: &#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   計算 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>計算: &#123;&#123;count * 2&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27; hello world&#x27;</span>,</span><br><span class=\"line\">    firstName: <span class=\"string\">&#x27;Tseng&#x27;</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">&#x27;ken&#x27;</span>,</span><br><span class=\"line\">    count: <span class=\"number\">100</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/MrHyWSW.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/QWGqmmN?editors=1010\">codePen</a></p>\n<h3 id=\"2-v-once\"><a href=\"#2-v-once\" class=\"headerlink\" title=\"2. v-once\"></a>2. v-once</h3><p>這項指令後面不需要填寫任何表達式，而且這指令只會渲染元素或是組件一次，並且不會隨資料改變而改變。</p>\n<p>一樣使用官方案例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27; hello world&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>但是我們只要在開發者模式下更改 message 變數的資料，裡面的值就會更著改變，如下圖<br><img src=\"https://i.imgur.com/PLWWSOK.png\"></p>\n<p>但是加上 <code>v-once</code> 語法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- JS 一樣不變 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然後用更改 <code>message</code> 裡面的資料，如下圖<br><img src=\"https://i.imgur.com/rIForuj.png\"><br>可以看到沒有加上<code> v-once</code> 語法的 <code>message</code> 被改變的，而加上 <code>v-once</code> 的沒有被改變。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/vYyejBo?editors=1011\">Demo</a></p>\n<h3 id=\"3-v-html\"><a href=\"#3-v-html\" class=\"headerlink\" title=\"3. v-html\"></a>3. v-html</h3><p>有時候在 <code>data</code> 資料裡面會有涵蓋標籤的語法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27; hello world&#x27;</span>,</span><br><span class=\"line\">    url: <span class=\"string\">&#x27;&lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt;&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在這樣的狀況下會顯示<br><img src=\"https://i.imgur.com/nvAXbQi.png\"></p>\n<p>要正常顯示就要加上 <code>v-html</code>，意思是要以 <code>html</code> 的型式展示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣就可以正常顯示了<br><img src=\"https://i.imgur.com/ExiDSjs.png\"></p>\n<p>不過這指令要小心，因為有很大的機會會有 XSS 攻擊，比較不推薦此種寫法。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/MWbEGeQ?editors=1011\">DEMO</a></p>\n<h3 id=\"4-v-text\"><a href=\"#4-v-text\" class=\"headerlink\" title=\"4. v-text\"></a>4. v-text</h3><p>一樣使用官網的案例</p>\n<p>之前都是用 <code>mustache</code> 顯示 <code>message</code> 的值，同樣的方式是在標籤上面加上 <code>v-text</code> 不需要 <code>mustache</code> 也一樣可以顯示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-text</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如下圖<br><img src=\"https://i.imgur.com/Qn8MkXU.png\"></p>\n<p>但是這種寫法比較不靈活，如果我們想在後面加入一些字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;，你好啊!!<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-text</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span>，你好啊!!<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>v-text</code> 會直接覆蓋掉標籤裡面的值，如下圖<br><img src=\"https://i.imgur.com/B0RNWmX.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/ZEBXoaj?editors=1011\">DEMO</a></p>\n<h2 id=\"二、動態綁定\"><a href=\"#二、動態綁定\" class=\"headerlink\" title=\"二、動態綁定\"></a>二、動態綁定</h2><p>在現代網頁中的每個連結或是圖片都是用動態來顯示的，不是寫死的。</p>\n<h3 id=\"1-v-bind\"><a href=\"#1-v-bind\" class=\"headerlink\" title=\"1. v-bind\"></a>1. v-bind</h3><p>可以動態綁定</p>\n<ul>\n<li><code>a</code> 元素的 <code>href</code></li>\n<li><code>img</code> 元素的 <code>src</code></li>\n</ul>\n<blockquote>\n<p>因為之後會大量使用，所以 v-bind 的語法糖為 “ : “ (冒號)</p>\n</blockquote>\n<p>以前最一開始的寫法是直接在 img 標籤上寫入網址，如下</p>\n<p><a href=\"https://cn.vuejs.org/index.html\">(圖片來自官網)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cn.vuejs.org/images/logo.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下<br><img src=\"https://i.imgur.com/a0QQsSp.png\"></p>\n<p>但是現在要動態的方式顯示，寫法如下:<br>給 <code>src</code> 屬性動態綁定(v-bind) <code>imgUrl</code>，一旦綁定後 <code>imgUrl</code> 就是<font color=#FF0000>變數</font>!!那這變數就會去 vue 實例裡面找他的 <code>value</code> 值，再把 <code>value</code> 值放交給 <code>src</code> 。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!--   &lt;img src=&quot;https://cn.vuejs.org/images/logo.png&quot; alt=&quot;&quot;&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;imgUrl&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">    imgUrl: <span class=\"string\">&#x27;https://cn.vuejs.org/images/logo.png&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示的效果跟上圖是一樣的。</p>\n<hr>\n<p>同樣的換成 <code>a</code> 連結型式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 命令式 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.google.com/&quot;</span>&gt;</span>寫死的 Google<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 聲明式 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">&quot;linkUrl&quot;</span>&gt;</span>動態綁定的Google<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    linkUrl: <span class=\"string\">&#x27;https://www.google.com/&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>雖然顯示結果是一樣的，但在開發網頁的時候不可能把所有連結都寫死在標籤上，而是透過後端伺服器請求資料然後<font color=#FF0000>動態綁定</font>在標籤上。<br><img src=\"https://i.imgur.com/SAeBZzc.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/poNWVYO?editors=1011\">DEMO</a></p>\n<h3 id=\"2-v-bind-綁定-className\"><a href=\"#2-v-bind-綁定-className\" class=\"headerlink\" title=\"2. v-bind 綁定 className\"></a>2. v-bind 綁定 className</h3><p>上面講完基本<font color=#FF0000>連結</font>的動態綁定，接下來要講<font color=#FF0000> className </font>的用動態綁定。</p>\n<p>如果想在某個 className 上加點屬性，從最原始寫法到進階動態綁定的寫法，如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 最原始的 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 動態綁定一 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>除了以上兩種，再來要綁<font color=#FF0000>物件型式</font>的，在 class 後面要綁定的是一個<font color=#FF0000>物件</font>，寫法跟對應的值都寫在下面程式碼裡面。</p>\n<p>當 <code>className</code> 被判斷為 <code>true</code> 的時候，那 <code>className</code> 的屬性就會被加到 <code>class</code> 裡面，這樣就可以透過控制布林值來決定要不要顯示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--&lt;h2 :class=&#x27;&#123;key1: value1, key2: value2&#125;&#x27;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--&lt;h2 :class=&#x27;&#123;className1: 布林值1, className2: 布林值2&#125;&#x27;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;active: true, line: false&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.active</span> &#123;</span></span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/Qk3OWBc.png\"><br><img src=\"https://i.imgur.com/wAf31lb.png\"><br>如上圖一旦屬性判斷為 true 的時候就顯示。</p>\n<p>但是布林值不可能寫在標籤上面，必須要動態綁定。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;active: isActive, line: isLine&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">    isActive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    isLine: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果兩個都為 <code>true</code> 就同時看到兩個 class ( <code>active</code> &amp; <code>line</code> )。<br><img src=\"https://i.imgur.com/R9k1xtb.png\"></p>\n<p>但是現在我可以透過開發者工具來控制。<br><img src=\"https://i.imgur.com/0SVyrVT.png\"><br><code>isLine</code> 變成 <code>false</code> 後就不會顯示了。<br><img src=\"https://i.imgur.com/NCPMv0k.png\"></p>\n<p>不過這樣控制顯示結果也點不對，總不可能叫使用者去開發者工具那邊更改吧，所以這例稍微超前一下要用 v-on 來做切換，它是一個監聽的指令。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;active: isActive, line: isLine&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>Change<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">    isActive: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    isLine: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    change() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.isActive = !<span class=\"built_in\">this</span>.isActive</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這樣就可以用按鈕來做動態切換了。<br><img src=\"https://i.imgur.com/Nodj8p7.png\"></p>\n<p><a href=\"https://codepen.io/gleofgja/pen/xxRXzyg?editors=1011\">DEMO</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.bilibili.com/video/BV15741177Eh?p=14\">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p>"},{"title":"JavaScript 實作 - 猜數字","date":"2021-01-31T16:00:00.000Z","_content":"\n## 功能敘述 :\n\n1. 猜數字，有固定範圍。\n2. 猜錯會告知區間。\n3. 如果猜的不是數字會顯示訊息提示。\n\n![](https://i.imgur.com/vJSz4wN.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission28)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission28/index.html)\n\n<!--more-->\n\n## 模板架構\n\n```html\n<img src=\"img/mic.png\" alt=\"Speak\" />\n\n<h1>請猜一個 1 ~ 100 以內的數字</h1>\n\n<h3>請對麥克風說出一個數字</h3>\n\n<div id=\"msg\" class=\"msg\">\n  <!-- <div>You said:</div>\n  <span class=\"box\">Guessed number</span>\n  <div>number range</div> -->\n</div>\n```\n\n## 功能撰寫\n\n### 1. 取隨機數字，限定 1~100 以內\n\n`Math.random` : 隨機產生出 0~1 之間的小數，因為小於 1 ，所以最大是 0.99。\n`Math.floor` : 回傳小於等於所給數字的最大整數。\n\n```javascript\nfunction getRandomNumber() {\n  return Math.floor(Math.random() * 100) + 1 // +1 範圍才會到 100\n}\n```\n\n### 2. 錄製麥克風的聲音\n\n[SpeechRecognition](https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB) : 在 Chrome 上使用語音辨識的功能，會把聲音發送到網頁裡面進行識別處理，要注意的是不能離線工作。\n\n```javascript\nwindow.SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition\n\nlet recognition = new window.SpeechRecognition()\n```\n\n### 3. 錄製聲音時會觸發條件\n\n`result` : 當事件觸發後會將值回傳，但值如果是 `undefined`，就沒辦法回傳\n\n```javascript\nrecognition.start()\nrecognition.addEventListener('result', onSpeak)\n```\n\n### 4. 觸發後抓取文字\n\n當使用者說出文字後，經過網頁處裡會得到一個文字的 `value` ，這 `value` 值會顯示在 `results` 陣列裡面，用 `console` 查看 `e.results` 如下圖。\n`value` 的 `key` 為 `transcript` 。\n\n再用 callback function 的方式，將函示切分方便管理。\n![](https://i.imgur.com/jA7fJOw.png)\n\n```javascript\nfunction onSpeak(e) {\n  const msg = e.results[0][0].transcript\n\n  writeMsg(msg)\n  checkMsg(msg)\n}\n```\n\n### 5. 將文字顯示在 DOM 上\n\n```javascript\nfunction writeMsg(msg) {\n  msgEl.innerHTML = `\n    <div>You said: </div>\n    <span class=\"box\">${msg}</span>\n  `\n}\n```\n\n### 6. 判斷錄製的文字是否符合標準\n\n為防止說的不是數字或是大於區間，需要寫一點防範機制，如果使用者說了數字沒有答對，就要給點提示，讓使用者有方向。\n\n1. 只能是數字\n2. 只能在區間內\n3. 提示數字要高還是低，讓使用者知道方向\n\n```javascript\nfunction checkMsg(msg) {\n  // 主換數字型別\n  const num = +msg\n\n  // 判斷說的是不是數字\n  if (Number.isNaN(num)) {\n    msgEl.innerHTML = `<div>請說數字 !</div>`\n  }\n\n  // 判斷數字區間\n  if (num > 100 || num < 1) {\n    msgEl.innerHTML = `<div>數字只能介於 1~100 之間</div>`\n  }\n\n  // 開始猜測，決定數字要喊高還是喊低\n  if (num === randomNumber) {\n    document.body.innerHTML = `\n      <h2>恭喜猜中! <br><br>\n      就是 ${num}</h2>\n      <button class=\"play-again\" id=\"play-again\">再玩一次</button>\n      `\n  } else if (num > randomNumber) {\n    msgEl.innerHTML = `<div>再低</div>`\n  } else {\n    msgEl.innerHTML = `<div>再高</div>`\n  }\n}\n```\n\n### 7. 再挑戰一次\n\n一旦挑戰成功後，為了讓使用者可以在挑戰一次。將網頁刷新一次就可以了。\n因為 btn 是用字串模板的方式載入的，所以不能用選擇器綁 DOM 元素，但可以用按鈕 id 的方式來識別。\n\n```javascript\ndocument.body.addEventListener('click', (e) => {\n  if (e.target.id === 'play-again') {\n    window.location.reload()\n  }\n})\n```\n\n## 參考資料\n\n[SpeechRecognition: result event](https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/result_event)\n[SpeechRecognition](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview)\n","source":"_posts/2020/猜數字.md","raw":"---\ntitle: JavaScript 實作 - 猜數字\ndate: 2021/02/01\ntags:\n  - JavaScript\n  - 作品集\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n## 功能敘述 :\n\n1. 猜數字，有固定範圍。\n2. 猜錯會告知區間。\n3. 如果猜的不是數字會顯示訊息提示。\n\n![](https://i.imgur.com/vJSz4wN.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission28)\n[Demo](https://pktseng.github.io/Web-Side-Project/mission28/index.html)\n\n<!--more-->\n\n## 模板架構\n\n```html\n<img src=\"img/mic.png\" alt=\"Speak\" />\n\n<h1>請猜一個 1 ~ 100 以內的數字</h1>\n\n<h3>請對麥克風說出一個數字</h3>\n\n<div id=\"msg\" class=\"msg\">\n  <!-- <div>You said:</div>\n  <span class=\"box\">Guessed number</span>\n  <div>number range</div> -->\n</div>\n```\n\n## 功能撰寫\n\n### 1. 取隨機數字，限定 1~100 以內\n\n`Math.random` : 隨機產生出 0~1 之間的小數，因為小於 1 ，所以最大是 0.99。\n`Math.floor` : 回傳小於等於所給數字的最大整數。\n\n```javascript\nfunction getRandomNumber() {\n  return Math.floor(Math.random() * 100) + 1 // +1 範圍才會到 100\n}\n```\n\n### 2. 錄製麥克風的聲音\n\n[SpeechRecognition](https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB) : 在 Chrome 上使用語音辨識的功能，會把聲音發送到網頁裡面進行識別處理，要注意的是不能離線工作。\n\n```javascript\nwindow.SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition\n\nlet recognition = new window.SpeechRecognition()\n```\n\n### 3. 錄製聲音時會觸發條件\n\n`result` : 當事件觸發後會將值回傳，但值如果是 `undefined`，就沒辦法回傳\n\n```javascript\nrecognition.start()\nrecognition.addEventListener('result', onSpeak)\n```\n\n### 4. 觸發後抓取文字\n\n當使用者說出文字後，經過網頁處裡會得到一個文字的 `value` ，這 `value` 值會顯示在 `results` 陣列裡面，用 `console` 查看 `e.results` 如下圖。\n`value` 的 `key` 為 `transcript` 。\n\n再用 callback function 的方式，將函示切分方便管理。\n![](https://i.imgur.com/jA7fJOw.png)\n\n```javascript\nfunction onSpeak(e) {\n  const msg = e.results[0][0].transcript\n\n  writeMsg(msg)\n  checkMsg(msg)\n}\n```\n\n### 5. 將文字顯示在 DOM 上\n\n```javascript\nfunction writeMsg(msg) {\n  msgEl.innerHTML = `\n    <div>You said: </div>\n    <span class=\"box\">${msg}</span>\n  `\n}\n```\n\n### 6. 判斷錄製的文字是否符合標準\n\n為防止說的不是數字或是大於區間，需要寫一點防範機制，如果使用者說了數字沒有答對，就要給點提示，讓使用者有方向。\n\n1. 只能是數字\n2. 只能在區間內\n3. 提示數字要高還是低，讓使用者知道方向\n\n```javascript\nfunction checkMsg(msg) {\n  // 主換數字型別\n  const num = +msg\n\n  // 判斷說的是不是數字\n  if (Number.isNaN(num)) {\n    msgEl.innerHTML = `<div>請說數字 !</div>`\n  }\n\n  // 判斷數字區間\n  if (num > 100 || num < 1) {\n    msgEl.innerHTML = `<div>數字只能介於 1~100 之間</div>`\n  }\n\n  // 開始猜測，決定數字要喊高還是喊低\n  if (num === randomNumber) {\n    document.body.innerHTML = `\n      <h2>恭喜猜中! <br><br>\n      就是 ${num}</h2>\n      <button class=\"play-again\" id=\"play-again\">再玩一次</button>\n      `\n  } else if (num > randomNumber) {\n    msgEl.innerHTML = `<div>再低</div>`\n  } else {\n    msgEl.innerHTML = `<div>再高</div>`\n  }\n}\n```\n\n### 7. 再挑戰一次\n\n一旦挑戰成功後，為了讓使用者可以在挑戰一次。將網頁刷新一次就可以了。\n因為 btn 是用字串模板的方式載入的，所以不能用選擇器綁 DOM 元素，但可以用按鈕 id 的方式來識別。\n\n```javascript\ndocument.body.addEventListener('click', (e) => {\n  if (e.target.id === 'play-again') {\n    window.location.reload()\n  }\n})\n```\n\n## 參考資料\n\n[SpeechRecognition: result event](https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/result_event)\n[SpeechRecognition](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview)\n","slug":"猜數字","published":1,"updated":"2021-03-26T16:13:09.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lqa0028g0tr91z5cyn6","content":"<html><head></head><body><h2 id=\"功能敘述\"><a href=\"#功能敘述\" class=\"headerlink\" title=\"功能敘述 :\"></a>功能敘述 :</h2><ol>\n<li>猜數字，有固定範圍。</li>\n<li>猜錯會告知區間。</li>\n<li>如果猜的不是數字會顯示訊息提示。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/vJSz4wN.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission28\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission28/index.html\">Demo</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"模板架構\"><a href=\"#模板架構\" class=\"headerlink\" title=\"模板架構\"></a>模板架構</h2><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"img/mic.png\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Speak\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>請猜一個 1 ~ 100 以內的數字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>請對麥克風說出一個數字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"msg\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"msg\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">&lt;!-- &lt;div&gt;You said:&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  &lt;span class=\"box\"&gt;Guessed number&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  &lt;div&gt;number range&lt;/div&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"功能撰寫\"><a href=\"#功能撰寫\" class=\"headerlink\" title=\"功能撰寫\"></a>功能撰寫</h2><h3 id=\"1-取隨機數字，限定-1-100-以內\"><a href=\"#1-取隨機數字，限定-1-100-以內\" class=\"headerlink\" title=\"1. 取隨機數字，限定 1~100 以內\"></a>1. 取隨機數字，限定 1~100 以內</h3><p><code>Math.random</code> : 隨機產生出 0~1 之間的小數，因為小於 1 ，所以最大是 0.99。<br><code>Math.floor</code> : 回傳小於等於所給數字的最大整數。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRandomNumber</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">100</span>) + <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// +1 範圍才會到 100</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-錄製麥克風的聲音\"><a href=\"#2-錄製麥克風的聲音\" class=\"headerlink\" title=\"2. 錄製麥克風的聲音\"></a>2. 錄製麥克風的聲音</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB\">SpeechRecognition</a> : 在 Chrome 上使用語音辨識的功能，會把聲音發送到網頁裡面進行識別處理，要注意的是不能離線工作。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">window</span>.SpeechRecognition =</span><br><span class=\"line\">  <span class=\"hljs-built_in\">window</span>.SpeechRecognition || <span class=\"hljs-built_in\">window</span>.webkitSpeechRecognition</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> recognition = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">window</span>.SpeechRecognition()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-錄製聲音時會觸發條件\"><a href=\"#3-錄製聲音時會觸發條件\" class=\"headerlink\" title=\"3. 錄製聲音時會觸發條件\"></a>3. 錄製聲音時會觸發條件</h3><p><code>result</code> : 當事件觸發後會將值回傳，但值如果是 <code>undefined</code>，就沒辦法回傳</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recognition.start()</span><br><span class=\"line\">recognition.addEventListener(<span class=\"hljs-string\">'result'</span>, onSpeak)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-觸發後抓取文字\"><a href=\"#4-觸發後抓取文字\" class=\"headerlink\" title=\"4. 觸發後抓取文字\"></a>4. 觸發後抓取文字</h3><p>當使用者說出文字後，經過網頁處裡會得到一個文字的 <code>value</code> ，這 <code>value</code> 值會顯示在 <code>results</code> 陣列裡面，用 <code>console</code> 查看 <code>e.results</code> 如下圖。<br><code>value</code> 的 <code>key</code> 為 <code>transcript</code> 。</p>\n<p>再用 callback function 的方式，將函示切分方便管理。<br><img src=\"https://i.imgur.com/jA7fJOw.png\"></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onSpeak</span>(<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> msg = e.results[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>].transcript</span><br><span class=\"line\"></span><br><span class=\"line\">  writeMsg(msg)</span><br><span class=\"line\">  checkMsg(msg)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"5-將文字顯示在-DOM-上\"><a href=\"#5-將文字顯示在-DOM-上\" class=\"headerlink\" title=\"5. 將文字顯示在 DOM 上\"></a>5. 將文字顯示在 DOM 上</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">writeMsg</span>(<span class=\"hljs-params\">msg</span>) </span>{</span><br><span class=\"line\">  msgEl.innerHTML = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;div&gt;You said: &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;span class=\"box\"&gt;<span class=\"hljs-subst\">${msg}</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  `</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"6-判斷錄製的文字是否符合標準\"><a href=\"#6-判斷錄製的文字是否符合標準\" class=\"headerlink\" title=\"6. 判斷錄製的文字是否符合標準\"></a>6. 判斷錄製的文字是否符合標準</h3><p>為防止說的不是數字或是大於區間，需要寫一點防範機制，如果使用者說了數字沒有答對，就要給點提示，讓使用者有方向。</p>\n<ol>\n<li>只能是數字</li>\n<li>只能在區間內</li>\n<li>提示數字要高還是低，讓使用者知道方向</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkMsg</span>(<span class=\"hljs-params\">msg</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 主換數字型別</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> num = +msg</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 判斷說的是不是數字</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Number</span>.isNaN(num)) {</span><br><span class=\"line\">    msgEl.innerHTML = <span class=\"hljs-string\">`&lt;div&gt;請說數字 !&lt;/div&gt;`</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 判斷數字區間</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (num &gt; <span class=\"hljs-number\">100</span> || num &lt; <span class=\"hljs-number\">1</span>) {</span><br><span class=\"line\">    msgEl.innerHTML = <span class=\"hljs-string\">`&lt;div&gt;數字只能介於 1~100 之間&lt;/div&gt;`</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 開始猜測，決定數字要喊高還是喊低</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (num === randomNumber) {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">document</span>.body.innerHTML = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;h2&gt;恭喜猜中! &lt;br&gt;&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      就是 <span class=\"hljs-subst\">${num}</span>&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      &lt;button class=\"play-again\" id=\"play-again\"&gt;再玩一次&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">      `</span></span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (num &gt; randomNumber) {</span><br><span class=\"line\">    msgEl.innerHTML = <span class=\"hljs-string\">`&lt;div&gt;再低&lt;/div&gt;`</span></span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    msgEl.innerHTML = <span class=\"hljs-string\">`&lt;div&gt;再高&lt;/div&gt;`</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"7-再挑戰一次\"><a href=\"#7-再挑戰一次\" class=\"headerlink\" title=\"7. 再挑戰一次\"></a>7. 再挑戰一次</h3><p>一旦挑戰成功後，為了讓使用者可以在挑戰一次。將網頁刷新一次就可以了。<br>因為 btn 是用字串模板的方式載入的，所以不能用選擇器綁 DOM 元素，但可以用按鈕 id 的方式來識別。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">document</span>.body.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (e.target.id === <span class=\"hljs-string\">'play-again'</span>) {</span><br><span class=\"line\">    <span class=\"hljs-built_in\">window</span>.location.reload()</span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/result_event\">SpeechRecognition: result event</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition\">SpeechRecognition</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview\">20 Web Projects With Vanilla JavaScript</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"作品集","path":"tags/作品集/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><h2 id=\"功能敘述\"><a href=\"#功能敘述\" class=\"headerlink\" title=\"功能敘述 :\"></a>功能敘述 :</h2><ol>\n<li>猜數字，有固定範圍。</li>\n<li>猜錯會告知區間。</li>\n<li>如果猜的不是數字會顯示訊息提示。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/vJSz4wN.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission28\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission28/index.html\">Demo</a></p></body></html>","more":"<h2 id=\"模板架構\"><a href=\"#模板架構\" class=\"headerlink\" title=\"模板架構\"></a>模板架構</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/mic.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Speak&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>請猜一個 1 ~ 100 以內的數字<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>請對麥克風說出一個數字<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;msg&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;div&gt;You said:&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;span class=&quot;box&quot;&gt;Guessed number&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div&gt;number range&lt;/div&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"功能撰寫\"><a href=\"#功能撰寫\" class=\"headerlink\" title=\"功能撰寫\"></a>功能撰寫</h2><h3 id=\"1-取隨機數字，限定-1-100-以內\"><a href=\"#1-取隨機數字，限定-1-100-以內\" class=\"headerlink\" title=\"1. 取隨機數字，限定 1~100 以內\"></a>1. 取隨機數字，限定 1~100 以內</h3><p><code>Math.random</code> : 隨機產生出 0~1 之間的小數，因為小於 1 ，所以最大是 0.99。<br><code>Math.floor</code> : 回傳小於等於所給數字的最大整數。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandomNumber</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span> <span class=\"comment\">// +1 範圍才會到 100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-錄製麥克風的聲音\"><a href=\"#2-錄製麥克風的聲音\" class=\"headerlink\" title=\"2. 錄製麥克風的聲音\"></a>2. 錄製麥克風的聲音</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB\">SpeechRecognition</a> : 在 Chrome 上使用語音辨識的功能，會把聲音發送到網頁裡面進行識別處理，要注意的是不能離線工作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.SpeechRecognition =</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.SpeechRecognition || <span class=\"built_in\">window</span>.webkitSpeechRecognition</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> recognition = <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.SpeechRecognition()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-錄製聲音時會觸發條件\"><a href=\"#3-錄製聲音時會觸發條件\" class=\"headerlink\" title=\"3. 錄製聲音時會觸發條件\"></a>3. 錄製聲音時會觸發條件</h3><p><code>result</code> : 當事件觸發後會將值回傳，但值如果是 <code>undefined</code>，就沒辦法回傳</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recognition.start()</span><br><span class=\"line\">recognition.addEventListener(<span class=\"string\">&#x27;result&#x27;</span>, onSpeak)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-觸發後抓取文字\"><a href=\"#4-觸發後抓取文字\" class=\"headerlink\" title=\"4. 觸發後抓取文字\"></a>4. 觸發後抓取文字</h3><p>當使用者說出文字後，經過網頁處裡會得到一個文字的 <code>value</code> ，這 <code>value</code> 值會顯示在 <code>results</code> 陣列裡面，用 <code>console</code> 查看 <code>e.results</code> 如下圖。<br><code>value</code> 的 <code>key</code> 為 <code>transcript</code> 。</p>\n<p>再用 callback function 的方式，將函示切分方便管理。<br><img src=\"https://i.imgur.com/jA7fJOw.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onSpeak</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> msg = e.results[<span class=\"number\">0</span>][<span class=\"number\">0</span>].transcript</span><br><span class=\"line\"></span><br><span class=\"line\">  writeMsg(msg)</span><br><span class=\"line\">  checkMsg(msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-將文字顯示在-DOM-上\"><a href=\"#5-將文字顯示在-DOM-上\" class=\"headerlink\" title=\"5. 將文字顯示在 DOM 上\"></a>5. 將文字顯示在 DOM 上</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeMsg</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  msgEl.innerHTML = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;You said: &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span class=&quot;box&quot;&gt;<span class=\"subst\">$&#123;msg&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-判斷錄製的文字是否符合標準\"><a href=\"#6-判斷錄製的文字是否符合標準\" class=\"headerlink\" title=\"6. 判斷錄製的文字是否符合標準\"></a>6. 判斷錄製的文字是否符合標準</h3><p>為防止說的不是數字或是大於區間，需要寫一點防範機制，如果使用者說了數字沒有答對，就要給點提示，讓使用者有方向。</p>\n<ol>\n<li>只能是數字</li>\n<li>只能在區間內</li>\n<li>提示數字要高還是低，讓使用者知道方向</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkMsg</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 主換數字型別</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> num = +msg</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判斷說的是不是數字</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNaN(num)) &#123;</span><br><span class=\"line\">    msgEl.innerHTML = <span class=\"string\">`&lt;div&gt;請說數字 !&lt;/div&gt;`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判斷數字區間</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">100</span> || num &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    msgEl.innerHTML = <span class=\"string\">`&lt;div&gt;數字只能介於 1~100 之間&lt;/div&gt;`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 開始猜測，決定數字要喊高還是喊低</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num === randomNumber) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;h2&gt;恭喜猜中! &lt;br&gt;&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"string\">      就是 <span class=\"subst\">$&#123;num&#125;</span>&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button class=&quot;play-again&quot; id=&quot;play-again&quot;&gt;再玩一次&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">      `</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &gt; randomNumber) &#123;</span><br><span class=\"line\">    msgEl.innerHTML = <span class=\"string\">`&lt;div&gt;再低&lt;/div&gt;`</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    msgEl.innerHTML = <span class=\"string\">`&lt;div&gt;再高&lt;/div&gt;`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-再挑戰一次\"><a href=\"#7-再挑戰一次\" class=\"headerlink\" title=\"7. 再挑戰一次\"></a>7. 再挑戰一次</h3><p>一旦挑戰成功後，為了讓使用者可以在挑戰一次。將網頁刷新一次就可以了。<br>因為 btn 是用字串模板的方式載入的，所以不能用選擇器綁 DOM 元素，但可以用按鈕 id 的方式來識別。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target.id === <span class=\"string\">&#x27;play-again&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location.reload()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/result_event\">SpeechRecognition: result event</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition\">SpeechRecognition</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview\">20 Web Projects With Vanilla JavaScript</a></p>"},{"title":"JavaScript 實作 - 記帳簿","date":"2021-01-12T16:00:00.000Z","_content":"\n功能描述:\n輸入記帳名稱並計算該物品的價格。\n\n![](https://i.imgur.com/EKaScxe.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission24)\n[DEMO](https://pktseng.github.io/Web-Side-Project/mission24/index.html)\n\n## <!--more-->\n\n## HTML 模板\n\n給個容器，並將顯示及輸入的內容寫在裡面，比較特別的地方是 `list` ，`list` 裡面的項目清單會交由 `JavaScript` 字串模板來撰寫\n\n```html\n<h2>Expense Tracker</h2>\n<div class=\"container\">\n  <h4>Your Balance</h4>\n  <h1 id=\"balance\">$0.00</h1>\n\n  <div class=\"inc-exp-container\">\n    <div>\n      <h4>Income</h4>\n      <p id=\"money-plus\" class=\"money plus\">+$0.00</p>\n    </div>\n    <div>\n      <h4>Expense</h4>\n      <p id=\"money-minus\" class=\"money minus\">-$0.00</p>\n    </div>\n  </div>\n\n  <h3>History</h3>\n  <ul id=\"list\" class=\"list\">\n    <!-- <li class=\"minus\">\n      Cash <span>-$400</span><button class=\"delete-btn\">x</button>\n    </li> -->\n  </ul>\n\n  <h3>Add new transaction</h3>\n  <form id=\"form\">\n    <div class=\"form-control\">\n      <label for=\"text\">Text</label>\n      <input type=\"text\" id=\"text\" placeholder=\"Enter text...\" />\n    </div>\n    <div class=\"form-control\">\n      <label for=\"amount\"\n        >Amount <br />\n        (negative - expense, positive - income)</label\n      >\n      <input type=\"number\" id=\"amount\" placeholder=\"Enter amount...\" />\n    </div>\n    <button class=\"btn\">Add transaction</button>\n  </form>\n</div>\n```\n\n## CSS 樣式\n\n要注意的是 `plus`、`minus` 樣式，因為這兩個樣式會透過 `JavaScript` 的函式來控制\n\n```css\n@import url('https://fonts.googleapis.com/css?family=Lato&display=swap');\n\n:root {\n  --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: #f7f7f7;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  margin: 0;\n  font-family: 'Lato', sans-serif;\n}\n\n.container {\n  margin: 30px auto;\n  width: 350px;\n}\n\nh1 {\n  letter-spacing: 1px;\n  margin: 0;\n}\n\nh3 {\n  border-bottom: 1px solid #bbb;\n  padding-bottom: 10px;\n  margin: 40px 0 10px;\n}\n\nh4 {\n  margin: 0;\n  text-transform: uppercase;\n}\n\n.inc-exp-container {\n  background-color: #fff;\n  box-shadow: var(--box-shadow);\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n  margin: 20px 0;\n}\n\n.inc-exp-container > div {\n  flex: 1;\n  text-align: center;\n}\n\n.inc-exp-container > div:first-of-type {\n  border-right: 1px solid #dedede;\n}\n\n.money {\n  font-size: 20px;\n  letter-spacing: 1px;\n  margin: 5px 0;\n}\n\n.money.plus {\n  color: #2ecc71;\n}\n\n.money.minus {\n  color: #c0392b;\n}\n\nlabel {\n  display: inline-block;\n  margin: 10px 0;\n}\n\ninput[type='text'],\ninput[type='number'] {\n  border: 1px solid #dedede;\n  border-radius: 2px;\n  display: block;\n  font-size: 16px;\n  padding: 10px;\n  width: 100%;\n}\n\n.btn {\n  cursor: pointer;\n  background-color: #9c88ff;\n  box-shadow: var(--box-shadow);\n  color: #fff;\n  border: 0;\n  display: block;\n  font-size: 16px;\n  margin: 10px 0 30px;\n  padding: 10px;\n  width: 100%;\n}\n\n.btn:focus,\n.delete-btn:focus {\n  outline: 0;\n}\n\n.list {\n  list-style-type: none;\n  padding: 0;\n  margin-bottom: 40px;\n}\n\n.list li {\n  background-color: #fff;\n  box-shadow: var(--box-shadow);\n  color: #333;\n  display: flex;\n  justify-content: space-between;\n  position: relative;\n  padding: 10px;\n  margin: 10px 0;\n}\n\n.list li.plus {\n  border-right: 5px solid #2ecc71;\n}\n\n.list li.minus {\n  border-right: 5px solid #c0392b;\n}\n\n.delete-btn {\n  cursor: pointer;\n  background-color: #e74c3c;\n  border: 0;\n  color: #fff;\n  font-size: 20px;\n  line-height: 20px;\n  padding: 2px 5px;\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translate(-100%, -50%);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.list li:hover .delete-btn {\n  opacity: 1;\n}\n```\n\n## JavaScript\n\n所有互動將從這邊開始撰寫，也算是重頭戲!\n\n### 1. 首先抓取 DOM 元素並設定成變數\n\n```javascript\nconst balance = document.querySelector('#balance')\nconst moneyPlus = document.querySelector('#money-plus')\nconst moneyMinus = document.querySelector('#money-minus')\nconst list = document.querySelector('#list')\nconst text = document.querySelector('#text')\nconst form = document.querySelector('#form')\nconst amount = document.querySelector('#amount')\n```\n\n### 2. 新增 DOM list 項目清單\n\n為了方便測試先寫一個陣列的假資料\n\n```javascript\nconst dummyTransactions = [\n  { id: 1, text: 'Flower', amount: -20 },\n  { id: 2, text: 'Salary', amount: 300 },\n  { id: 3, text: 'Book', amount: -10 },\n  { id: 4, text: 'Camera', amount: 150 },\n]\n\n// 將假資料暫時帶入 transaction 變數裡面\nlet transactions = dummyTransactions\n```\n\n接著撰寫新增 list 項目清單，因為在撰寫項目清單時不確定會有幾個，因此在這邊用字串模板的方式載入，為了要載入新的項目必須要創建新的元素，這時候可以用 `createElement` 的方式來新增，新增好後要透過輸入的值來判斷是正還是負，這樣可以連帶綁定 css 樣式的顏色，最後利用字串模板的方式來顯示項目，不果字串模板裡面已經有判斷正負號了，所以後面的值就用 `Math.abs` 取絕對值的方式來顯示。\n\n#### 步驟如下:\n\n1. 新增函式\n2. 判斷正負號\n3. 新增項目元素，同時賦予到 `item` 變數上\n4. 判斷 `item` 輸入的值決定要綁定的顏色\n5. 用字串模板的方式將值賦予到 `item`\n6. 再將 `item` 透過 `appendChild` 的方式塞到 `list` 元素裡面\n\n```javascript\nfunction addTransactionDOM(transaction) {\n  // 判斷正負值\n  const sign = transaction.amount > 0 ? '+' : '-'\n  // console.log(sign)\n  // 新增 li 元素\n  const item = document.createElement('li')\n  // console.log(item)\n\n  // 將 className 新增到 item ，判斷顯示的顏色\n  item.classList.add(transaction.amount > 0 ? 'plus' : 'minus')\n\n  // removeTransaction 要綁id ，不然會刪到同名的\n  item.innerHTML = `${transaction.text}<span>${sign}${Math.abs(\n    transaction.amount\n  )}</span><button>X</button>`\n\n  list.appendChild(item)\n}\n```\n\n### 3. 初始化\n\n每當執行完某些動作時，都要將值初始化\n\n`forEach` :會將陣列中每個元素套用到指定的函式裡進行運算。\n\n```javascript\nfunction init() {\n  // 輸入完之後 list 要回復空值\n  list.innerHTML = ''\n\n  // 將假資料丟到 addTransactionDOM 函式裡面運算\n  transactions.forEach(addTransactionDOM)\n\n  updateValue()\n}\n\ninit() // 執行\n```\n\n### 4. 監聽 form 表單內輸入的值\n\n接下來要判斷表單內輸入的值是否正確，如果輸入正確，將值同時綁定到 key 上，這麼做是為了防止刪除到同名的項目，像是用身分證綁定每筆資料的概念。\n\n首先利用 `callbakc function` 的方式將函式賦予到 `addTransaction` 參數上，再用 if 判斷式判斷輸入的值是否為空值，如果不是空值，將輸入的值綁定到物件的 key 上，同時執行個兩函式\n\n1. 將 `transaction` 變數新增到陣列清單裡面(這邊暫時用假資料的陣列)\n2. 將 `transaction` 帶到 `addTransactionDOM` 函式執行\n\n然後再將輸入框的值清空\n\n`Math.floor` :將有小數的值取成整數\n`Math.random` :取亂數，建立變數的身分證\n\n#### 步驟\n\n1. 監聽表單元素\n2. 判斷輸入值同時將輸入的值用 id 綁定\n3. 同時執行三的動作，將值新增到陣列內、判斷輸入值得正負、將值清空\n\n```javascript\nfunction addTransaction(e) {\n  e.preventDefault()\n\n  // 先判斷輸入是否為空值，若不是則繼續執行\n  if (text.value === '' || amount.value === '') {\n    alert('請重新輸入')\n  } else {\n    // 如果不是空值，將輸入的 value 帶入 key 裡\n    const transaction = {\n      id: generateID(),\n      text: text.value,\n      amount: +amount.value, //前面的+是為了轉成 number 型別\n    }\n\n    // 將新增的 transaction 物件加入到 transactions 物陣列內\n    transactions.push(transaction)\n\n    // 執行 addTransactionDOM 函式，並帶入transaction\n    addTransactionDOM(transaction)\n\n    // 執行帶值跟計算\n    updateValue()\n    updateLocalStorage()\n    // 輸入完後恢復空值\n    text.value = ''\n    amount.value = ''\n  }\n}\n\nfunction generateID() {\n  return Math.floor(Math.random() * 1000000)\n}\n\nform.addEventListener('submit', addTransaction)\n```\n\n---\n\n### 5. 計算收入與支出\n\n以上判斷值的正確性跟顯示的樣式都寫好了，接下來要計算輸入的值\n將 `transaction ` 帶到 `transaction.amount` 裡面，再用 `map` 計算，判斷陣列內值，再將值賦予到 `amounts` 變數裡面，透過 `amounts` 變數去計算總結、收入、支出的值。\n\n算好後將計算的值賦予到 DOM 元素上這樣就可以顯示計算的值了。\n\n- `acc` 是計算出來的總值， `item` 是每次新增的每一筆資料。\n- `map` :處理陣列中每個元素，最後回傳出一個新的陣列。\n- `filter` :會將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件則會產生新的陣列元素。\n- `reduce` :將陣列中每個元素進行計算，每次計算的結果會再與下個元素作計算，直到結束為止。\n\n```javascript\nfunction updateValue() {\n  const amounts = transactions.map((transaction) => transaction.amount)\n\n  // 計算總結\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2)\n\n  // 計算收入\n  const income = amounts\n    .filter((item) => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2)\n\n  // 計算支出\n  const expense =\n    amounts.filter((item) => item < 0).reduce((acc, item) => (acc += item), 0) *\n    -1\n\n  // 將 total、income、expense 塞到各 dom 裡面\n  balance.innerHTML = `${total}`\n  moneyPlus.innerHTML = `${income}`\n  moneyMinus.innerHTML = `${expense}`\n}\n```\n\n---\n\n### 6. 移除輸入的值\n\n如果有新增的項目不要了，那就會用到刪除，刪除的函式是認剛才綁定的 id 就是陣列的身分證，觸發條件是當我 `onclick` 的時候就可以移除剛該筆項目。\n\n在剛才的 `addTransactionDOM` 裡面有個字串模板，因為項目是在這邊創建的，那刪除也一起寫在這，透過 `removeTransaction` 函式綁定 `id`\n\n```javascript\nitem.innerHTML = `${transaction.text}\n<span>${sign}${Math.abs(transaction.amount)}</span>\n<button class='delete-btn' onclick='removeTransaction(${transaction.id})'>\nX\n</button>`\n```\n\n刪除的函式\n\n```javascript\nfunction removeTransaction(id) {\n  //記得帶 id 參數，不然會 fail\n  //邏輯??\n  transactions = transactions.filter((transaction) => transaction.id !== id)\n\n  // 刪除後重新儲存在本地端\n  updateLocalStorage()\n  init()\n}\n```\n\n---\n\n### 7. 將計算的歷史紀錄保存起來，並存在本地端\n\n因為要要記錄自己新增的每筆資料，所以之前代替用的假資料可以刪掉了\n\n1. `Storage.setItem('key', 'value')`：\n   透過在 `setItem()` 方法中指定物件屬性的 `key` 以及 `value` ，\n   我們可以在 `storage` 物件中加入屬性或修改原本的屬性內容。\n\n2.` Storage.getItem('key')`：\n透過在 `getItem()` 方法中輸入屬性的 `key` ，我們可以得到 `storage` 物件對應的屬性 `value` 。\n\n---\n\n利用 `getItem` 將 `transactions` 的 `key` 值輸入到 `localStorage` 裡面，再利用 `JSON.parse` 將值轉成物件格式，然後在賦予到 `localStorageTransactions` 變數中\n\n如果 `localStorage` 抓到的值是 `null` 會自動轉換成空值\n\n```javascript\nconst localStorageTransactions = JSON.parse(\n  localStorage.getItem('transactions')\n)\n\nlet transactions =\n  localStorage.getItem('transactions') !== null ? localStorageTransactions : []\n```\n\n利用 `setItem` 的方式將 `transactions` 設定成 `key` ，將 `transactions` 透過 `JSON.stringify` 的方式轉成字串並設定成 `value` ，加到 `addTransaction`、`removeTransaction` 函式裡面，這樣在新增每筆資料的時候不只同時綁定 `id` 還記錄到了本地端的歷史紀錄裡面。\n\n```javascript\nfunction updateLocalStorage() {\n  localStorage.setItem('transactions', JSON.stringify(transactions))\n}\n```\n\n---\n\n## 參考資料\n\n[JS30-Day15-LocalStorage](https://ithelp.ithome.com.tw/articles/10195522)\n[JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview)\n","source":"_posts/2020/記帳.md","raw":"---\ntitle: JavaScript 實作 - 記帳簿\ndate: 2021/01/13\ntags:\n  - JavaScript\n  - jQuery\n  - 作品集\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n功能描述:\n輸入記帳名稱並計算該物品的價格。\n\n![](https://i.imgur.com/EKaScxe.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission24)\n[DEMO](https://pktseng.github.io/Web-Side-Project/mission24/index.html)\n\n## <!--more-->\n\n## HTML 模板\n\n給個容器，並將顯示及輸入的內容寫在裡面，比較特別的地方是 `list` ，`list` 裡面的項目清單會交由 `JavaScript` 字串模板來撰寫\n\n```html\n<h2>Expense Tracker</h2>\n<div class=\"container\">\n  <h4>Your Balance</h4>\n  <h1 id=\"balance\">$0.00</h1>\n\n  <div class=\"inc-exp-container\">\n    <div>\n      <h4>Income</h4>\n      <p id=\"money-plus\" class=\"money plus\">+$0.00</p>\n    </div>\n    <div>\n      <h4>Expense</h4>\n      <p id=\"money-minus\" class=\"money minus\">-$0.00</p>\n    </div>\n  </div>\n\n  <h3>History</h3>\n  <ul id=\"list\" class=\"list\">\n    <!-- <li class=\"minus\">\n      Cash <span>-$400</span><button class=\"delete-btn\">x</button>\n    </li> -->\n  </ul>\n\n  <h3>Add new transaction</h3>\n  <form id=\"form\">\n    <div class=\"form-control\">\n      <label for=\"text\">Text</label>\n      <input type=\"text\" id=\"text\" placeholder=\"Enter text...\" />\n    </div>\n    <div class=\"form-control\">\n      <label for=\"amount\"\n        >Amount <br />\n        (negative - expense, positive - income)</label\n      >\n      <input type=\"number\" id=\"amount\" placeholder=\"Enter amount...\" />\n    </div>\n    <button class=\"btn\">Add transaction</button>\n  </form>\n</div>\n```\n\n## CSS 樣式\n\n要注意的是 `plus`、`minus` 樣式，因為這兩個樣式會透過 `JavaScript` 的函式來控制\n\n```css\n@import url('https://fonts.googleapis.com/css?family=Lato&display=swap');\n\n:root {\n  --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: #f7f7f7;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  margin: 0;\n  font-family: 'Lato', sans-serif;\n}\n\n.container {\n  margin: 30px auto;\n  width: 350px;\n}\n\nh1 {\n  letter-spacing: 1px;\n  margin: 0;\n}\n\nh3 {\n  border-bottom: 1px solid #bbb;\n  padding-bottom: 10px;\n  margin: 40px 0 10px;\n}\n\nh4 {\n  margin: 0;\n  text-transform: uppercase;\n}\n\n.inc-exp-container {\n  background-color: #fff;\n  box-shadow: var(--box-shadow);\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n  margin: 20px 0;\n}\n\n.inc-exp-container > div {\n  flex: 1;\n  text-align: center;\n}\n\n.inc-exp-container > div:first-of-type {\n  border-right: 1px solid #dedede;\n}\n\n.money {\n  font-size: 20px;\n  letter-spacing: 1px;\n  margin: 5px 0;\n}\n\n.money.plus {\n  color: #2ecc71;\n}\n\n.money.minus {\n  color: #c0392b;\n}\n\nlabel {\n  display: inline-block;\n  margin: 10px 0;\n}\n\ninput[type='text'],\ninput[type='number'] {\n  border: 1px solid #dedede;\n  border-radius: 2px;\n  display: block;\n  font-size: 16px;\n  padding: 10px;\n  width: 100%;\n}\n\n.btn {\n  cursor: pointer;\n  background-color: #9c88ff;\n  box-shadow: var(--box-shadow);\n  color: #fff;\n  border: 0;\n  display: block;\n  font-size: 16px;\n  margin: 10px 0 30px;\n  padding: 10px;\n  width: 100%;\n}\n\n.btn:focus,\n.delete-btn:focus {\n  outline: 0;\n}\n\n.list {\n  list-style-type: none;\n  padding: 0;\n  margin-bottom: 40px;\n}\n\n.list li {\n  background-color: #fff;\n  box-shadow: var(--box-shadow);\n  color: #333;\n  display: flex;\n  justify-content: space-between;\n  position: relative;\n  padding: 10px;\n  margin: 10px 0;\n}\n\n.list li.plus {\n  border-right: 5px solid #2ecc71;\n}\n\n.list li.minus {\n  border-right: 5px solid #c0392b;\n}\n\n.delete-btn {\n  cursor: pointer;\n  background-color: #e74c3c;\n  border: 0;\n  color: #fff;\n  font-size: 20px;\n  line-height: 20px;\n  padding: 2px 5px;\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translate(-100%, -50%);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.list li:hover .delete-btn {\n  opacity: 1;\n}\n```\n\n## JavaScript\n\n所有互動將從這邊開始撰寫，也算是重頭戲!\n\n### 1. 首先抓取 DOM 元素並設定成變數\n\n```javascript\nconst balance = document.querySelector('#balance')\nconst moneyPlus = document.querySelector('#money-plus')\nconst moneyMinus = document.querySelector('#money-minus')\nconst list = document.querySelector('#list')\nconst text = document.querySelector('#text')\nconst form = document.querySelector('#form')\nconst amount = document.querySelector('#amount')\n```\n\n### 2. 新增 DOM list 項目清單\n\n為了方便測試先寫一個陣列的假資料\n\n```javascript\nconst dummyTransactions = [\n  { id: 1, text: 'Flower', amount: -20 },\n  { id: 2, text: 'Salary', amount: 300 },\n  { id: 3, text: 'Book', amount: -10 },\n  { id: 4, text: 'Camera', amount: 150 },\n]\n\n// 將假資料暫時帶入 transaction 變數裡面\nlet transactions = dummyTransactions\n```\n\n接著撰寫新增 list 項目清單，因為在撰寫項目清單時不確定會有幾個，因此在這邊用字串模板的方式載入，為了要載入新的項目必須要創建新的元素，這時候可以用 `createElement` 的方式來新增，新增好後要透過輸入的值來判斷是正還是負，這樣可以連帶綁定 css 樣式的顏色，最後利用字串模板的方式來顯示項目，不果字串模板裡面已經有判斷正負號了，所以後面的值就用 `Math.abs` 取絕對值的方式來顯示。\n\n#### 步驟如下:\n\n1. 新增函式\n2. 判斷正負號\n3. 新增項目元素，同時賦予到 `item` 變數上\n4. 判斷 `item` 輸入的值決定要綁定的顏色\n5. 用字串模板的方式將值賦予到 `item`\n6. 再將 `item` 透過 `appendChild` 的方式塞到 `list` 元素裡面\n\n```javascript\nfunction addTransactionDOM(transaction) {\n  // 判斷正負值\n  const sign = transaction.amount > 0 ? '+' : '-'\n  // console.log(sign)\n  // 新增 li 元素\n  const item = document.createElement('li')\n  // console.log(item)\n\n  // 將 className 新增到 item ，判斷顯示的顏色\n  item.classList.add(transaction.amount > 0 ? 'plus' : 'minus')\n\n  // removeTransaction 要綁id ，不然會刪到同名的\n  item.innerHTML = `${transaction.text}<span>${sign}${Math.abs(\n    transaction.amount\n  )}</span><button>X</button>`\n\n  list.appendChild(item)\n}\n```\n\n### 3. 初始化\n\n每當執行完某些動作時，都要將值初始化\n\n`forEach` :會將陣列中每個元素套用到指定的函式裡進行運算。\n\n```javascript\nfunction init() {\n  // 輸入完之後 list 要回復空值\n  list.innerHTML = ''\n\n  // 將假資料丟到 addTransactionDOM 函式裡面運算\n  transactions.forEach(addTransactionDOM)\n\n  updateValue()\n}\n\ninit() // 執行\n```\n\n### 4. 監聽 form 表單內輸入的值\n\n接下來要判斷表單內輸入的值是否正確，如果輸入正確，將值同時綁定到 key 上，這麼做是為了防止刪除到同名的項目，像是用身分證綁定每筆資料的概念。\n\n首先利用 `callbakc function` 的方式將函式賦予到 `addTransaction` 參數上，再用 if 判斷式判斷輸入的值是否為空值，如果不是空值，將輸入的值綁定到物件的 key 上，同時執行個兩函式\n\n1. 將 `transaction` 變數新增到陣列清單裡面(這邊暫時用假資料的陣列)\n2. 將 `transaction` 帶到 `addTransactionDOM` 函式執行\n\n然後再將輸入框的值清空\n\n`Math.floor` :將有小數的值取成整數\n`Math.random` :取亂數，建立變數的身分證\n\n#### 步驟\n\n1. 監聽表單元素\n2. 判斷輸入值同時將輸入的值用 id 綁定\n3. 同時執行三的動作，將值新增到陣列內、判斷輸入值得正負、將值清空\n\n```javascript\nfunction addTransaction(e) {\n  e.preventDefault()\n\n  // 先判斷輸入是否為空值，若不是則繼續執行\n  if (text.value === '' || amount.value === '') {\n    alert('請重新輸入')\n  } else {\n    // 如果不是空值，將輸入的 value 帶入 key 裡\n    const transaction = {\n      id: generateID(),\n      text: text.value,\n      amount: +amount.value, //前面的+是為了轉成 number 型別\n    }\n\n    // 將新增的 transaction 物件加入到 transactions 物陣列內\n    transactions.push(transaction)\n\n    // 執行 addTransactionDOM 函式，並帶入transaction\n    addTransactionDOM(transaction)\n\n    // 執行帶值跟計算\n    updateValue()\n    updateLocalStorage()\n    // 輸入完後恢復空值\n    text.value = ''\n    amount.value = ''\n  }\n}\n\nfunction generateID() {\n  return Math.floor(Math.random() * 1000000)\n}\n\nform.addEventListener('submit', addTransaction)\n```\n\n---\n\n### 5. 計算收入與支出\n\n以上判斷值的正確性跟顯示的樣式都寫好了，接下來要計算輸入的值\n將 `transaction ` 帶到 `transaction.amount` 裡面，再用 `map` 計算，判斷陣列內值，再將值賦予到 `amounts` 變數裡面，透過 `amounts` 變數去計算總結、收入、支出的值。\n\n算好後將計算的值賦予到 DOM 元素上這樣就可以顯示計算的值了。\n\n- `acc` 是計算出來的總值， `item` 是每次新增的每一筆資料。\n- `map` :處理陣列中每個元素，最後回傳出一個新的陣列。\n- `filter` :會將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件則會產生新的陣列元素。\n- `reduce` :將陣列中每個元素進行計算，每次計算的結果會再與下個元素作計算，直到結束為止。\n\n```javascript\nfunction updateValue() {\n  const amounts = transactions.map((transaction) => transaction.amount)\n\n  // 計算總結\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2)\n\n  // 計算收入\n  const income = amounts\n    .filter((item) => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2)\n\n  // 計算支出\n  const expense =\n    amounts.filter((item) => item < 0).reduce((acc, item) => (acc += item), 0) *\n    -1\n\n  // 將 total、income、expense 塞到各 dom 裡面\n  balance.innerHTML = `${total}`\n  moneyPlus.innerHTML = `${income}`\n  moneyMinus.innerHTML = `${expense}`\n}\n```\n\n---\n\n### 6. 移除輸入的值\n\n如果有新增的項目不要了，那就會用到刪除，刪除的函式是認剛才綁定的 id 就是陣列的身分證，觸發條件是當我 `onclick` 的時候就可以移除剛該筆項目。\n\n在剛才的 `addTransactionDOM` 裡面有個字串模板，因為項目是在這邊創建的，那刪除也一起寫在這，透過 `removeTransaction` 函式綁定 `id`\n\n```javascript\nitem.innerHTML = `${transaction.text}\n<span>${sign}${Math.abs(transaction.amount)}</span>\n<button class='delete-btn' onclick='removeTransaction(${transaction.id})'>\nX\n</button>`\n```\n\n刪除的函式\n\n```javascript\nfunction removeTransaction(id) {\n  //記得帶 id 參數，不然會 fail\n  //邏輯??\n  transactions = transactions.filter((transaction) => transaction.id !== id)\n\n  // 刪除後重新儲存在本地端\n  updateLocalStorage()\n  init()\n}\n```\n\n---\n\n### 7. 將計算的歷史紀錄保存起來，並存在本地端\n\n因為要要記錄自己新增的每筆資料，所以之前代替用的假資料可以刪掉了\n\n1. `Storage.setItem('key', 'value')`：\n   透過在 `setItem()` 方法中指定物件屬性的 `key` 以及 `value` ，\n   我們可以在 `storage` 物件中加入屬性或修改原本的屬性內容。\n\n2.` Storage.getItem('key')`：\n透過在 `getItem()` 方法中輸入屬性的 `key` ，我們可以得到 `storage` 物件對應的屬性 `value` 。\n\n---\n\n利用 `getItem` 將 `transactions` 的 `key` 值輸入到 `localStorage` 裡面，再利用 `JSON.parse` 將值轉成物件格式，然後在賦予到 `localStorageTransactions` 變數中\n\n如果 `localStorage` 抓到的值是 `null` 會自動轉換成空值\n\n```javascript\nconst localStorageTransactions = JSON.parse(\n  localStorage.getItem('transactions')\n)\n\nlet transactions =\n  localStorage.getItem('transactions') !== null ? localStorageTransactions : []\n```\n\n利用 `setItem` 的方式將 `transactions` 設定成 `key` ，將 `transactions` 透過 `JSON.stringify` 的方式轉成字串並設定成 `value` ，加到 `addTransaction`、`removeTransaction` 函式裡面，這樣在新增每筆資料的時候不只同時綁定 `id` 還記錄到了本地端的歷史紀錄裡面。\n\n```javascript\nfunction updateLocalStorage() {\n  localStorage.setItem('transactions', JSON.stringify(transactions))\n}\n```\n\n---\n\n## 參考資料\n\n[JS30-Day15-LocalStorage](https://ithelp.ithome.com.tw/articles/10195522)\n[JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview)\n","slug":"記帳","published":1,"updated":"2021-03-26T16:13:09.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lqf002bg0tre1hbgzlj","content":"<html><head></head><body><p>功能描述:<br>輸入記帳名稱並計算該物品的價格。</p>\n<p><img src=\"https://i.imgur.com/EKaScxe.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission24\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission24/index.html\">DEMO</a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h2 id=\"HTML-模板\"><a href=\"#HTML-模板\" class=\"headerlink\" title=\"HTML 模板\"></a>HTML 模板</h2><p>給個容器，並將顯示及輸入的內容寫在裡面，比較特別的地方是 <code>list</code> ，<code>list</code> 裡面的項目清單會交由 <code>JavaScript</code> 字串模板來撰寫</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Expense Tracker<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>Your Balance<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"balance\"</span>&gt;</span>$0.00<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"inc-exp-container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>Income<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"money-plus\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"money plus\"</span>&gt;</span>+$0.00<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>Expense<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"money-minus\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"money minus\"</span>&gt;</span>-$0.00<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>History<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"list\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">&lt;!-- &lt;li class=\"minus\"&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">      Cash &lt;span&gt;-$400&lt;/span&gt;&lt;button class=\"delete-btn\"&gt;x&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">    &lt;/li&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Add new transaction<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"form\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"text\"</span>&gt;</span>Text<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Enter text...\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"form-control\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"amount\"</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">        &gt;</span>Amount <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span><br><span class=\"line\">        (negative - expense, positive - income)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span></span></span><br><span class=\"line\"><span class=\"hljs-tag\">      &gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"amount\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Enter amount...\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn\"</span>&gt;</span>Add transaction<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"CSS-樣式\"><a href=\"#CSS-樣式\" class=\"headerlink\" title=\"CSS 樣式\"></a>CSS 樣式</h2><p>要注意的是 <code>plus</code>、<code>minus</code> 樣式，因為這兩個樣式會透過 <code>JavaScript</code> 的函式來控制</p>\n<figure class=\"highlight css hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">@import</span> url(<span class=\"hljs-string\">'https://fonts.googleapis.com/css?family=Lato&amp;display=swap'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">3px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.12</span>), <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.24</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">* {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f7f7f7</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">min-height</span>: <span class=\"hljs-number\">100vh</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">'Lato'</span>, sans-serif;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">30px</span> auto;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">350px</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-tag\">h1</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">letter-spacing</span>: <span class=\"hljs-number\">1px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-tag\">h3</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#bbb</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding-bottom</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-tag\">h4</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.inc-exp-container</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-built_in\">var</span>(--box-shadow);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.inc-exp-container</span> &gt; <span class=\"hljs-selector-tag\">div</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">text-align</span>: center;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.inc-exp-container</span> &gt; <span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:first-of-type</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#dedede</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.money</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">letter-spacing</span>: <span class=\"hljs-number\">1px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.money</span><span class=\"hljs-selector-class\">.plus</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#2ecc71</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.money</span><span class=\"hljs-selector-class\">.minus</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#c0392b</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-tag\">label</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">'text'</span>]</span>,</span><br><span class=\"line\"><span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">'number'</span>]</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#dedede</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">2px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.btn</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#9c88ff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-built_in\">var</span>(--box-shadow);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">30px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.btn</span><span class=\"hljs-selector-pseudo\">:focus</span>,</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.delete-btn</span><span class=\"hljs-selector-pseudo\">:focus</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">outline</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.list</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">list-style-type</span>: none;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.list</span> <span class=\"hljs-selector-tag\">li</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-built_in\">var</span>(--box-shadow);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.list</span> <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-class\">.plus</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">5px</span> solid <span class=\"hljs-number\">#2ecc71</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.list</span> <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-class\">.minus</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">5px</span> solid <span class=\"hljs-number\">#c0392b</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.delete-btn</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#e74c3c</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">5px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">50%</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(-<span class=\"hljs-number\">100%</span>, -<span class=\"hljs-number\">50%</span>);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">0.3s</span> ease;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.list</span> <span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-pseudo\">:hover</span> <span class=\"hljs-selector-class\">.delete-btn</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>所有互動將從這邊開始撰寫，也算是重頭戲!</p>\n<h3 id=\"1-首先抓取-DOM-元素並設定成變數\"><a href=\"#1-首先抓取-DOM-元素並設定成變數\" class=\"headerlink\" title=\"1. 首先抓取 DOM 元素並設定成變數\"></a>1. 首先抓取 DOM 元素並設定成變數</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> balance = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#balance'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> moneyPlus = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#money-plus'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> moneyMinus = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#money-minus'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#list'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#text'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> form = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#form'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> amount = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#amount'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-新增-DOM-list-項目清單\"><a href=\"#2-新增-DOM-list-項目清單\" class=\"headerlink\" title=\"2. 新增 DOM list 項目清單\"></a>2. 新增 DOM list 項目清單</h3><p>為了方便測試先寫一個陣列的假資料</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> dummyTransactions = [</span><br><span class=\"line\">  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Flower'</span>, <span class=\"hljs-attr\">amount</span>: <span class=\"hljs-number\">-20</span> },</span><br><span class=\"line\">  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Salary'</span>, <span class=\"hljs-attr\">amount</span>: <span class=\"hljs-number\">300</span> },</span><br><span class=\"line\">  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Book'</span>, <span class=\"hljs-attr\">amount</span>: <span class=\"hljs-number\">-10</span> },</span><br><span class=\"line\">  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Camera'</span>, <span class=\"hljs-attr\">amount</span>: <span class=\"hljs-number\">150</span> },</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 將假資料暫時帶入 transaction 變數裡面</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> transactions = dummyTransactions</span><br></pre></td></tr></tbody></table></figure>\n\n<p>接著撰寫新增 list 項目清單，因為在撰寫項目清單時不確定會有幾個，因此在這邊用字串模板的方式載入，為了要載入新的項目必須要創建新的元素，這時候可以用 <code>createElement</code> 的方式來新增，新增好後要透過輸入的值來判斷是正還是負，這樣可以連帶綁定 css 樣式的顏色，最後利用字串模板的方式來顯示項目，不果字串模板裡面已經有判斷正負號了，所以後面的值就用 <code>Math.abs</code> 取絕對值的方式來顯示。</p>\n<h4 id=\"步驟如下\"><a href=\"#步驟如下\" class=\"headerlink\" title=\"步驟如下:\"></a>步驟如下:</h4><ol>\n<li>新增函式</li>\n<li>判斷正負號</li>\n<li>新增項目元素，同時賦予到 <code>item</code> 變數上</li>\n<li>判斷 <code>item</code> 輸入的值決定要綁定的顏色</li>\n<li>用字串模板的方式將值賦予到 <code>item</code></li>\n<li>再將 <code>item</code> 透過 <code>appendChild</code> 的方式塞到 <code>list</code> 元素裡面</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addTransactionDOM</span>(<span class=\"hljs-params\">transaction</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 判斷正負值</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> sign = transaction.amount &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">'+'</span> : <span class=\"hljs-string\">'-'</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(sign)</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 新增 li 元素</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'li'</span>)</span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(item)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 將 className 新增到 item ，判斷顯示的顏色</span></span><br><span class=\"line\">  item.classList.add(transaction.amount &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">'plus'</span> : <span class=\"hljs-string\">'minus'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// removeTransaction 要綁id ，不然會刪到同名的</span></span><br><span class=\"line\">  item.innerHTML = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${transaction.text}</span>&lt;span&gt;<span class=\"hljs-subst\">${sign}</span><span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Math</span>.abs(</span></span></span><br><span class=\"line\"><span class=\"hljs-string\"><span class=\"hljs-subst\">    transaction.amount</span></span></span><br><span class=\"line\"><span class=\"hljs-string\"><span class=\"hljs-subst\">  )}</span>&lt;/span&gt;&lt;button&gt;X&lt;/button&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">  list.appendChild(item)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-初始化\"><a href=\"#3-初始化\" class=\"headerlink\" title=\"3. 初始化\"></a>3. 初始化</h3><p>每當執行完某些動作時，都要將值初始化</p>\n<p><code>forEach</code> :會將陣列中每個元素套用到指定的函式裡進行運算。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">init</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 輸入完之後 list 要回復空值</span></span><br><span class=\"line\">  list.innerHTML = <span class=\"hljs-string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 將假資料丟到 addTransactionDOM 函式裡面運算</span></span><br><span class=\"line\">  transactions.forEach(addTransactionDOM)</span><br><span class=\"line\"></span><br><span class=\"line\">  updateValue()</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">init() <span class=\"hljs-comment\">// 執行</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-監聽-form-表單內輸入的值\"><a href=\"#4-監聽-form-表單內輸入的值\" class=\"headerlink\" title=\"4. 監聽 form 表單內輸入的值\"></a>4. 監聽 form 表單內輸入的值</h3><p>接下來要判斷表單內輸入的值是否正確，如果輸入正確，將值同時綁定到 key 上，這麼做是為了防止刪除到同名的項目，像是用身分證綁定每筆資料的概念。</p>\n<p>首先利用 <code>callbakc function</code> 的方式將函式賦予到 <code>addTransaction</code> 參數上，再用 if 判斷式判斷輸入的值是否為空值，如果不是空值，將輸入的值綁定到物件的 key 上，同時執行個兩函式</p>\n<ol>\n<li>將 <code>transaction</code> 變數新增到陣列清單裡面(這邊暫時用假資料的陣列)</li>\n<li>將 <code>transaction</code> 帶到 <code>addTransactionDOM</code> 函式執行</li>\n</ol>\n<p>然後再將輸入框的值清空</p>\n<p><code>Math.floor</code> :將有小數的值取成整數<br><code>Math.random</code> :取亂數，建立變數的身分證</p>\n<h4 id=\"步驟\"><a href=\"#步驟\" class=\"headerlink\" title=\"步驟\"></a>步驟</h4><ol>\n<li>監聽表單元素</li>\n<li>判斷輸入值同時將輸入的值用 id 綁定</li>\n<li>同時執行三的動作，將值新增到陣列內、判斷輸入值得正負、將值清空</li>\n</ol>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addTransaction</span>(<span class=\"hljs-params\">e</span>) </span>{</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 先判斷輸入是否為空值，若不是則繼續執行</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (text.value === <span class=\"hljs-string\">''</span> || amount.value === <span class=\"hljs-string\">''</span>) {</span><br><span class=\"line\">    alert(<span class=\"hljs-string\">'請重新輸入'</span>)</span><br><span class=\"line\">  } <span class=\"hljs-keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 如果不是空值，將輸入的 value 帶入 key 裡</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> transaction = {</span><br><span class=\"line\">      id: generateID(),</span><br><span class=\"line\">      text: text.value,</span><br><span class=\"line\">      amount: +amount.value, <span class=\"hljs-comment\">//前面的+是為了轉成 number 型別</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 將新增的 transaction 物件加入到 transactions 物陣列內</span></span><br><span class=\"line\">    transactions.push(transaction)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 執行 addTransactionDOM 函式，並帶入transaction</span></span><br><span class=\"line\">    addTransactionDOM(transaction)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 執行帶值跟計算</span></span><br><span class=\"line\">    updateValue()</span><br><span class=\"line\">    updateLocalStorage()</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 輸入完後恢復空值</span></span><br><span class=\"line\">    text.value = <span class=\"hljs-string\">''</span></span><br><span class=\"line\">    amount.value = <span class=\"hljs-string\">''</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">generateID</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">1000000</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">form.addEventListener(<span class=\"hljs-string\">'submit'</span>, addTransaction)</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"5-計算收入與支出\"><a href=\"#5-計算收入與支出\" class=\"headerlink\" title=\"5. 計算收入與支出\"></a>5. 計算收入與支出</h3><p>以上判斷值的正確性跟顯示的樣式都寫好了，接下來要計算輸入的值<br>將 <code>transaction </code> 帶到 <code>transaction.amount</code> 裡面，再用 <code>map</code> 計算，判斷陣列內值，再將值賦予到 <code>amounts</code> 變數裡面，透過 <code>amounts</code> 變數去計算總結、收入、支出的值。</p>\n<p>算好後將計算的值賦予到 DOM 元素上這樣就可以顯示計算的值了。</p>\n<ul>\n<li><code>acc</code> 是計算出來的總值， <code>item</code> 是每次新增的每一筆資料。</li>\n<li><code>map</code> :處理陣列中每個元素，最後回傳出一個新的陣列。</li>\n<li><code>filter</code> :會將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件則會產生新的陣列元素。</li>\n<li><code>reduce</code> :將陣列中每個元素進行計算，每次計算的結果會再與下個元素作計算，直到結束為止。</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateValue</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> amounts = transactions.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">transaction</span>) =&gt;</span> transaction.amount)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 計算總結</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> total = amounts.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, item</span>) =&gt;</span> (acc += item), <span class=\"hljs-number\">0</span>).toFixed(<span class=\"hljs-number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 計算收入</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> income = amounts</span><br><span class=\"line\">    .filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> item &gt; <span class=\"hljs-number\">0</span>)</span><br><span class=\"line\">    .reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, item</span>) =&gt;</span> (acc += item), <span class=\"hljs-number\">0</span>)</span><br><span class=\"line\">    .toFixed(<span class=\"hljs-number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 計算支出</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> expense =</span><br><span class=\"line\">    amounts.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> item &lt; <span class=\"hljs-number\">0</span>).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, item</span>) =&gt;</span> (acc += item), <span class=\"hljs-number\">0</span>) *</span><br><span class=\"line\">    <span class=\"hljs-number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 將 total、income、expense 塞到各 dom 裡面</span></span><br><span class=\"line\">  balance.innerHTML = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${total}</span>`</span></span><br><span class=\"line\">  moneyPlus.innerHTML = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${income}</span>`</span></span><br><span class=\"line\">  moneyMinus.innerHTML = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${expense}</span>`</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"6-移除輸入的值\"><a href=\"#6-移除輸入的值\" class=\"headerlink\" title=\"6. 移除輸入的值\"></a>6. 移除輸入的值</h3><p>如果有新增的項目不要了，那就會用到刪除，刪除的函式是認剛才綁定的 id 就是陣列的身分證，觸發條件是當我 <code>onclick</code> 的時候就可以移除剛該筆項目。</p>\n<p>在剛才的 <code>addTransactionDOM</code> 裡面有個字串模板，因為項目是在這邊創建的，那刪除也一起寫在這，透過 <code>removeTransaction</code> 函式綁定 <code>id</code></p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item.innerHTML = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${transaction.text}</span></span></span><br><span class=\"line\"><span class=\"hljs-string\">&lt;span&gt;<span class=\"hljs-subst\">${sign}</span><span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Math</span>.abs(transaction.amount)}</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">&lt;button class='delete-btn' onclick='removeTransaction(<span class=\"hljs-subst\">${transaction.id}</span>)'&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">X</span></span><br><span class=\"line\"><span class=\"hljs-string\">&lt;/button&gt;`</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>刪除的函式</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeTransaction</span>(<span class=\"hljs-params\">id</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">//記得帶 id 參數，不然會 fail</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">//邏輯??</span></span><br><span class=\"line\">  transactions = transactions.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">transaction</span>) =&gt;</span> transaction.id !== id)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 刪除後重新儲存在本地端</span></span><br><span class=\"line\">  updateLocalStorage()</span><br><span class=\"line\">  init()</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"7-將計算的歷史紀錄保存起來，並存在本地端\"><a href=\"#7-將計算的歷史紀錄保存起來，並存在本地端\" class=\"headerlink\" title=\"7. 將計算的歷史紀錄保存起來，並存在本地端\"></a>7. 將計算的歷史紀錄保存起來，並存在本地端</h3><p>因為要要記錄自己新增的每筆資料，所以之前代替用的假資料可以刪掉了</p>\n<ol>\n<li><code>Storage.setItem('key', 'value')</code>：<br>透過在 <code>setItem()</code> 方法中指定物件屬性的 <code>key</code> 以及 <code>value</code> ，<br>我們可以在 <code>storage</code> 物件中加入屬性或修改原本的屬性內容。</li>\n</ol>\n<p>2.<code> Storage.getItem('key')</code>：<br>透過在 <code>getItem()</code> 方法中輸入屬性的 <code>key</code> ，我們可以得到 <code>storage</code> 物件對應的屬性 <code>value</code> 。</p>\n<hr>\n<p>利用 <code>getItem</code> 將 <code>transactions</code> 的 <code>key</code> 值輸入到 <code>localStorage</code> 裡面，再利用 <code>JSON.parse</code> 將值轉成物件格式，然後在賦予到 <code>localStorageTransactions</code> 變數中</p>\n<p>如果 <code>localStorage</code> 抓到的值是 <code>null</code> 會自動轉換成空值</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> localStorageTransactions = <span class=\"hljs-built_in\">JSON</span>.parse(</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'transactions'</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> transactions =</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'transactions'</span>) !== <span class=\"hljs-literal\">null</span> ? localStorageTransactions : []</span><br></pre></td></tr></tbody></table></figure>\n\n<p>利用 <code>setItem</code> 的方式將 <code>transactions</code> 設定成 <code>key</code> ，將 <code>transactions</code> 透過 <code>JSON.stringify</code> 的方式轉成字串並設定成 <code>value</code> ，加到 <code>addTransaction</code>、<code>removeTransaction</code> 函式裡面，這樣在新增每筆資料的時候不只同時綁定 <code>id</code> 還記錄到了本地端的歷史紀錄裡面。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateLocalStorage</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'transactions'</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(transactions))</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://ithelp.ithome.com.tw/articles/10195522\">JS30-Day15-LocalStorage</a><br><a href=\"https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach\">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview\">20 Web Projects With Vanilla JavaScript</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"jQuery","path":"tags/jQuery/"},{"name":"作品集","path":"tags/作品集/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><p>功能描述:<br>輸入記帳名稱並計算該物品的價格。</p>\n<p><img src=\"https://i.imgur.com/EKaScxe.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission24\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission24/index.html\">DEMO</a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2></body></html>","more":"</h2><h2 id=\"HTML-模板\"><a href=\"#HTML-模板\" class=\"headerlink\" title=\"HTML 模板\"></a>HTML 模板</h2><p>給個容器，並將顯示及輸入的內容寫在裡面，比較特別的地方是 <code>list</code> ，<code>list</code> 裡面的項目清單會交由 <code>JavaScript</code> 字串模板來撰寫</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Expense Tracker<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Your Balance<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;balance&quot;</span>&gt;</span>$0.00<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inc-exp-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Income<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;money-plus&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;money plus&quot;</span>&gt;</span>+$0.00<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Expense<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;money-minus&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;money minus&quot;</span>&gt;</span>-$0.00<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>History<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;li class=&quot;minus&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      Cash &lt;span&gt;-$400&lt;/span&gt;&lt;button class=&quot;delete-btn&quot;&gt;x&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/li&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Add new transaction<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Enter text...&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;amount&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span>Amount <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        (negative - expense, positive - income)<span class=\"tag\">&lt;/<span class=\"name\">label</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;amount&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Enter amount...&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>Add transaction<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-樣式\"><a href=\"#CSS-樣式\" class=\"headerlink\" title=\"CSS 樣式\"></a>CSS 樣式</h2><p>要注意的是 <code>plus</code>、<code>minus</code> 樣式，因為這兩個樣式會透過 <code>JavaScript</code> 的函式來控制</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">&#x27;https://fonts.googleapis.com/css?family=Lato&amp;display=swap&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.12</span>), <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.24</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f7f7f7</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lato&#x27;</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">30px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">350px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#bbb</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">40px</span> <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.inc-exp-container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"built_in\">var</span>(--box-shadow);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.inc-exp-container</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.inc-exp-container</span> &gt; <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-of-type</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dedede</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.money</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.money</span><span class=\"selector-class\">.plus</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#2ecc71</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.money</span><span class=\"selector-class\">.minus</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#c0392b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">label</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;text&#x27;</span>]</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;number&#x27;</span>]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dedede</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#9c88ff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"built_in\">var</span>(--box-shadow);</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span><span class=\"selector-pseudo\">:focus</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.delete-btn</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"built_in\">var</span>(--box-shadow);</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.plus</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#2ecc71</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.minus</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#c0392b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.delete-btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#e74c3c</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">100%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">0.3s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.list</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.delete-btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>所有互動將從這邊開始撰寫，也算是重頭戲!</p>\n<h3 id=\"1-首先抓取-DOM-元素並設定成變數\"><a href=\"#1-首先抓取-DOM-元素並設定成變數\" class=\"headerlink\" title=\"1. 首先抓取 DOM 元素並設定成變數\"></a>1. 首先抓取 DOM 元素並設定成變數</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> balance = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#balance&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> moneyPlus = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#money-plus&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> moneyMinus = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#money-minus&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#list&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#text&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#form&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> amount = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#amount&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-新增-DOM-list-項目清單\"><a href=\"#2-新增-DOM-list-項目清單\" class=\"headerlink\" title=\"2. 新增 DOM list 項目清單\"></a>2. 新增 DOM list 項目清單</h3><p>為了方便測試先寫一個陣列的假資料</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dummyTransactions = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Flower&#x27;</span>, <span class=\"attr\">amount</span>: <span class=\"number\">-20</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Salary&#x27;</span>, <span class=\"attr\">amount</span>: <span class=\"number\">300</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Book&#x27;</span>, <span class=\"attr\">amount</span>: <span class=\"number\">-10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Camera&#x27;</span>, <span class=\"attr\">amount</span>: <span class=\"number\">150</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 將假資料暫時帶入 transaction 變數裡面</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> transactions = dummyTransactions</span><br></pre></td></tr></table></figure>\n\n<p>接著撰寫新增 list 項目清單，因為在撰寫項目清單時不確定會有幾個，因此在這邊用字串模板的方式載入，為了要載入新的項目必須要創建新的元素，這時候可以用 <code>createElement</code> 的方式來新增，新增好後要透過輸入的值來判斷是正還是負，這樣可以連帶綁定 css 樣式的顏色，最後利用字串模板的方式來顯示項目，不果字串模板裡面已經有判斷正負號了，所以後面的值就用 <code>Math.abs</code> 取絕對值的方式來顯示。</p>\n<h4 id=\"步驟如下\"><a href=\"#步驟如下\" class=\"headerlink\" title=\"步驟如下:\"></a>步驟如下:</h4><ol>\n<li>新增函式</li>\n<li>判斷正負號</li>\n<li>新增項目元素，同時賦予到 <code>item</code> 變數上</li>\n<li>判斷 <code>item</code> 輸入的值決定要綁定的顏色</li>\n<li>用字串模板的方式將值賦予到 <code>item</code></li>\n<li>再將 <code>item</code> 透過 <code>appendChild</code> 的方式塞到 <code>list</code> 元素裡面</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTransactionDOM</span>(<span class=\"params\">transaction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判斷正負值</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sign = transaction.amount &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;+&#x27;</span> : <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(sign)</span></span><br><span class=\"line\">  <span class=\"comment\">// 新增 li 元素</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// console.log(item)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 將 className 新增到 item ，判斷顯示的顏色</span></span><br><span class=\"line\">  item.classList.add(transaction.amount &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;plus&#x27;</span> : <span class=\"string\">&#x27;minus&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// removeTransaction 要綁id ，不然會刪到同名的</span></span><br><span class=\"line\">  item.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;transaction.text&#125;</span>&lt;span&gt;<span class=\"subst\">$&#123;sign&#125;</span><span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.abs(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    transaction.amount</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  )&#125;</span>&lt;/span&gt;&lt;button&gt;X&lt;/button&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">  list.appendChild(item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-初始化\"><a href=\"#3-初始化\" class=\"headerlink\" title=\"3. 初始化\"></a>3. 初始化</h3><p>每當執行完某些動作時，都要將值初始化</p>\n<p><code>forEach</code> :會將陣列中每個元素套用到指定的函式裡進行運算。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 輸入完之後 list 要回復空值</span></span><br><span class=\"line\">  list.innerHTML = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 將假資料丟到 addTransactionDOM 函式裡面運算</span></span><br><span class=\"line\">  transactions.forEach(addTransactionDOM)</span><br><span class=\"line\"></span><br><span class=\"line\">  updateValue()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">init() <span class=\"comment\">// 執行</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-監聽-form-表單內輸入的值\"><a href=\"#4-監聽-form-表單內輸入的值\" class=\"headerlink\" title=\"4. 監聽 form 表單內輸入的值\"></a>4. 監聽 form 表單內輸入的值</h3><p>接下來要判斷表單內輸入的值是否正確，如果輸入正確，將值同時綁定到 key 上，這麼做是為了防止刪除到同名的項目，像是用身分證綁定每筆資料的概念。</p>\n<p>首先利用 <code>callbakc function</code> 的方式將函式賦予到 <code>addTransaction</code> 參數上，再用 if 判斷式判斷輸入的值是否為空值，如果不是空值，將輸入的值綁定到物件的 key 上，同時執行個兩函式</p>\n<ol>\n<li>將 <code>transaction</code> 變數新增到陣列清單裡面(這邊暫時用假資料的陣列)</li>\n<li>將 <code>transaction</code> 帶到 <code>addTransactionDOM</code> 函式執行</li>\n</ol>\n<p>然後再將輸入框的值清空</p>\n<p><code>Math.floor</code> :將有小數的值取成整數<br><code>Math.random</code> :取亂數，建立變數的身分證</p>\n<h4 id=\"步驟\"><a href=\"#步驟\" class=\"headerlink\" title=\"步驟\"></a>步驟</h4><ol>\n<li>監聽表單元素</li>\n<li>判斷輸入值同時將輸入的值用 id 綁定</li>\n<li>同時執行三的動作，將值新增到陣列內、判斷輸入值得正負、將值清空</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTransaction</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先判斷輸入是否為空值，若不是則繼續執行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (text.value === <span class=\"string\">&#x27;&#x27;</span> || amount.value === <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;請重新輸入&#x27;</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是空值，將輸入的 value 帶入 key 裡</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> transaction = &#123;</span><br><span class=\"line\">      id: generateID(),</span><br><span class=\"line\">      text: text.value,</span><br><span class=\"line\">      amount: +amount.value, <span class=\"comment\">//前面的+是為了轉成 number 型別</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 將新增的 transaction 物件加入到 transactions 物陣列內</span></span><br><span class=\"line\">    transactions.push(transaction)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 執行 addTransactionDOM 函式，並帶入transaction</span></span><br><span class=\"line\">    addTransactionDOM(transaction)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 執行帶值跟計算</span></span><br><span class=\"line\">    updateValue()</span><br><span class=\"line\">    updateLocalStorage()</span><br><span class=\"line\">    <span class=\"comment\">// 輸入完後恢復空值</span></span><br><span class=\"line\">    text.value = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    amount.value = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateID</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">1000000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">form.addEventListener(<span class=\"string\">&#x27;submit&#x27;</span>, addTransaction)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"5-計算收入與支出\"><a href=\"#5-計算收入與支出\" class=\"headerlink\" title=\"5. 計算收入與支出\"></a>5. 計算收入與支出</h3><p>以上判斷值的正確性跟顯示的樣式都寫好了，接下來要計算輸入的值<br>將 <code>transaction </code> 帶到 <code>transaction.amount</code> 裡面，再用 <code>map</code> 計算，判斷陣列內值，再將值賦予到 <code>amounts</code> 變數裡面，透過 <code>amounts</code> 變數去計算總結、收入、支出的值。</p>\n<p>算好後將計算的值賦予到 DOM 元素上這樣就可以顯示計算的值了。</p>\n<ul>\n<li><code>acc</code> 是計算出來的總值， <code>item</code> 是每次新增的每一筆資料。</li>\n<li><code>map</code> :處理陣列中每個元素，最後回傳出一個新的陣列。</li>\n<li><code>filter</code> :會將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件則會產生新的陣列元素。</li>\n<li><code>reduce</code> :將陣列中每個元素進行計算，每次計算的結果會再與下個元素作計算，直到結束為止。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateValue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> amounts = transactions.map(<span class=\"function\">(<span class=\"params\">transaction</span>) =&gt;</span> transaction.amount)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 計算總結</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> total = amounts.reduce(<span class=\"function\">(<span class=\"params\">acc, item</span>) =&gt;</span> (acc += item), <span class=\"number\">0</span>).toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 計算收入</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> income = amounts</span><br><span class=\"line\">    .filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    .reduce(<span class=\"function\">(<span class=\"params\">acc, item</span>) =&gt;</span> (acc += item), <span class=\"number\">0</span>)</span><br><span class=\"line\">    .toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 計算支出</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> expense =</span><br><span class=\"line\">    amounts.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item &lt; <span class=\"number\">0</span>).reduce(<span class=\"function\">(<span class=\"params\">acc, item</span>) =&gt;</span> (acc += item), <span class=\"number\">0</span>) *</span><br><span class=\"line\">    <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 將 total、income、expense 塞到各 dom 裡面</span></span><br><span class=\"line\">  balance.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;total&#125;</span>`</span></span><br><span class=\"line\">  moneyPlus.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;income&#125;</span>`</span></span><br><span class=\"line\">  moneyMinus.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;expense&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"6-移除輸入的值\"><a href=\"#6-移除輸入的值\" class=\"headerlink\" title=\"6. 移除輸入的值\"></a>6. 移除輸入的值</h3><p>如果有新增的項目不要了，那就會用到刪除，刪除的函式是認剛才綁定的 id 就是陣列的身分證，觸發條件是當我 <code>onclick</code> 的時候就可以移除剛該筆項目。</p>\n<p>在剛才的 <code>addTransactionDOM</code> 裡面有個字串模板，因為項目是在這邊創建的，那刪除也一起寫在這，透過 <code>removeTransaction</code> 函式綁定 <code>id</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;transaction.text&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">&lt;span&gt;<span class=\"subst\">$&#123;sign&#125;</span><span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.abs(transaction.amount)&#125;</span>&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;button class=&#x27;delete-btn&#x27; onclick=&#x27;removeTransaction(<span class=\"subst\">$&#123;transaction.id&#125;</span>)&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"string\">X</span></span><br><span class=\"line\"><span class=\"string\">&lt;/button&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<p>刪除的函式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeTransaction</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//記得帶 id 參數，不然會 fail</span></span><br><span class=\"line\">  <span class=\"comment\">//邏輯??</span></span><br><span class=\"line\">  transactions = transactions.filter(<span class=\"function\">(<span class=\"params\">transaction</span>) =&gt;</span> transaction.id !== id)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 刪除後重新儲存在本地端</span></span><br><span class=\"line\">  updateLocalStorage()</span><br><span class=\"line\">  init()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"7-將計算的歷史紀錄保存起來，並存在本地端\"><a href=\"#7-將計算的歷史紀錄保存起來，並存在本地端\" class=\"headerlink\" title=\"7. 將計算的歷史紀錄保存起來，並存在本地端\"></a>7. 將計算的歷史紀錄保存起來，並存在本地端</h3><p>因為要要記錄自己新增的每筆資料，所以之前代替用的假資料可以刪掉了</p>\n<ol>\n<li><code>Storage.setItem(&#39;key&#39;, &#39;value&#39;)</code>：<br>透過在 <code>setItem()</code> 方法中指定物件屬性的 <code>key</code> 以及 <code>value</code> ，<br>我們可以在 <code>storage</code> 物件中加入屬性或修改原本的屬性內容。</li>\n</ol>\n<p>2.<code> Storage.getItem(&#39;key&#39;)</code>：<br>透過在 <code>getItem()</code> 方法中輸入屬性的 <code>key</code> ，我們可以得到 <code>storage</code> 物件對應的屬性 <code>value</code> 。</p>\n<hr>\n<p>利用 <code>getItem</code> 將 <code>transactions</code> 的 <code>key</code> 值輸入到 <code>localStorage</code> 裡面，再利用 <code>JSON.parse</code> 將值轉成物件格式，然後在賦予到 <code>localStorageTransactions</code> 變數中</p>\n<p>如果 <code>localStorage</code> 抓到的值是 <code>null</code> 會自動轉換成空值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> localStorageTransactions = <span class=\"built_in\">JSON</span>.parse(</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;transactions&#x27;</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> transactions =</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;transactions&#x27;</span>) !== <span class=\"literal\">null</span> ? localStorageTransactions : []</span><br></pre></td></tr></table></figure>\n\n<p>利用 <code>setItem</code> 的方式將 <code>transactions</code> 設定成 <code>key</code> ，將 <code>transactions</code> 透過 <code>JSON.stringify</code> 的方式轉成字串並設定成 <code>value</code> ，加到 <code>addTransaction</code>、<code>removeTransaction</code> 函式裡面，這樣在新增每筆資料的時候不只同時綁定 <code>id</code> 還記錄到了本地端的歷史紀錄裡面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateLocalStorage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;transactions&#x27;</span>, <span class=\"built_in\">JSON</span>.stringify(transactions))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://ithelp.ithome.com.tw/articles/10195522\">JS30-Day15-LocalStorage</a><br><a href=\"https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach\">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview\">20 Web Projects With Vanilla JavaScript</a></p>"},{"title":"Vue - 語法修飾","description":"如何使用 preventDefault 來取消原本預設行為","_content":"\n## 防止預設事件發生: preventDefault\n\n`a` 連結預設是開新分頁，但我想要點` a` 連結就跳出 alert 同時又不要開新的分頁，這時候就要用 `preventDefault` 。\n先偵聽一個事件 `linkClick` ，並給 `linkClick` 一個函式，點擊 `a` 連結時為了要取消預設行為 ( 開新分頁 )，所以在函式內新增 `e.preventDefault()`。\n\n<!-- more -->\n\n```html\n<div id=\"app\">\n  <a href=\"https://www.google.com/\" target=\"_blank\" @click=\"linkClick\">\n    google\n  </a>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {},\n    methods: {\n      linkClick(e) {\n        e.preventDefault()\n        alert('不開新頁面')\n      },\n    },\n  })\n</script>\n```\n\n[DEMO](https://codepen.io/gleofgja/pen/jOqNezw?editors=1010)\n\n這個方法會常常用在 `form submit` 上，因為原本預設行為是透過網頁讀取並取得網址資源，但我們會希望網頁不要重新讀取同時又可以取得網頁資源，這時就可以在 `form` 裡面呼叫 `e.preventDefault()` 。\n\n---\n\n## 方法二：\n\n精簡寫法，直接在 `click` 後面加上 `prevent` 就結束了。\n\n```html\n<div id=\"app\">\n  <a href=\"https://www.google.com/\" target=\"_blank\" @click.prevent=\"linkClick\">\n    google\n  </a>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {},\n    methods: {\n      linkClick() {\n        alert('不開新頁面')\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/zYqObgv?editors=1010)\n\n---\n\n## 防止子元件連動: stop、 self\n\n```html\n<div id=\"app\">\n  <div class=\"box\" @click=\"msg = 'c'\">\n    <div class=\"box\" @click=\"msg = 'b'\">\n      <div class=\"box\" @click=\"msg = 'a'\"></div>\n    </div>\n  </div>\n  <h1>{{msg}}</h1>\n</div>\n\n<style>\n  .box {\n    display: inline-block;\n    min-width: 100px;\n    min-height: 100px;\n    padding: 30px;\n    border: 3px solid red;\n  }\n</style>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      msg: '',\n    },\n  })\n</script>\n```\n\n[DEMO](https://codepen.io/gleofgja/pen/dyMbLyR?editors=1010)\n\n![](https://i.imgur.com/xttduRm.png)\n\n當我點擊最裡面正方形的時候會出現 c 而不是 a，原因是最裡面的 box 是最外面 box 的 children ，所以一旦點擊最裡面的 box 就會一層一層往上找到最外層的 box 。這時候就可以在 click 後面加上 stop 或是 self 來防止事件往上層找。\n\n**1. stop 是調用 event.stopPropagation() ，防止事件往上一層傳。 2. self 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調，就是只有自己本身發出的不然不會觸發事件。假設 div 包了 100 層，事件是點擊第 2 層才會觸發，那就算我點擊外面第 1 層或是裡面的 3~100 層都是不會觸發的。**\n\n範例如下：\n\n```html\n<div id=\"app\">\n  <div class=\"box\" @click.self=\"msg = 'c'\">\n    <div class=\"box\" @click.self=\"msg = 'b'\">\n      <div class=\"box\" @click.stop=\"msg = 'a'\"></div>\n    </div>\n  </div>\n  <h1>{{msg}}</h1>\n</div>\n\n<style>\n  .box {\n    display: inline-block;\n    min-width: 100px;\n    min-height: 100px;\n    padding: 30px;\n    border: 3px solid red;\n  }\n</style>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      msg: '',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/GRZKLrB?editors=1010)\n\n---\n\n## 參考資料: [官方文件](https://cn.vuejs.org/v2/api/#v-on)\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","source":"_posts/2020/語法修飾.md","raw":"---\ntitle: Vue - 語法修飾\ntags:\n  - preventDefault\n  - stop\n  - self\ncategories: Vue\ndescription: 如何使用 preventDefault 來取消原本預設行為\n---\n\n## 防止預設事件發生: preventDefault\n\n`a` 連結預設是開新分頁，但我想要點` a` 連結就跳出 alert 同時又不要開新的分頁，這時候就要用 `preventDefault` 。\n先偵聽一個事件 `linkClick` ，並給 `linkClick` 一個函式，點擊 `a` 連結時為了要取消預設行為 ( 開新分頁 )，所以在函式內新增 `e.preventDefault()`。\n\n<!-- more -->\n\n```html\n<div id=\"app\">\n  <a href=\"https://www.google.com/\" target=\"_blank\" @click=\"linkClick\">\n    google\n  </a>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {},\n    methods: {\n      linkClick(e) {\n        e.preventDefault()\n        alert('不開新頁面')\n      },\n    },\n  })\n</script>\n```\n\n[DEMO](https://codepen.io/gleofgja/pen/jOqNezw?editors=1010)\n\n這個方法會常常用在 `form submit` 上，因為原本預設行為是透過網頁讀取並取得網址資源，但我們會希望網頁不要重新讀取同時又可以取得網頁資源，這時就可以在 `form` 裡面呼叫 `e.preventDefault()` 。\n\n---\n\n## 方法二：\n\n精簡寫法，直接在 `click` 後面加上 `prevent` 就結束了。\n\n```html\n<div id=\"app\">\n  <a href=\"https://www.google.com/\" target=\"_blank\" @click.prevent=\"linkClick\">\n    google\n  </a>\n</div>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {},\n    methods: {\n      linkClick() {\n        alert('不開新頁面')\n      },\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/zYqObgv?editors=1010)\n\n---\n\n## 防止子元件連動: stop、 self\n\n```html\n<div id=\"app\">\n  <div class=\"box\" @click=\"msg = 'c'\">\n    <div class=\"box\" @click=\"msg = 'b'\">\n      <div class=\"box\" @click=\"msg = 'a'\"></div>\n    </div>\n  </div>\n  <h1>{{msg}}</h1>\n</div>\n\n<style>\n  .box {\n    display: inline-block;\n    min-width: 100px;\n    min-height: 100px;\n    padding: 30px;\n    border: 3px solid red;\n  }\n</style>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      msg: '',\n    },\n  })\n</script>\n```\n\n[DEMO](https://codepen.io/gleofgja/pen/dyMbLyR?editors=1010)\n\n![](https://i.imgur.com/xttduRm.png)\n\n當我點擊最裡面正方形的時候會出現 c 而不是 a，原因是最裡面的 box 是最外面 box 的 children ，所以一旦點擊最裡面的 box 就會一層一層往上找到最外層的 box 。這時候就可以在 click 後面加上 stop 或是 self 來防止事件往上層找。\n\n**1. stop 是調用 event.stopPropagation() ，防止事件往上一層傳。 2. self 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調，就是只有自己本身發出的不然不會觸發事件。假設 div 包了 100 層，事件是點擊第 2 層才會觸發，那就算我點擊外面第 1 層或是裡面的 3~100 層都是不會觸發的。**\n\n範例如下：\n\n```html\n<div id=\"app\">\n  <div class=\"box\" @click.self=\"msg = 'c'\">\n    <div class=\"box\" @click.self=\"msg = 'b'\">\n      <div class=\"box\" @click.stop=\"msg = 'a'\"></div>\n    </div>\n  </div>\n  <h1>{{msg}}</h1>\n</div>\n\n<style>\n  .box {\n    display: inline-block;\n    min-width: 100px;\n    min-height: 100px;\n    padding: 30px;\n    border: 3px solid red;\n  }\n</style>\n\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      msg: '',\n    },\n  })\n</script>\n```\n\n[codepen](https://codepen.io/gleofgja/pen/GRZKLrB?editors=1010)\n\n---\n\n## 參考資料: [官方文件](https://cn.vuejs.org/v2/api/#v-on)\n\n## [參考資料:精通 VueJS 前端開發完全指南](https://hiskio.com/courses/145)\n","slug":"語法修飾","published":1,"date":"2020-08-20T04:20:59.360Z","updated":"2021-03-26T16:13:09.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lqh002eg0trfcfw534w","content":"<html><head></head><body><h2 id=\"防止預設事件發生-preventDefault\"><a href=\"#防止預設事件發生-preventDefault\" class=\"headerlink\" title=\"防止預設事件發生: preventDefault\"></a>防止預設事件發生: preventDefault</h2><p><code>a</code> 連結預設是開新分頁，但我想要點<code> a</code> 連結就跳出 alert 同時又不要開新的分頁，這時候就要用 <code>preventDefault</code> 。<br>先偵聽一個事件 <code>linkClick</code> ，並給 <code>linkClick</code> 一個函式，點擊 <code>a</code> 連結時為了要取消預設行為 ( 開新分頁 )，所以在函式內新增 <code>e.preventDefault()</code>。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.google.com/\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"linkClick\"</span>&gt;</span></span><br><span class=\"line\">    google</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {},</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      linkClick(e) {</span><br><span class=\"line\">        e.preventDefault()</span><br><span class=\"line\"><span class=\"hljs-javascript\">        alert(<span class=\"hljs-string\">'不開新頁面'</span>)</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/jOqNezw?editors=1010\">DEMO</a></p>\n<p>這個方法會常常用在 <code>form submit</code> 上，因為原本預設行為是透過網頁讀取並取得網址資源，但我們會希望網頁不要重新讀取同時又可以取得網頁資源，這時就可以在 <code>form</code> 裡面呼叫 <code>e.preventDefault()</code> 。</p>\n<hr>\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h2><p>精簡寫法，直接在 <code>click</code> 後面加上 <code>prevent</code> 就結束了。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://www.google.com/\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">\"linkClick\"</span>&gt;</span></span><br><span class=\"line\">    google</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {},</span><br><span class=\"line\">    methods: {</span><br><span class=\"line\">      linkClick() {</span><br><span class=\"line\"><span class=\"hljs-javascript\">        alert(<span class=\"hljs-string\">'不開新頁面'</span>)</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/zYqObgv?editors=1010\">codepen</a></p>\n<hr>\n<h2 id=\"防止子元件連動-stop、-self\"><a href=\"#防止子元件連動-stop、-self\" class=\"headerlink\" title=\"防止子元件連動: stop、 self\"></a>防止子元件連動: stop、 self</h2><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"msg = 'c'\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"msg = 'b'\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"msg = 'a'\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{msg}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-css\">  <span class=\"hljs-selector-class\">.box</span> {</span></span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    min-width: 100px;</span><br><span class=\"line\">    min-height: 100px;</span><br><span class=\"line\">    padding: 30px;</span><br><span class=\"line\">    border: 3px solid red;</span><br><span class=\"line\">  }</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      msg: <span class=\"hljs-string\">''</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/dyMbLyR?editors=1010\">DEMO</a></p>\n<p><img src=\"https://i.imgur.com/xttduRm.png\"></p>\n<p>當我點擊最裡面正方形的時候會出現 c 而不是 a，原因是最裡面的 box 是最外面 box 的 children ，所以一旦點擊最裡面的 box 就會一層一層往上找到最外層的 box 。這時候就可以在 click 後面加上 stop 或是 self 來防止事件往上層找。</p>\n<p><strong>1. stop 是調用 event.stopPropagation() ，防止事件往上一層傳。 2. self 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調，就是只有自己本身發出的不然不會觸發事件。假設 div 包了 100 層，事件是點擊第 2 層才會觸發，那就算我點擊外面第 1 層或是裡面的 3~100 層都是不會觸發的。</strong></p>\n<p>範例如下：</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box\"</span> @<span class=\"hljs-attr\">click.self</span>=<span class=\"hljs-string\">\"msg = 'c'\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box\"</span> @<span class=\"hljs-attr\">click.self</span>=<span class=\"hljs-string\">\"msg = 'b'\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box\"</span> @<span class=\"hljs-attr\">click.stop</span>=<span class=\"hljs-string\">\"msg = 'a'\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{msg}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-css\">  <span class=\"hljs-selector-class\">.box</span> {</span></span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    min-width: 100px;</span><br><span class=\"line\">    min-height: 100px;</span><br><span class=\"line\">    padding: 30px;</span><br><span class=\"line\">    border: 3px solid red;</span><br><span class=\"line\">  }</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">new</span> Vue({</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    el: <span class=\"hljs-string\">'#app'</span>,</span></span><br><span class=\"line\">    data: {</span><br><span class=\"line\"><span class=\"hljs-javascript\">      msg: <span class=\"hljs-string\">''</span>,</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">  })</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/GRZKLrB?editors=1010\">codepen</a></p>\n<hr>\n<h2 id=\"參考資料-官方文件\"><a href=\"#參考資料-官方文件\" class=\"headerlink\" title=\"參考資料: 官方文件\"></a>參考資料: <a href=\"https://cn.vuejs.org/v2/api/#v-on\">官方文件</a></h2><h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Vue","path":"categories/Vue/"}],"_tags":[{"name":"preventDefault","path":"tags/preventDefault/"},{"name":"stop","path":"tags/stop/"},{"name":"self","path":"tags/self/"}],"excerpt":"<html><head></head><body><h2 id=\"防止預設事件發生-preventDefault\"><a href=\"#防止預設事件發生-preventDefault\" class=\"headerlink\" title=\"防止預設事件發生: preventDefault\"></a>防止預設事件發生: preventDefault</h2><p><code>a</code> 連結預設是開新分頁，但我想要點<code> a</code> 連結就跳出 alert 同時又不要開新的分頁，這時候就要用 <code>preventDefault</code> 。<br>先偵聽一個事件 <code>linkClick</code> ，並給 <code>linkClick</code> 一個函式，點擊 <code>a</code> 連結時為了要取消預設行為 ( 開新分頁 )，所以在函式內新增 <code>e.preventDefault()</code>。</p></body></html>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.google.com/&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;linkClick&quot;</span>&gt;</span></span><br><span class=\"line\">    google</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      linkClick(e) &#123;</span><br><span class=\"line\">        e.preventDefault()</span><br><span class=\"line\"><span class=\"javascript\">        alert(<span class=\"string\">&#x27;不開新頁面&#x27;</span>)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/jOqNezw?editors=1010\">DEMO</a></p>\n<p>這個方法會常常用在 <code>form submit</code> 上，因為原本預設行為是透過網頁讀取並取得網址資源，但我們會希望網頁不要重新讀取同時又可以取得網頁資源，這時就可以在 <code>form</code> 裡面呼叫 <code>e.preventDefault()</code> 。</p>\n<hr>\n<h2 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h2><p>精簡寫法，直接在 <code>click</code> 後面加上 <code>prevent</code> 就結束了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.google.com/&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;linkClick&quot;</span>&gt;</span></span><br><span class=\"line\">    google</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      linkClick() &#123;</span><br><span class=\"line\"><span class=\"javascript\">        alert(<span class=\"string\">&#x27;不開新頁面&#x27;</span>)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/zYqObgv?editors=1010\">codepen</a></p>\n<hr>\n<h2 id=\"防止子元件連動-stop、-self\"><a href=\"#防止子元件連動-stop、-self\" class=\"headerlink\" title=\"防止子元件連動: stop、 self\"></a>防止子元件連動: stop、 self</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;msg = &#x27;c&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;msg = &#x27;b&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;msg = &#x27;a&#x27;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    min-width: 100px;</span><br><span class=\"line\">    min-height: 100px;</span><br><span class=\"line\">    padding: 30px;</span><br><span class=\"line\">    border: 3px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      msg: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/dyMbLyR?editors=1010\">DEMO</a></p>\n<p><img src=\"https://i.imgur.com/xttduRm.png\"></p>\n<p>當我點擊最裡面正方形的時候會出現 c 而不是 a，原因是最裡面的 box 是最外面 box 的 children ，所以一旦點擊最裡面的 box 就會一層一層往上找到最外層的 box 。這時候就可以在 click 後面加上 stop 或是 self 來防止事件往上層找。</p>\n<p><strong>1. stop 是調用 event.stopPropagation() ，防止事件往上一層傳。 2. self 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調，就是只有自己本身發出的不然不會觸發事件。假設 div 包了 100 層，事件是點擊第 2 層才會觸發，那就算我點擊外面第 1 層或是裡面的 3~100 層都是不會觸發的。</strong></p>\n<p>範例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;msg = &#x27;c&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;msg = &#x27;b&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">&quot;msg = &#x27;a&#x27;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.box</span> &#123;</span></span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    min-width: 100px;</span><br><span class=\"line\">    min-height: 100px;</span><br><span class=\"line\">    padding: 30px;</span><br><span class=\"line\">    border: 3px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      msg: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/gleofgja/pen/GRZKLrB?editors=1010\">codepen</a></p>\n<hr>\n<h2 id=\"參考資料-官方文件\"><a href=\"#參考資料-官方文件\" class=\"headerlink\" title=\"參考資料: 官方文件\"></a>參考資料: <a href=\"https://cn.vuejs.org/v2/api/#v-on\">官方文件</a></h2><h2 id=\"參考資料-精通-VueJS-前端開發完全指南\"><a href=\"#參考資料-精通-VueJS-前端開發完全指南\" class=\"headerlink\" title=\"參考資料:精通 VueJS 前端開發完全指南\"></a><a href=\"https://hiskio.com/courses/145\">參考資料:精通 VueJS 前端開發完全指南</a></h2>"},{"title":"JavaScript - Hoisting 提升","date":"2021-03-26T16:00:00.000Z","_content":"\n今天看到澎澎的教學影片，覺得觀念清晰好懂，就紀錄一下這重要觀念。\n\n在 JavaSctip 裡面如果故意把宣告變數擺在最後面，它仍就會因為 Hoisting 的效果被放到最前面。\n( 注意我只說宣告變數 ( `var a` )，沒說變數賦值 ( `a = 10` ) )\n<!-- more -->\n## 變數的 Hoisting\n先來看看最基本的變數宣告\n把值賦予到 `a` 變數上，然後在印出來。\n```javascript\nvar a = 10 //宣告變數+變數賦值\nconsole.log(a) //10\n```\n看起來沒甚麼很正常的顯示\n![](https://i.imgur.com/2rDOBI6.png)\n\n\n如果我把宣告變數移到下面的話會顯示甚麼?\n```javascript\nconsole.log(a)\nvar a = 10 //undefined\n```\n會顯示 `undefined` 。\n![](https://i.imgur.com/A2qvpOc.png)\n\n\n為什麼會這樣?\n\n因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。\n```javascript\n//這是瀏覽器讀取後的\nvar a //宣告變數\nconsole.log(a) //undefined\na = 10 //變數賦值\n```\n![](https://i.imgur.com/ez0GKJ0.png)\n\n`undefined` 的意思就是我已經宣告這個變數了，但是變數沒有被賦值，所以會顯示 `undefined`。\n\n那在換個寫法，`宣告` 跟 `賦值` 下上對調。\n```javascript\na = 10 //變數賦值\nconsole.log(a) //10\nvar a //宣告變數\n```\n![](https://i.imgur.com/Nbyz9Jk.png)\n\n這樣可以讀到值，為什麼?\n\n因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。\n```javascript\n//這是瀏覽器讀取後的\nvar a //宣告變數\na = 10 //變數賦值\nconsole.log(a) //10\n```\n![](https://i.imgur.com/FoJvksj.png)\n\n不過宣告跟賦值下上對調這樣的寫法在一般開發過程中是不被允許的，正常情況下，當我們在使用某個變數之前一定要先宣告變數，這是必須養成的好習慣。\n\n[DEMO](https://codepen.io/gleofgja/pen/dyNMGrm?editors=0012)\n\n## 函式的 Hoisting\n上面講變數的宣告，接下來講函式的宣告。\n\n### 1. 陳述式\n先宣告一個陳述式的函式再呼叫。\n```javascript\nfunction fn(){ //宣告函式\n  console.log('Hello') //Hello\n}\n\nfn() //呼叫函式\n```\n![](https://i.imgur.com/WUlijrL.png)\n\n會正常印出來。\n\n但如果我把 `fn()` 宣告挪到函式前面的話呢?\n```javascript\nfn()\nfunction fn(){\n  console.log('Hello') //Hello\n}\n```\n![](https://i.imgur.com/irTTtSx.png)\n\n一樣可以正常顯示，為甚麼?\n因為函式的宣告等同於上面變數的宣告，會因為 JavaScript Hoisting 的特性被移到最上方。\n\n### 2. 表達式\n上面的宣告是**陳述式**，那改成**表達式**呢?\n```javascript\nfn()\nvar fn = function(){\n  console.log('Hello') // fn is not a function \n}\n```\n![](https://i.imgur.com/QbarxaO.png)\n\n會顯示 `fn is not a function` ，上面這段在瀏覽器讀取程式碼的時候會變成下面這樣。\n```javascript\nvar fn \nfn()\nfn = function(){\n  console.log('Hello') // fn is not a function \n}\n```\n![](https://i.imgur.com/WW7URJz.png)\n\n---\n為了讓比對更清楚我把變數的跟這個函式例子放一起。\n```javascript\nvar fn // var a\n\nfn() // console.log(a)\n\nfn = function(){        // a = 10\n  console.log('Hello') \n}\n```\n會發現只有變數的宣告被提升，但沒有被賦值，所以在執行的時候就讀不到資料。\n\n[DEMO](https://codepen.io/gleofgja/pen/zYNqrXZ?editors=0012)\n## 參考資料\n[JavaScript 網頁前端工程入門：Hoisting 宣告提升 By 彭彭](https://www.youtube.com/watch?v=xM2Oqb-sdTk)","source":"_posts/2021/Hoisting.md","raw":"---\ntitle: JavaScript - Hoisting 提升\ndate: 2021/03/27\ntags:\n  - JavaScrip\n  - Hoisting\n\ncategories:\n  - JavaScrip\n  - Hoisting\n---\n\n今天看到澎澎的教學影片，覺得觀念清晰好懂，就紀錄一下這重要觀念。\n\n在 JavaSctip 裡面如果故意把宣告變數擺在最後面，它仍就會因為 Hoisting 的效果被放到最前面。\n( 注意我只說宣告變數 ( `var a` )，沒說變數賦值 ( `a = 10` ) )\n<!-- more -->\n## 變數的 Hoisting\n先來看看最基本的變數宣告\n把值賦予到 `a` 變數上，然後在印出來。\n```javascript\nvar a = 10 //宣告變數+變數賦值\nconsole.log(a) //10\n```\n看起來沒甚麼很正常的顯示\n![](https://i.imgur.com/2rDOBI6.png)\n\n\n如果我把宣告變數移到下面的話會顯示甚麼?\n```javascript\nconsole.log(a)\nvar a = 10 //undefined\n```\n會顯示 `undefined` 。\n![](https://i.imgur.com/A2qvpOc.png)\n\n\n為什麼會這樣?\n\n因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。\n```javascript\n//這是瀏覽器讀取後的\nvar a //宣告變數\nconsole.log(a) //undefined\na = 10 //變數賦值\n```\n![](https://i.imgur.com/ez0GKJ0.png)\n\n`undefined` 的意思就是我已經宣告這個變數了，但是變數沒有被賦值，所以會顯示 `undefined`。\n\n那在換個寫法，`宣告` 跟 `賦值` 下上對調。\n```javascript\na = 10 //變數賦值\nconsole.log(a) //10\nvar a //宣告變數\n```\n![](https://i.imgur.com/Nbyz9Jk.png)\n\n這樣可以讀到值，為什麼?\n\n因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。\n```javascript\n//這是瀏覽器讀取後的\nvar a //宣告變數\na = 10 //變數賦值\nconsole.log(a) //10\n```\n![](https://i.imgur.com/FoJvksj.png)\n\n不過宣告跟賦值下上對調這樣的寫法在一般開發過程中是不被允許的，正常情況下，當我們在使用某個變數之前一定要先宣告變數，這是必須養成的好習慣。\n\n[DEMO](https://codepen.io/gleofgja/pen/dyNMGrm?editors=0012)\n\n## 函式的 Hoisting\n上面講變數的宣告，接下來講函式的宣告。\n\n### 1. 陳述式\n先宣告一個陳述式的函式再呼叫。\n```javascript\nfunction fn(){ //宣告函式\n  console.log('Hello') //Hello\n}\n\nfn() //呼叫函式\n```\n![](https://i.imgur.com/WUlijrL.png)\n\n會正常印出來。\n\n但如果我把 `fn()` 宣告挪到函式前面的話呢?\n```javascript\nfn()\nfunction fn(){\n  console.log('Hello') //Hello\n}\n```\n![](https://i.imgur.com/irTTtSx.png)\n\n一樣可以正常顯示，為甚麼?\n因為函式的宣告等同於上面變數的宣告，會因為 JavaScript Hoisting 的特性被移到最上方。\n\n### 2. 表達式\n上面的宣告是**陳述式**，那改成**表達式**呢?\n```javascript\nfn()\nvar fn = function(){\n  console.log('Hello') // fn is not a function \n}\n```\n![](https://i.imgur.com/QbarxaO.png)\n\n會顯示 `fn is not a function` ，上面這段在瀏覽器讀取程式碼的時候會變成下面這樣。\n```javascript\nvar fn \nfn()\nfn = function(){\n  console.log('Hello') // fn is not a function \n}\n```\n![](https://i.imgur.com/WW7URJz.png)\n\n---\n為了讓比對更清楚我把變數的跟這個函式例子放一起。\n```javascript\nvar fn // var a\n\nfn() // console.log(a)\n\nfn = function(){        // a = 10\n  console.log('Hello') \n}\n```\n會發現只有變數的宣告被提升，但沒有被賦值，所以在執行的時候就讀不到資料。\n\n[DEMO](https://codepen.io/gleofgja/pen/zYNqrXZ?editors=0012)\n## 參考資料\n[JavaScript 網頁前端工程入門：Hoisting 宣告提升 By 彭彭](https://www.youtube.com/watch?v=xM2Oqb-sdTk)","slug":"Hoisting","published":1,"updated":"2021-03-26T16:33:22.792Z","_id":"ckmqi9lqj002hg0trat1q8cnl","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>今天看到澎澎的教學影片，覺得觀念清晰好懂，就紀錄一下這重要觀念。</p>\n<p>在 JavaSctip 裡面如果故意把宣告變數擺在最後面，它仍就會因為 Hoisting 的效果被放到最前面。<br>( 注意我只說宣告變數 ( <code>var a</code> )，沒說變數賦值 ( <code>a = 10</code> ) )</p>\n<a id=\"more\"></a>\n<h2 id=\"變數的-Hoisting\"><a href=\"#變數的-Hoisting\" class=\"headerlink\" title=\"變數的 Hoisting\"></a>變數的 Hoisting</h2><p>先來看看最基本的變數宣告<br>把值賦予到 <code>a</code> 變數上，然後在印出來。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">//宣告變數+變數賦值</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">//10</span></span><br></pre></td></tr></tbody></table></figure>\n<p>看起來沒甚麼很正常的顯示<br><img src=\"https://i.imgur.com/2rDOBI6.png\"></p>\n<p>如果我把宣告變數移到下面的話會顯示甚麼?</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">//undefined</span></span><br></pre></td></tr></tbody></table></figure>\n<p>會顯示 <code>undefined</code> 。<br><img src=\"https://i.imgur.com/A2qvpOc.png\"></p>\n<p>為什麼會這樣?</p>\n<p>因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//這是瀏覽器讀取後的</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> a <span class=\"hljs-comment\">//宣告變數</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">//undefined</span></span><br><span class=\"line\">a = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">//變數賦值</span></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/ez0GKJ0.png\"></p>\n<p><code>undefined</code> 的意思就是我已經宣告這個變數了，但是變數沒有被賦值，所以會顯示 <code>undefined</code>。</p>\n<p>那在換個寫法，<code>宣告</code> 跟 <code>賦值</code> 下上對調。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">//變數賦值</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">//10</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> a <span class=\"hljs-comment\">//宣告變數</span></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/Nbyz9Jk.png\"></p>\n<p>這樣可以讀到值，為什麼?</p>\n<p>因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//這是瀏覽器讀取後的</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> a <span class=\"hljs-comment\">//宣告變數</span></span><br><span class=\"line\">a = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">//變數賦值</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">//10</span></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/FoJvksj.png\"></p>\n<p>不過宣告跟賦值下上對調這樣的寫法在一般開發過程中是不被允許的，正常情況下，當我們在使用某個變數之前一定要先宣告變數，這是必須養成的好習慣。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/dyNMGrm?editors=0012\">DEMO</a></p>\n<h2 id=\"函式的-Hoisting\"><a href=\"#函式的-Hoisting\" class=\"headerlink\" title=\"函式的 Hoisting\"></a>函式的 Hoisting</h2><p>上面講變數的宣告，接下來講函式的宣告。</p>\n<h3 id=\"1-陳述式\"><a href=\"#1-陳述式\" class=\"headerlink\" title=\"1. 陳述式\"></a>1. 陳述式</h3><p>先宣告一個陳述式的函式再呼叫。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-comment\">//宣告函式</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello'</span>) <span class=\"hljs-comment\">//Hello</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">fn() <span class=\"hljs-comment\">//呼叫函式</span></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/WUlijrL.png\"></p>\n<p>會正常印出來。</p>\n<p>但如果我把 <code>fn()</code> 宣告挪到函式前面的話呢?</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello'</span>) <span class=\"hljs-comment\">//Hello</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/irTTtSx.png\"></p>\n<p>一樣可以正常顯示，為甚麼?<br>因為函式的宣告等同於上面變數的宣告，會因為 JavaScript Hoisting 的特性被移到最上方。</p>\n<h3 id=\"2-表達式\"><a href=\"#2-表達式\" class=\"headerlink\" title=\"2. 表達式\"></a>2. 表達式</h3><p>上面的宣告是<strong>陳述式</strong>，那改成<strong>表達式</strong>呢?</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello'</span>) <span class=\"hljs-comment\">// fn is not a function </span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/QbarxaO.png\"></p>\n<p>會顯示 <code>fn is not a function</code> ，上面這段在瀏覽器讀取程式碼的時候會變成下面這樣。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> fn </span><br><span class=\"line\">fn()</span><br><span class=\"line\">fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello'</span>) <span class=\"hljs-comment\">// fn is not a function </span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://i.imgur.com/WW7URJz.png\"></p>\n<hr>\n<p>為了讓比對更清楚我把變數的跟這個函式例子放一起。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> fn <span class=\"hljs-comment\">// var a</span></span><br><span class=\"line\"></span><br><span class=\"line\">fn() <span class=\"hljs-comment\">// console.log(a)</span></span><br><span class=\"line\"></span><br><span class=\"line\">fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{        <span class=\"hljs-comment\">// a = 10</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hello'</span>) </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>會發現只有變數的宣告被提升，但沒有被賦值，所以在執行的時候就讀不到資料。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/zYNqrXZ?editors=0012\">DEMO</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.youtube.com/watch?v=xM2Oqb-sdTk\">JavaScript 網頁前端工程入門：Hoisting 宣告提升 By 彭彭</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScrip","path":"categories/JavaScrip/"},{"name":"Hoisting","path":"categories/JavaScrip/Hoisting/"}],"_tags":[{"name":"JavaScrip","path":"tags/JavaScrip/"},{"name":"Hoisting","path":"tags/Hoisting/"}],"excerpt":"<html><head></head><body><p>今天看到澎澎的教學影片，覺得觀念清晰好懂，就紀錄一下這重要觀念。</p>\n<p>在 JavaSctip 裡面如果故意把宣告變數擺在最後面，它仍就會因為 Hoisting 的效果被放到最前面。<br>( 注意我只說宣告變數 ( <code>var a</code> )，沒說變數賦值 ( <code>a = 10</code> ) )</p></body></html>","more":"<h2 id=\"變數的-Hoisting\"><a href=\"#變數的-Hoisting\" class=\"headerlink\" title=\"變數的 Hoisting\"></a>變數的 Hoisting</h2><p>先來看看最基本的變數宣告<br>把值賦予到 <code>a</code> 變數上，然後在印出來。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span> <span class=\"comment\">//宣告變數+變數賦值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p>看起來沒甚麼很正常的顯示<br><img src=\"https://i.imgur.com/2rDOBI6.png\"></p>\n<p>如果我把宣告變數移到下面的話會顯示甚麼?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span> <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>會顯示 <code>undefined</code> 。<br><img src=\"https://i.imgur.com/A2qvpOc.png\"></p>\n<p>為什麼會這樣?</p>\n<p>因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//這是瀏覽器讀取後的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"comment\">//宣告變數</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> <span class=\"comment\">//變數賦值</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/ez0GKJ0.png\"></p>\n<p><code>undefined</code> 的意思就是我已經宣告這個變數了，但是變數沒有被賦值，所以會顯示 <code>undefined</code>。</p>\n<p>那在換個寫法，<code>宣告</code> 跟 <code>賦值</code> 下上對調。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">10</span> <span class=\"comment\">//變數賦值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"comment\">//宣告變數</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/Nbyz9Jk.png\"></p>\n<p>這樣可以讀到值，為什麼?</p>\n<p>因為 JavaScript 的特性，變數的宣告會提升 ( Hoisting )，所以當瀏覽器在讀取程式碼時，會變成下面這樣。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//這是瀏覽器讀取後的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"comment\">//宣告變數</span></span><br><span class=\"line\">a = <span class=\"number\">10</span> <span class=\"comment\">//變數賦值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/FoJvksj.png\"></p>\n<p>不過宣告跟賦值下上對調這樣的寫法在一般開發過程中是不被允許的，正常情況下，當我們在使用某個變數之前一定要先宣告變數，這是必須養成的好習慣。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/dyNMGrm?editors=0012\">DEMO</a></p>\n<h2 id=\"函式的-Hoisting\"><a href=\"#函式的-Hoisting\" class=\"headerlink\" title=\"函式的 Hoisting\"></a>函式的 Hoisting</h2><p>上面講變數的宣告，接下來講函式的宣告。</p>\n<h3 id=\"1-陳述式\"><a href=\"#1-陳述式\" class=\"headerlink\" title=\"1. 陳述式\"></a>1. 陳述式</h3><p>先宣告一個陳述式的函式再呼叫。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//宣告函式</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello&#x27;</span>) <span class=\"comment\">//Hello</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn() <span class=\"comment\">//呼叫函式</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/WUlijrL.png\"></p>\n<p>會正常印出來。</p>\n<p>但如果我把 <code>fn()</code> 宣告挪到函式前面的話呢?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello&#x27;</span>) <span class=\"comment\">//Hello</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/irTTtSx.png\"></p>\n<p>一樣可以正常顯示，為甚麼?<br>因為函式的宣告等同於上面變數的宣告，會因為 JavaScript Hoisting 的特性被移到最上方。</p>\n<h3 id=\"2-表達式\"><a href=\"#2-表達式\" class=\"headerlink\" title=\"2. 表達式\"></a>2. 表達式</h3><p>上面的宣告是<strong>陳述式</strong>，那改成<strong>表達式</strong>呢?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello&#x27;</span>) <span class=\"comment\">// fn is not a function </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/QbarxaO.png\"></p>\n<p>會顯示 <code>fn is not a function</code> ，上面這段在瀏覽器讀取程式碼的時候會變成下面這樣。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn </span><br><span class=\"line\">fn()</span><br><span class=\"line\">fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello&#x27;</span>) <span class=\"comment\">// fn is not a function </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/WW7URJz.png\"></p>\n<hr>\n<p>為了讓比對更清楚我把變數的跟這個函式例子放一起。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn <span class=\"comment\">// var a</span></span><br><span class=\"line\"></span><br><span class=\"line\">fn() <span class=\"comment\">// console.log(a)</span></span><br><span class=\"line\"></span><br><span class=\"line\">fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;        <span class=\"comment\">// a = 10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Hello&#x27;</span>) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>會發現只有變數的宣告被提升，但沒有被賦值，所以在執行的時候就讀不到資料。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/zYNqrXZ?editors=0012\">DEMO</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.youtube.com/watch?v=xM2Oqb-sdTk\">JavaScript 網頁前端工程入門：Hoisting 宣告提升 By 彭彭</a></p>"},{"title":"JavaScript 實作 - 電影訂位","date":"2021-01-15T16:00:00.000Z","_content":"\n## 功能\n\n1. 上方可以選擇要看的電影\n2. 選取位子同時計算電影價格\n\n完成圖\n![](https://i.imgur.com/AHsrrmk.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission22)\n[DEMO](https://pktseng.github.io/Web-Side-Project/mission22/index.html)\n\n## <!-- more -->\n\n## HTML\n\nHTML 結構分成以下幾點:\n\n### 1. 下拉選單可以選擇電影\n\n```html\n<div class=\".movieContainer\">\n  <label>Pick a movie:</label>\n  <select id=\"movie\">\n    <option value=\"10\">Avengers: Endgame ($10)</option>\n    <option value=\"12\">Joker ($12)</option>\n    <option value=\"8\">Toy Story 4 ($8)</option>\n    <option value=\"9\">The Lion King ($9)</option>\n  </select>\n</div>\n```\n\n---\n\n### 2. 告示座位狀態圖\n\n```html\n<ul class=\"showcase\">\n  <li>\n    <div class=\"seat\"></div>\n    <small>N/A</small>\n  </li>\n  <li>\n    <div class=\"seat selected\"></div>\n    <small>Selected</small>\n  </li>\n  <li>\n    <div class=\"seat occupied\"></div>\n    <small>Occupied</small>\n  </li>\n</ul>\n```\n\n---\n\n### 3. 點選尚未選擇、已選擇的跟可以選擇的座位\n\n```html\n<div class=\"container\">\n  <div class=\"screen\"></div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n</div>\n```\n\n---\n\n### 4. 顯示選擇的座位數量跟電影票價\n\n```html\n<p class=\"text\">\n  You have selected\n  <span id=\"count\">0</span>\n  seats for a price of $\n  <span id=\"total\">0</span>\n</p>\n```\n\n---\n\n### 完成的結構圖如下:\n\n![](https://i.imgur.com/042hQLy.png)\n\n---\n\n## 樣式\n\n載入字體 `@import url('https://fonts.googleapis.com/css?family=Lato&display=swap');`\n\n依照 HTML 結構來增加樣式\n\n### 1. 全域設定\n\n移到視窗正中央\n\n```scss\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: #242333;\n  color: #fff;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  font-family: 'Lato', sans-serif;\n  margin: 0;\n}\n```\n\n![](https://i.imgur.com/vDuzvY2.png)\n\n---\n\n### 2. 給選單樣式\n\n```scss\n.movieContainer {\n  margin: 20px 0;\n  select {\n    background-color: #fff;\n    border: 0;\n    border-radius: 5px;\n    font-size: 14px;\n    margin-left: 10px;\n    padding: 5px 15px 5px 15px;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    appearance: none;\n  }\n}\n```\n\n![](https://i.imgur.com/DXj1pmX.png)\n\n---\n\n### 3. 座位樣式\n\n```scss\n.seat {\n  background-color: #444451;\n  height: 12px;\n  width: 15px;\n  margin: 3px;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n\n.container {\n  perspective: 1000px;\n  margin-bottom: 30px;\n  .row {\n    display: flex;\n  }\n}\n```\n\n![](https://i.imgur.com/AEuoijm.png)\n\n---\n\n### 4. 屏幕樣式\n\n```scss\n.screen {\n  background-color: #fff;\n  height: 70px;\n  width: 100%;\n  margin: 15px 0;\n  transform: rotateX(-45deg);\n  box-shadow: 0 3px 10px rgba(255, 255, 255, 0.7);\n}\n```\n\n![](https://i.imgur.com/n1si14x.png)\n\n---\n\n### 5. 選擇座位數量跟票價的樣式\n\n```scss\np.text {\n  margin: 5px 0;\n  span {\n    color: #6feaf6;\n  }\n}\n```\n\n![](https://i.imgur.com/U2033ZX.png)\n\n---\n\n### 6. 排列一下座位\n\n```scss\n.showCase {\n  background: rgba(0, 0, 0, 0.1);\n  padding: 5px 10px;\n  border-radius: 5px;\n  color: #777;\n  list-style-type: none;\n  display: flex;\n  justify-content: space-between;\n  &.seat:not(.occupied):hover {\n    cursor: default;\n    transform: scale(1);\n  }\n  li {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 10px;\n    small {\n      margin-left: 2px;\n    }\n  }\n}\n```\n\n![](https://i.imgur.com/lz2FabD.png)\n\n---\n\n### 7. 排列電影座位\n\n因為是 scss 寫法所以寫在 seats 裡面\n\n```scss\n.seat {\n  background-color: #444451;\n  height: 12px;\n  width: 15px;\n  margin: 3px;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  &.selected {\n    background-color: #6feaf6;\n  }\n  &.occupied {\n    background-color: #fff;\n  }\n  &:nth-of-type(2) {\n    margin-right: 18px;\n  }\n  &:nth-last-of-type(2) {\n    margin-left: 18px;\n  }\n  &:not(.occupied):hover {\n    cursor: pointer;\n    transform: scale(1.2);\n  }\n}\n```\n\n![](https://i.imgur.com/AGT0L4B.png)\n\n---\n\n以上切版就算完成了~~~\n\n## JavaScript\n\n接下來要進行 JavaScript 事件的撰寫\n\n### 1. 抓取 DOM 元素\n\n用選擇器抓取 dom 元素，在賦值到各個變數上，會使用 const 是因為此變數之後不能在更動。\n\n```javascript\nconst container = document.querySelector('.container')\nconst seats = document.querySelectorAll('.row .seat:not(.occupied)')\nconst count = document.querySelector('#count')\nconst total = document.querySelector('#total')\nconst movieSelect = document.querySelector('#movie')\n```\n\n### 2. 選擇座位時觸發的事件\n\n當點擊座位時會先判斷 class 是否有 seat 同時不包含 occupied 的，再用 contains 讓值變成布林值，如果回傳 true 就會用 toggle 增加 selected 屬性，這樣當我們選擇座位時就會更改樣式了。\n\n下面再放一個 `updateSelectCount` 函式，在我們更動座位時就會觸發。\n\n```javascript\n// 監聽容器內座位數值的變化\ncontainer.addEventListener('click', (e) => {\n  if (\n    e.target.classList.contains('seat') &&\n    !e.target.classList.contains('occupied')\n  ) {\n    e.target.classList.toggle('selected')\n    updateSelectCount()\n  }\n})\n// 執行\nupdateSelectCount()\n```\n\n### 3. 計算座位數量跟電影票價\n\n當我們選擇座位的時候同時計算座位數量跟電影價格，再將數量跟價格賦予到 DOM 元素裡面。\n利用 `querySelectorAll` 把 `.row .seat.selected` 選起來，再以陣列的方式傳回，\n用 `console.log(selectedSeats)` 會看到下圖\n\n![](https://i.imgur.com/B92hT1v.png)\n\n![](https://i.imgur.com/YPyzIup.png)\n\n有了陣列後就可以計算數量，用 `console.log(selectedSeatCount)` 可以看到選擇的數量，例如我選 4 個座位\n![](https://i.imgur.com/xgbbFI1.png)\n\n![](https://i.imgur.com/BVUtWeY.png)\n\n再把選擇座位的數量賦予到 `count` DOM 元素裡面，就是最下面會顯示的座位數量，再利用這數量去計算票價後，賦直到 `total` 裡面。\n![](https://i.imgur.com/MJr3DwM.png)\n\n- `ticketPrice` 會用 `+` 號的原因是要將字串轉成數字型式\n\n這段程式碼如下:\n\n```javascript\nlet ticketPrice = +movieSelect.value\n\n// 計算選擇的座位數量價格\nfunction updateSelectCount() {\n  // 將所選取到的座位塞入 selectedSeats 這個變數中\n  const selectedSeats = document.querySelectorAll('.row .seat.selected')\n\n  const selectedSeatCount = selectedSeats.length\n  count.innerText = selectedSeatCount // 將選到的座位數量塞到 count 裡面\n  total.innerText = selectedSeatCount * ticketPrice // 計算座位數量跟票價\n}\n```\n\n### 4. 選擇電影同時計算票價\n\n這函式是為了當我們在切換電影的時候，重新計算座位跟票價。\n\n在選擇電影的時候就會觸發，計算當下所選的電影價格，再將電影的索引跟選擇的價格放到 `setMovieData` callback function 裡面，同時更新座位數量跟票價。\n\n- `+e.target.value` 前面的 `+` 為了確保是數字型別。\n\n```javascript\n// 依照選擇的電影變更價格\nmovieSelect.addEventListener('change', (e) => {\n  ticketPrice = +e.target.value\n\n  // 查看我們選擇的電影索引跟價格\n  // console.log(e.target.selectedIndex, e.target.value)\n\n  setMovieData(e.target.selectedIndex, e.target.value)\n  // 將電影索引跟價格的參數塞到 setMovieData 裡面\n  updateSelectCount() //執行\n})\n```\n\n到目前為止，我們已經完成選擇座位的數量跟票價的計算。接下來要進入到 localStorage 裡面進行設定，因為目前以目前的成是馬刷新頁面，資料就會不見，所以要記錄到瀏覽器的資料庫裏面。\n\n### 5. 將資料紀錄到瀏覽器的數據庫裡面\n\n這麼做的原因是防止我們刷新頁面的時候剛才所選的資料全部都消失，這時候就會用到 localStorage、setItem、getItem、JSON.parse 等觀念。\n\n上段 `movieSelect` 函式是在監聽選擇電影價格跟位字的索引，當我們在選擇座位或是電影的同時就會觸發到 `setMovieData` 函式，而 `setMovieData` 函式帶入的那兩個值就是要記錄到瀏覽器資料庫裡面的參數。\n\n- #### localStorage\n  如果想把資料存在瀏覽器的資料庫裡裡面就會用到 localStorage，但要注意的是 localStorage 會只接受字串，所以要將資料轉成字串 (string) 的型式。\n\n課程中有使用到 ES6 解構語法，將所選擇的座位 `selectedSeats` 變成陣列，再利用 map 語法處理陣列中的每個元素，然後回傳出新的值。\n\n- map: (第一個是每個元素的值 ( 必填 )，第二個是當前元素的索引值 ( 選填 )，第三個是當前的陣列 ( 選填 ))\n- indexOf: 會判斷陣列中是否包含某個值，判斷的方式為「由左而右」，如果有包含就回傳這個值在陣列中的索引值\n\n這段函式的意思是當我選擇了座位 `selectedSeats` ，將這些選擇的座位化成陣列型式`[...selectedSeats] `，再把陣列內的座位拿去判斷 (indexOf) 索引值再回傳，如果找不到索引值就會顯示 -1。\n\n用 console 查看，當我選擇了第 1、第 2 跟第 7 個座位就會顯示索引值跟陣列。\n![](https://i.imgur.com/azBL9mU.png)\n\n而此段函式要放到 `updateSelectCount` 函式中，這樣再選取座位的時候就會把索引值傳存到 localStorage 裡面。\n\n```javascript\n// 將[...selectedSeats]解構的值塞到函式裡面運算，再把結果 return 出來\nconst seatsIndex = [...selectedSeats].map((seat) => [...seats].indexOf(seat))\n```\n\n- #### setItem\n  當我們將資料設定到瀏覽器數據庫裡面時，這個設定就是 setItem ，\n  寫法是這樣 `setItem('key', value)`\n  `key` 值就像是我們在填寫表單的時候會有姓名、年紀、電話這些的開頭\n  `value` 值就是依照表單中的開頭依序填寫的內容，如: ken、100 歲、0910xxxxx\n\n在 `setMovieData` 函式中我們將座位索引的 `key` 設定成 `selectedMovieIndex`， `value` 設定成 `movieIndex`，同理，價格也是這樣設定，目的是將資料存入 localStorage 裡面。\n\n```javascript\n// 透過 localStorage 抓取電影索引值跟價格\nfunction setMovieData(movieIndex, moviePrice) {\n  localStorage.setItem('selectedMovieIndex', movieIndex)\n  localStorage.setItem('selectedMoviePrice', moviePrice)\n}\n\nlocalStorage.setItem('selectedSeats', JSON.stringify(seatsIndex))\n```\n\n- #### getItem\n  用 setItem 設定好 key 跟 value 的值後，要將 value 值取出的話就要用 getItem 抓 key 值。\n\n```javascript\nlocalStorage.getItem('selectedSeats')\n```\n\n- #### JSON.parse\n  因為 localStorage 只能讀字串型式的資料，所以當我們在讀取或是抓取資料的時候必須是物件的型式，這時就會用到 `JSON.parse`。\n\n```javascript\nconst selectedSeats = JSON.parse(localStorage.getItem('selectedSeats'))\n```\n\n### 6. populateUI function\n\n在選好座位數量並透過 setIetm 存放到 localStorage 資料庫裡面，現在要使用這些資料，所以會先用 getItem 抓取，然後在轉成物件格式，轉物件是因為資料如果是字串會抓不到，轉完之後在賦值到 `selectedSeats` 變數裡面\n\n接下來就用`selectedSeats`變數來判斷是不是空值同時數量又必須大於 1，如果回傳的是 true ，再用 `forEach` 運算 `seats` 裡的每個參數，看看選擇的值是否都大於-1，因為陣列第一個值為 0，如果回傳 true ，再將 className 添加到 seat 裡面。\n\n執行 populateUI 函式時也會同時執行另一項函式，剛才已經把電影的索引值設定好並丟到 localStorage 裡面，當我們在選擇電影時會先判斷我們選擇的是否是空值，如果不是就將這項索引值賦予到 `movieSelect` 函式裡。\n\n- forEach: 會將陣列中每個元素套用到指定的函式裡進行運算\n\n```javascript\n// 紀錄資料，刷新後記錄仍然在\nfunction populateUI() {\n  // 因為剛才是轉成字串，這裡要轉成物件\n  const selectedSeats = JSON.parse(localStorage.getItem('selectedSeats'))\n  if (selectedSeats !== null && selectedSeats.length > 0) {\n    seats.forEach((seat, index) => {\n      if (selectedSeats.indexOf(index) > -1) {\n        seat.classList.add('selected')\n      }\n    })\n  }\n\n  const selectedMovieIndex = localStorage.getItem('selectedMovieIndex')\n  if (selectedMovieIndex !== null) {\n    movieSelect.selectedIndex = selectedMovieIndex\n  }\n}\n// 執行\npopulateUI()\n```\n\n---\n\n### 完整程式碼\n\n```javascript\nconst container = document.querySelector('.container')\nconst seats = document.querySelectorAll('.row .seat:not(.occupied)')\nconst count = document.querySelector('#count')\nconst total = document.querySelector('#total')\nconst movieSelect = document.querySelector('#movie')\nlet ticketPrice = +movieSelect.value\n\n// 計算選擇的座位數量價格\nfunction updateSelectCount() {\n  // 將所選取到的座位塞入 selectedSeats 這個變數中\n  const selectedSeats = document.querySelectorAll('.row .seat.selected')\n\n  const selectedSeatCount = selectedSeats.length\n  count.innerText = selectedSeatCount // 將選到的座位數量塞到 count 裡面\n  total.innerText = selectedSeatCount * ticketPrice // 計算座位數量跟票價\n\n  // 將[...selectedSeats]解構的值塞到函式裡面運算\n  const seatsIndex = [...selectedSeats].map((seat) => [...seats].indexOf(seat))\n  localStorage.setItem('selectedSeats', JSON.stringify(seatsIndex))\n}\n\n// 依照選擇的電影變更價格\nmovieSelect.addEventListener('change', (e) => {\n  ticketPrice = +e.target.value\n\n  // 查看我們選擇的電影索引跟價格\n  // console.log(e.target.selectedIndex, e.target.value)\n\n  // 將電影索引跟價格的參數塞到 setMovieData 裡面\n  setMovieData(e.target.selectedIndex, e.target.value)\n  updateSelectCount() //執行\n})\n\n// 透過 localStorage 抓取電影索引值跟價格\nfunction setMovieData(movieIndex, moviePrice) {\n  localStorage.setItem('selectedMovieIndex', movieIndex)\n  localStorage.setItem('selectedMoviePrice', moviePrice)\n}\n\n// 紀錄資料，刷新後記錄仍然在\nfunction populateUI() {\n  // 因為剛才是轉成字串，這裡要轉成物件\n  const selectedSeats = JSON.parse(localStorage.getItem('selectedSeats'))\n  if (selectedSeats !== null && selectedSeats.length > 0) {\n    seats.forEach((seat, index) => {\n      if (selectedSeats.indexOf(index) > -1) {\n        seat.classList.add('selected')\n      }\n    })\n  }\n\n  const selectedMovieIndex = localStorage.getItem('selectedMovieIndex')\n  if (selectedMovieIndex !== null) {\n    movieSelect.selectedIndex = selectedMovieIndex\n  }\n}\npopulateUI()\n\n// 監聽容器內座位數值的變化\ncontainer.addEventListener('click', (e) => {\n  // contains 會返回一個 boolean 值\n  if (\n    e.target.classList.contains('seat') &&\n    !e.target.classList.contains('occupied')\n  ) {\n    e.target.classList.toggle('selected')\n    updateSelectCount()\n  }\n})\n\nupdateSelectCount()\n```\n\n---\n\n## 參考資料\n\n[JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842068#questions)\n","source":"_posts/2020/JavaScript - Movie-seat-booking.md","raw":"---\ntitle: JavaScript 實作 - 電影訂位\ndate: 2021/01/16\ntags:\n  - JavaScript\n  - 作品集\ncategories:\n  - JavaScript\n  - 作品集\n---\n\n## 功能\n\n1. 上方可以選擇要看的電影\n2. 選取位子同時計算電影價格\n\n完成圖\n![](https://i.imgur.com/AHsrrmk.png)\n\n[Github](https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission22)\n[DEMO](https://pktseng.github.io/Web-Side-Project/mission22/index.html)\n\n## <!-- more -->\n\n## HTML\n\nHTML 結構分成以下幾點:\n\n### 1. 下拉選單可以選擇電影\n\n```html\n<div class=\".movieContainer\">\n  <label>Pick a movie:</label>\n  <select id=\"movie\">\n    <option value=\"10\">Avengers: Endgame ($10)</option>\n    <option value=\"12\">Joker ($12)</option>\n    <option value=\"8\">Toy Story 4 ($8)</option>\n    <option value=\"9\">The Lion King ($9)</option>\n  </select>\n</div>\n```\n\n---\n\n### 2. 告示座位狀態圖\n\n```html\n<ul class=\"showcase\">\n  <li>\n    <div class=\"seat\"></div>\n    <small>N/A</small>\n  </li>\n  <li>\n    <div class=\"seat selected\"></div>\n    <small>Selected</small>\n  </li>\n  <li>\n    <div class=\"seat occupied\"></div>\n    <small>Occupied</small>\n  </li>\n</ul>\n```\n\n---\n\n### 3. 點選尚未選擇、已選擇的跟可以選擇的座位\n\n```html\n<div class=\"container\">\n  <div class=\"screen\"></div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n    <div class=\"seat\"></div>\n  </div>\n</div>\n```\n\n---\n\n### 4. 顯示選擇的座位數量跟電影票價\n\n```html\n<p class=\"text\">\n  You have selected\n  <span id=\"count\">0</span>\n  seats for a price of $\n  <span id=\"total\">0</span>\n</p>\n```\n\n---\n\n### 完成的結構圖如下:\n\n![](https://i.imgur.com/042hQLy.png)\n\n---\n\n## 樣式\n\n載入字體 `@import url('https://fonts.googleapis.com/css?family=Lato&display=swap');`\n\n依照 HTML 結構來增加樣式\n\n### 1. 全域設定\n\n移到視窗正中央\n\n```scss\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: #242333;\n  color: #fff;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  font-family: 'Lato', sans-serif;\n  margin: 0;\n}\n```\n\n![](https://i.imgur.com/vDuzvY2.png)\n\n---\n\n### 2. 給選單樣式\n\n```scss\n.movieContainer {\n  margin: 20px 0;\n  select {\n    background-color: #fff;\n    border: 0;\n    border-radius: 5px;\n    font-size: 14px;\n    margin-left: 10px;\n    padding: 5px 15px 5px 15px;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    appearance: none;\n  }\n}\n```\n\n![](https://i.imgur.com/DXj1pmX.png)\n\n---\n\n### 3. 座位樣式\n\n```scss\n.seat {\n  background-color: #444451;\n  height: 12px;\n  width: 15px;\n  margin: 3px;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n\n.container {\n  perspective: 1000px;\n  margin-bottom: 30px;\n  .row {\n    display: flex;\n  }\n}\n```\n\n![](https://i.imgur.com/AEuoijm.png)\n\n---\n\n### 4. 屏幕樣式\n\n```scss\n.screen {\n  background-color: #fff;\n  height: 70px;\n  width: 100%;\n  margin: 15px 0;\n  transform: rotateX(-45deg);\n  box-shadow: 0 3px 10px rgba(255, 255, 255, 0.7);\n}\n```\n\n![](https://i.imgur.com/n1si14x.png)\n\n---\n\n### 5. 選擇座位數量跟票價的樣式\n\n```scss\np.text {\n  margin: 5px 0;\n  span {\n    color: #6feaf6;\n  }\n}\n```\n\n![](https://i.imgur.com/U2033ZX.png)\n\n---\n\n### 6. 排列一下座位\n\n```scss\n.showCase {\n  background: rgba(0, 0, 0, 0.1);\n  padding: 5px 10px;\n  border-radius: 5px;\n  color: #777;\n  list-style-type: none;\n  display: flex;\n  justify-content: space-between;\n  &.seat:not(.occupied):hover {\n    cursor: default;\n    transform: scale(1);\n  }\n  li {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 10px;\n    small {\n      margin-left: 2px;\n    }\n  }\n}\n```\n\n![](https://i.imgur.com/lz2FabD.png)\n\n---\n\n### 7. 排列電影座位\n\n因為是 scss 寫法所以寫在 seats 裡面\n\n```scss\n.seat {\n  background-color: #444451;\n  height: 12px;\n  width: 15px;\n  margin: 3px;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  &.selected {\n    background-color: #6feaf6;\n  }\n  &.occupied {\n    background-color: #fff;\n  }\n  &:nth-of-type(2) {\n    margin-right: 18px;\n  }\n  &:nth-last-of-type(2) {\n    margin-left: 18px;\n  }\n  &:not(.occupied):hover {\n    cursor: pointer;\n    transform: scale(1.2);\n  }\n}\n```\n\n![](https://i.imgur.com/AGT0L4B.png)\n\n---\n\n以上切版就算完成了~~~\n\n## JavaScript\n\n接下來要進行 JavaScript 事件的撰寫\n\n### 1. 抓取 DOM 元素\n\n用選擇器抓取 dom 元素，在賦值到各個變數上，會使用 const 是因為此變數之後不能在更動。\n\n```javascript\nconst container = document.querySelector('.container')\nconst seats = document.querySelectorAll('.row .seat:not(.occupied)')\nconst count = document.querySelector('#count')\nconst total = document.querySelector('#total')\nconst movieSelect = document.querySelector('#movie')\n```\n\n### 2. 選擇座位時觸發的事件\n\n當點擊座位時會先判斷 class 是否有 seat 同時不包含 occupied 的，再用 contains 讓值變成布林值，如果回傳 true 就會用 toggle 增加 selected 屬性，這樣當我們選擇座位時就會更改樣式了。\n\n下面再放一個 `updateSelectCount` 函式，在我們更動座位時就會觸發。\n\n```javascript\n// 監聽容器內座位數值的變化\ncontainer.addEventListener('click', (e) => {\n  if (\n    e.target.classList.contains('seat') &&\n    !e.target.classList.contains('occupied')\n  ) {\n    e.target.classList.toggle('selected')\n    updateSelectCount()\n  }\n})\n// 執行\nupdateSelectCount()\n```\n\n### 3. 計算座位數量跟電影票價\n\n當我們選擇座位的時候同時計算座位數量跟電影價格，再將數量跟價格賦予到 DOM 元素裡面。\n利用 `querySelectorAll` 把 `.row .seat.selected` 選起來，再以陣列的方式傳回，\n用 `console.log(selectedSeats)` 會看到下圖\n\n![](https://i.imgur.com/B92hT1v.png)\n\n![](https://i.imgur.com/YPyzIup.png)\n\n有了陣列後就可以計算數量，用 `console.log(selectedSeatCount)` 可以看到選擇的數量，例如我選 4 個座位\n![](https://i.imgur.com/xgbbFI1.png)\n\n![](https://i.imgur.com/BVUtWeY.png)\n\n再把選擇座位的數量賦予到 `count` DOM 元素裡面，就是最下面會顯示的座位數量，再利用這數量去計算票價後，賦直到 `total` 裡面。\n![](https://i.imgur.com/MJr3DwM.png)\n\n- `ticketPrice` 會用 `+` 號的原因是要將字串轉成數字型式\n\n這段程式碼如下:\n\n```javascript\nlet ticketPrice = +movieSelect.value\n\n// 計算選擇的座位數量價格\nfunction updateSelectCount() {\n  // 將所選取到的座位塞入 selectedSeats 這個變數中\n  const selectedSeats = document.querySelectorAll('.row .seat.selected')\n\n  const selectedSeatCount = selectedSeats.length\n  count.innerText = selectedSeatCount // 將選到的座位數量塞到 count 裡面\n  total.innerText = selectedSeatCount * ticketPrice // 計算座位數量跟票價\n}\n```\n\n### 4. 選擇電影同時計算票價\n\n這函式是為了當我們在切換電影的時候，重新計算座位跟票價。\n\n在選擇電影的時候就會觸發，計算當下所選的電影價格，再將電影的索引跟選擇的價格放到 `setMovieData` callback function 裡面，同時更新座位數量跟票價。\n\n- `+e.target.value` 前面的 `+` 為了確保是數字型別。\n\n```javascript\n// 依照選擇的電影變更價格\nmovieSelect.addEventListener('change', (e) => {\n  ticketPrice = +e.target.value\n\n  // 查看我們選擇的電影索引跟價格\n  // console.log(e.target.selectedIndex, e.target.value)\n\n  setMovieData(e.target.selectedIndex, e.target.value)\n  // 將電影索引跟價格的參數塞到 setMovieData 裡面\n  updateSelectCount() //執行\n})\n```\n\n到目前為止，我們已經完成選擇座位的數量跟票價的計算。接下來要進入到 localStorage 裡面進行設定，因為目前以目前的成是馬刷新頁面，資料就會不見，所以要記錄到瀏覽器的資料庫裏面。\n\n### 5. 將資料紀錄到瀏覽器的數據庫裡面\n\n這麼做的原因是防止我們刷新頁面的時候剛才所選的資料全部都消失，這時候就會用到 localStorage、setItem、getItem、JSON.parse 等觀念。\n\n上段 `movieSelect` 函式是在監聽選擇電影價格跟位字的索引，當我們在選擇座位或是電影的同時就會觸發到 `setMovieData` 函式，而 `setMovieData` 函式帶入的那兩個值就是要記錄到瀏覽器資料庫裡面的參數。\n\n- #### localStorage\n  如果想把資料存在瀏覽器的資料庫裡裡面就會用到 localStorage，但要注意的是 localStorage 會只接受字串，所以要將資料轉成字串 (string) 的型式。\n\n課程中有使用到 ES6 解構語法，將所選擇的座位 `selectedSeats` 變成陣列，再利用 map 語法處理陣列中的每個元素，然後回傳出新的值。\n\n- map: (第一個是每個元素的值 ( 必填 )，第二個是當前元素的索引值 ( 選填 )，第三個是當前的陣列 ( 選填 ))\n- indexOf: 會判斷陣列中是否包含某個值，判斷的方式為「由左而右」，如果有包含就回傳這個值在陣列中的索引值\n\n這段函式的意思是當我選擇了座位 `selectedSeats` ，將這些選擇的座位化成陣列型式`[...selectedSeats] `，再把陣列內的座位拿去判斷 (indexOf) 索引值再回傳，如果找不到索引值就會顯示 -1。\n\n用 console 查看，當我選擇了第 1、第 2 跟第 7 個座位就會顯示索引值跟陣列。\n![](https://i.imgur.com/azBL9mU.png)\n\n而此段函式要放到 `updateSelectCount` 函式中，這樣再選取座位的時候就會把索引值傳存到 localStorage 裡面。\n\n```javascript\n// 將[...selectedSeats]解構的值塞到函式裡面運算，再把結果 return 出來\nconst seatsIndex = [...selectedSeats].map((seat) => [...seats].indexOf(seat))\n```\n\n- #### setItem\n  當我們將資料設定到瀏覽器數據庫裡面時，這個設定就是 setItem ，\n  寫法是這樣 `setItem('key', value)`\n  `key` 值就像是我們在填寫表單的時候會有姓名、年紀、電話這些的開頭\n  `value` 值就是依照表單中的開頭依序填寫的內容，如: ken、100 歲、0910xxxxx\n\n在 `setMovieData` 函式中我們將座位索引的 `key` 設定成 `selectedMovieIndex`， `value` 設定成 `movieIndex`，同理，價格也是這樣設定，目的是將資料存入 localStorage 裡面。\n\n```javascript\n// 透過 localStorage 抓取電影索引值跟價格\nfunction setMovieData(movieIndex, moviePrice) {\n  localStorage.setItem('selectedMovieIndex', movieIndex)\n  localStorage.setItem('selectedMoviePrice', moviePrice)\n}\n\nlocalStorage.setItem('selectedSeats', JSON.stringify(seatsIndex))\n```\n\n- #### getItem\n  用 setItem 設定好 key 跟 value 的值後，要將 value 值取出的話就要用 getItem 抓 key 值。\n\n```javascript\nlocalStorage.getItem('selectedSeats')\n```\n\n- #### JSON.parse\n  因為 localStorage 只能讀字串型式的資料，所以當我們在讀取或是抓取資料的時候必須是物件的型式，這時就會用到 `JSON.parse`。\n\n```javascript\nconst selectedSeats = JSON.parse(localStorage.getItem('selectedSeats'))\n```\n\n### 6. populateUI function\n\n在選好座位數量並透過 setIetm 存放到 localStorage 資料庫裡面，現在要使用這些資料，所以會先用 getItem 抓取，然後在轉成物件格式，轉物件是因為資料如果是字串會抓不到，轉完之後在賦值到 `selectedSeats` 變數裡面\n\n接下來就用`selectedSeats`變數來判斷是不是空值同時數量又必須大於 1，如果回傳的是 true ，再用 `forEach` 運算 `seats` 裡的每個參數，看看選擇的值是否都大於-1，因為陣列第一個值為 0，如果回傳 true ，再將 className 添加到 seat 裡面。\n\n執行 populateUI 函式時也會同時執行另一項函式，剛才已經把電影的索引值設定好並丟到 localStorage 裡面，當我們在選擇電影時會先判斷我們選擇的是否是空值，如果不是就將這項索引值賦予到 `movieSelect` 函式裡。\n\n- forEach: 會將陣列中每個元素套用到指定的函式裡進行運算\n\n```javascript\n// 紀錄資料，刷新後記錄仍然在\nfunction populateUI() {\n  // 因為剛才是轉成字串，這裡要轉成物件\n  const selectedSeats = JSON.parse(localStorage.getItem('selectedSeats'))\n  if (selectedSeats !== null && selectedSeats.length > 0) {\n    seats.forEach((seat, index) => {\n      if (selectedSeats.indexOf(index) > -1) {\n        seat.classList.add('selected')\n      }\n    })\n  }\n\n  const selectedMovieIndex = localStorage.getItem('selectedMovieIndex')\n  if (selectedMovieIndex !== null) {\n    movieSelect.selectedIndex = selectedMovieIndex\n  }\n}\n// 執行\npopulateUI()\n```\n\n---\n\n### 完整程式碼\n\n```javascript\nconst container = document.querySelector('.container')\nconst seats = document.querySelectorAll('.row .seat:not(.occupied)')\nconst count = document.querySelector('#count')\nconst total = document.querySelector('#total')\nconst movieSelect = document.querySelector('#movie')\nlet ticketPrice = +movieSelect.value\n\n// 計算選擇的座位數量價格\nfunction updateSelectCount() {\n  // 將所選取到的座位塞入 selectedSeats 這個變數中\n  const selectedSeats = document.querySelectorAll('.row .seat.selected')\n\n  const selectedSeatCount = selectedSeats.length\n  count.innerText = selectedSeatCount // 將選到的座位數量塞到 count 裡面\n  total.innerText = selectedSeatCount * ticketPrice // 計算座位數量跟票價\n\n  // 將[...selectedSeats]解構的值塞到函式裡面運算\n  const seatsIndex = [...selectedSeats].map((seat) => [...seats].indexOf(seat))\n  localStorage.setItem('selectedSeats', JSON.stringify(seatsIndex))\n}\n\n// 依照選擇的電影變更價格\nmovieSelect.addEventListener('change', (e) => {\n  ticketPrice = +e.target.value\n\n  // 查看我們選擇的電影索引跟價格\n  // console.log(e.target.selectedIndex, e.target.value)\n\n  // 將電影索引跟價格的參數塞到 setMovieData 裡面\n  setMovieData(e.target.selectedIndex, e.target.value)\n  updateSelectCount() //執行\n})\n\n// 透過 localStorage 抓取電影索引值跟價格\nfunction setMovieData(movieIndex, moviePrice) {\n  localStorage.setItem('selectedMovieIndex', movieIndex)\n  localStorage.setItem('selectedMoviePrice', moviePrice)\n}\n\n// 紀錄資料，刷新後記錄仍然在\nfunction populateUI() {\n  // 因為剛才是轉成字串，這裡要轉成物件\n  const selectedSeats = JSON.parse(localStorage.getItem('selectedSeats'))\n  if (selectedSeats !== null && selectedSeats.length > 0) {\n    seats.forEach((seat, index) => {\n      if (selectedSeats.indexOf(index) > -1) {\n        seat.classList.add('selected')\n      }\n    })\n  }\n\n  const selectedMovieIndex = localStorage.getItem('selectedMovieIndex')\n  if (selectedMovieIndex !== null) {\n    movieSelect.selectedIndex = selectedMovieIndex\n  }\n}\npopulateUI()\n\n// 監聽容器內座位數值的變化\ncontainer.addEventListener('click', (e) => {\n  // contains 會返回一個 boolean 值\n  if (\n    e.target.classList.contains('seat') &&\n    !e.target.classList.contains('occupied')\n  ) {\n    e.target.classList.toggle('selected')\n    updateSelectCount()\n  }\n})\n\nupdateSelectCount()\n```\n\n---\n\n## 參考資料\n\n[JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach)\n[20 Web Projects With Vanilla JavaScript](https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842068#questions)\n","slug":"JavaScript - Movie-seat-booking","published":1,"updated":"2021-03-26T16:13:10.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqi9lra0045g0tr50feho7x","content":"<html><head></head><body><h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ol>\n<li>上方可以選擇要看的電影</li>\n<li>選取位子同時計算電影價格</li>\n</ol>\n<p>完成圖<br><img src=\"https://i.imgur.com/AHsrrmk.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission22\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission22/index.html\">DEMO</a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>HTML 結構分成以下幾點:</p>\n<h3 id=\"1-下拉選單可以選擇電影\"><a href=\"#1-下拉選單可以選擇電影\" class=\"headerlink\" title=\"1. 下拉選單可以選擇電影\"></a>1. 下拉選單可以選擇電影</h3><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\".movieContainer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>Pick a movie:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"movie\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"10\"</span>&gt;</span>Avengers: Endgame ($10)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"12\"</span>&gt;</span>Joker ($12)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"8\"</span>&gt;</span>Toy Story 4 ($8)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"9\"</span>&gt;</span>The Lion King ($9)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"2-告示座位狀態圖\"><a href=\"#2-告示座位狀態圖\" class=\"headerlink\" title=\"2. 告示座位狀態圖\"></a>2. 告示座位狀態圖</h3><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"showcase\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span>&gt;</span>N/A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat selected\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span>&gt;</span>Selected<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat occupied\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">small</span>&gt;</span>Occupied<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"3-點選尚未選擇、已選擇的跟可以選擇的座位\"><a href=\"#3-點選尚未選擇、已選擇的跟可以選擇的座位\" class=\"headerlink\" title=\"3. 點選尚未選擇、已選擇的跟可以選擇的座位\"></a>3. 點選尚未選擇、已選擇的跟可以選擇的座位</h3><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"screen\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"seat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"4-顯示選擇的座位數量跟電影票價\"><a href=\"#4-顯示選擇的座位數量跟電影票價\" class=\"headerlink\" title=\"4. 顯示選擇的座位數量跟電影票價\"></a>4. 顯示選擇的座位數量跟電影票價</h3><figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">  You have selected</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"count\"</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"line\">  seats for a price of $</span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"total\"</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"完成的結構圖如下\"><a href=\"#完成的結構圖如下\" class=\"headerlink\" title=\"完成的結構圖如下:\"></a>完成的結構圖如下:</h3><p><img src=\"https://i.imgur.com/042hQLy.png\"></p>\n<hr>\n<h2 id=\"樣式\"><a href=\"#樣式\" class=\"headerlink\" title=\"樣式\"></a>樣式</h2><p>載入字體 <code>@import url('https://fonts.googleapis.com/css?family=Lato&amp;display=swap');</code></p>\n<p>依照 HTML 結構來增加樣式</p>\n<h3 id=\"1-全域設定\"><a href=\"#1-全域設定\" class=\"headerlink\" title=\"1. 全域設定\"></a>1. 全域設定</h3><p>移到視窗正中央</p>\n<figure class=\"highlight scss hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#242333</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">'Lato'</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/vDuzvY2.png\"></p>\n<hr>\n<h3 id=\"2-給選單樣式\"><a href=\"#2-給選單樣式\" class=\"headerlink\" title=\"2. 給選單樣式\"></a>2. 給選單樣式</h3><figure class=\"highlight scss hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.movieContainer</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-selector-tag\">select</span> {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">15px</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">15px</span>;</span><br><span class=\"line\">    -moz-appearance: none;</span><br><span class=\"line\">    -webkit-appearance: none;</span><br><span class=\"line\">    appearance: none;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/DXj1pmX.png\"></p>\n<hr>\n<h3 id=\"3-座位樣式\"><a href=\"#3-座位樣式\" class=\"headerlink\" title=\"3. 座位樣式\"></a>3. 座位樣式</h3><figure class=\"highlight scss hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.seat</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#444451</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">12px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">15px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">3px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-top-left-radius</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-top-right-radius</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">perspective</span>: <span class=\"hljs-number\">1000px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"line\">  <span class=\"hljs-selector-class\">.row</span> {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/AEuoijm.png\"></p>\n<hr>\n<h3 id=\"4-屏幕樣式\"><a href=\"#4-屏幕樣式\" class=\"headerlink\" title=\"4. 屏幕樣式\"></a>4. 屏幕樣式</h3><figure class=\"highlight scss hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.screen</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">70px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">15px</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">transform</span>: rotateX(-<span class=\"hljs-number\">45deg</span>);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">3px</span> <span class=\"hljs-number\">10px</span> rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/n1si14x.png\"></p>\n<hr>\n<h3 id=\"5-選擇座位數量跟票價的樣式\"><a href=\"#5-選擇座位數量跟票價的樣式\" class=\"headerlink\" title=\"5. 選擇座位數量跟票價的樣式\"></a>5. 選擇座位數量跟票價的樣式</h3><figure class=\"highlight scss hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.text</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-selector-tag\">span</span> {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#6feaf6</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/U2033ZX.png\"></p>\n<hr>\n<h3 id=\"6-排列一下座位\"><a href=\"#6-排列一下座位\" class=\"headerlink\" title=\"6. 排列一下座位\"></a>6. 排列一下座位</h3><figure class=\"highlight scss hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.showCase</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>: rgba(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#777</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">list-style-type</span>: none;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  &amp;<span class=\"hljs-selector-class\">.seat</span><span class=\"hljs-selector-pseudo\">:not</span>(<span class=\"hljs-selector-class\">.occupied</span>)<span class=\"hljs-selector-pseudo\">:hover</span> {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">cursor</span>: default;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">transform</span>: scale(<span class=\"hljs-number\">1</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"hljs-selector-tag\">li</span> {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">    <span class=\"hljs-selector-tag\">small</span> {</span><br><span class=\"line\">      <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">2px</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/lz2FabD.png\"></p>\n<hr>\n<h3 id=\"7-排列電影座位\"><a href=\"#7-排列電影座位\" class=\"headerlink\" title=\"7. 排列電影座位\"></a>7. 排列電影座位</h3><p>因為是 scss 寫法所以寫在 seats 裡面</p>\n<figure class=\"highlight scss hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.seat</span> {</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#444451</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">12px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">15px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">3px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-top-left-radius</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">border-top-right-radius</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">  &amp;<span class=\"hljs-selector-class\">.selected</span> {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#6feaf6</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  &amp;<span class=\"hljs-selector-class\">.occupied</span> {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  &amp;<span class=\"hljs-selector-pseudo\">:nth-of-type</span>(2) {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">18px</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  &amp;<span class=\"hljs-selector-pseudo\">:nth-last-of-type</span>(2) {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">18px</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  &amp;<span class=\"hljs-selector-pseudo\">:not</span>(<span class=\"hljs-selector-class\">.occupied</span>)<span class=\"hljs-selector-pseudo\">:hover</span> {</span><br><span class=\"line\">    <span class=\"hljs-attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">transform</span>: scale(<span class=\"hljs-number\">1.2</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/AGT0L4B.png\"></p>\n<hr>\n<p>以上切版就算完成了<del>~</del></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>接下來要進行 JavaScript 事件的撰寫</p>\n<h3 id=\"1-抓取-DOM-元素\"><a href=\"#1-抓取-DOM-元素\" class=\"headerlink\" title=\"1. 抓取 DOM 元素\"></a>1. 抓取 DOM 元素</h3><p>用選擇器抓取 dom 元素，在賦值到各個變數上，會使用 const 是因為此變數之後不能在更動。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.container'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> seats = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'.row .seat:not(.occupied)'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#count'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> total = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#total'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> movieSelect = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#movie'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-選擇座位時觸發的事件\"><a href=\"#2-選擇座位時觸發的事件\" class=\"headerlink\" title=\"2. 選擇座位時觸發的事件\"></a>2. 選擇座位時觸發的事件</h3><p>當點擊座位時會先判斷 class 是否有 seat 同時不包含 occupied 的，再用 contains 讓值變成布林值，如果回傳 true 就會用 toggle 增加 selected 屬性，這樣當我們選擇座位時就會更改樣式了。</p>\n<p>下面再放一個 <code>updateSelectCount</code> 函式，在我們更動座位時就會觸發。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 監聽容器內座位數值的變化</span></span><br><span class=\"line\">container.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (</span><br><span class=\"line\">    e.target.classList.contains(<span class=\"hljs-string\">'seat'</span>) &amp;&amp;</span><br><span class=\"line\">    !e.target.classList.contains(<span class=\"hljs-string\">'occupied'</span>)</span><br><span class=\"line\">  ) {</span><br><span class=\"line\">    e.target.classList.toggle(<span class=\"hljs-string\">'selected'</span>)</span><br><span class=\"line\">    updateSelectCount()</span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-comment\">// 執行</span></span><br><span class=\"line\">updateSelectCount()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-計算座位數量跟電影票價\"><a href=\"#3-計算座位數量跟電影票價\" class=\"headerlink\" title=\"3. 計算座位數量跟電影票價\"></a>3. 計算座位數量跟電影票價</h3><p>當我們選擇座位的時候同時計算座位數量跟電影價格，再將數量跟價格賦予到 DOM 元素裡面。<br>利用 <code>querySelectorAll</code> 把 <code>.row .seat.selected</code> 選起來，再以陣列的方式傳回，<br>用 <code>console.log(selectedSeats)</code> 會看到下圖</p>\n<p><img src=\"https://i.imgur.com/B92hT1v.png\"></p>\n<p><img src=\"https://i.imgur.com/YPyzIup.png\"></p>\n<p>有了陣列後就可以計算數量，用 <code>console.log(selectedSeatCount)</code> 可以看到選擇的數量，例如我選 4 個座位<br><img src=\"https://i.imgur.com/xgbbFI1.png\"></p>\n<p><img src=\"https://i.imgur.com/BVUtWeY.png\"></p>\n<p>再把選擇座位的數量賦予到 <code>count</code> DOM 元素裡面，就是最下面會顯示的座位數量，再利用這數量去計算票價後，賦直到 <code>total</code> 裡面。<br><img src=\"https://i.imgur.com/MJr3DwM.png\"></p>\n<ul>\n<li><code>ticketPrice</code> 會用 <code>+</code> 號的原因是要將字串轉成數字型式</li>\n</ul>\n<p>這段程式碼如下:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> ticketPrice = +movieSelect.value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 計算選擇的座位數量價格</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateSelectCount</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 將所選取到的座位塞入 selectedSeats 這個變數中</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> selectedSeats = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'.row .seat.selected'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> selectedSeatCount = selectedSeats.length</span><br><span class=\"line\">  count.innerText = selectedSeatCount <span class=\"hljs-comment\">// 將選到的座位數量塞到 count 裡面</span></span><br><span class=\"line\">  total.innerText = selectedSeatCount * ticketPrice <span class=\"hljs-comment\">// 計算座位數量跟票價</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-選擇電影同時計算票價\"><a href=\"#4-選擇電影同時計算票價\" class=\"headerlink\" title=\"4. 選擇電影同時計算票價\"></a>4. 選擇電影同時計算票價</h3><p>這函式是為了當我們在切換電影的時候，重新計算座位跟票價。</p>\n<p>在選擇電影的時候就會觸發，計算當下所選的電影價格，再將電影的索引跟選擇的價格放到 <code>setMovieData</code> callback function 裡面，同時更新座位數量跟票價。</p>\n<ul>\n<li><code>+e.target.value</code> 前面的 <code>+</code> 為了確保是數字型別。</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 依照選擇的電影變更價格</span></span><br><span class=\"line\">movieSelect.addEventListener(<span class=\"hljs-string\">'change'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {</span><br><span class=\"line\">  ticketPrice = +e.target.value</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 查看我們選擇的電影索引跟價格</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(e.target.selectedIndex, e.target.value)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setMovieData(e.target.selectedIndex, e.target.value)</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 將電影索引跟價格的參數塞到 setMovieData 裡面</span></span><br><span class=\"line\">  updateSelectCount() <span class=\"hljs-comment\">//執行</span></span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>到目前為止，我們已經完成選擇座位的數量跟票價的計算。接下來要進入到 localStorage 裡面進行設定，因為目前以目前的成是馬刷新頁面，資料就會不見，所以要記錄到瀏覽器的資料庫裏面。</p>\n<h3 id=\"5-將資料紀錄到瀏覽器的數據庫裡面\"><a href=\"#5-將資料紀錄到瀏覽器的數據庫裡面\" class=\"headerlink\" title=\"5. 將資料紀錄到瀏覽器的數據庫裡面\"></a>5. 將資料紀錄到瀏覽器的數據庫裡面</h3><p>這麼做的原因是防止我們刷新頁面的時候剛才所選的資料全部都消失，這時候就會用到 localStorage、setItem、getItem、JSON.parse 等觀念。</p>\n<p>上段 <code>movieSelect</code> 函式是在監聽選擇電影價格跟位字的索引，當我們在選擇座位或是電影的同時就會觸發到 <code>setMovieData</code> 函式，而 <code>setMovieData</code> 函式帶入的那兩個值就是要記錄到瀏覽器資料庫裡面的參數。</p>\n<ul>\n<li><h4 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h4>如果想把資料存在瀏覽器的資料庫裡裡面就會用到 localStorage，但要注意的是 localStorage 會只接受字串，所以要將資料轉成字串 (string) 的型式。</li>\n</ul>\n<p>課程中有使用到 ES6 解構語法，將所選擇的座位 <code>selectedSeats</code> 變成陣列，再利用 map 語法處理陣列中的每個元素，然後回傳出新的值。</p>\n<ul>\n<li>map: (第一個是每個元素的值 ( 必填 )，第二個是當前元素的索引值 ( 選填 )，第三個是當前的陣列 ( 選填 ))</li>\n<li>indexOf: 會判斷陣列中是否包含某個值，判斷的方式為「由左而右」，如果有包含就回傳這個值在陣列中的索引值</li>\n</ul>\n<p>這段函式的意思是當我選擇了座位 <code>selectedSeats</code> ，將這些選擇的座位化成陣列型式<code>[...selectedSeats] </code>，再把陣列內的座位拿去判斷 (indexOf) 索引值再回傳，如果找不到索引值就會顯示 -1。</p>\n<p>用 console 查看，當我選擇了第 1、第 2 跟第 7 個座位就會顯示索引值跟陣列。<br><img src=\"https://i.imgur.com/azBL9mU.png\"></p>\n<p>而此段函式要放到 <code>updateSelectCount</code> 函式中，這樣再選取座位的時候就會把索引值傳存到 localStorage 裡面。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 將[...selectedSeats]解構的值塞到函式裡面運算，再把結果 return 出來</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> seatsIndex = [...selectedSeats].map(<span class=\"hljs-function\">(<span class=\"hljs-params\">seat</span>) =&gt;</span> [...seats].indexOf(seat))</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><h4 id=\"setItem\"><a href=\"#setItem\" class=\"headerlink\" title=\"setItem\"></a>setItem</h4>當我們將資料設定到瀏覽器數據庫裡面時，這個設定就是 setItem ，<br>寫法是這樣 <code>setItem('key', value)</code><br><code>key</code> 值就像是我們在填寫表單的時候會有姓名、年紀、電話這些的開頭<br><code>value</code> 值就是依照表單中的開頭依序填寫的內容，如: ken、100 歲、0910xxxxx</li>\n</ul>\n<p>在 <code>setMovieData</code> 函式中我們將座位索引的 <code>key</code> 設定成 <code>selectedMovieIndex</code>， <code>value</code> 設定成 <code>movieIndex</code>，同理，價格也是這樣設定，目的是將資料存入 localStorage 裡面。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 透過 localStorage 抓取電影索引值跟價格</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setMovieData</span>(<span class=\"hljs-params\">movieIndex, moviePrice</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'selectedMovieIndex'</span>, movieIndex)</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'selectedMoviePrice'</span>, moviePrice)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'selectedSeats'</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(seatsIndex))</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><h4 id=\"getItem\"><a href=\"#getItem\" class=\"headerlink\" title=\"getItem\"></a>getItem</h4>用 setItem 設定好 key 跟 value 的值後，要將 value 值取出的話就要用 getItem 抓 key 值。</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'selectedSeats'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><h4 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse\"></a>JSON.parse</h4>因為 localStorage 只能讀字串型式的資料，所以當我們在讀取或是抓取資料的時候必須是物件的型式，這時就會用到 <code>JSON.parse</code>。</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> selectedSeats = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'selectedSeats'</span>))</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"6-populateUI-function\"><a href=\"#6-populateUI-function\" class=\"headerlink\" title=\"6. populateUI function\"></a>6. populateUI function</h3><p>在選好座位數量並透過 setIetm 存放到 localStorage 資料庫裡面，現在要使用這些資料，所以會先用 getItem 抓取，然後在轉成物件格式，轉物件是因為資料如果是字串會抓不到，轉完之後在賦值到 <code>selectedSeats</code> 變數裡面</p>\n<p>接下來就用<code>selectedSeats</code>變數來判斷是不是空值同時數量又必須大於 1，如果回傳的是 true ，再用 <code>forEach</code> 運算 <code>seats</code> 裡的每個參數，看看選擇的值是否都大於-1，因為陣列第一個值為 0，如果回傳 true ，再將 className 添加到 seat 裡面。</p>\n<p>執行 populateUI 函式時也會同時執行另一項函式，剛才已經把電影的索引值設定好並丟到 localStorage 裡面，當我們在選擇電影時會先判斷我們選擇的是否是空值，如果不是就將這項索引值賦予到 <code>movieSelect</code> 函式裡。</p>\n<ul>\n<li>forEach: 會將陣列中每個元素套用到指定的函式裡進行運算</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 紀錄資料，刷新後記錄仍然在</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">populateUI</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 因為剛才是轉成字串，這裡要轉成物件</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> selectedSeats = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'selectedSeats'</span>))</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (selectedSeats !== <span class=\"hljs-literal\">null</span> &amp;&amp; selectedSeats.length &gt; <span class=\"hljs-number\">0</span>) {</span><br><span class=\"line\">    seats.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">seat, index</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (selectedSeats.indexOf(index) &gt; <span class=\"hljs-number\">-1</span>) {</span><br><span class=\"line\">        seat.classList.add(<span class=\"hljs-string\">'selected'</span>)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    })</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> selectedMovieIndex = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'selectedMovieIndex'</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (selectedMovieIndex !== <span class=\"hljs-literal\">null</span>) {</span><br><span class=\"line\">    movieSelect.selectedIndex = selectedMovieIndex</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-comment\">// 執行</span></span><br><span class=\"line\">populateUI()</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"完整程式碼\"><a href=\"#完整程式碼\" class=\"headerlink\" title=\"完整程式碼\"></a>完整程式碼</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.container'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> seats = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'.row .seat:not(.occupied)'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#count'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> total = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#total'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> movieSelect = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#movie'</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ticketPrice = +movieSelect.value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 計算選擇的座位數量價格</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateSelectCount</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 將所選取到的座位塞入 selectedSeats 這個變數中</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> selectedSeats = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'.row .seat.selected'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> selectedSeatCount = selectedSeats.length</span><br><span class=\"line\">  count.innerText = selectedSeatCount <span class=\"hljs-comment\">// 將選到的座位數量塞到 count 裡面</span></span><br><span class=\"line\">  total.innerText = selectedSeatCount * ticketPrice <span class=\"hljs-comment\">// 計算座位數量跟票價</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 將[...selectedSeats]解構的值塞到函式裡面運算</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> seatsIndex = [...selectedSeats].map(<span class=\"hljs-function\">(<span class=\"hljs-params\">seat</span>) =&gt;</span> [...seats].indexOf(seat))</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'selectedSeats'</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(seatsIndex))</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 依照選擇的電影變更價格</span></span><br><span class=\"line\">movieSelect.addEventListener(<span class=\"hljs-string\">'change'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {</span><br><span class=\"line\">  ticketPrice = +e.target.value</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 查看我們選擇的電影索引跟價格</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// console.log(e.target.selectedIndex, e.target.value)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 將電影索引跟價格的參數塞到 setMovieData 裡面</span></span><br><span class=\"line\">  setMovieData(e.target.selectedIndex, e.target.value)</span><br><span class=\"line\">  updateSelectCount() <span class=\"hljs-comment\">//執行</span></span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 透過 localStorage 抓取電影索引值跟價格</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setMovieData</span>(<span class=\"hljs-params\">movieIndex, moviePrice</span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'selectedMovieIndex'</span>, movieIndex)</span><br><span class=\"line\">  <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">'selectedMoviePrice'</span>, moviePrice)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 紀錄資料，刷新後記錄仍然在</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">populateUI</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 因為剛才是轉成字串，這裡要轉成物件</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> selectedSeats = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'selectedSeats'</span>))</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (selectedSeats !== <span class=\"hljs-literal\">null</span> &amp;&amp; selectedSeats.length &gt; <span class=\"hljs-number\">0</span>) {</span><br><span class=\"line\">    seats.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">seat, index</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (selectedSeats.indexOf(index) &gt; <span class=\"hljs-number\">-1</span>) {</span><br><span class=\"line\">        seat.classList.add(<span class=\"hljs-string\">'selected'</span>)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    })</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> selectedMovieIndex = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">'selectedMovieIndex'</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (selectedMovieIndex !== <span class=\"hljs-literal\">null</span>) {</span><br><span class=\"line\">    movieSelect.selectedIndex = selectedMovieIndex</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\">populateUI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 監聽容器內座位數值的變化</span></span><br><span class=\"line\">container.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"hljs-comment\">// contains 會返回一個 boolean 值</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (</span><br><span class=\"line\">    e.target.classList.contains(<span class=\"hljs-string\">'seat'</span>) &amp;&amp;</span><br><span class=\"line\">    !e.target.classList.contains(<span class=\"hljs-string\">'occupied'</span>)</span><br><span class=\"line\">  ) {</span><br><span class=\"line\">    e.target.classList.toggle(<span class=\"hljs-string\">'selected'</span>)</span><br><span class=\"line\">    updateSelectCount()</span><br><span class=\"line\">  }</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">updateSelectCount()</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach\">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842068#questions\">20 Web Projects With Vanilla JavaScript</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScript","path":"categories/JavaScript/"},{"name":"作品集","path":"categories/JavaScript/作品集/"}],"_tags":[{"name":"作品集","path":"tags/作品集/"},{"name":"JavaScript","path":"tags/JavaScript/"}],"excerpt":"<html><head></head><body><h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ol>\n<li>上方可以選擇要看的電影</li>\n<li>選取位子同時計算電影價格</li>\n</ol>\n<p>完成圖<br><img src=\"https://i.imgur.com/AHsrrmk.png\"></p>\n<p><a href=\"https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission22\">Github</a><br><a href=\"https://pktseng.github.io/Web-Side-Project/mission22/index.html\">DEMO</a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2></body></html>","more":"</h2><h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>HTML 結構分成以下幾點:</p>\n<h3 id=\"1-下拉選單可以選擇電影\"><a href=\"#1-下拉選單可以選擇電影\" class=\"headerlink\" title=\"1. 下拉選單可以選擇電影\"></a>1. 下拉選單可以選擇電影</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;.movieContainer&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Pick a movie:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;movie&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span>&gt;</span>Avengers: Endgame ($10)<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;12&quot;</span>&gt;</span>Joker ($12)<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;8&quot;</span>&gt;</span>Toy Story 4 ($8)<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;9&quot;</span>&gt;</span>The Lion King ($9)<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-告示座位狀態圖\"><a href=\"#2-告示座位狀態圖\" class=\"headerlink\" title=\"2. 告示座位狀態圖\"></a>2. 告示座位狀態圖</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;showcase&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>N/A<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat selected&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>Selected<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat occupied&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>Occupied<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-點選尚未選擇、已選擇的跟可以選擇的座位\"><a href=\"#3-點選尚未選擇、已選擇的跟可以選擇的座位\" class=\"headerlink\" title=\"3. 點選尚未選擇、已選擇的跟可以選擇的座位\"></a>3. 點選尚未選擇、已選擇的跟可以選擇的座位</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;screen&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;seat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-顯示選擇的座位數量跟電影票價\"><a href=\"#4-顯示選擇的座位數量跟電影票價\" class=\"headerlink\" title=\"4. 顯示選擇的座位數量跟電影票價\"></a>4. 顯示選擇的座位數量跟電影票價</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">  You have selected</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;count&quot;</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  seats for a price of $</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;total&quot;</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"完成的結構圖如下\"><a href=\"#完成的結構圖如下\" class=\"headerlink\" title=\"完成的結構圖如下:\"></a>完成的結構圖如下:</h3><p><img src=\"https://i.imgur.com/042hQLy.png\"></p>\n<hr>\n<h2 id=\"樣式\"><a href=\"#樣式\" class=\"headerlink\" title=\"樣式\"></a>樣式</h2><p>載入字體 <code>@import url(&#39;https://fonts.googleapis.com/css?family=Lato&amp;display=swap&#39;);</code></p>\n<p>依照 HTML 結構來增加樣式</p>\n<h3 id=\"1-全域設定\"><a href=\"#1-全域設定\" class=\"headerlink\" title=\"1. 全域設定\"></a>1. 全域設定</h3><p>移到視窗正中央</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#242333</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lato&#x27;</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/vDuzvY2.png\"></p>\n<hr>\n<h3 id=\"2-給選單樣式\"><a href=\"#2-給選單樣式\" class=\"headerlink\" title=\"2. 給選單樣式\"></a>2. 給選單樣式</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.movieContainer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">15px</span> <span class=\"number\">5px</span> <span class=\"number\">15px</span>;</span><br><span class=\"line\">    -moz-appearance: none;</span><br><span class=\"line\">    -webkit-appearance: none;</span><br><span class=\"line\">    appearance: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/DXj1pmX.png\"></p>\n<hr>\n<h3 id=\"3-座位樣式\"><a href=\"#3-座位樣式\" class=\"headerlink\" title=\"3. 座位樣式\"></a>3. 座位樣式</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.seat</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#444451</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top-right-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">perspective</span>: <span class=\"number\">1000px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.row</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/AEuoijm.png\"></p>\n<hr>\n<h3 id=\"4-屏幕樣式\"><a href=\"#4-屏幕樣式\" class=\"headerlink\" title=\"4. 屏幕樣式\"></a>4. 屏幕樣式</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.screen</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">70px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">15px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: rotateX(-<span class=\"number\">45deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">10px</span> rgba(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0.7</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/n1si14x.png\"></p>\n<hr>\n<h3 id=\"5-選擇座位數量跟票價的樣式\"><a href=\"#5-選擇座位數量跟票價的樣式\" class=\"headerlink\" title=\"5. 選擇座位數量跟票價的樣式\"></a>5. 選擇座位數量跟票價的樣式</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#6feaf6</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/U2033ZX.png\"></p>\n<hr>\n<h3 id=\"6-排列一下座位\"><a href=\"#6-排列一下座位\" class=\"headerlink\" title=\"6. 排列一下座位\"></a>6. 排列一下座位</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.showCase</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</span><br><span class=\"line\">  <span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.seat</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-class\">.occupied</span>)<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: default;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: scale(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">small</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-left</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/lz2FabD.png\"></p>\n<hr>\n<h3 id=\"7-排列電影座位\"><a href=\"#7-排列電影座位\" class=\"headerlink\" title=\"7. 排列電影座位\"></a>7. 排列電影座位</h3><p>因為是 scss 寫法所以寫在 seats 裡面</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.seat</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#444451</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top-right-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.selected</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#6feaf6</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.occupied</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:nth-of-type</span>(2) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:nth-last-of-type</span>(2) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:not</span>(<span class=\"selector-class\">.occupied</span>)<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: scale(<span class=\"number\">1.2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/AGT0L4B.png\"></p>\n<hr>\n<p>以上切版就算完成了<del>~</del></p>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p>接下來要進行 JavaScript 事件的撰寫</p>\n<h3 id=\"1-抓取-DOM-元素\"><a href=\"#1-抓取-DOM-元素\" class=\"headerlink\" title=\"1. 抓取 DOM 元素\"></a>1. 抓取 DOM 元素</h3><p>用選擇器抓取 dom 元素，在賦值到各個變數上，會使用 const 是因為此變數之後不能在更動。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.container&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> seats = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.row .seat:not(.occupied)&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#count&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> total = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#total&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> movieSelect = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#movie&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-選擇座位時觸發的事件\"><a href=\"#2-選擇座位時觸發的事件\" class=\"headerlink\" title=\"2. 選擇座位時觸發的事件\"></a>2. 選擇座位時觸發的事件</h3><p>當點擊座位時會先判斷 class 是否有 seat 同時不包含 occupied 的，再用 contains 讓值變成布林值，如果回傳 true 就會用 toggle 增加 selected 屬性，這樣當我們選擇座位時就會更改樣式了。</p>\n<p>下面再放一個 <code>updateSelectCount</code> 函式，在我們更動座位時就會觸發。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 監聽容器內座位數值的變化</span></span><br><span class=\"line\">container.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    e.target.classList.contains(<span class=\"string\">&#x27;seat&#x27;</span>) &amp;&amp;</span><br><span class=\"line\">    !e.target.classList.contains(<span class=\"string\">&#x27;occupied&#x27;</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    e.target.classList.toggle(<span class=\"string\">&#x27;selected&#x27;</span>)</span><br><span class=\"line\">    updateSelectCount()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 執行</span></span><br><span class=\"line\">updateSelectCount()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-計算座位數量跟電影票價\"><a href=\"#3-計算座位數量跟電影票價\" class=\"headerlink\" title=\"3. 計算座位數量跟電影票價\"></a>3. 計算座位數量跟電影票價</h3><p>當我們選擇座位的時候同時計算座位數量跟電影價格，再將數量跟價格賦予到 DOM 元素裡面。<br>利用 <code>querySelectorAll</code> 把 <code>.row .seat.selected</code> 選起來，再以陣列的方式傳回，<br>用 <code>console.log(selectedSeats)</code> 會看到下圖</p>\n<p><img src=\"https://i.imgur.com/B92hT1v.png\"></p>\n<p><img src=\"https://i.imgur.com/YPyzIup.png\"></p>\n<p>有了陣列後就可以計算數量，用 <code>console.log(selectedSeatCount)</code> 可以看到選擇的數量，例如我選 4 個座位<br><img src=\"https://i.imgur.com/xgbbFI1.png\"></p>\n<p><img src=\"https://i.imgur.com/BVUtWeY.png\"></p>\n<p>再把選擇座位的數量賦予到 <code>count</code> DOM 元素裡面，就是最下面會顯示的座位數量，再利用這數量去計算票價後，賦直到 <code>total</code> 裡面。<br><img src=\"https://i.imgur.com/MJr3DwM.png\"></p>\n<ul>\n<li><code>ticketPrice</code> 會用 <code>+</code> 號的原因是要將字串轉成數字型式</li>\n</ul>\n<p>這段程式碼如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ticketPrice = +movieSelect.value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 計算選擇的座位數量價格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateSelectCount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 將所選取到的座位塞入 selectedSeats 這個變數中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedSeats = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.row .seat.selected&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedSeatCount = selectedSeats.length</span><br><span class=\"line\">  count.innerText = selectedSeatCount <span class=\"comment\">// 將選到的座位數量塞到 count 裡面</span></span><br><span class=\"line\">  total.innerText = selectedSeatCount * ticketPrice <span class=\"comment\">// 計算座位數量跟票價</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-選擇電影同時計算票價\"><a href=\"#4-選擇電影同時計算票價\" class=\"headerlink\" title=\"4. 選擇電影同時計算票價\"></a>4. 選擇電影同時計算票價</h3><p>這函式是為了當我們在切換電影的時候，重新計算座位跟票價。</p>\n<p>在選擇電影的時候就會觸發，計算當下所選的電影價格，再將電影的索引跟選擇的價格放到 <code>setMovieData</code> callback function 裡面，同時更新座位數量跟票價。</p>\n<ul>\n<li><code>+e.target.value</code> 前面的 <code>+</code> 為了確保是數字型別。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依照選擇的電影變更價格</span></span><br><span class=\"line\">movieSelect.addEventListener(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  ticketPrice = +e.target.value</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 查看我們選擇的電影索引跟價格</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(e.target.selectedIndex, e.target.value)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setMovieData(e.target.selectedIndex, e.target.value)</span><br><span class=\"line\">  <span class=\"comment\">// 將電影索引跟價格的參數塞到 setMovieData 裡面</span></span><br><span class=\"line\">  updateSelectCount() <span class=\"comment\">//執行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>到目前為止，我們已經完成選擇座位的數量跟票價的計算。接下來要進入到 localStorage 裡面進行設定，因為目前以目前的成是馬刷新頁面，資料就會不見，所以要記錄到瀏覽器的資料庫裏面。</p>\n<h3 id=\"5-將資料紀錄到瀏覽器的數據庫裡面\"><a href=\"#5-將資料紀錄到瀏覽器的數據庫裡面\" class=\"headerlink\" title=\"5. 將資料紀錄到瀏覽器的數據庫裡面\"></a>5. 將資料紀錄到瀏覽器的數據庫裡面</h3><p>這麼做的原因是防止我們刷新頁面的時候剛才所選的資料全部都消失，這時候就會用到 localStorage、setItem、getItem、JSON.parse 等觀念。</p>\n<p>上段 <code>movieSelect</code> 函式是在監聽選擇電影價格跟位字的索引，當我們在選擇座位或是電影的同時就會觸發到 <code>setMovieData</code> 函式，而 <code>setMovieData</code> 函式帶入的那兩個值就是要記錄到瀏覽器資料庫裡面的參數。</p>\n<ul>\n<li><h4 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h4>如果想把資料存在瀏覽器的資料庫裡裡面就會用到 localStorage，但要注意的是 localStorage 會只接受字串，所以要將資料轉成字串 (string) 的型式。</li>\n</ul>\n<p>課程中有使用到 ES6 解構語法，將所選擇的座位 <code>selectedSeats</code> 變成陣列，再利用 map 語法處理陣列中的每個元素，然後回傳出新的值。</p>\n<ul>\n<li>map: (第一個是每個元素的值 ( 必填 )，第二個是當前元素的索引值 ( 選填 )，第三個是當前的陣列 ( 選填 ))</li>\n<li>indexOf: 會判斷陣列中是否包含某個值，判斷的方式為「由左而右」，如果有包含就回傳這個值在陣列中的索引值</li>\n</ul>\n<p>這段函式的意思是當我選擇了座位 <code>selectedSeats</code> ，將這些選擇的座位化成陣列型式<code>[...selectedSeats] </code>，再把陣列內的座位拿去判斷 (indexOf) 索引值再回傳，如果找不到索引值就會顯示 -1。</p>\n<p>用 console 查看，當我選擇了第 1、第 2 跟第 7 個座位就會顯示索引值跟陣列。<br><img src=\"https://i.imgur.com/azBL9mU.png\"></p>\n<p>而此段函式要放到 <code>updateSelectCount</code> 函式中，這樣再選取座位的時候就會把索引值傳存到 localStorage 裡面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 將[...selectedSeats]解構的值塞到函式裡面運算，再把結果 return 出來</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> seatsIndex = [...selectedSeats].map(<span class=\"function\">(<span class=\"params\">seat</span>) =&gt;</span> [...seats].indexOf(seat))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"setItem\"><a href=\"#setItem\" class=\"headerlink\" title=\"setItem\"></a>setItem</h4>當我們將資料設定到瀏覽器數據庫裡面時，這個設定就是 setItem ，<br>寫法是這樣 <code>setItem(&#39;key&#39;, value)</code><br><code>key</code> 值就像是我們在填寫表單的時候會有姓名、年紀、電話這些的開頭<br><code>value</code> 值就是依照表單中的開頭依序填寫的內容，如: ken、100 歲、0910xxxxx</li>\n</ul>\n<p>在 <code>setMovieData</code> 函式中我們將座位索引的 <code>key</code> 設定成 <code>selectedMovieIndex</code>， <code>value</code> 設定成 <code>movieIndex</code>，同理，價格也是這樣設定，目的是將資料存入 localStorage 裡面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 透過 localStorage 抓取電影索引值跟價格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setMovieData</span>(<span class=\"params\">movieIndex, moviePrice</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;selectedMovieIndex&#x27;</span>, movieIndex)</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;selectedMoviePrice&#x27;</span>, moviePrice)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;selectedSeats&#x27;</span>, <span class=\"built_in\">JSON</span>.stringify(seatsIndex))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"getItem\"><a href=\"#getItem\" class=\"headerlink\" title=\"getItem\"></a>getItem</h4>用 setItem 設定好 key 跟 value 的值後，要將 value 值取出的話就要用 getItem 抓 key 值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;selectedSeats&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse\"></a>JSON.parse</h4>因為 localStorage 只能讀字串型式的資料，所以當我們在讀取或是抓取資料的時候必須是物件的型式，這時就會用到 <code>JSON.parse</code>。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> selectedSeats = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;selectedSeats&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-populateUI-function\"><a href=\"#6-populateUI-function\" class=\"headerlink\" title=\"6. populateUI function\"></a>6. populateUI function</h3><p>在選好座位數量並透過 setIetm 存放到 localStorage 資料庫裡面，現在要使用這些資料，所以會先用 getItem 抓取，然後在轉成物件格式，轉物件是因為資料如果是字串會抓不到，轉完之後在賦值到 <code>selectedSeats</code> 變數裡面</p>\n<p>接下來就用<code>selectedSeats</code>變數來判斷是不是空值同時數量又必須大於 1，如果回傳的是 true ，再用 <code>forEach</code> 運算 <code>seats</code> 裡的每個參數，看看選擇的值是否都大於-1，因為陣列第一個值為 0，如果回傳 true ，再將 className 添加到 seat 裡面。</p>\n<p>執行 populateUI 函式時也會同時執行另一項函式，剛才已經把電影的索引值設定好並丟到 localStorage 裡面，當我們在選擇電影時會先判斷我們選擇的是否是空值，如果不是就將這項索引值賦予到 <code>movieSelect</code> 函式裡。</p>\n<ul>\n<li>forEach: 會將陣列中每個元素套用到指定的函式裡進行運算</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 紀錄資料，刷新後記錄仍然在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">populateUI</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 因為剛才是轉成字串，這裡要轉成物件</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedSeats = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;selectedSeats&#x27;</span>))</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selectedSeats !== <span class=\"literal\">null</span> &amp;&amp; selectedSeats.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    seats.forEach(<span class=\"function\">(<span class=\"params\">seat, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (selectedSeats.indexOf(index) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        seat.classList.add(<span class=\"string\">&#x27;selected&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedMovieIndex = <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;selectedMovieIndex&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selectedMovieIndex !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    movieSelect.selectedIndex = selectedMovieIndex</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 執行</span></span><br><span class=\"line\">populateUI()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"完整程式碼\"><a href=\"#完整程式碼\" class=\"headerlink\" title=\"完整程式碼\"></a>完整程式碼</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;.container&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> seats = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.row .seat:not(.occupied)&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#count&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> total = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#total&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> movieSelect = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#movie&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> ticketPrice = +movieSelect.value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 計算選擇的座位數量價格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateSelectCount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 將所選取到的座位塞入 selectedSeats 這個變數中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedSeats = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.row .seat.selected&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedSeatCount = selectedSeats.length</span><br><span class=\"line\">  count.innerText = selectedSeatCount <span class=\"comment\">// 將選到的座位數量塞到 count 裡面</span></span><br><span class=\"line\">  total.innerText = selectedSeatCount * ticketPrice <span class=\"comment\">// 計算座位數量跟票價</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 將[...selectedSeats]解構的值塞到函式裡面運算</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> seatsIndex = [...selectedSeats].map(<span class=\"function\">(<span class=\"params\">seat</span>) =&gt;</span> [...seats].indexOf(seat))</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;selectedSeats&#x27;</span>, <span class=\"built_in\">JSON</span>.stringify(seatsIndex))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 依照選擇的電影變更價格</span></span><br><span class=\"line\">movieSelect.addEventListener(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  ticketPrice = +e.target.value</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 查看我們選擇的電影索引跟價格</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(e.target.selectedIndex, e.target.value)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 將電影索引跟價格的參數塞到 setMovieData 裡面</span></span><br><span class=\"line\">  setMovieData(e.target.selectedIndex, e.target.value)</span><br><span class=\"line\">  updateSelectCount() <span class=\"comment\">//執行</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 透過 localStorage 抓取電影索引值跟價格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setMovieData</span>(<span class=\"params\">movieIndex, moviePrice</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;selectedMovieIndex&#x27;</span>, movieIndex)</span><br><span class=\"line\">  <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;selectedMoviePrice&#x27;</span>, moviePrice)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 紀錄資料，刷新後記錄仍然在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">populateUI</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 因為剛才是轉成字串，這裡要轉成物件</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedSeats = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;selectedSeats&#x27;</span>))</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selectedSeats !== <span class=\"literal\">null</span> &amp;&amp; selectedSeats.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    seats.forEach(<span class=\"function\">(<span class=\"params\">seat, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (selectedSeats.indexOf(index) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        seat.classList.add(<span class=\"string\">&#x27;selected&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> selectedMovieIndex = <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;selectedMovieIndex&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (selectedMovieIndex !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    movieSelect.selectedIndex = selectedMovieIndex</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">populateUI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽容器內座位數值的變化</span></span><br><span class=\"line\">container.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// contains 會返回一個 boolean 值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    e.target.classList.contains(<span class=\"string\">&#x27;seat&#x27;</span>) &amp;&amp;</span><br><span class=\"line\">    !e.target.classList.contains(<span class=\"string\">&#x27;occupied&#x27;</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    e.target.classList.toggle(<span class=\"string\">&#x27;selected&#x27;</span>)</span><br><span class=\"line\">    updateSelectCount()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">updateSelectCount()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach\">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href=\"https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842068#questions\">20 Web Projects With Vanilla JavaScript</a></p>"},{"title":"Python - 用 python flask 在本地端架設後端 server 進行 api 串接練習","date":"2021-03-30T16:00:00.000Z","_content":"\n最近在寫個人的 side project ，由於 api 都是由後端提供，但是要讓 api 運作就是要開啟後端的 server ，這樣前端打 api 就可以會收到 response。\n\n<!-- more -->\n\n工作環境: window\n執行系統: WSL\n開發工具: VS Code\n虛擬機: Ubuntu 18.04\n\n如果沒有 Ubuntu 18.04 要先安裝。\n\n## 切換 WSL 系統\n\n在 VS Code 開啟終端機 ( ctrl + ~ )\n把開發環境切換到 WSL\n![](https://i.imgur.com/ItZDUVK.png)\n\n選擇 WSL\n![](https://i.imgur.com/OzW0mY2.png)\n\n選擇 WSL 後再點擊 +\n![](https://i.imgur.com/SxzRueQ.png)\n\n就會多新增一個 WSL\n![](https://i.imgur.com/8c8vn1b.png)\n\n## 執行\n\n開好 WSL 後執行\n\n```python\nsudo apt update\nsudo apt -y upgrade\n```\n\n執行 `sudo apt update` 這段指令會安裝 10~20 分鐘左右。\n![](https://i.imgur.com/fiRGUom.png)\n\n結束後，在下 `sudo apt -y upgrade` 指令，繼續安裝。\n![](https://i.imgur.com/GeXtUYX.png)\n\n安裝好後，確認 python 版本 `python3 -V`\n\n![](https://i.imgur.com/TiycTIk.png)\n卻認為 python3 的版本\n\n在執行 `sudo apt install -y python3-pip` 指令\n![](https://i.imgur.com/wu6CRjq.png)\n\n安裝好後還看看後端寫的啟動本地 server 的指令\n![](https://i.imgur.com/AzQ9HFf.png)\n\n```python\npip3 install -r requirements.txt\n\n\npython3 init.py\npython3 run.py\n```\n\n![](https://i.imgur.com/zyItzRY.png)\n\n如果執行完出現\nCould not open requirements file: [Errno 2] No such file or directory: 'req\n的訊息就表示，檔案路徑不對，不應該是 window 下的檔案而是 linux 下的檔案，如下圖\n\n一開始我的檔案路徑是在 window 下，然後我 cd 切回根目錄，再用 ls 看一下檔案， 再 cd 切到我要的檔案裏面，然後再執行一次 `pip3 install -r requirements.txt`。\n\n![](https://i.imgur.com/9IHGfsA.png)\n\n然後就可以順利安裝了。\n![](https://i.imgur.com/F4xAXp3.png)\n\n會出現 zsh: command not found: python 這個訊息是因為，我沒有將 python 指定成 python3 的版本，改用 python3 就可以正常運作了，如下圖。\n![](https://i.imgur.com/4oCyUW0.png)\n\n再執行 `python3 run.py` 就可以正常運作了。\n![](https://i.imgur.com/laFZxIo.png)\n\n但系統會告知你，此為開發使用的，請不要再線上的產品使用。\n\n## 參考資料\n\n[如何在 Ubuntu 18.04 上安裝 Python 3 並建立本地編程環境](https://www.digitalocean.com/community/tutorials/ubuntu-18-04-python-3-zh)\n","source":"_posts/2021/python_flask.md","raw":"---\ntitle: Python - 用 python flask 在本地端架設後端 server 進行 api 串接練習\ndate: 2021/03/31\ntags:\n  - Python\n  - WSL\ncategories:\n  - Python\n  - WSL\n---\n\n最近在寫個人的 side project ，由於 api 都是由後端提供，但是要讓 api 運作就是要開啟後端的 server ，這樣前端打 api 就可以會收到 response。\n\n<!-- more -->\n\n工作環境: window\n執行系統: WSL\n開發工具: VS Code\n虛擬機: Ubuntu 18.04\n\n如果沒有 Ubuntu 18.04 要先安裝。\n\n## 切換 WSL 系統\n\n在 VS Code 開啟終端機 ( ctrl + ~ )\n把開發環境切換到 WSL\n![](https://i.imgur.com/ItZDUVK.png)\n\n選擇 WSL\n![](https://i.imgur.com/OzW0mY2.png)\n\n選擇 WSL 後再點擊 +\n![](https://i.imgur.com/SxzRueQ.png)\n\n就會多新增一個 WSL\n![](https://i.imgur.com/8c8vn1b.png)\n\n## 執行\n\n開好 WSL 後執行\n\n```python\nsudo apt update\nsudo apt -y upgrade\n```\n\n執行 `sudo apt update` 這段指令會安裝 10~20 分鐘左右。\n![](https://i.imgur.com/fiRGUom.png)\n\n結束後，在下 `sudo apt -y upgrade` 指令，繼續安裝。\n![](https://i.imgur.com/GeXtUYX.png)\n\n安裝好後，確認 python 版本 `python3 -V`\n\n![](https://i.imgur.com/TiycTIk.png)\n卻認為 python3 的版本\n\n在執行 `sudo apt install -y python3-pip` 指令\n![](https://i.imgur.com/wu6CRjq.png)\n\n安裝好後還看看後端寫的啟動本地 server 的指令\n![](https://i.imgur.com/AzQ9HFf.png)\n\n```python\npip3 install -r requirements.txt\n\n\npython3 init.py\npython3 run.py\n```\n\n![](https://i.imgur.com/zyItzRY.png)\n\n如果執行完出現\nCould not open requirements file: [Errno 2] No such file or directory: 'req\n的訊息就表示，檔案路徑不對，不應該是 window 下的檔案而是 linux 下的檔案，如下圖\n\n一開始我的檔案路徑是在 window 下，然後我 cd 切回根目錄，再用 ls 看一下檔案， 再 cd 切到我要的檔案裏面，然後再執行一次 `pip3 install -r requirements.txt`。\n\n![](https://i.imgur.com/9IHGfsA.png)\n\n然後就可以順利安裝了。\n![](https://i.imgur.com/F4xAXp3.png)\n\n會出現 zsh: command not found: python 這個訊息是因為，我沒有將 python 指定成 python3 的版本，改用 python3 就可以正常運作了，如下圖。\n![](https://i.imgur.com/4oCyUW0.png)\n\n再執行 `python3 run.py` 就可以正常運作了。\n![](https://i.imgur.com/laFZxIo.png)\n\n但系統會告知你，此為開發使用的，請不要再線上的產品使用。\n\n## 參考資料\n\n[如何在 Ubuntu 18.04 上安裝 Python 3 並建立本地編程環境](https://www.digitalocean.com/community/tutorials/ubuntu-18-04-python-3-zh)\n","slug":"python_flask","published":1,"updated":"2021-03-30T17:14:41.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmwa6o270000wktr7wfocw0e","content":"<html><head></head><body><p>最近在寫個人的 side project ，由於 api 都是由後端提供，但是要讓 api 運作就是要開啟後端的 server ，這樣前端打 api 就可以會收到 response。</p>\n<a id=\"more\"></a>\n\n<p>工作環境: window<br>執行系統: WSL<br>開發工具: VS Code<br>虛擬機: Ubuntu 18.04</p>\n<p>如果沒有 Ubuntu 18.04 要先安裝。</p>\n<h2 id=\"切換-WSL-系統\"><a href=\"#切換-WSL-系統\" class=\"headerlink\" title=\"切換 WSL 系統\"></a>切換 WSL 系統</h2><p>在 VS Code 開啟終端機 ( ctrl + ~ )<br>把開發環境切換到 WSL<br><img src=\"https://i.imgur.com/ItZDUVK.png\"></p>\n<p>選擇 WSL<br><img src=\"https://i.imgur.com/OzW0mY2.png\"></p>\n<p>選擇 WSL 後再點擊 +<br><img src=\"https://i.imgur.com/SxzRueQ.png\"></p>\n<p>就會多新增一個 WSL<br><img src=\"https://i.imgur.com/8c8vn1b.png\"></p>\n<h2 id=\"執行\"><a href=\"#執行\" class=\"headerlink\" title=\"執行\"></a>執行</h2><p>開好 WSL 後執行</p>\n<figure class=\"highlight python hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt -y upgrade</span><br></pre></td></tr></tbody></table></figure>\n\n<p>執行 <code>sudo apt update</code> 這段指令會安裝 10~20 分鐘左右。<br><img src=\"https://i.imgur.com/fiRGUom.png\"></p>\n<p>結束後，在下 <code>sudo apt -y upgrade</code> 指令，繼續安裝。<br><img src=\"https://i.imgur.com/GeXtUYX.png\"></p>\n<p>安裝好後，確認 python 版本 <code>python3 -V</code></p>\n<p><img src=\"https://i.imgur.com/TiycTIk.png\"><br>卻認為 python3 的版本</p>\n<p>在執行 <code>sudo apt install -y python3-pip</code> 指令<br><img src=\"https://i.imgur.com/wu6CRjq.png\"></p>\n<p>安裝好後還看看後端寫的啟動本地 server 的指令<br><img src=\"https://i.imgur.com/AzQ9HFf.png\"></p>\n<figure class=\"highlight python hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">python3 init.py</span><br><span class=\"line\">python3 run.py</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/zyItzRY.png\"></p>\n<p>如果執行完出現<br>Could not open requirements file: [Errno 2] No such file or directory: ‘req<br>的訊息就表示，檔案路徑不對，不應該是 window 下的檔案而是 linux 下的檔案，如下圖</p>\n<p>一開始我的檔案路徑是在 window 下，然後我 cd 切回根目錄，再用 ls 看一下檔案， 再 cd 切到我要的檔案裏面，然後再執行一次 <code>pip3 install -r requirements.txt</code>。</p>\n<p><img src=\"https://i.imgur.com/9IHGfsA.png\"></p>\n<p>然後就可以順利安裝了。<br><img src=\"https://i.imgur.com/F4xAXp3.png\"></p>\n<p>會出現 zsh: command not found: python 這個訊息是因為，我沒有將 python 指定成 python3 的版本，改用 python3 就可以正常運作了，如下圖。<br><img src=\"https://i.imgur.com/4oCyUW0.png\"></p>\n<p>再執行 <code>python3 run.py</code> 就可以正常運作了。<br><img src=\"https://i.imgur.com/laFZxIo.png\"></p>\n<p>但系統會告知你，此為開發使用的，請不要再線上的產品使用。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.digitalocean.com/community/tutorials/ubuntu-18-04-python-3-zh\">如何在 Ubuntu 18.04 上安裝 Python 3 並建立本地編程環境</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"Python","path":"categories/Python/"},{"name":"WSL","path":"categories/Python/WSL/"}],"_tags":[{"name":"Python","path":"tags/Python/"},{"name":"WSL","path":"tags/WSL/"}],"excerpt":"<html><head></head><body><p>最近在寫個人的 side project ，由於 api 都是由後端提供，但是要讓 api 運作就是要開啟後端的 server ，這樣前端打 api 就可以會收到 response。</p></body></html>","more":"<p>工作環境: window<br>執行系統: WSL<br>開發工具: VS Code<br>虛擬機: Ubuntu 18.04</p>\n<p>如果沒有 Ubuntu 18.04 要先安裝。</p>\n<h2 id=\"切換-WSL-系統\"><a href=\"#切換-WSL-系統\" class=\"headerlink\" title=\"切換 WSL 系統\"></a>切換 WSL 系統</h2><p>在 VS Code 開啟終端機 ( ctrl + ~ )<br>把開發環境切換到 WSL<br><img src=\"https://i.imgur.com/ItZDUVK.png\"></p>\n<p>選擇 WSL<br><img src=\"https://i.imgur.com/OzW0mY2.png\"></p>\n<p>選擇 WSL 後再點擊 +<br><img src=\"https://i.imgur.com/SxzRueQ.png\"></p>\n<p>就會多新增一個 WSL<br><img src=\"https://i.imgur.com/8c8vn1b.png\"></p>\n<h2 id=\"執行\"><a href=\"#執行\" class=\"headerlink\" title=\"執行\"></a>執行</h2><p>開好 WSL 後執行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt -y upgrade</span><br></pre></td></tr></table></figure>\n\n<p>執行 <code>sudo apt update</code> 這段指令會安裝 10~20 分鐘左右。<br><img src=\"https://i.imgur.com/fiRGUom.png\"></p>\n<p>結束後，在下 <code>sudo apt -y upgrade</code> 指令，繼續安裝。<br><img src=\"https://i.imgur.com/GeXtUYX.png\"></p>\n<p>安裝好後，確認 python 版本 <code>python3 -V</code></p>\n<p><img src=\"https://i.imgur.com/TiycTIk.png\"><br>卻認為 python3 的版本</p>\n<p>在執行 <code>sudo apt install -y python3-pip</code> 指令<br><img src=\"https://i.imgur.com/wu6CRjq.png\"></p>\n<p>安裝好後還看看後端寫的啟動本地 server 的指令<br><img src=\"https://i.imgur.com/AzQ9HFf.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">python3 init.py</span><br><span class=\"line\">python3 run.py</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/zyItzRY.png\"></p>\n<p>如果執行完出現<br>Could not open requirements file: [Errno 2] No such file or directory: ‘req<br>的訊息就表示，檔案路徑不對，不應該是 window 下的檔案而是 linux 下的檔案，如下圖</p>\n<p>一開始我的檔案路徑是在 window 下，然後我 cd 切回根目錄，再用 ls 看一下檔案， 再 cd 切到我要的檔案裏面，然後再執行一次 <code>pip3 install -r requirements.txt</code>。</p>\n<p><img src=\"https://i.imgur.com/9IHGfsA.png\"></p>\n<p>然後就可以順利安裝了。<br><img src=\"https://i.imgur.com/F4xAXp3.png\"></p>\n<p>會出現 zsh: command not found: python 這個訊息是因為，我沒有將 python 指定成 python3 的版本，改用 python3 就可以正常運作了，如下圖。<br><img src=\"https://i.imgur.com/4oCyUW0.png\"></p>\n<p>再執行 <code>python3 run.py</code> 就可以正常運作了。<br><img src=\"https://i.imgur.com/laFZxIo.png\"></p>\n<p>但系統會告知你，此為開發使用的，請不要再線上的產品使用。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.digitalocean.com/community/tutorials/ubuntu-18-04-python-3-zh\">如何在 Ubuntu 18.04 上安裝 Python 3 並建立本地編程環境</a></p>"},{"title":"JavaScript - 作用域 ( Scope )","date":"2021-04-07T16:00:00.000Z","_content":"\n最近要面臨面試了，而這些東西都是面試必考的觀念，所以就將這些東西寫成一篇筆記，方便日後回顧。\n\n<!-- more -->\n\n## 全域變數與區域變數\n\n參考自 kuro 大大的 : 0 陷阱！0 誤解！8 天重新認識 JavaScript！\n\n> 1.  其實在 JavaScript 這門語言中，沒有所謂「全域變數」這種東西。更準確地說，我們所說的「全域變數」其實指的是「全域物件」(或者叫「頂層物件」) 的屬性。\n> 2.  以瀏覽器來說，「全域物件」指的就是 window，在 node 環境中則叫做 global。\n> 3.  所有沒有透過 `var` 宣告的變數都會自動變成全域變數。\n> 4.  切分變數有效範圍的最小單位是 `function` ，而這範圍就是 `Scope`。\n\n### 1. 如果在 `function` 內找不到 `var` 宣告的變數，就會一層層往外找，直到找到全域變數為止。\n\n以下示範:\n\n```javascript\nvar a = 10\nfunction fn() {\n  console.log(a) // 10\n}\n\nfn()\n```\n\n用 `window.a` 看，確定變數 `a` 是全域變數。\n![](https://i.imgur.com/fQWf2IW.png)\n\n### 2. 沒有透過 `var` 宣告的變數都會自動變成全域變數。\n\n函式裡面因為沒有使用 `var` 宣告變數 `a` ，所以變數 `a` 會變成全域變數並且直接覆蓋掉外層用 `var` 宣告的 `a`。\n\n```javascript\nvar a = 10\nfunction fn() {\n  a = '全域變數'\n  console.log('我是 fn 裡面的 a => ' + a) // \"我是 fn 裡面的 a => 全域變數\"\n}\n\nfn()\nconsole.log('我是 fn 外面的 a => ' + a) // \"我是 fn 外面的 a => 全域變數\"\n```\n\n用 `window.a` 看，確定變數 `a` 是`全域變數`，不是 `var` 宣告的變數 `10`。\n![](https://i.imgur.com/YQPnGVT.png)\n\n### 3. 但是如果函式內的 `a` 有用 `var` 宣告呢?\n\n```javascript\nvar a = 10\nfunction fn() {\n  var a = '全域變數'\n  console.log('我是 fn 裡面的 a => ' + a) // \"我是 fn 裡面的 a => 全域變數\"\n}\n\nfn()\nconsole.log('我是 fn 外面的 a => ' + a) // \"我是 fn 外面的 a => 10\"\n```\n\n如下圖，用 `window.a` 看，會發現全域變數的 `a` 是` 10`。\n![](https://i.imgur.com/nhcXOMi.png)\n\n因為 `var` 的作用域會在 `function` 裡面，所以不會影響到外層的變數 `a` ，但外層宣告的變數 `a` 並沒有被 function 限制住，所以就會變成全域變數，以引用 Kuro 大大的結論：\n\n1. 變數有效範圍 ( scope ) 的最小切分單位是 `function` ( ES6 的 `let` 與 `const` 例外 )\n2. 即使是寫在函式內，沒有 `var` 的變數會變成「全域變數」\n3. 全域變數指的是全域物件 ( 頂層物件 ) 的「屬性」\n\n[DEMO](https://codepen.io/gleofgja/pen/YzNEKvB?editors=1011)\n\n## 函式與作用域之間的關係\n\n### 1. 全域執行環境 ( Global Level Scope )\n\n先來個最基本的，用 `var` 命名的 `變數 a` 然後賦值為 `全域 a`。\n\n```javascript\nvar a = '全域 a'\nconsole.log(a)\n```\n\n![](https://i.imgur.com/JQudPOG.png)\n\n### 2. 函式與全域作用域 ( Function Level Scope )\n\n然後在 `function` 裡面呼叫 `a 變數`，結果會是 `全域 a` ，因為當函式執行時如果函式內找不到變數就會向外層尋找。\n\n```javascript\nvar a = '全域 a'\n\nfunction fn() {\n  console.log(a) // 全域 a\n}\n\nconsole.log(a) // 全域 a\nfn()\n```\n\n如下圖\n![](https://i.imgur.com/0EOg1Gk.png)\n\n---\n\n所以在函式內如果找到命名的變數就不會向函式外層尋找，如下\n\n```javascript\nvar a = '全域 a'\n\nfunction fn() {\n  var a = '區域 a'\n  console.log(a) // 區域 a\n}\n\nconsole.log(a) // 全域 a\nfn()\n```\n\n![](https://i.imgur.com/mh1xKtF.png)\n\n為什麼會先顯示 `全域 a` ?\n因為在 24 行我先執行了 `console.log(a)`。\n之後 25 行再執行 `fn` 函式，這時候函式才會執行 `function` 裡面的 `console.log(a)`。\n\n---\n\n為了看更清楚，同時在函式外命名兩個變數，但在函式內只命一個 `變數 a`，結果如下。\n\n```javascript\nvar a = '全域 a'\nvar b = '全域 b'\n\nfunction fn() {\n  var a = '區域 a'\n  console.log('fn 裡面的 => ' + a) //\"fn 裡面的 => 區域 a\"\n  console.log('fn 裡面的 => ' + b) //\"fn 裡面的 => 全域 b\"\n}\n\nconsole.log('fn 外面的 => ' + a) //\"fn 外面的 => 全域 a\"\nconsole.log('fn 外面的 => ' + b) //\"fn 外面的 => 全域 b\"\nfn()\n```\n\n結果如下，在函式內有找到`變數 a` 就不會向函式外層尋找，但函式內找不到`變數 b` ，所以就會向函式外層尋找`全域 b`。\n\n( 跟前一個例子同理，顯示的順序跟執行的順序一樣，先執行先顯示。 )\n![](https://i.imgur.com/NSDYkJf.png)\n\n---\n\n同樣道理，如果我把函式外的 `全域變數 b` 註解掉，那函式內的 b 就會找不到該變數，會顯示為定義，如下圖\n![](https://i.imgur.com/E4AcOFQ.png)\n\n---\n\n來點變化題，這會用到 JS 的 hoisting 觀念\n\n```javascript\nvar a = '全域 a'\n\nfunction fn() {\n  console.log(a) // undefined\n  var a = '區域 a'\n  console.log(a) // \"區域 a\"\n}\n\nconsole.log(a) // \"全域 a\"\nfn()\n```\n\n結果如下圖\n![](https://i.imgur.com/T2e6Dqp.png)\n\n按照剛才觀念，函式內的 a 不是會像外層尋找? 或是在函式內有命名變數了，為什麼還找不到? 為甚麼會顯示為定義?\n\n因為 JS 有 hoisting 變數提升的特性，所以當電腦在讀取的時候會變成下面這樣\n\n```javascript\nvar a = '全域 a'\n\nfunction fn() {\n  var a\n  console.log(a) // undefined\n\n  a = '區域 a'\n  console.log(a) // \"區域 a\"\n}\n\nconsole.log(a) // \"全域 a\"\nfn()\n```\n\n第一個變數已經命名了但是沒有賦值，所以會顯示 `undefined` ，第二個變數是已經賦值了，所以會顯示 `value` 值。\n\n[DEMO](https://codepen.io/gleofgja/pen/yLgzWKg?editors=0011)\n\n### 3. 塊級作用域 ( Block Level Scope, ES6 )\n\n以上是用 function 並在 function 內呼叫變數，接下來試用區塊，區塊就是指大括號 `{}` ，像是 if 判段式或是 for 迴圈這種的。\n\n接下來就是用區塊 ( Block ) 不是用 function ，直接看程式碼。\n\n```javascript\nvar a = 10\nif (true) {\n  console.log(a) // 10\n}\n```\n\n![](https://i.imgur.com/MdHI1A4.png)\n\n在區塊裡面沒有命名 `變數 a` ，所以會去外層全域找。\n\n---\n\n在區塊裡面跟外面同時看`變數 a` 的結果。\n\n```javascript\nvar a = 10\nif (true) {\n  var a = 20\n  console.log('區塊裡面 => ' + a)\n}\n\nconsole.log('區塊外面 => ' + a)\n```\n\n用開發者工具查看，會看到 `a` 抓到的值都是 `20`。\n![](https://i.imgur.com/OiEPNe5.png)\n\n因為是塊及作用域的關係，所以用 `var` 命名的變數並不會被限制住，會直接覆蓋掉之前相同變數的值。\n\n但這是用 `var` 來命名，如果用 ES6 的 `let` 命名變數的話就會被限制在區塊以內，如下\n\n```javascript\nvar a = 10\nif (true) {\n  var a = 20\n  let b = 30\n  console.log('區塊裡面 => ' + a)\n  console.log('區塊裡面 => ' + b)\n}\n\nconsole.log('區塊外面 => ' + a)\nconsole.log('區塊外面 => ' + b)\n```\n\n顯示下圖\n![](https://i.imgur.com/kpjkZkb.png)\n\n因為在區塊裡面使用 `let` 命名`變數 b` ，所以`變數 b` 就會被限制在區塊裡面，那外層的 `b` 就會找不到。\n\n## 參考資料\n\n[[JS] Scope 作用域](https://medium.com/take-a-day-off/js-scope-%E4%BD%9C%E7%94%A8%E5%9F%9F-ee536640963b)\n[[筆記] JavaScript 變數宣告與作用域](https://kuro.tw/posts/2015/07/08/note-javascript-variables-declared-with-the-scope-scope/)\n[block](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/block)\n[重新認識 JavaScript: Day 10 函式 Functions 的基本概念](https://ithelp.ithome.com.tw/articles/10191549)\n","source":"_posts/2021/Scope.md","raw":"---\ntitle: JavaScript - 作用域 ( Scope )\ndate: 2021/04/08\ntags:\n  - JavaScrip\n  - Scope\n\ncategories:\n  - JavaScrip\n  - Scope\n---\n\n最近要面臨面試了，而這些東西都是面試必考的觀念，所以就將這些東西寫成一篇筆記，方便日後回顧。\n\n<!-- more -->\n\n## 全域變數與區域變數\n\n參考自 kuro 大大的 : 0 陷阱！0 誤解！8 天重新認識 JavaScript！\n\n> 1.  其實在 JavaScript 這門語言中，沒有所謂「全域變數」這種東西。更準確地說，我們所說的「全域變數」其實指的是「全域物件」(或者叫「頂層物件」) 的屬性。\n> 2.  以瀏覽器來說，「全域物件」指的就是 window，在 node 環境中則叫做 global。\n> 3.  所有沒有透過 `var` 宣告的變數都會自動變成全域變數。\n> 4.  切分變數有效範圍的最小單位是 `function` ，而這範圍就是 `Scope`。\n\n### 1. 如果在 `function` 內找不到 `var` 宣告的變數，就會一層層往外找，直到找到全域變數為止。\n\n以下示範:\n\n```javascript\nvar a = 10\nfunction fn() {\n  console.log(a) // 10\n}\n\nfn()\n```\n\n用 `window.a` 看，確定變數 `a` 是全域變數。\n![](https://i.imgur.com/fQWf2IW.png)\n\n### 2. 沒有透過 `var` 宣告的變數都會自動變成全域變數。\n\n函式裡面因為沒有使用 `var` 宣告變數 `a` ，所以變數 `a` 會變成全域變數並且直接覆蓋掉外層用 `var` 宣告的 `a`。\n\n```javascript\nvar a = 10\nfunction fn() {\n  a = '全域變數'\n  console.log('我是 fn 裡面的 a => ' + a) // \"我是 fn 裡面的 a => 全域變數\"\n}\n\nfn()\nconsole.log('我是 fn 外面的 a => ' + a) // \"我是 fn 外面的 a => 全域變數\"\n```\n\n用 `window.a` 看，確定變數 `a` 是`全域變數`，不是 `var` 宣告的變數 `10`。\n![](https://i.imgur.com/YQPnGVT.png)\n\n### 3. 但是如果函式內的 `a` 有用 `var` 宣告呢?\n\n```javascript\nvar a = 10\nfunction fn() {\n  var a = '全域變數'\n  console.log('我是 fn 裡面的 a => ' + a) // \"我是 fn 裡面的 a => 全域變數\"\n}\n\nfn()\nconsole.log('我是 fn 外面的 a => ' + a) // \"我是 fn 外面的 a => 10\"\n```\n\n如下圖，用 `window.a` 看，會發現全域變數的 `a` 是` 10`。\n![](https://i.imgur.com/nhcXOMi.png)\n\n因為 `var` 的作用域會在 `function` 裡面，所以不會影響到外層的變數 `a` ，但外層宣告的變數 `a` 並沒有被 function 限制住，所以就會變成全域變數，以引用 Kuro 大大的結論：\n\n1. 變數有效範圍 ( scope ) 的最小切分單位是 `function` ( ES6 的 `let` 與 `const` 例外 )\n2. 即使是寫在函式內，沒有 `var` 的變數會變成「全域變數」\n3. 全域變數指的是全域物件 ( 頂層物件 ) 的「屬性」\n\n[DEMO](https://codepen.io/gleofgja/pen/YzNEKvB?editors=1011)\n\n## 函式與作用域之間的關係\n\n### 1. 全域執行環境 ( Global Level Scope )\n\n先來個最基本的，用 `var` 命名的 `變數 a` 然後賦值為 `全域 a`。\n\n```javascript\nvar a = '全域 a'\nconsole.log(a)\n```\n\n![](https://i.imgur.com/JQudPOG.png)\n\n### 2. 函式與全域作用域 ( Function Level Scope )\n\n然後在 `function` 裡面呼叫 `a 變數`，結果會是 `全域 a` ，因為當函式執行時如果函式內找不到變數就會向外層尋找。\n\n```javascript\nvar a = '全域 a'\n\nfunction fn() {\n  console.log(a) // 全域 a\n}\n\nconsole.log(a) // 全域 a\nfn()\n```\n\n如下圖\n![](https://i.imgur.com/0EOg1Gk.png)\n\n---\n\n所以在函式內如果找到命名的變數就不會向函式外層尋找，如下\n\n```javascript\nvar a = '全域 a'\n\nfunction fn() {\n  var a = '區域 a'\n  console.log(a) // 區域 a\n}\n\nconsole.log(a) // 全域 a\nfn()\n```\n\n![](https://i.imgur.com/mh1xKtF.png)\n\n為什麼會先顯示 `全域 a` ?\n因為在 24 行我先執行了 `console.log(a)`。\n之後 25 行再執行 `fn` 函式，這時候函式才會執行 `function` 裡面的 `console.log(a)`。\n\n---\n\n為了看更清楚，同時在函式外命名兩個變數，但在函式內只命一個 `變數 a`，結果如下。\n\n```javascript\nvar a = '全域 a'\nvar b = '全域 b'\n\nfunction fn() {\n  var a = '區域 a'\n  console.log('fn 裡面的 => ' + a) //\"fn 裡面的 => 區域 a\"\n  console.log('fn 裡面的 => ' + b) //\"fn 裡面的 => 全域 b\"\n}\n\nconsole.log('fn 外面的 => ' + a) //\"fn 外面的 => 全域 a\"\nconsole.log('fn 外面的 => ' + b) //\"fn 外面的 => 全域 b\"\nfn()\n```\n\n結果如下，在函式內有找到`變數 a` 就不會向函式外層尋找，但函式內找不到`變數 b` ，所以就會向函式外層尋找`全域 b`。\n\n( 跟前一個例子同理，顯示的順序跟執行的順序一樣，先執行先顯示。 )\n![](https://i.imgur.com/NSDYkJf.png)\n\n---\n\n同樣道理，如果我把函式外的 `全域變數 b` 註解掉，那函式內的 b 就會找不到該變數，會顯示為定義，如下圖\n![](https://i.imgur.com/E4AcOFQ.png)\n\n---\n\n來點變化題，這會用到 JS 的 hoisting 觀念\n\n```javascript\nvar a = '全域 a'\n\nfunction fn() {\n  console.log(a) // undefined\n  var a = '區域 a'\n  console.log(a) // \"區域 a\"\n}\n\nconsole.log(a) // \"全域 a\"\nfn()\n```\n\n結果如下圖\n![](https://i.imgur.com/T2e6Dqp.png)\n\n按照剛才觀念，函式內的 a 不是會像外層尋找? 或是在函式內有命名變數了，為什麼還找不到? 為甚麼會顯示為定義?\n\n因為 JS 有 hoisting 變數提升的特性，所以當電腦在讀取的時候會變成下面這樣\n\n```javascript\nvar a = '全域 a'\n\nfunction fn() {\n  var a\n  console.log(a) // undefined\n\n  a = '區域 a'\n  console.log(a) // \"區域 a\"\n}\n\nconsole.log(a) // \"全域 a\"\nfn()\n```\n\n第一個變數已經命名了但是沒有賦值，所以會顯示 `undefined` ，第二個變數是已經賦值了，所以會顯示 `value` 值。\n\n[DEMO](https://codepen.io/gleofgja/pen/yLgzWKg?editors=0011)\n\n### 3. 塊級作用域 ( Block Level Scope, ES6 )\n\n以上是用 function 並在 function 內呼叫變數，接下來試用區塊，區塊就是指大括號 `{}` ，像是 if 判段式或是 for 迴圈這種的。\n\n接下來就是用區塊 ( Block ) 不是用 function ，直接看程式碼。\n\n```javascript\nvar a = 10\nif (true) {\n  console.log(a) // 10\n}\n```\n\n![](https://i.imgur.com/MdHI1A4.png)\n\n在區塊裡面沒有命名 `變數 a` ，所以會去外層全域找。\n\n---\n\n在區塊裡面跟外面同時看`變數 a` 的結果。\n\n```javascript\nvar a = 10\nif (true) {\n  var a = 20\n  console.log('區塊裡面 => ' + a)\n}\n\nconsole.log('區塊外面 => ' + a)\n```\n\n用開發者工具查看，會看到 `a` 抓到的值都是 `20`。\n![](https://i.imgur.com/OiEPNe5.png)\n\n因為是塊及作用域的關係，所以用 `var` 命名的變數並不會被限制住，會直接覆蓋掉之前相同變數的值。\n\n但這是用 `var` 來命名，如果用 ES6 的 `let` 命名變數的話就會被限制在區塊以內，如下\n\n```javascript\nvar a = 10\nif (true) {\n  var a = 20\n  let b = 30\n  console.log('區塊裡面 => ' + a)\n  console.log('區塊裡面 => ' + b)\n}\n\nconsole.log('區塊外面 => ' + a)\nconsole.log('區塊外面 => ' + b)\n```\n\n顯示下圖\n![](https://i.imgur.com/kpjkZkb.png)\n\n因為在區塊裡面使用 `let` 命名`變數 b` ，所以`變數 b` 就會被限制在區塊裡面，那外層的 `b` 就會找不到。\n\n## 參考資料\n\n[[JS] Scope 作用域](https://medium.com/take-a-day-off/js-scope-%E4%BD%9C%E7%94%A8%E5%9F%9F-ee536640963b)\n[[筆記] JavaScript 變數宣告與作用域](https://kuro.tw/posts/2015/07/08/note-javascript-variables-declared-with-the-scope-scope/)\n[block](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/block)\n[重新認識 JavaScript: Day 10 函式 Functions 的基本概念](https://ithelp.ithome.com.tw/articles/10191549)\n","slug":"Scope","published":1,"updated":"2021-04-08T10:30:16.301Z","_id":"ckn8o5kl30000rotrceozbhjn","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>最近要面臨面試了，而這些東西都是面試必考的觀念，所以就將這些東西寫成一篇筆記，方便日後回顧。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"全域變數與區域變數\"><a href=\"#全域變數與區域變數\" class=\"headerlink\" title=\"全域變數與區域變數\"></a>全域變數與區域變數</h2><p>參考自 kuro 大大的 : 0 陷阱！0 誤解！8 天重新認識 JavaScript！</p>\n<blockquote>\n<ol>\n<li>其實在 JavaScript 這門語言中，沒有所謂「全域變數」這種東西。更準確地說，我們所說的「全域變數」其實指的是「全域物件」(或者叫「頂層物件」) 的屬性。</li>\n<li>以瀏覽器來說，「全域物件」指的就是 window，在 node 環境中則叫做 global。</li>\n<li>所有沒有透過 <code>var</code> 宣告的變數都會自動變成全域變數。</li>\n<li>切分變數有效範圍的最小單位是 <code>function</code> ，而這範圍就是 <code>Scope</code>。</li>\n</ol>\n</blockquote>\n<h3 id=\"1-如果在-function-內找不到-var-宣告的變數，就會一層層往外找，直到找到全域變數為止。\"><a href=\"#1-如果在-function-內找不到-var-宣告的變數，就會一層層往外找，直到找到全域變數為止。\" class=\"headerlink\" title=\"1. 如果在 function 內找不到 var 宣告的變數，就會一層層往外找，直到找到全域變數為止。\"></a>1. 如果在 <code>function</code> 內找不到 <code>var</code> 宣告的變數，就會一層層往外找，直到找到全域變數為止。</h3><p>以下示範:</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// 10</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">fn()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用 <code>window.a</code> 看，確定變數 <code>a</code> 是全域變數。<br><img src=\"https://i.imgur.com/fQWf2IW.png\"></p>\n<h3 id=\"2-沒有透過-var-宣告的變數都會自動變成全域變數。\"><a href=\"#2-沒有透過-var-宣告的變數都會自動變成全域變數。\" class=\"headerlink\" title=\"2. 沒有透過 var 宣告的變數都會自動變成全域變數。\"></a>2. 沒有透過 <code>var</code> 宣告的變數都會自動變成全域變數。</h3><p>函式裡面因為沒有使用 <code>var</code> 宣告變數 <code>a</code> ，所以變數 <code>a</code> 會變成全域變數並且直接覆蓋掉外層用 <code>var</code> 宣告的 <code>a</code>。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  a = <span class=\"hljs-string\">'全域變數'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是 fn 裡面的 a =&gt; '</span> + a) <span class=\"hljs-comment\">// \"我是 fn 裡面的 a =&gt; 全域變數\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是 fn 外面的 a =&gt; '</span> + a) <span class=\"hljs-comment\">// \"我是 fn 外面的 a =&gt; 全域變數\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>用 <code>window.a</code> 看，確定變數 <code>a</code> 是<code>全域變數</code>，不是 <code>var</code> 宣告的變數 <code>10</code>。<br><img src=\"https://i.imgur.com/YQPnGVT.png\"></p>\n<h3 id=\"3-但是如果函式內的-a-有用-var-宣告呢\"><a href=\"#3-但是如果函式內的-a-有用-var-宣告呢\" class=\"headerlink\" title=\"3. 但是如果函式內的 a 有用 var 宣告呢?\"></a>3. 但是如果函式內的 <code>a</code> 有用 <code>var</code> 宣告呢?</h3><figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'全域變數'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是 fn 裡面的 a =&gt; '</span> + a) <span class=\"hljs-comment\">// \"我是 fn 裡面的 a =&gt; 全域變數\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'我是 fn 外面的 a =&gt; '</span> + a) <span class=\"hljs-comment\">// \"我是 fn 外面的 a =&gt; 10\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>如下圖，用 <code>window.a</code> 看，會發現全域變數的 <code>a</code> 是<code> 10</code>。<br><img src=\"https://i.imgur.com/nhcXOMi.png\"></p>\n<p>因為 <code>var</code> 的作用域會在 <code>function</code> 裡面，所以不會影響到外層的變數 <code>a</code> ，但外層宣告的變數 <code>a</code> 並沒有被 function 限制住，所以就會變成全域變數，以引用 Kuro 大大的結論：</p>\n<ol>\n<li>變數有效範圍 ( scope ) 的最小切分單位是 <code>function</code> ( ES6 的 <code>let</code> 與 <code>const</code> 例外 )</li>\n<li>即使是寫在函式內，沒有 <code>var</code> 的變數會變成「全域變數」</li>\n<li>全域變數指的是全域物件 ( 頂層物件 ) 的「屬性」</li>\n</ol>\n<p><a href=\"https://codepen.io/gleofgja/pen/YzNEKvB?editors=1011\">DEMO</a></p>\n<h2 id=\"函式與作用域之間的關係\"><a href=\"#函式與作用域之間的關係\" class=\"headerlink\" title=\"函式與作用域之間的關係\"></a>函式與作用域之間的關係</h2><h3 id=\"1-全域執行環境-Global-Level-Scope\"><a href=\"#1-全域執行環境-Global-Level-Scope\" class=\"headerlink\" title=\"1. 全域執行環境 ( Global Level Scope )\"></a>1. 全域執行環境 ( Global Level Scope )</h3><p>先來個最基本的，用 <code>var</code> 命名的 <code>變數 a</code> 然後賦值為 <code>全域 a</code>。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'全域 a'</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/JQudPOG.png\"></p>\n<h3 id=\"2-函式與全域作用域-Function-Level-Scope\"><a href=\"#2-函式與全域作用域-Function-Level-Scope\" class=\"headerlink\" title=\"2. 函式與全域作用域 ( Function Level Scope )\"></a>2. 函式與全域作用域 ( Function Level Scope )</h3><p>然後在 <code>function</code> 裡面呼叫 <code>a 變數</code>，結果會是 <code>全域 a</code> ，因為當函式執行時如果函式內找不到變數就會向外層尋找。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'全域 a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// 全域 a</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// 全域 a</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如下圖<br><img src=\"https://i.imgur.com/0EOg1Gk.png\"></p>\n<hr>\n<p>所以在函式內如果找到命名的變數就不會向函式外層尋找，如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'全域 a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'區域 a'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// 區域 a</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// 全域 a</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/mh1xKtF.png\"></p>\n<p>為什麼會先顯示 <code>全域 a</code> ?<br>因為在 24 行我先執行了 <code>console.log(a)</code>。<br>之後 25 行再執行 <code>fn</code> 函式，這時候函式才會執行 <code>function</code> 裡面的 <code>console.log(a)</code>。</p>\n<hr>\n<p>為了看更清楚，同時在函式外命名兩個變數，但在函式內只命一個 <code>變數 a</code>，結果如下。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'全域 a'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">'全域 b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'區域 a'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'fn 裡面的 =&gt; '</span> + a) <span class=\"hljs-comment\">//\"fn 裡面的 =&gt; 區域 a\"</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'fn 裡面的 =&gt; '</span> + b) <span class=\"hljs-comment\">//\"fn 裡面的 =&gt; 全域 b\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'fn 外面的 =&gt; '</span> + a) <span class=\"hljs-comment\">//\"fn 外面的 =&gt; 全域 a\"</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'fn 外面的 =&gt; '</span> + b) <span class=\"hljs-comment\">//\"fn 外面的 =&gt; 全域 b\"</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>結果如下，在函式內有找到<code>變數 a</code> 就不會向函式外層尋找，但函式內找不到<code>變數 b</code> ，所以就會向函式外層尋找<code>全域 b</code>。</p>\n<p>( 跟前一個例子同理，顯示的順序跟執行的順序一樣，先執行先顯示。 )<br><img src=\"https://i.imgur.com/NSDYkJf.png\"></p>\n<hr>\n<p>同樣道理，如果我把函式外的 <code>全域變數 b</code> 註解掉，那函式內的 b 就會找不到該變數，會顯示為定義，如下圖<br><img src=\"https://i.imgur.com/E4AcOFQ.png\"></p>\n<hr>\n<p>來點變化題，這會用到 JS 的 hoisting 觀念</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'全域 a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'區域 a'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// \"區域 a\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// \"全域 a\"</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>結果如下圖<br><img src=\"https://i.imgur.com/T2e6Dqp.png\"></p>\n<p>按照剛才觀念，函式內的 a 不是會像外層尋找? 或是在函式內有命名變數了，為什麼還找不到? 為甚麼會顯示為定義?</p>\n<p>因為 JS 有 hoisting 變數提升的特性，所以當電腦在讀取的時候會變成下面這樣</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'全域 a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> a</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  a = <span class=\"hljs-string\">'區域 a'</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// \"區域 a\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// \"全域 a\"</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>第一個變數已經命名了但是沒有賦值，所以會顯示 <code>undefined</code> ，第二個變數是已經賦值了，所以會顯示 <code>value</code> 值。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/yLgzWKg?editors=0011\">DEMO</a></p>\n<h3 id=\"3-塊級作用域-Block-Level-Scope-ES6\"><a href=\"#3-塊級作用域-Block-Level-Scope-ES6\" class=\"headerlink\" title=\"3. 塊級作用域 ( Block Level Scope, ES6 )\"></a>3. 塊級作用域 ( Block Level Scope, ES6 )</h3><p>以上是用 function 並在 function 內呼叫變數，接下來試用區塊，區塊就是指大括號 <code>{}</code> ，像是 if 判段式或是 for 迴圈這種的。</p>\n<p>接下來就是用區塊 ( Block ) 不是用 function ，直接看程式碼。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// 10</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://i.imgur.com/MdHI1A4.png\"></p>\n<p>在區塊裡面沒有命名 <code>變數 a</code> ，所以會去外層全域找。</p>\n<hr>\n<p>在區塊裡面跟外面同時看<code>變數 a</code> 的結果。</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'區塊裡面 =&gt; '</span> + a)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'區塊外面 =&gt; '</span> + a)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用開發者工具查看，會看到 <code>a</code> 抓到的值都是 <code>20</code>。<br><img src=\"https://i.imgur.com/OiEPNe5.png\"></p>\n<p>因為是塊及作用域的關係，所以用 <code>var</code> 命名的變數並不會被限制住，會直接覆蓋掉之前相同變數的值。</p>\n<p>但這是用 <code>var</code> 來命名，如果用 ES6 的 <code>let</code> 命名變數的話就會被限制在區塊以內，如下</p>\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">30</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'區塊裡面 =&gt; '</span> + a)</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'區塊裡面 =&gt; '</span> + b)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'區塊外面 =&gt; '</span> + a)</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'區塊外面 =&gt; '</span> + b)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/kpjkZkb.png\"></p>\n<p>因為在區塊裡面使用 <code>let</code> 命名<code>變數 b</code> ，所以<code>變數 b</code> 就會被限制在區塊裡面，那外層的 <code>b</code> 就會找不到。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://medium.com/take-a-day-off/js-scope-%E4%BD%9C%E7%94%A8%E5%9F%9F-ee536640963b\">[JS] Scope 作用域</a><br><a href=\"https://kuro.tw/posts/2015/07/08/note-javascript-variables-declared-with-the-scope-scope/\">[筆記] JavaScript 變數宣告與作用域</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/block\">block</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10191549\">重新認識 JavaScript: Day 10 函式 Functions 的基本概念</a></p>\n</body></html>","site":{"data":{}},"lang":"zh-tw","_categories":[{"name":"JavaScrip","path":"categories/JavaScrip/"},{"name":"Scope","path":"categories/JavaScrip/Scope/"}],"_tags":[{"name":"JavaScrip","path":"tags/JavaScrip/"},{"name":"Scope","path":"tags/Scope/"}],"excerpt":"<html><head></head><body><p>最近要面臨面試了，而這些東西都是面試必考的觀念，所以就將這些東西寫成一篇筆記，方便日後回顧。</p></body></html>","more":"<h2 id=\"全域變數與區域變數\"><a href=\"#全域變數與區域變數\" class=\"headerlink\" title=\"全域變數與區域變數\"></a>全域變數與區域變數</h2><p>參考自 kuro 大大的 : 0 陷阱！0 誤解！8 天重新認識 JavaScript！</p>\n<blockquote>\n<ol>\n<li>其實在 JavaScript 這門語言中，沒有所謂「全域變數」這種東西。更準確地說，我們所說的「全域變數」其實指的是「全域物件」(或者叫「頂層物件」) 的屬性。</li>\n<li>以瀏覽器來說，「全域物件」指的就是 window，在 node 環境中則叫做 global。</li>\n<li>所有沒有透過 <code>var</code> 宣告的變數都會自動變成全域變數。</li>\n<li>切分變數有效範圍的最小單位是 <code>function</code> ，而這範圍就是 <code>Scope</code>。</li>\n</ol>\n</blockquote>\n<h3 id=\"1-如果在-function-內找不到-var-宣告的變數，就會一層層往外找，直到找到全域變數為止。\"><a href=\"#1-如果在-function-內找不到-var-宣告的變數，就會一層層往外找，直到找到全域變數為止。\" class=\"headerlink\" title=\"1. 如果在 function 內找不到 var 宣告的變數，就會一層層往外找，直到找到全域變數為止。\"></a>1. 如果在 <code>function</code> 內找不到 <code>var</code> 宣告的變數，就會一層層往外找，直到找到全域變數為止。</h3><p>以下示範:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n\n<p>用 <code>window.a</code> 看，確定變數 <code>a</code> 是全域變數。<br><img src=\"https://i.imgur.com/fQWf2IW.png\"></p>\n<h3 id=\"2-沒有透過-var-宣告的變數都會自動變成全域變數。\"><a href=\"#2-沒有透過-var-宣告的變數都會自動變成全域變數。\" class=\"headerlink\" title=\"2. 沒有透過 var 宣告的變數都會自動變成全域變數。\"></a>2. 沒有透過 <code>var</code> 宣告的變數都會自動變成全域變數。</h3><p>函式裡面因為沒有使用 <code>var</code> 宣告變數 <code>a</code> ，所以變數 <code>a</code> 會變成全域變數並且直接覆蓋掉外層用 <code>var</code> 宣告的 <code>a</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  a = <span class=\"string\">&#x27;全域變數&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是 fn 裡面的 a =&gt; &#x27;</span> + a) <span class=\"comment\">// &quot;我是 fn 裡面的 a =&gt; 全域變數&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是 fn 外面的 a =&gt; &#x27;</span> + a) <span class=\"comment\">// &quot;我是 fn 外面的 a =&gt; 全域變數&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>用 <code>window.a</code> 看，確定變數 <code>a</code> 是<code>全域變數</code>，不是 <code>var</code> 宣告的變數 <code>10</code>。<br><img src=\"https://i.imgur.com/YQPnGVT.png\"></p>\n<h3 id=\"3-但是如果函式內的-a-有用-var-宣告呢\"><a href=\"#3-但是如果函式內的-a-有用-var-宣告呢\" class=\"headerlink\" title=\"3. 但是如果函式內的 a 有用 var 宣告呢?\"></a>3. 但是如果函式內的 <code>a</code> 有用 <code>var</code> 宣告呢?</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;全域變數&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是 fn 裡面的 a =&gt; &#x27;</span> + a) <span class=\"comment\">// &quot;我是 fn 裡面的 a =&gt; 全域變數&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是 fn 外面的 a =&gt; &#x27;</span> + a) <span class=\"comment\">// &quot;我是 fn 外面的 a =&gt; 10&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如下圖，用 <code>window.a</code> 看，會發現全域變數的 <code>a</code> 是<code> 10</code>。<br><img src=\"https://i.imgur.com/nhcXOMi.png\"></p>\n<p>因為 <code>var</code> 的作用域會在 <code>function</code> 裡面，所以不會影響到外層的變數 <code>a</code> ，但外層宣告的變數 <code>a</code> 並沒有被 function 限制住，所以就會變成全域變數，以引用 Kuro 大大的結論：</p>\n<ol>\n<li>變數有效範圍 ( scope ) 的最小切分單位是 <code>function</code> ( ES6 的 <code>let</code> 與 <code>const</code> 例外 )</li>\n<li>即使是寫在函式內，沒有 <code>var</code> 的變數會變成「全域變數」</li>\n<li>全域變數指的是全域物件 ( 頂層物件 ) 的「屬性」</li>\n</ol>\n<p><a href=\"https://codepen.io/gleofgja/pen/YzNEKvB?editors=1011\">DEMO</a></p>\n<h2 id=\"函式與作用域之間的關係\"><a href=\"#函式與作用域之間的關係\" class=\"headerlink\" title=\"函式與作用域之間的關係\"></a>函式與作用域之間的關係</h2><h3 id=\"1-全域執行環境-Global-Level-Scope\"><a href=\"#1-全域執行環境-Global-Level-Scope\" class=\"headerlink\" title=\"1. 全域執行環境 ( Global Level Scope )\"></a>1. 全域執行環境 ( Global Level Scope )</h3><p>先來個最基本的，用 <code>var</code> 命名的 <code>變數 a</code> 然後賦值為 <code>全域 a</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;全域 a&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/JQudPOG.png\"></p>\n<h3 id=\"2-函式與全域作用域-Function-Level-Scope\"><a href=\"#2-函式與全域作用域-Function-Level-Scope\" class=\"headerlink\" title=\"2. 函式與全域作用域 ( Function Level Scope )\"></a>2. 函式與全域作用域 ( Function Level Scope )</h3><p>然後在 <code>function</code> 裡面呼叫 <code>a 變數</code>，結果會是 <code>全域 a</code> ，因為當函式執行時如果函式內找不到變數就會向外層尋找。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;全域 a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 全域 a</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 全域 a</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n\n<p>如下圖<br><img src=\"https://i.imgur.com/0EOg1Gk.png\"></p>\n<hr>\n<p>所以在函式內如果找到命名的變數就不會向函式外層尋找，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;全域 a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;區域 a&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 區域 a</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 全域 a</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/mh1xKtF.png\"></p>\n<p>為什麼會先顯示 <code>全域 a</code> ?<br>因為在 24 行我先執行了 <code>console.log(a)</code>。<br>之後 25 行再執行 <code>fn</code> 函式，這時候函式才會執行 <code>function</code> 裡面的 <code>console.log(a)</code>。</p>\n<hr>\n<p>為了看更清楚，同時在函式外命名兩個變數，但在函式內只命一個 <code>變數 a</code>，結果如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;全域 a&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;全域 b&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;區域 a&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;fn 裡面的 =&gt; &#x27;</span> + a) <span class=\"comment\">//&quot;fn 裡面的 =&gt; 區域 a&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;fn 裡面的 =&gt; &#x27;</span> + b) <span class=\"comment\">//&quot;fn 裡面的 =&gt; 全域 b&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;fn 外面的 =&gt; &#x27;</span> + a) <span class=\"comment\">//&quot;fn 外面的 =&gt; 全域 a&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;fn 外面的 =&gt; &#x27;</span> + b) <span class=\"comment\">//&quot;fn 外面的 =&gt; 全域 b&quot;</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n\n<p>結果如下，在函式內有找到<code>變數 a</code> 就不會向函式外層尋找，但函式內找不到<code>變數 b</code> ，所以就會向函式外層尋找<code>全域 b</code>。</p>\n<p>( 跟前一個例子同理，顯示的順序跟執行的順序一樣，先執行先顯示。 )<br><img src=\"https://i.imgur.com/NSDYkJf.png\"></p>\n<hr>\n<p>同樣道理，如果我把函式外的 <code>全域變數 b</code> 註解掉，那函式內的 b 就會找不到該變數，會顯示為定義，如下圖<br><img src=\"https://i.imgur.com/E4AcOFQ.png\"></p>\n<hr>\n<p>來點變化題，這會用到 JS 的 hoisting 觀念</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;全域 a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;區域 a&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &quot;區域 a&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &quot;全域 a&quot;</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n\n<p>結果如下圖<br><img src=\"https://i.imgur.com/T2e6Dqp.png\"></p>\n<p>按照剛才觀念，函式內的 a 不是會像外層尋找? 或是在函式內有命名變數了，為什麼還找不到? 為甚麼會顯示為定義?</p>\n<p>因為 JS 有 hoisting 變數提升的特性，所以當電腦在讀取的時候會變成下面這樣</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;全域 a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  a = <span class=\"string\">&#x27;區域 a&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &quot;區域 a&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// &quot;全域 a&quot;</span></span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n\n<p>第一個變數已經命名了但是沒有賦值，所以會顯示 <code>undefined</code> ，第二個變數是已經賦值了，所以會顯示 <code>value</code> 值。</p>\n<p><a href=\"https://codepen.io/gleofgja/pen/yLgzWKg?editors=0011\">DEMO</a></p>\n<h3 id=\"3-塊級作用域-Block-Level-Scope-ES6\"><a href=\"#3-塊級作用域-Block-Level-Scope-ES6\" class=\"headerlink\" title=\"3. 塊級作用域 ( Block Level Scope, ES6 )\"></a>3. 塊級作用域 ( Block Level Scope, ES6 )</h3><p>以上是用 function 並在 function 內呼叫變數，接下來試用區塊，區塊就是指大括號 <code>&#123;&#125;</code> ，像是 if 判段式或是 for 迴圈這種的。</p>\n<p>接下來就是用區塊 ( Block ) 不是用 function ，直接看程式碼。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/MdHI1A4.png\"></p>\n<p>在區塊裡面沒有命名 <code>變數 a</code> ，所以會去外層全域找。</p>\n<hr>\n<p>在區塊裡面跟外面同時看<code>變數 a</code> 的結果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">20</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;區塊裡面 =&gt; &#x27;</span> + a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;區塊外面 =&gt; &#x27;</span> + a)</span><br></pre></td></tr></table></figure>\n\n<p>用開發者工具查看，會看到 <code>a</code> 抓到的值都是 <code>20</code>。<br><img src=\"https://i.imgur.com/OiEPNe5.png\"></p>\n<p>因為是塊及作用域的關係，所以用 <code>var</code> 命名的變數並不會被限制住，會直接覆蓋掉之前相同變數的值。</p>\n<p>但這是用 <code>var</code> 來命名，如果用 ES6 的 <code>let</code> 命名變數的話就會被限制在區塊以內，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">20</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;區塊裡面 =&gt; &#x27;</span> + a)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;區塊裡面 =&gt; &#x27;</span> + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;區塊外面 =&gt; &#x27;</span> + a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;區塊外面 =&gt; &#x27;</span> + b)</span><br></pre></td></tr></table></figure>\n\n<p>顯示下圖<br><img src=\"https://i.imgur.com/kpjkZkb.png\"></p>\n<p>因為在區塊裡面使用 <code>let</code> 命名<code>變數 b</code> ，所以<code>變數 b</code> 就會被限制在區塊裡面，那外層的 <code>b</code> 就會找不到。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://medium.com/take-a-day-off/js-scope-%E4%BD%9C%E7%94%A8%E5%9F%9F-ee536640963b\">[JS] Scope 作用域</a><br><a href=\"https://kuro.tw/posts/2015/07/08/note-javascript-variables-declared-with-the-scope-scope/\">[筆記] JavaScript 變數宣告與作用域</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/block\">block</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10191549\">重新認識 JavaScript: Day 10 函式 Functions 的基本概念</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckmheenok0000w4tr2vo46jzv","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmheenor0003w4trfjph10cb"},{"post_id":"ckmheenok0000w4tr2vo46jzv","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmheenor0004w4tra6xlgtsa"},{"post_id":"ckmhei7le0001tctrf26c6ly8","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmhejnn50005tctrarxmf8z2"},{"post_id":"ckmheowzb000etctr47ae2lfp","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmhep5s5000htctr7a6p70rj"},{"post_id":"ckmheq6cc000ktctr204u7cat","category_id":"cke29tv0y000a78tr8mba1af4","_id":"ckmheqfmp000mtctr32dmcq8w"},{"post_id":"ckmheuzab000wtctrfnzf3w9b","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmhewqa2000ytctrftldci71"},{"post_id":"ckmheztjk001atctrh73w9a4e","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmheztjl001dtctrbd7t5ypv"},{"post_id":"ckmheuzaa000vtctr9yd9h044","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmhf1mjp001qtctr8y3d9eie"},{"post_id":"ckmheujj3000rtctr45tvbe0g","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmhf1p4r001xtctrg3s756yn"},{"post_id":"ckmhenvvl000dtctr6zd6913k","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmhf4c7o00016ktrb02i4k3j"},{"post_id":"ckmheuza9000utctrabzn6rce","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmhf4c8600046ktrdrlvg02x"},{"post_id":"ckmhfoynh0000mwtrbbjk4p8c","category_id":"ckmhexpn70010tctr6dfu74lz","_id":"ckmhfoyni0002mwtrbeem3nse"},{"post_id":"ckmhfs38b0003mwtr759nf770","category_id":"ckeo4paj90001v4tr93526v5z","_id":"ckmhfs38c0005mwtrcgjq25eh"},{"post_id":"ckmk4t4gh0000cctrab9idupa","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmk4v7ju00015wtr7drx4zbq"},{"post_id":"ckmk4t4gj0001cctr3nhyeh1e","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmk4x2780001uwtrcfnhanpo"},{"post_id":"ckmoii5wi000000trhchm0mxa","category_id":"ckk3pwnvi00019otr41jh3ezc","_id":"ckmoii5x1000400trc6gihms1"},{"post_id":"ckmoii5wi000000trhchm0mxa","category_id":"ckmoii5wo000200trghje4cbp","_id":"ckmoii5x1000500trchwo2gaq"},{"post_id":"ckmok5n0s0000xctr9vn6e5bd","category_id":"ckk3pwnvi00019otr41jh3ezc","_id":"ckmok5n1b0005xctr19oxhps8"},{"post_id":"ckmok5n0s0000xctr9vn6e5bd","category_id":"ckmoii5wo000200trghje4cbp","_id":"ckmok5n1b0007xctrhx1bfr3k"},{"post_id":"ckmok5n0s0000xctr9vn6e5bd","category_id":"ckmok5n190002xctrf6im7qyk","_id":"ckmok5n1b0008xctr0bd6a8o8"},{"post_id":"ckmqi9loy0000g0tr5clrc2sj","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lpb0006g0trdnnzhp0o"},{"post_id":"ckmqi9loy0000g0tr5clrc2sj","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lpd0009g0trdt6u9ife"},{"post_id":"ckmqi9lp50001g0tr9hrm91b9","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lpe000cg0tr625e1b38"},{"post_id":"ckmqi9lp80003g0trgxi629j0","category_id":"ckk2km1zi0001nktrdjng8u15","_id":"ckmqi9lpg000fg0tr6wma691t"},{"post_id":"ckmqi9lp80003g0trgxi629j0","category_id":"ckk2km1zq0003nktr3yusgimp","_id":"ckmqi9lph000ig0trgeey1bm4"},{"post_id":"ckmqi9lp80003g0trgxi629j0","category_id":"ckk2km1zr0004nktref9f7wux","_id":"ckmqi9lpj000lg0tr31ggfch9"},{"post_id":"ckmqi9lpa0005g0tr1f050vzr","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lpl000og0tr9xsvbwgz"},{"post_id":"ckmqi9lpa0005g0tr1f050vzr","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lpm000rg0tr0fnt8hf2"},{"post_id":"ckmqi9lpd000bg0traqocbqly","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lpp000ug0trhnju7hhv"},{"post_id":"ckmqi9lpf000eg0tr997jhr02","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lps000xg0tr9co3clz1"},{"post_id":"ckmqi9lpg000hg0tr4l2v5wwy","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lpt0010g0trbo43hstf"},{"post_id":"ckmqi9lph000kg0tr921f9yzq","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lpu0013g0tr3qldgugu"},{"post_id":"ckmqi9lpj000ng0tr6nz3g9mc","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lpw0016g0tr7iwhft0k"},{"post_id":"ckmqi9lpj000ng0tr6nz3g9mc","category_id":"cklhsszaj00023wtr059ncop8","_id":"ckmqi9lpx0019g0trdmrtcchm"},{"post_id":"ckmqi9lpj000ng0tr6nz3g9mc","category_id":"cklhsszau00053wtra47f71qk","_id":"ckmqi9lpy001cg0tr3z805ici"},{"post_id":"ckmqi9lpl000qg0trbbwdhtlq","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lpz001fg0tr04yi3xuz"},{"post_id":"ckmqi9lpm000tg0trcctvhba5","category_id":"ckisvvbyr0001yotr44xofsk2","_id":"ckmqi9lq1001ig0tr3zrq7dl7"},{"post_id":"ckmqi9lpr000wg0tr01jtao7x","category_id":"ckiq06om60001r0tr3yx3gz8y","_id":"ckmqi9lq2001lg0tr0rc4d3t4"},{"post_id":"ckmqi9lps000zg0trhh9j3dp0","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lq3001og0trbljed17d"},{"post_id":"ckmqi9lps000zg0trhh9j3dp0","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lq4001rg0trfxmgejgu"},{"post_id":"ckmqi9lpt0012g0tr2rpxa3iv","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lq5001ug0tr4kpu0rue"},{"post_id":"ckmqi9lpv0015g0tr84rt6qzf","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lq6001xg0trfxiecnqa"},{"post_id":"ckmqi9lpv0015g0tr84rt6qzf","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lq80020g0trfbgv20nu"},{"post_id":"ckmqi9lpw0018g0tr3v5p69t5","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lq90023g0tr8abn3jot"},{"post_id":"ckmqi9lpw0018g0tr3v5p69t5","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lqa0026g0trhbvgcqxm"},{"post_id":"ckmqi9lpx001bg0trh7mr8e6l","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lqe0029g0tr0au728u5"},{"post_id":"ckmqi9lpx001bg0trh7mr8e6l","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lqg002cg0tr31zod7rk"},{"post_id":"ckmqi9lpz001eg0tr7luo2l5h","category_id":"ckiwultyo0001z8tr822fd45t","_id":"ckmqi9lqi002fg0trgt4u01yh"},{"post_id":"ckmqi9lq0001hg0trf08wa9g0","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lqk002ig0trcnf67clp"},{"post_id":"ckmqi9lq1001kg0tr589a1l6c","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lqm002kg0trdny51byz"},{"post_id":"ckmqi9lq2001ng0tr7efdd9k1","category_id":"ckj82ja2e0001r0trdewf39me","_id":"ckmqi9lr3002og0trhjz17sjy"},{"post_id":"ckmqi9lq3001qg0tr0r6wceb6","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lr3002qg0tr3h69786x"},{"post_id":"ckmqi9lq6001wg0tr6nq2c4g7","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lr4002sg0tr3imlfj57"},{"post_id":"ckmqi9lq6001wg0tr6nq2c4g7","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lr4002ug0tr8vlq2ip6"},{"post_id":"ckmqi9lq7001zg0trhnht11et","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lr4002wg0trem199nwu"},{"post_id":"ckmqi9lq80022g0tr5udv67j5","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lr4002yg0trbl3h9knq"},{"post_id":"ckmqi9lqa0028g0tr91z5cyn6","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lr50030g0tr07x62wkf"},{"post_id":"ckmqi9lqa0028g0tr91z5cyn6","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lr50032g0trgowc9yid"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","category_id":"cklgrqq1i0001q8tr33ru2j6q","_id":"ckmqi9lr60034g0tr2yyfajzo"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","category_id":"cklgrqq1r0004q8tr7w8tgqjq","_id":"ckmqi9lr60036g0tra17ohw9f"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","category_id":"cklgrqq1s0006q8trdcc7cbbe","_id":"ckmqi9lr60038g0tr3pc84wzg"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","category_id":"cklgrqq1t0008q8tr68k9hyq2","_id":"ckmqi9lr6003ag0trajboeogr"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","category_id":"cklgrqq1u000dq8tr5yq72ap6","_id":"ckmqi9lr6003cg0trdyhz3um1"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","category_id":"cklgrqq1v000gq8tre6fe2aww","_id":"ckmqi9lr6003eg0trey007hgk"},{"post_id":"ckmqi9lqf002bg0tre1hbgzlj","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lr7003gg0tr00bs0kul"},{"post_id":"ckmqi9lqf002bg0tre1hbgzlj","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lr7003ig0tr52vz8umc"},{"post_id":"ckmqi9lqh002eg0trfcfw534w","category_id":"ckdszl6uo000my0tr7hmver8j","_id":"ckmqi9lr7003kg0trht9dgymg"},{"post_id":"ckmqi9lqj002hg0trat1q8cnl","category_id":"ckk3pwnvi00019otr41jh3ezc","_id":"ckmqi9lr7003mg0tr6njr3xdi"},{"post_id":"ckmqi9lqj002hg0trat1q8cnl","category_id":"ckmqi9lr2002ng0tr8btp7p2u","_id":"ckmqi9lr7003og0trdndydyt5"},{"post_id":"ckmqi9lra0045g0tr50feho7x","category_id":"ckdx34osv0000kotr1o4s5tj8","_id":"ckmqi9lrb0048g0tr5n24az1e"},{"post_id":"ckmqi9lra0045g0tr50feho7x","category_id":"cklxib7qz0001dwtr5bi60zdu","_id":"ckmqi9lrb0049g0trganxfo6o"},{"post_id":"ckmwa6o270000wktr7wfocw0e","category_id":"ckmwa6o2e0001wktr6rt825dm","_id":"ckmwa6o2x0007wktrec4t2rc8"},{"post_id":"ckmwa6o270000wktr7wfocw0e","category_id":"ckmwa6o2v0004wktrecws2oz0","_id":"ckmwa6o2x0008wktr3pqrfdcv"},{"post_id":"ckn8o5kl30000rotrceozbhjn","category_id":"ckk3pwnvi00019otr41jh3ezc","_id":"ckn8o5kln0005rotr9b49hz5f"},{"post_id":"ckn8o5kl30000rotrceozbhjn","category_id":"ckn8o5klm0002rotrd92d9y8p","_id":"ckn8o5kln0006rotrdxszhcfh"}],"PostTag":[{"post_id":"ckmheenok0000w4tr2vo46jzv","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmheenoq0001w4trg5kfcn3l"},{"post_id":"ckmheenok0000w4tr2vo46jzv","tag_id":"ckdszgaqa000568tr8lbzcm76","_id":"ckmheenor0002w4tra9it86le"},{"post_id":"ckmhei7le0001tctrf26c6ly8","tag_id":"ckdszmfn40013y0tre1xq0dom","_id":"ckmhejnn50004tctr6pew190s"},{"post_id":"ckmheowzb000etctr47ae2lfp","tag_id":"cke29sn3u000078tre66qapsd","_id":"ckmhep5s5000ftctr0n6rdt2m"},{"post_id":"ckmheowzb000etctr47ae2lfp","tag_id":"cke29sn3v000178tr4qls8u4q","_id":"ckmhep5s5000gtctra0ubhbr3"},{"post_id":"ckmheowzb000etctr47ae2lfp","tag_id":"cke29sn3v000278trgcfa86j2","_id":"ckmhep5s5000itctre34y69eh"},{"post_id":"ckmheowzb000etctr47ae2lfp","tag_id":"cke29sn3w000378tra55c18af","_id":"ckmhep5s5000jtctr5vtchg3u"},{"post_id":"ckmheq6cc000ktctr204u7cat","tag_id":"ckds6x5i4000008trffto1p86","_id":"ckmheqfmp000ltctrflc7ap55"},{"post_id":"ckmheuzab000wtctrfnzf3w9b","tag_id":"ckeljajdd0001v0tr53686j5h","_id":"ckmhewqa1000xtctrb99lcgmo"},{"post_id":"ckmheztjk001atctrh73w9a4e","tag_id":"cke29sn3u000078tre66qapsd","_id":"ckmheztjl001btctr158h5lxg"},{"post_id":"ckmheztjk001atctrh73w9a4e","tag_id":"cke29sn3v000178tr4qls8u4q","_id":"ckmheztjl001ctctr90q05ly9"},{"post_id":"ckmheztjk001atctrh73w9a4e","tag_id":"cke29sn3v000278trgcfa86j2","_id":"ckmheztjl001etctr5w1mfgtt"},{"post_id":"ckmheztjk001atctrh73w9a4e","tag_id":"cke29sn3w000378tra55c18af","_id":"ckmheztjl001ftctrfjl21vwi"},{"post_id":"ckmheuzaa000vtctr9yd9h044","tag_id":"ckdszmfn40013y0tre1xq0dom","_id":"ckmhf1mjp001ptctr0louecqu"},{"post_id":"ckmheujj3000rtctr45tvbe0g","tag_id":"ckf18c08j0000kwtr6o7uexrs","_id":"ckmhf1p4r001vtctr4w9pdf7q"},{"post_id":"ckmheujj3000rtctr45tvbe0g","tag_id":"ckf18c08r0001kwtrbvqpax8f","_id":"ckmhf1p4r001wtctrc63l4dxd"},{"post_id":"ckmheujj3000rtctr45tvbe0g","tag_id":"ckf18c08r0002kwtr5zzgdqp5","_id":"ckmhf1p4r001ytctrekol71qu"},{"post_id":"ckmhenvvl000dtctr6zd6913k","tag_id":"ckdszmo7k0016y0tr49pnbse3","_id":"ckmhf4c7l00006ktrbebc42bm"},{"post_id":"ckmheuza9000utctrabzn6rce","tag_id":"cke2fuee10001wctr4pc3byc2","_id":"ckmhf4c8300026ktr2z7e9lfy"},{"post_id":"ckmheuza9000utctrabzn6rce","tag_id":"ckdszmfn40013y0tre1xq0dom","_id":"ckmhf4c8400036ktrfb86afsp"},{"post_id":"ckmheuza9000utctrabzn6rce","tag_id":"cke29rxri00066gtr11ov86mf","_id":"ckmhf4c8600056ktr1s99bdkq"},{"post_id":"ckmhfoynh0000mwtrbbjk4p8c","tag_id":"ckmhexpn80011tctr54s2c9c0","_id":"ckmhfoyni0001mwtrcjgn8dkv"},{"post_id":"ckmhfs38b0003mwtr759nf770","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmhfs38c0004mwtrf7lih1j7"},{"post_id":"ckmk4t4gh0000cctrab9idupa","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmk4v7ju00005wtr0qgqfw85"},{"post_id":"ckmk4t4gj0001cctr3nhyeh1e","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmk4x2780000uwtrf3se8rh2"},{"post_id":"ckmoii5wi000000trhchm0mxa","tag_id":"ckk81i43f0001dctr3yhl2wtm","_id":"ckmoii5wo000100tr613f6704"},{"post_id":"ckmoii5wi000000trhchm0mxa","tag_id":"ckdszgaqa000568tr8lbzcm76","_id":"ckmoii5x0000300tr9ad8htj6"},{"post_id":"ckmok5n0s0000xctr9vn6e5bd","tag_id":"ckk81i43f0001dctr3yhl2wtm","_id":"ckmok5n1a0003xctrgnrj0ohu"},{"post_id":"ckmok5n0s0000xctr9vn6e5bd","tag_id":"ckdszgaqa000568tr8lbzcm76","_id":"ckmok5n1a0004xctr69wc48ja"},{"post_id":"ckmok5n0s0000xctr9vn6e5bd","tag_id":"ckmok5n0v0001xctr92f48nqv","_id":"ckmok5n1b0006xctr9q5f0qa5"},{"post_id":"ckmqi9loy0000g0tr5clrc2sj","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lp80002g0trc4vm6lgn"},{"post_id":"ckmqi9loy0000g0tr5clrc2sj","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lp90004g0tr2xyu2hdo"},{"post_id":"ckmqi9lp50001g0tr9hrm91b9","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lpb0007g0trdws21yb5"},{"post_id":"ckmqi9lp50001g0tr9hrm91b9","tag_id":"ckk3pwnvo00029otr0tpzgsc5","_id":"ckmqi9lpd000ag0tr6mb2agf6"},{"post_id":"ckmqi9lp50001g0tr9hrm91b9","tag_id":"ckk3pwnvp00039otr2z1sfidn","_id":"ckmqi9lpf000dg0tr2rg3eg0c"},{"post_id":"ckmqi9lp50001g0tr9hrm91b9","tag_id":"ckk3pwnvq00059otr8n7d17sj","_id":"ckmqi9lpg000gg0tr10yo78e7"},{"post_id":"ckmqi9lp50001g0tr9hrm91b9","tag_id":"ckk3pwnvr00069otr38omfgo5","_id":"ckmqi9lph000jg0trgrdw5uyn"},{"post_id":"ckmqi9lp80003g0trgxi629j0","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lpj000mg0trbcr06l3w"},{"post_id":"ckmqi9lpa0005g0tr1f050vzr","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lpl000pg0tr542lgenh"},{"post_id":"ckmqi9lpa0005g0tr1f050vzr","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lpm000sg0traeobaadz"},{"post_id":"ckmqi9lpc0008g0trhvix4xmk","tag_id":"ckjo90juy0003q4trfjdq097y","_id":"ckmqi9lpq000vg0trcn04081b"},{"post_id":"ckmqi9lpd000bg0traqocbqly","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmqi9lps000yg0tr45dvhsc5"},{"post_id":"ckmqi9lpf000eg0tr997jhr02","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmqi9lpt0011g0tr07gg89o4"},{"post_id":"ckmqi9lpf000eg0tr997jhr02","tag_id":"cklp59q6l00011wtr7tx1hssv","_id":"ckmqi9lpu0014g0tr0qxjgiyd"},{"post_id":"ckmqi9lpg000hg0tr4l2v5wwy","tag_id":"cklrmj2o40001cctrhbnt5ah8","_id":"ckmqi9lpw0017g0tr8hu2dhwz"},{"post_id":"ckmqi9lph000kg0tr921f9yzq","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmqi9lpx001ag0trc5xvbbss"},{"post_id":"ckmqi9lph000kg0tr921f9yzq","tag_id":"ckdszldif000py0tr18g29q7d","_id":"ckmqi9lpy001dg0tr6vc028ax"},{"post_id":"ckmqi9lph000kg0tr921f9yzq","tag_id":"cklix0m7b0001hgtr9tk8f980","_id":"ckmqi9lq0001gg0tr8kq53qwm"},{"post_id":"ckmqi9lpj000ng0tr6nz3g9mc","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmqi9lq1001jg0tr7q1e5gav"},{"post_id":"ckmqi9lpj000ng0tr6nz3g9mc","tag_id":"ckeljajdd0001v0tr53686j5h","_id":"ckmqi9lq2001mg0tr4jwqed9e"},{"post_id":"ckmqi9lpj000ng0tr6nz3g9mc","tag_id":"ckdszlsmp000yy0trhelealh7","_id":"ckmqi9lq3001pg0trf02ehqfj"},{"post_id":"ckmqi9lpl000qg0trbbwdhtlq","tag_id":"cke2fuee10001wctr4pc3byc2","_id":"ckmqi9lq4001sg0trh3hne4xp"},{"post_id":"ckmqi9lpm000tg0trcctvhba5","tag_id":"ckisvvbyz0002yotr6uap7o2n","_id":"ckmqi9lq6001vg0trg80w5fmw"},{"post_id":"ckmqi9lpr000wg0tr01jtao7x","tag_id":"ckiq06om60002r0tr4ggx1er1","_id":"ckmqi9lq7001yg0trgdjx39be"},{"post_id":"ckmqi9lps000zg0trhh9j3dp0","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lq80021g0trghl69j60"},{"post_id":"ckmqi9lps000zg0trhh9j3dp0","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lq90024g0tr4r1z8gtn"},{"post_id":"ckmqi9lpt0012g0tr2rpxa3iv","tag_id":"ckk5hkiq00001rotrhfqbb9t8","_id":"ckmqi9lqa0027g0tr4ssogqzg"},{"post_id":"ckmqi9lpt0012g0tr2rpxa3iv","tag_id":"ckk5hkiq70003rotr2j9vg61u","_id":"ckmqi9lqf002ag0trfcvn8201"},{"post_id":"ckmqi9lpt0012g0tr2rpxa3iv","tag_id":"ckk5hkiq80004rotre8776f9a","_id":"ckmqi9lqh002dg0tr8osf98ss"},{"post_id":"ckmqi9lpv0015g0tr84rt6qzf","tag_id":"ckk81i43f0001dctr3yhl2wtm","_id":"ckmqi9lqj002gg0tr0agp2ma7"},{"post_id":"ckmqi9lpv0015g0tr84rt6qzf","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lqk002jg0tr8iaxcwc2"},{"post_id":"ckmqi9lpv0015g0tr84rt6qzf","tag_id":"ckkro3h4n0001ostrh7vi1xdv","_id":"ckmqi9lr2002mg0tr6ps97rlr"},{"post_id":"ckmqi9lpw0018g0tr3v5p69t5","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lr3002pg0trbawpg70i"},{"post_id":"ckmqi9lpw0018g0tr3v5p69t5","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lr4002rg0tr8vmw9umg"},{"post_id":"ckmqi9lpw0018g0tr3v5p69t5","tag_id":"ckkwa8nlq00017ctrbb0z6zxr","_id":"ckmqi9lr4002tg0traap7axo5"},{"post_id":"ckmqi9lpx001bg0trh7mr8e6l","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lr4002vg0trhhzn8rwl"},{"post_id":"ckmqi9lpx001bg0trh7mr8e6l","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lr4002xg0tr139pcwuz"},{"post_id":"ckmqi9lpz001eg0tr7luo2l5h","tag_id":"ckiwultz00002z8trhxjtheiq","_id":"ckmqi9lr5002zg0tr6un645fr"},{"post_id":"ckmqi9lq0001hg0trf08wa9g0","tag_id":"ckdszkuec000gy0tr9y532h2l","_id":"ckmqi9lr50031g0treign76li"},{"post_id":"ckmqi9lq1001kg0tr589a1l6c","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmqi9lr60033g0tr2lxy1s0x"},{"post_id":"ckmqi9lq1001kg0tr589a1l6c","tag_id":"cklzyf4gq0001d8trhhho6hhw","_id":"ckmqi9lr60035g0tr7j4y43ge"},{"post_id":"ckmqi9lq2001ng0tr7efdd9k1","tag_id":"ckj82ja2p0002r0tr2ta68uza","_id":"ckmqi9lr60037g0tr41gn89ox"},{"post_id":"ckmqi9lq2001ng0tr7efdd9k1","tag_id":"ckj82ja2q0003r0tr9itz7yfx","_id":"ckmqi9lr60039g0tr30cuadf0"},{"post_id":"ckmqi9lq2001ng0tr7efdd9k1","tag_id":"ckj82ja2r0005r0tr344j49xv","_id":"ckmqi9lr6003bg0tr9du2ac0e"},{"post_id":"ckmqi9lq3001qg0tr0r6wceb6","tag_id":"ckeh1gupz00013strbcp34dml","_id":"ckmqi9lr6003dg0trb0uj2cfl"},{"post_id":"ckmqi9lq5001tg0tr2gzf88jv","tag_id":"ckjo90juy0003q4trfjdq097y","_id":"ckmqi9lr6003fg0tr2m194e8h"},{"post_id":"ckmqi9lq6001wg0tr6nq2c4g7","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lr7003hg0tr6htobjbt"},{"post_id":"ckmqi9lq6001wg0tr6nq2c4g7","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lr7003jg0tr089y7lll"},{"post_id":"ckmqi9lq7001zg0trhnht11et","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmqi9lr7003lg0trb4o3gswy"},{"post_id":"ckmqi9lq80022g0tr5udv67j5","tag_id":"ckdszldif000py0tr18g29q7d","_id":"ckmqi9lr7003ng0tr9f75a7zn"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","tag_id":"cke29rxri00066gtr11ov86mf","_id":"ckmqi9lr7003pg0tr5dd54dp0"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","tag_id":"cklgrqq1p0002q8trgcepfjqt","_id":"ckmqi9lr7003qg0tr0rhwgu8r"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","tag_id":"cklgrqq1r0003q8trdve170h4","_id":"ckmqi9lr8003rg0tr0xoj22wb"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","tag_id":"cklgrqq1s0005q8tr59s3gk5n","_id":"ckmqi9lr8003sg0trc7wt97f1"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","tag_id":"cklgrqq1t0007q8trftuz2shb","_id":"ckmqi9lr8003tg0trgnug2r9o"},{"post_id":"ckmqi9lq90025g0tr41pm2l08","tag_id":"cke29rxrb00006gtr8htldjq1","_id":"ckmqi9lr8003ug0trhghk765l"},{"post_id":"ckmqi9lqa0028g0tr91z5cyn6","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lr8003vg0tr7xi96d3i"},{"post_id":"ckmqi9lqa0028g0tr91z5cyn6","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lr8003wg0tr2wde1cvc"},{"post_id":"ckmqi9lqf002bg0tre1hbgzlj","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lr8003xg0tr77pj86j7"},{"post_id":"ckmqi9lqf002bg0tre1hbgzlj","tag_id":"ckjo90juy0003q4trfjdq097y","_id":"ckmqi9lr8003yg0trf5ao9575"},{"post_id":"ckmqi9lqf002bg0tre1hbgzlj","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lr8003zg0trfml73s0f"},{"post_id":"ckmqi9lqh002eg0trfcfw534w","tag_id":"cke2b2pgm0001cwtr2km8dqcn","_id":"ckmqi9lr80040g0tr7kn227y8"},{"post_id":"ckmqi9lqh002eg0trfcfw534w","tag_id":"cke2b2pgs0003cwtrfoyi4cci","_id":"ckmqi9lr80041g0trhv3ca4br"},{"post_id":"ckmqi9lqh002eg0trfcfw534w","tag_id":"cke2b2pgt0004cwtr9q4hhmqb","_id":"ckmqi9lr80042g0trcvy0ao6o"},{"post_id":"ckmqi9lqj002hg0trat1q8cnl","tag_id":"ckk81i43f0001dctr3yhl2wtm","_id":"ckmqi9lr80043g0trfi1uevrc"},{"post_id":"ckmqi9lqj002hg0trat1q8cnl","tag_id":"ckmqi9lqn002lg0tr7fn09y0h","_id":"ckmqi9lr90044g0trgmz09l6s"},{"post_id":"ckmqi9lra0045g0tr50feho7x","tag_id":"cklxib7qn0000dwtrcmt1euqj","_id":"ckmqi9lrb0046g0trb2v94sbe"},{"post_id":"ckmqi9lra0045g0tr50feho7x","tag_id":"ckjr3n5q00001estr4yn2b0zw","_id":"ckmqi9lrb0047g0tr5so0came"},{"post_id":"ckmwa6o270000wktr7wfocw0e","tag_id":"ckmwa6o2u0002wktrfbw227d4","_id":"ckmwa6o2w0005wktramtb6tv1"},{"post_id":"ckmwa6o270000wktr7wfocw0e","tag_id":"ckmwa6o2v0003wktr08mn47ex","_id":"ckmwa6o2w0006wktr8aaeaw0i"},{"post_id":"ckn8o5kl30000rotrceozbhjn","tag_id":"ckk81i43f0001dctr3yhl2wtm","_id":"ckn8o5kln0003rotr6nl9bjho"},{"post_id":"ckn8o5kl30000rotrceozbhjn","tag_id":"ckn8o5kla0001rotra77x00cp","_id":"ckn8o5kln0004rotr6mylg37i"}],"Tag":[{"name":"--d-flex","_id":"ckds69ycj0001n4tr6l3vevvq"},{"name":"d-flex","_id":"ckds6x5i4000008trffto1p86"},{"name":"vue","_id":"ckds6x5j3000308tr5gm9a6cq"},{"name":"vu","_id":"ckds7d7c50003l8tr5bxzc2wk"},{"name":"javascript","_id":"ckds7hhlv0008l8treov08us2"},{"name":"thu","_id":"ckdszg9ku000368tr4xkl66it"},{"name":"this","_id":"ckdszgaqa000568tr8lbzcm76"},{"name":"MVVM","_id":"ckdszkuec000gy0tr9y532h2l"},{"name":"v-if","_id":"ckdszldif000py0tr18g29q7d"},{"name":"v-for","_id":"ckdszlmis000sy0tr4hnn28mj"},{"name":"von","_id":"ckdszlq64000uy0trfid4b7x5"},{"name":"v+on","_id":"ckdszlrqg000wy0tr4vyv7dsr"},{"name":"v-on","_id":"ckdszlsmp000yy0trhelealh7"},{"name":"v-model","_id":"ckdszmfn40013y0tre1xq0dom"},{"name":"執行環境","_id":"ckdszmo7k0016y0tr49pnbse3"},{"name":"-vue -cli","_id":"ckdu77xi40001a8trdzlmgxxi"},{"name":"cli","_id":"ckdu78zss00006wtr8mq90sje"},{"name":"-eventListener - callback function - event - onSubmit","_id":"ckdx34ot10001kotr9lx383ud"},{"name":"AJAX","_id":"ckdx38ltl0001vwtr7j2ebzi2"},{"name":"Vue","_id":"cke29rxrb00006gtr8htldjq1"},{"name":"v-else","_id":"cke29rxrh00036gtr4f5ddqd2"},{"name":"v-bind","_id":"cke29rxri00066gtr11ov86mf"},{"name":"eventListener","_id":"cke29sn3u000078tre66qapsd"},{"name":"callback function","_id":"cke29sn3v000178tr4qls8u4q"},{"name":"event","_id":"cke29sn3v000278trgcfa86j2"},{"name":"onSubmit","_id":"cke29sn3w000378tra55c18af"},{"name":"preventDefault","_id":"cke2b2pgm0001cwtr2km8dqcn"},{"name":"stop","_id":"cke2b2pgs0003cwtrfoyi4cci"},{"name":"self","_id":"cke2b2pgt0004cwtr9q4hhmqb"},{"name":"component","_id":"cke2fuee10001wctr4pc3byc2"},{"name":"Vue 組件的 data","_id":"ckea3etav000158trc15vgytj"},{"name":"Router","_id":"ckeh1gupz00013strbcp34dml"},{"name":"computed","_id":"ckeljajdd0001v0tr53686j5h"},{"name":"用 v-for 把陣列轉換為一組元素","_id":"ckezrrryu0000notrasvwgo26"},{"name":"用 v-for 把一個物件轉換為一組元素","_id":"ckezrrrz20001notreyz09s3t"},{"name":"8-1用 v-for 把陣列轉換為一組元素","_id":"ckf18c08j0000kwtr6o7uexrs"},{"name":"8-2用 v-for 把一個物件轉換為一組元素","_id":"ckf18c08r0001kwtrbvqpax8f"},{"name":"8-3修改陣列或物件的注意事項","_id":"ckf18c08r0002kwtr5zzgdqp5"},{"name":"API","_id":"cki8vxk770001xktramdz96wh"},{"name":"OWASP","_id":"ckiq06om60002r0tr4ggx1er1"},{"name":"chocolatey","_id":"ckirlq8800002zotr3we23pjl"},{"name":"cmder","_id":"ckirlq8810003zotr0qddb094"},{"name":"WSL1","_id":"ckisvvbyz0002yotr6uap7o2n"},{"name":"Git","_id":"ckiwultz00002z8trhxjtheiq"},{"name":"Pull Request","_id":"ckj82ja2p0002r0tr2ta68uza"},{"name":"git clone","_id":"ckj82ja2q0003r0tr9itz7yfx"},{"name":"git pull","_id":"ckj82ja2r0005r0tr344j49xv"},{"name":"formValid","_id":"ckjh99g0f0001j8trfoxc87eu"},{"name":"Javascript","_id":"ckjo90jux0002q4trfha006km"},{"name":"jQuery","_id":"ckjo90juy0003q4trfjdq097y"},{"name":"作品集","_id":"ckjr3n5q00001estr4yn2b0zw"},{"name":"map","_id":"ckk3pwnvo00029otr0tpzgsc5"},{"name":"filter","_id":"ckk3pwnvp00039otr2z1sfidn"},{"name":"forEach","_id":"ckk3pwnvq00059otr8n7d17sj"},{"name":"find","_id":"ckk3pwnvr00069otr38omfgo5"},{"name":"var","_id":"ckk5hkiq00001rotrhfqbb9t8"},{"name":"let","_id":"ckk5hkiq70003rotr2j9vg61u"},{"name":"const","_id":"ckk5hkiq80004rotre8776f9a"},{"name":"JavaScrip","_id":"ckk81i43f0001dctr3yhl2wtm"},{"name":"偽元素","_id":"ckkro3h4n0001ostrh7vi1xdv"},{"name":"dragDrop","_id":"ckkwa8nlq00017ctrbb0z6zxr"},{"name":"mustache","_id":"cklgrqq1p0002q8trgcepfjqt"},{"name":"v-once","_id":"cklgrqq1r0003q8trdve170h4"},{"name":"v-html","_id":"cklgrqq1s0005q8tr59s3gk5n"},{"name":"v-text","_id":"cklgrqq1t0007q8trftuz2shb"},{"name":"v-show","_id":"cklix0m7b0001hgtr9tk8f980"},{"name":"components","_id":"cklp59q6l00011wtr7tx1hssv"},{"name":"data 函數","_id":"cklrmj2o40001cctrhbnt5ah8"},{"name":"JavaScript","_id":"cklxib7qn0000dwtrcmt1euqj"},{"name":"props","_id":"cklzyf4gq0001d8trhhho6hhw"},{"name":"Loading","_id":"ckmhexpn80011tctr54s2c9c0"},{"name":"router","_id":"ckmhf11dn001itctrauwme03w"},{"name":"arrow function","_id":"ckmok5n0v0001xctr92f48nqv"},{"name":"Hoisting","_id":"ckmqi9lqn002lg0tr7fn09y0h"},{"name":"Python","_id":"ckmwa6o2u0002wktrfbw227d4"},{"name":"WSL","_id":"ckmwa6o2v0003wktr08mn47ex"},{"name":"Scope","_id":"ckn8o5kla0001rotra77x00cp"}]}}